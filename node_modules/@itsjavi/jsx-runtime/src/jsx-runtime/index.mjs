"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.jsxs = exports.jsx = jsx;exports.Component = exports.render = exports.Fragment = void 0;function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}const jsxFragment = 'jsx.Fragment';exports.Fragment = jsxFragment;
const jsxTextNode = 'jsx.Text';




function jsx(type, config) {
  if (typeof type === 'function') {
    if (type.prototype !== undefined) {
      return new type(config);
    }
    return type(config);
  }
  const { children = [], ...props } = config;
  const childrenProps = Array().concat(children);
  return {
    type,
    key: null,
    props: {
      ...props,
      children: childrenProps.map((child) => {
        return typeof child == 'object' ? child : {
          type: jsxTextNode,
          key: null,
          props: {
            text: child,
            children: [] } };


      }) } };



}

jsx.Fragment = jsxFragment;
jsx.TextNode = jsxTextNode;
jsx.customAttributes = ['children', 'key', 'props'];

const isStandardAttribute = (key) => !jsx.customAttributes.includes(key);

class Component {



  constructor(props) {_defineProperty(this, "element", null);_defineProperty(this, "props", void 0);
    this.props = props;
  }

  render() {
    return null;
  }}exports.Component = Component;


if (typeof window !== 'undefined') {
  jsx._globalThis = window;
}

jsx.setGlobalThis = (newThis) => {
  jsx._globalThis = newThis;
};

jsx.renderDOM = (
renderable,
container = null,
component = null) =>
{
  const isComponent = renderable instanceof Component;

  let node = isComponent ? renderable.render() : renderable;
  if (isComponent) {

    component = renderable;
  }

  const doc = container === null ? jsx._globalThis.document : container.ownerDocument;

  if (node.type === jsx.TextNode) {
    if (node.props.text === undefined) {
      node.props.text = '';
    }
    const textElem = doc.createTextNode(node.props.text);
    if (container !== null) {
      container.appendChild(textElem);
    }

    return textElem;
  }

  const elem = node.type === jsx.Fragment ?
  doc.createDocumentFragment() :
  doc.createElement(node.type);


  elem.jsxComponent = component;

  const props = node.props;
  const propKeys = Object.keys(props);

  if (props['className'] !== undefined && Array.isArray(props['className'])) {
    props['className'] = props['className'].join(' ');
  }


  propKeys.
  filter(isStandardAttribute).
  forEach((name) => {
    let attrVal = props[name];
    if (component !== null && attrVal instanceof Function) {
      attrVal = attrVal.bind(component);
      if (attrVal instanceof Function) {
        attrVal(null);
      }
    }

    elem[name] = attrVal;

    elem[name.toLowerCase()] = attrVal;
  });

  if (Array.isArray(node.props.children)) {
    node.props.children.forEach((child) => jsx.renderDOM(child, elem, component));
  }

  let prevElement = null;

  if (isComponent && component !== null) {
    prevElement = component.element;
    component.element = elem;
  }

  if (isComponent && component !== null && component.onWillMount !== undefined) {
    component.onWillMount(prevElement);
  }

  if (container !== null) {
    container.appendChild(elem);
  }

  if (isComponent && component !== null && component.onDidMount !== undefined) {
    component.onDidMount(prevElement);
  }

  return elem;
};




































































































const render = jsx.renderDOM;exports.render = render;

