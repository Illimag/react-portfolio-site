import pdfjs from '@bundled-es-modules/pdfjs-dist';
import React, { useRef, useImperativeHandle, useState, useEffect } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function isFunction(value) {
  return typeof value === 'function';
}

var Pdf =
/*#__PURE__*/
React.forwardRef(function (_ref, ref) {
  var file = _ref.file,
      onDocumentLoadSuccess = _ref.onDocumentLoadSuccess,
      onDocumentLoadFail = _ref.onDocumentLoadFail,
      onPageLoadSuccess = _ref.onPageLoadSuccess,
      onPageLoadFail = _ref.onPageLoadFail,
      onPageRenderSuccess = _ref.onPageRenderSuccess,
      onPageRenderFail = _ref.onPageRenderFail,
      page = _ref.page,
      scale = _ref.scale,
      rotate = _ref.rotate,
      cMapUrl = _ref.cMapUrl,
      cMapPacked = _ref.cMapPacked,
      workerSrc = _ref.workerSrc,
      withCredentials = _ref.withCredentials,
      children = _ref.children,
      canvasProps = _objectWithoutPropertiesLoose(_ref, ["file", "onDocumentLoadSuccess", "onDocumentLoadFail", "onPageLoadSuccess", "onPageLoadFail", "onPageRenderSuccess", "onPageRenderFail", "page", "scale", "rotate", "cMapUrl", "cMapPacked", "workerSrc", "withCredentials", "children"]);

  var canvasRef = useRef(null);
  useImperativeHandle(ref, function () {
    return canvasRef.current;
  });
  var pdfData = usePdf({
    canvasRef: canvasRef,
    file: file,
    onDocumentLoadSuccess: onDocumentLoadSuccess,
    onDocumentLoadFail: onDocumentLoadFail,
    onPageLoadSuccess: onPageLoadSuccess,
    onPageLoadFail: onPageLoadFail,
    onPageRenderSuccess: onPageRenderSuccess,
    onPageRenderFail: onPageRenderFail,
    page: page,
    scale: scale,
    rotate: rotate,
    cMapUrl: cMapUrl,
    cMapPacked: cMapPacked,
    workerSrc: workerSrc,
    withCredentials: withCredentials
  });
  var canvas = React.createElement("canvas", Object.assign({}, canvasProps, {
    ref: canvasRef
  }));

  if (isFunction(children)) {
    return children(_extends({
      canvas: canvas
    }, pdfData));
  }

  return canvas;
});
var usePdf = function usePdf(_ref2) {
  var canvasRef = _ref2.canvasRef,
      file = _ref2.file,
      onDocumentLoadSuccess = _ref2.onDocumentLoadSuccess,
      onDocumentLoadFail = _ref2.onDocumentLoadFail,
      onPageLoadSuccess = _ref2.onPageLoadSuccess,
      onPageLoadFail = _ref2.onPageLoadFail,
      onPageRenderSuccess = _ref2.onPageRenderSuccess,
      onPageRenderFail = _ref2.onPageRenderFail,
      _ref2$scale = _ref2.scale,
      scale = _ref2$scale === void 0 ? 1 : _ref2$scale,
      _ref2$rotate = _ref2.rotate,
      rotate = _ref2$rotate === void 0 ? 0 : _ref2$rotate,
      _ref2$page = _ref2.page,
      page = _ref2$page === void 0 ? 1 : _ref2$page,
      cMapUrl = _ref2.cMapUrl,
      cMapPacked = _ref2.cMapPacked,
      _ref2$workerSrc = _ref2.workerSrc,
      workerSrc = _ref2$workerSrc === void 0 ? "//cdnjs.cloudflare.com/ajax/libs/pdf.js/" + pdfjs.version + "/pdf.worker.js" : _ref2$workerSrc,
      _ref2$withCredentials = _ref2.withCredentials,
      withCredentials = _ref2$withCredentials === void 0 ? false : _ref2$withCredentials;

  var _useState = useState(),
      pdfDocument = _useState[0],
      setPdfDocument = _useState[1];

  var _useState2 = useState(),
      pdfPage = _useState2[0],
      setPdfPage = _useState2[1];

  var renderTask = useRef(null);
  var onDocumentLoadSuccessRef = useRef(onDocumentLoadSuccess);
  var onDocumentLoadFailRef = useRef(onDocumentLoadFail);
  var onPageLoadSuccessRef = useRef(onPageLoadSuccess);
  var onPageLoadFailRef = useRef(onPageLoadFail);
  var onPageRenderSuccessRef = useRef(onPageRenderSuccess);
  var onPageRenderFailRef = useRef(onPageRenderFail); // assign callbacks to refs to avoid redrawing

  useEffect(function () {
    onDocumentLoadSuccessRef.current = onDocumentLoadSuccess;
  }, [onDocumentLoadSuccess]);
  useEffect(function () {
    onDocumentLoadFailRef.current = onDocumentLoadFail;
  }, [onDocumentLoadFail]);
  useEffect(function () {
    onPageLoadSuccessRef.current = onPageLoadSuccess;
  }, [onPageLoadSuccess]);
  useEffect(function () {
    onPageLoadFailRef.current = onPageLoadFail;
  }, [onPageLoadFail]);
  useEffect(function () {
    onPageRenderSuccessRef.current = onPageRenderSuccess;
  }, [onPageRenderSuccess]);
  useEffect(function () {
    onPageRenderFailRef.current = onPageRenderFail;
  }, [onPageRenderFail]);
  useEffect(function () {
    pdfjs.GlobalWorkerOptions.workerSrc = workerSrc;
  }, [workerSrc]);
  useEffect(function () {
    var config = {
      url: file,
      withCredentials: withCredentials
    };

    if (cMapUrl) {
      config.cMapUrl = cMapUrl;
      config.cMapPacked = cMapPacked;
    }

    pdfjs.getDocument(config).promise.then(function (loadedPdfDocument) {
      setPdfDocument(loadedPdfDocument);

      if (isFunction(onDocumentLoadSuccessRef.current)) {
        onDocumentLoadSuccessRef.current(loadedPdfDocument);
      }
    }, function () {
      if (isFunction(onDocumentLoadFailRef.current)) {
        onDocumentLoadFailRef.current();
      }
    });
  }, [file, withCredentials, cMapUrl, cMapPacked]);
  useEffect(function () {
    // draw a page of the pdf
    var drawPDF = function drawPDF(page) {
      // Because this page's rotation option overwrites pdf default rotation value,
      // calculating page rotation option value from pdf default and this component prop rotate.
      var rotation = rotate === 0 ? page.rotate : page.rotate + rotate;
      var dpRatio = window.devicePixelRatio;
      var adjustedScale = scale * dpRatio;
      var viewport = page.getViewport({
        scale: adjustedScale,
        rotation: rotation
      });
      var canvasEl = canvasRef.current;

      if (!canvasEl) {
        return;
      }

      var canvasContext = canvasEl.getContext('2d');

      if (!canvasContext) {
        return;
      }

      canvasEl.style.width = viewport.width / dpRatio + "px";
      canvasEl.style.height = viewport.height / dpRatio + "px";
      canvasEl.height = viewport.height;
      canvasEl.width = viewport.width; // if previous render isn't done yet, we cancel it

      if (renderTask.current) {
        renderTask.current.cancel();
        return;
      }

      renderTask.current = page.render({
        canvasContext: canvasContext,
        viewport: viewport
      });
      return renderTask.current.promise.then(function () {
        renderTask.current = null;

        if (isFunction(onPageRenderSuccessRef.current)) {
          onPageRenderSuccessRef.current(page);
        }
      }, function (err) {
        renderTask.current = null; // @ts-ignore typings are outdated

        if (err && err.name === 'RenderingCancelledException') {
          drawPDF(page);
        } else if (isFunction(onPageRenderFailRef.current)) {
          onPageRenderFailRef.current();
        }
      });
    };

    if (pdfDocument) {
      pdfDocument.getPage(page).then(function (loadedPdfPage) {
        setPdfPage(loadedPdfPage);

        if (isFunction(onPageLoadSuccessRef.current)) {
          onPageLoadSuccessRef.current(loadedPdfPage);
        }

        drawPDF(loadedPdfPage);
      }, function () {
        if (isFunction(onPageLoadFailRef.current)) {
          onPageLoadFailRef.current();
        }
      });
    }
  }, [canvasRef, page, pdfDocument, rotate, scale]);
  return {
    pdfDocument: pdfDocument,
    pdfPage: pdfPage
  };
};

export default Pdf;
export { usePdf };
//# sourceMappingURL=react-pdf.esm.js.map
