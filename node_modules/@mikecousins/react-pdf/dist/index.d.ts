import pdfjs from '@bundled-es-modules/pdfjs-dist';
import React from 'react';
declare type ComponentRenderProps = HookReturnValues & {
    canvas: React.ReactElement;
};
declare const Pdf: React.ForwardRefExoticComponent<Pick<HookProps, "file" | "onDocumentLoadSuccess" | "onDocumentLoadFail" | "onPageLoadSuccess" | "onPageLoadFail" | "onPageRenderSuccess" | "onPageRenderFail" | "scale" | "rotate" | "page" | "cMapUrl" | "cMapPacked" | "workerSrc" | "withCredentials"> & React.CanvasHTMLAttributes<HTMLCanvasElement> & {
    children?: ((renderProps: ComponentRenderProps) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
} & React.RefAttributes<HTMLCanvasElement | null>>;
declare type HookProps = {
    canvasRef: React.RefObject<HTMLCanvasElement | null>;
    file: string;
    onDocumentLoadSuccess?: (document: pdfjs.PDFDocumentProxy) => void;
    onDocumentLoadFail?: () => void;
    onPageLoadSuccess?: (page: pdfjs.PDFPageProxy) => void;
    onPageLoadFail?: () => void;
    onPageRenderSuccess?: (page: pdfjs.PDFPageProxy) => void;
    onPageRenderFail?: () => void;
    scale?: number;
    rotate?: number;
    page?: number;
    cMapUrl?: string;
    cMapPacked?: boolean;
    workerSrc?: string;
    withCredentials?: boolean;
};
declare type HookReturnValues = {
    pdfDocument: pdfjs.PDFDocumentProxy | undefined;
    pdfPage: pdfjs.PDFPageProxy | undefined;
};
export declare const usePdf: ({ canvasRef, file, onDocumentLoadSuccess, onDocumentLoadFail, onPageLoadSuccess, onPageLoadFail, onPageRenderSuccess, onPageRenderFail, scale, rotate, page, cMapUrl, cMapPacked, workerSrc, withCredentials, }: HookProps) => HookReturnValues;
export default Pdf;
