import * as React from 'react';
import { ResponsiveComponentProps } from './withResponsive';
export interface GetModeType<TModes> {
    (width?: number): TModes;
}
export interface ModeChangedEvent<TModes> {
    mode: TModes;
}
export interface ModeProviderProps<TModes> extends ResponsiveComponentProps {
    mode?: TModes;
    onModeChange?(e: ModeChangedEvent<TModes>): void;
}
export interface ModeProviderState<TModes> {
    controlled: boolean;
    mode: TModes;
}
/**
 * Provides `mode` prop (if it's not passed manually) to the component depending on
 * the container width. When mode switches, HOC calls `onModeChange` prop if it is
 * defined.
 * @param getMode The function to determine the mode from the given width.
 * @returns A constructor function to wrap a component with the `mode` prop determined
 * by the getMode function.
 */
export declare function withResponsiveMode<TModes>(getMode: GetModeType<TModes>): <TProps extends ModeProviderProps<TModes>>(Component: React.ComponentType<TProps>) => React.ComponentClass<TProps, any> & {
    inner: Readonly<{
        Component: React.ComponentType<TProps>;
    }>;
};
