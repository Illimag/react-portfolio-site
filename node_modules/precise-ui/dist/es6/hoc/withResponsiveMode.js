import * as React from 'react';
import { withResponsive } from './withResponsive';
import { withInner } from 'typescript-plugin-inner-jsx/withInner';
/**
 * Provides `mode` prop (if it's not passed manually) to the component depending on
 * the container width. When mode switches, HOC calls `onModeChange` prop if it is
 * defined.
 * @param getMode The function to determine the mode from the given width.
 * @returns A constructor function to wrap a component with the `mode` prop determined
 * by the getMode function.
 */
export function withResponsiveMode(getMode) {
    return (Component) => {
        return withInner(withResponsive(class ModeProvider extends React.Component {
            constructor(props) {
                super(props);
                this.state = {
                    controlled: props.mode !== undefined,
                    mode: props.mode || getMode(props.dimensions && props.dimensions.width),
                };
            }
            static getDerivedStateFromProps(props, state) {
                const change = props.onModeChange;
                if (state.controlled) {
                    const mode = props.mode || getMode();
                    if (state.mode !== mode) {
                        if (typeof change === 'function') {
                            change({ mode });
                        }
                        return {
                            mode,
                        };
                    }
                }
                else {
                    const { dimensions } = props;
                    const { mode } = state;
                    const nextMode = getMode(dimensions && dimensions.width);
                    if (mode !== nextMode) {
                        if (typeof change === 'function') {
                            change({ mode: nextMode });
                        }
                        return {
                            mode: nextMode,
                        };
                    }
                }
                return {};
            }
            componentDidMount() {
                const { mode } = this.state;
                const { onModeChange } = this.props;
                if (mode && typeof onModeChange === 'function') {
                    onModeChange({ mode });
                }
            }
            render() {
                const { mode } = this.state;
                const props = Object.assign({}, this.props, { mode });
                return React.createElement(Component, Object.assign({}, props));
            }
        }), { Component });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aFJlc3BvbnNpdmVNb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hvYy93aXRoUmVzcG9uc2l2ZU1vZGUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxjQUFjLEVBQTRCLE1BQU0sa0JBQWtCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBZWxFOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsa0JBQWtCLENBQVMsT0FBNEI7SUFDbkUsT0FBTyxDQUEyQyxTQUFzQyxFQUFFLEVBQUU7UUFDeEYsT0FBTyxTQUFTLENBQUMsY0FBYyxDQUFDLE1BQU0sWUFBYSxTQUFRLEtBQUssQ0FBQyxTQUE0QztZQUN6RyxZQUFZLEtBQWE7Z0JBQ3JCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDYixJQUFJLENBQUMsS0FBSyxHQUFHO29CQUNULFVBQVUsRUFBRSxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVM7b0JBQ3BDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO2lCQUMxRSxDQUFDO1lBQ04sQ0FBQztZQUNELE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxLQUFhLEVBQUUsS0FBZ0M7Z0JBQzNFLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7Z0JBQ2xDLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtvQkFDbEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxPQUFPLEVBQUUsQ0FBQztvQkFDckMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTt3QkFDckIsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7NEJBQzlCLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7eUJBQ3BCO3dCQUNELE9BQU87NEJBQ0gsSUFBSTt5QkFDUCxDQUFDO3FCQUNMO2lCQUNKO3FCQUNJO29CQUNELE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxLQUFLLENBQUM7b0JBQzdCLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7b0JBQ3ZCLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN6RCxJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7d0JBQ25CLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFFOzRCQUM5QixNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQzt5QkFDOUI7d0JBQ0QsT0FBTzs0QkFDSCxJQUFJLEVBQUUsUUFBUTt5QkFDakIsQ0FBQztxQkFDTDtpQkFDSjtnQkFDRCxPQUFPLEVBQUUsQ0FBQztZQUNkLENBQUM7WUFDRCxpQkFBaUI7Z0JBQ2IsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQzVCLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNwQyxJQUFJLElBQUksSUFBSSxPQUFPLFlBQVksS0FBSyxVQUFVLEVBQUU7b0JBQzVDLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7aUJBQzFCO1lBQ0wsQ0FBQztZQUNELE1BQU07Z0JBQ0YsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQzVCLE1BQU0sS0FBSyxxQkFDSixJQUFJLENBQUMsS0FBSyxJQUNiLElBQUksR0FDUCxDQUFDO2dCQUNGLE9BQU8sb0JBQUMsU0FBUyxvQkFBSyxLQUFLLEVBQUcsQ0FBQztZQUNuQyxDQUFDO1NBQ0osQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgd2l0aFJlc3BvbnNpdmUsIFJlc3BvbnNpdmVDb21wb25lbnRQcm9wcyB9IGZyb20gJy4vd2l0aFJlc3BvbnNpdmUnO1xuaW1wb3J0IHsgd2l0aElubmVyIH0gZnJvbSAndHlwZXNjcmlwdC1wbHVnaW4taW5uZXItanN4L3dpdGhJbm5lcic7XG5leHBvcnQgaW50ZXJmYWNlIEdldE1vZGVUeXBlPFRNb2Rlcz4ge1xuICAgICh3aWR0aD86IG51bWJlcik6IFRNb2Rlcztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZUNoYW5nZWRFdmVudDxUTW9kZXM+IHtcbiAgICBtb2RlOiBUTW9kZXM7XG59XG5leHBvcnQgaW50ZXJmYWNlIE1vZGVQcm92aWRlclByb3BzPFRNb2Rlcz4gZXh0ZW5kcyBSZXNwb25zaXZlQ29tcG9uZW50UHJvcHMge1xuICAgIG1vZGU/OiBUTW9kZXM7XG4gICAgb25Nb2RlQ2hhbmdlPyhlOiBNb2RlQ2hhbmdlZEV2ZW50PFRNb2Rlcz4pOiB2b2lkO1xufVxuZXhwb3J0IGludGVyZmFjZSBNb2RlUHJvdmlkZXJTdGF0ZTxUTW9kZXM+IHtcbiAgICBjb250cm9sbGVkOiBib29sZWFuO1xuICAgIG1vZGU6IFRNb2Rlcztcbn1cbi8qKlxuICogUHJvdmlkZXMgYG1vZGVgIHByb3AgKGlmIGl0J3Mgbm90IHBhc3NlZCBtYW51YWxseSkgdG8gdGhlIGNvbXBvbmVudCBkZXBlbmRpbmcgb25cbiAqIHRoZSBjb250YWluZXIgd2lkdGguIFdoZW4gbW9kZSBzd2l0Y2hlcywgSE9DIGNhbGxzIGBvbk1vZGVDaGFuZ2VgIHByb3AgaWYgaXQgaXNcbiAqIGRlZmluZWQuXG4gKiBAcGFyYW0gZ2V0TW9kZSBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHRoZSBtb2RlIGZyb20gdGhlIGdpdmVuIHdpZHRoLlxuICogQHJldHVybnMgQSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0byB3cmFwIGEgY29tcG9uZW50IHdpdGggdGhlIGBtb2RlYCBwcm9wIGRldGVybWluZWRcbiAqIGJ5IHRoZSBnZXRNb2RlIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aFJlc3BvbnNpdmVNb2RlPFRNb2Rlcz4oZ2V0TW9kZTogR2V0TW9kZVR5cGU8VE1vZGVzPikge1xuICAgIHJldHVybiA8VFByb3BzIGV4dGVuZHMgTW9kZVByb3ZpZGVyUHJvcHM8VE1vZGVzPj4oQ29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPFRQcm9wcz4pID0+IHtcbiAgICAgICAgcmV0dXJuIHdpdGhJbm5lcih3aXRoUmVzcG9uc2l2ZShjbGFzcyBNb2RlUHJvdmlkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VFByb3BzLCBNb2RlUHJvdmlkZXJTdGF0ZTxUTW9kZXM+PiB7XG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcihwcm9wczogVFByb3BzKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZWQ6IHByb3BzLm1vZGUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogcHJvcHMubW9kZSB8fCBnZXRNb2RlKHByb3BzLmRpbWVuc2lvbnMgJiYgcHJvcHMuZGltZW5zaW9ucy53aWR0aCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHM6IFRQcm9wcywgc3RhdGU6IE1vZGVQcm92aWRlclN0YXRlPFRNb2Rlcz4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBwcm9wcy5vbk1vZGVDaGFuZ2U7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmNvbnRyb2xsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kZSA9IHByb3BzLm1vZGUgfHwgZ2V0TW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUubW9kZSAhPT0gbW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UoeyBtb2RlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkaW1lbnNpb25zIH0gPSBwcm9wcztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBtb2RlIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dE1vZGUgPSBnZXRNb2RlKGRpbWVuc2lvbnMgJiYgZGltZW5zaW9ucy53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RlICE9PSBuZXh0TW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UoeyBtb2RlOiBuZXh0TW9kZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogbmV4dE1vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbW9kZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9uTW9kZUNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgICAgICBpZiAobW9kZSAmJiB0eXBlb2Ygb25Nb2RlQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uTW9kZUNoYW5nZSh7IG1vZGUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbW9kZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30vPjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHsgQ29tcG9uZW50IH0pO1xuICAgIH07XG59XG4iXX0=