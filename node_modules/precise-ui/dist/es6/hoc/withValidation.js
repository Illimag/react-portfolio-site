import * as React from 'react';
import { withInner } from 'typescript-plugin-inner-jsx/withInner';
/**
 * Provides automatic validation for a wrapped component.
 * @param validate The validation function.
 * @returns A constructor function taking a component to be wrapped with the validation.
 */
export function withValidation(validate) {
    return (Component) => {
        return withInner(class Validator extends React.PureComponent {
            constructor(props) {
                super(props);
                this.validate = (e) => {
                    const { onChange, onError, onSuccess } = this.props;
                    const error = validate(e);
                    if (error !== this.state.error) {
                        const notify = error ? onError : onSuccess;
                        this.setState({
                            error,
                        });
                        if (typeof notify === 'function') {
                            notify();
                        }
                    }
                    if (typeof onChange === 'function') {
                        onChange(e);
                    }
                };
                this.state = {
                    error: undefined,
                };
            }
            render() {
                const { error = this.props.error } = this.state;
                return React.createElement(Component, Object.assign({}, this.props, { error: error, onChange: this.validate }));
            }
        }, { Component });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aFZhbGlkYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaG9jL3dpdGhWYWxpZGF0aW9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFrQmxFOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFhLFFBQXlEO0lBQ2hHLE9BQU8sQ0FBNEMsU0FBc0MsRUFBRSxFQUFFO1FBQ3pGLE9BQU8sU0FBUyxDQUFDLE1BQU0sU0FBVSxTQUFRLEtBQUssQ0FBQyxhQUFzRDtZQUNqRyxZQUFZLEtBQThCO2dCQUN0QyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBS2pCLGFBQVEsR0FBRyxDQUFDLENBQWEsRUFBRSxFQUFFO29CQUN6QixNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO29CQUNwRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzFCLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO3dCQUM1QixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO3dCQUMzQyxJQUFJLENBQUMsUUFBUSxDQUFDOzRCQUNWLEtBQUs7eUJBQ1IsQ0FBQyxDQUFDO3dCQUNILElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFFOzRCQUM5QixNQUFNLEVBQUUsQ0FBQzt5QkFDWjtxQkFDSjtvQkFDRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRTt3QkFDaEMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUNmO2dCQUNMLENBQUMsQ0FBQztnQkFuQkUsSUFBSSxDQUFDLEtBQUssR0FBRztvQkFDVCxLQUFLLEVBQUUsU0FBUztpQkFDbkIsQ0FBQztZQUNOLENBQUM7WUFpQkQsTUFBTTtnQkFDRixNQUFNLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDaEQsT0FBTyxvQkFBQyxTQUFTLG9CQUFLLElBQUksQ0FBQyxLQUFLLElBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBRyxDQUFDO1lBQy9FLENBQUM7U0FDSixFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgd2l0aElubmVyIH0gZnJvbSAndHlwZXNjcmlwdC1wbHVnaW4taW5uZXItanN4L3dpdGhJbm5lcic7XG5leHBvcnQgaW50ZXJmYWNlIEJhc2VJbnB1dFByb3BzPFRFdmVudEFyZ3M+IHtcbiAgICAvKipcbiAgICAgKiBFdmVudCBlbWl0dGVkIG9uY2UgdGhlIHZhbHVlIGNoYW5nZXMuXG4gICAgICovXG4gICAgb25DaGFuZ2U/KGU6IFRFdmVudEFyZ3MpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50bHkgZGlzcGxheWVkIGVycm9yIG1lc3NhZ2UuXG4gICAgICovXG4gICAgZXJyb3I/OiBSZWFjdC5SZWFjdENoaWxkO1xufVxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0b3JQcm9wcyB7XG4gICAgb25TdWNjZXNzPygpOiB2b2lkO1xuICAgIG9uRXJyb3I/KCk6IHZvaWQ7XG59XG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRvclN0YXRlIHtcbiAgICBlcnJvcjogUmVhY3QuUmVhY3RDaGlsZCB8IHVuZGVmaW5lZDtcbn1cbi8qKlxuICogUHJvdmlkZXMgYXV0b21hdGljIHZhbGlkYXRpb24gZm9yIGEgd3JhcHBlZCBjb21wb25lbnQuXG4gKiBAcGFyYW0gdmFsaWRhdGUgVGhlIHZhbGlkYXRpb24gZnVuY3Rpb24uXG4gKiBAcmV0dXJucyBBIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRha2luZyBhIGNvbXBvbmVudCB0byBiZSB3cmFwcGVkIHdpdGggdGhlIHZhbGlkYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoVmFsaWRhdGlvbjxURXZlbnRBcmdzPih2YWxpZGF0ZTogKGU6IFRFdmVudEFyZ3MpID0+IFJlYWN0LlJlYWN0Q2hpbGQgfCB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gPFRQcm9wcyBleHRlbmRzIEJhc2VJbnB1dFByb3BzPFRFdmVudEFyZ3M+PihDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8VFByb3BzPikgPT4ge1xuICAgICAgICByZXR1cm4gd2l0aElubmVyKGNsYXNzIFZhbGlkYXRvciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8VFByb3BzICYgVmFsaWRhdG9yUHJvcHMsIFZhbGlkYXRvclN0YXRlPiB7XG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcihwcm9wczogVFByb3BzICYgVmFsaWRhdG9yUHJvcHMpIHtcbiAgICAgICAgICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsaWRhdGUgPSAoZTogVEV2ZW50QXJncykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgb25DaGFuZ2UsIG9uRXJyb3IsIG9uU3VjY2VzcyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IHZhbGlkYXRlKGUpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciAhPT0gdGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub3RpZnkgPSBlcnJvciA/IG9uRXJyb3IgOiBvblN1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5vdGlmeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZ5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZShlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgPSB0aGlzLnByb3BzLmVycm9yIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgICAgIHJldHVybiA8Q29tcG9uZW50IHsuLi50aGlzLnByb3BzfSBlcnJvcj17ZXJyb3J9IG9uQ2hhbmdlPXt0aGlzLnZhbGlkYXRlfS8+O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7IENvbXBvbmVudCB9KTtcbiAgICB9O1xufVxuIl19