import * as React from 'react';
import { withInner } from 'typescript-plugin-inner-jsx/withInner';
/**
 * Wraps the component in a responsive construct that is sensitive to the size changes of its
 * container.
 * @param Component The component to be sensitive to its container dimensions.
 * @returns A component that can use the `dimensions` prop.
 */
export function withResponsive(Component) {
    return withInner(class Responsive extends React.Component {
        constructor(props) {
            super(props);
            this.sizeChanged = () => {
                const { width, height } = this.getDimension();
                if (width !== this.state.width || height !== this.state.height) {
                    this.setState({
                        width,
                        height,
                    });
                }
            };
            this.orientationChanged = () => this.setState({
                angle: (screen.orientation && screen.orientation.angle) || 0,
            });
            this.setNode = (node) => (this.node = node);
            const screenWithOrientaion = screen;
            this.state = {
                width: window.innerWidth,
                height: window.innerHeight,
                angle: (screenWithOrientaion.orientation && screenWithOrientaion.orientation.angle) || 0,
            };
        }
        componentDidMount() {
            window.addEventListener('resize', this.sizeChanged);
            window.addEventListener('orientationchange', this.orientationChanged);
        }
        componentWillUnmount() {
            window.removeEventListener('resize', this.sizeChanged);
            window.removeEventListener('orientationchange', this.orientationChanged);
        }
        getDimension() {
            if (this.node) {
                const boundingClientRect = this.node.getBoundingClientRect();
                return {
                    width: boundingClientRect.width,
                    height: boundingClientRect.height,
                };
            }
            else {
                const { innerWidth, innerHeight } = window;
                return {
                    width: innerWidth,
                    height: innerHeight,
                };
            }
        }
        render() {
            const additionalProps = {
                innerRef: this.setNode,
                dimensions: this.state,
            };
            const props = Object.assign({}, this.props, additionalProps);
            return React.createElement(Component, Object.assign({}, props));
        }
    }, { Component });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aFJlc3BvbnNpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaG9jL3dpdGhSZXNwb25zaXZlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUUvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFxQmxFOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBMEMsU0FBc0M7SUFDMUcsT0FBTyxTQUFTLENBQUMsTUFBTSxVQUFXLFNBQVEsS0FBSyxDQUFDLFNBQTJDO1FBRXZGLFlBQVksS0FBYTtZQUNyQixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFvQ2pCLGdCQUFXLEdBQUcsR0FBRyxFQUFFO2dCQUNmLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUM5QyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxNQUFNLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7b0JBQzVELElBQUksQ0FBQyxRQUFRLENBQUM7d0JBQ1YsS0FBSzt3QkFDTCxNQUFNO3FCQUNULENBQUMsQ0FBQztpQkFDTjtZQUNMLENBQUMsQ0FBQztZQUNGLHVCQUFrQixHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ3JDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQy9ELENBQUMsQ0FBQztZQUNILFlBQU8sR0FBRyxDQUFDLElBQXdCLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztZQS9DdkQsTUFBTSxvQkFBb0IsR0FBRyxNQUk1QixDQUFDO1lBQ0YsSUFBSSxDQUFDLEtBQUssR0FBRztnQkFDVCxLQUFLLEVBQUUsTUFBTSxDQUFDLFVBQVU7Z0JBQ3hCLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVztnQkFDMUIsS0FBSyxFQUFFLENBQUMsb0JBQW9CLENBQUMsV0FBVyxJQUFJLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQzNGLENBQUM7UUFDTixDQUFDO1FBQ0QsaUJBQWlCO1lBQ2IsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDcEQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzFFLENBQUM7UUFDRCxvQkFBb0I7WUFDaEIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzdFLENBQUM7UUFDRCxZQUFZO1lBQ1IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNYLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2dCQUM3RCxPQUFPO29CQUNILEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxLQUFLO29CQUMvQixNQUFNLEVBQUUsa0JBQWtCLENBQUMsTUFBTTtpQkFDcEMsQ0FBQzthQUNMO2lCQUNJO2dCQUNELE1BQU0sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDO2dCQUMzQyxPQUFPO29CQUNILEtBQUssRUFBRSxVQUFVO29CQUNqQixNQUFNLEVBQUUsV0FBVztpQkFDdEIsQ0FBQzthQUNMO1FBQ0wsQ0FBQztRQWNELE1BQU07WUFDRixNQUFNLGVBQWUsR0FBNkI7Z0JBQzlDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTztnQkFDdEIsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLO2FBQ3pCLENBQUM7WUFDRixNQUFNLEtBQUsscUJBQVEsSUFBSSxDQUFDLEtBQUssRUFBSyxlQUFlLENBQUUsQ0FBQztZQUNwRCxPQUFPLG9CQUFDLFNBQVMsb0JBQUssS0FBSyxFQUFHLENBQUM7UUFDbkMsQ0FBQztLQUNKLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQ3RCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWZQcm9wcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyB3aXRoSW5uZXIgfSBmcm9tICd0eXBlc2NyaXB0LXBsdWdpbi1pbm5lci1qc3gvd2l0aElubmVyJztcbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2l2ZUNvbXBvbmVudFByb3BzIGV4dGVuZHMgUmVmUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFRoZSBkaW1lbnNpb25zIHZhbHVlcyBjb250YWluZXJcbiAgICAgKi9cbiAgICBkaW1lbnNpb25zPzogUmVzcG9uc2l2ZUNvbXBvbmVudFN0YXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zaXZlQ29tcG9uZW50U3RhdGUge1xuICAgIC8qKlxuICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgY29udGFpbmVyIGluIHBpeGVscy5cbiAgICAgKi9cbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBoZWlnaHQgb2YgdGhlIGNvbnRhaW5lciBpbiBwaXhlbHMuXG4gICAgICovXG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgc2NyZWVuIHJvdGF0aW9uIGluIGRlZ3JlZXMuXG4gICAgICovXG4gICAgYW5nbGU6IG51bWJlcjtcbn1cbi8qKlxuICogV3JhcHMgdGhlIGNvbXBvbmVudCBpbiBhIHJlc3BvbnNpdmUgY29uc3RydWN0IHRoYXQgaXMgc2Vuc2l0aXZlIHRvIHRoZSBzaXplIGNoYW5nZXMgb2YgaXRzXG4gKiBjb250YWluZXIuXG4gKiBAcGFyYW0gQ29tcG9uZW50IFRoZSBjb21wb25lbnQgdG8gYmUgc2Vuc2l0aXZlIHRvIGl0cyBjb250YWluZXIgZGltZW5zaW9ucy5cbiAqIEByZXR1cm5zIEEgY29tcG9uZW50IHRoYXQgY2FuIHVzZSB0aGUgYGRpbWVuc2lvbnNgIHByb3AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoUmVzcG9uc2l2ZTxUUHJvcHMgZXh0ZW5kcyBSZXNwb25zaXZlQ29tcG9uZW50UHJvcHM+KENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxUUHJvcHM+KTogUmVhY3QuQ29tcG9uZW50Q2xhc3M8VFByb3BzPiB7XG4gICAgcmV0dXJuIHdpdGhJbm5lcihjbGFzcyBSZXNwb25zaXZlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFRQcm9wcywgUmVzcG9uc2l2ZUNvbXBvbmVudFN0YXRlPiB7XG4gICAgICAgIG5vZGU6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICAgICAgY29uc3RydWN0b3IocHJvcHM6IFRQcm9wcykge1xuICAgICAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgICAgY29uc3Qgc2NyZWVuV2l0aE9yaWVudGFpb24gPSBzY3JlZW4gYXMge1xuICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uPzoge1xuICAgICAgICAgICAgICAgICAgICBhbmdsZTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgICAgICAgICAgYW5nbGU6IChzY3JlZW5XaXRoT3JpZW50YWlvbi5vcmllbnRhdGlvbiAmJiBzY3JlZW5XaXRoT3JpZW50YWlvbi5vcmllbnRhdGlvbi5hbmdsZSkgfHwgMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zaXplQ2hhbmdlZCk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLm9yaWVudGF0aW9uQ2hhbmdlZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zaXplQ2hhbmdlZCk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLm9yaWVudGF0aW9uQ2hhbmdlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0RGltZW5zaW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvdW5kaW5nQ2xpZW50UmVjdCA9IHRoaXMubm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogYm91bmRpbmdDbGllbnRSZWN0LndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgaW5uZXJXaWR0aCwgaW5uZXJIZWlnaHQgfSA9IHdpbmRvdztcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogaW5uZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBpbm5lckhlaWdodCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNpemVDaGFuZ2VkID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLmdldERpbWVuc2lvbigpO1xuICAgICAgICAgICAgaWYgKHdpZHRoICE9PSB0aGlzLnN0YXRlLndpZHRoIHx8IGhlaWdodCAhPT0gdGhpcy5zdGF0ZS5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgb3JpZW50YXRpb25DaGFuZ2VkID0gKCkgPT4gdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBhbmdsZTogKHNjcmVlbi5vcmllbnRhdGlvbiAmJiBzY3JlZW4ub3JpZW50YXRpb24uYW5nbGUpIHx8IDAsXG4gICAgICAgIH0pO1xuICAgICAgICBzZXROb2RlID0gKG5vZGU6IEhUTUxFbGVtZW50IHwgbnVsbCkgPT4gKHRoaXMubm9kZSA9IG5vZGUpO1xuICAgICAgICByZW5kZXIoKSB7XG4gICAgICAgICAgICBjb25zdCBhZGRpdGlvbmFsUHJvcHM6IFJlc3BvbnNpdmVDb21wb25lbnRQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICBpbm5lclJlZjogdGhpcy5zZXROb2RlLFxuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IHRoaXMuc3RhdGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSB7IC4uLnRoaXMucHJvcHMsIC4uLmFkZGl0aW9uYWxQcm9wcyB9O1xuICAgICAgICAgICAgcmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfS8+O1xuICAgICAgICB9XG4gICAgfSwgeyBDb21wb25lbnQgfSk7XG59XG4iXX0=