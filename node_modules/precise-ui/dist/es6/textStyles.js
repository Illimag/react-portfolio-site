import { remCalc } from './utils/remCalc';
import { displayUpTo, displayFrom } from './utils/displayTo';
import { css } from './utils/styled';
export function getFontLineHeight(size) {
    switch (size) {
        case 'xxxLarge':
            return css `
        ${displayFrom('large') `line-height: ${remCalc('56px')};`}
        ${displayUpTo('medium') `line-height: ${remCalc('36px')};`}
      `;
        case 'xxLarge':
            return css `
        ${displayFrom('large') `line-height: ${remCalc('36px')};`}
        ${displayUpTo('medium') `line-height: ${remCalc('28px')};`}
      `;
        case 'xLarge':
            return `
        line-height: ${remCalc('28px')};
      `;
        case 'large':
            return css `
        ${displayFrom('large') `line-height: ${remCalc('24px')};`}
        ${displayUpTo('medium') `line-height: ${remCalc('22px')};`}
      `;
        case 'medium':
            return `line-height: ${remCalc('22px')};
  `;
        case 'small':
            return `line-height: ${remCalc('18px')};
  `;
        case 'xSmall':
            return `line-height: ${remCalc('14px')};
  `;
        default:
            return '';
    }
}
export function getFontSize(size) {
    switch (size) {
        case 'xxxLarge':
            return css `
        ${displayFrom('large') `font-size: ${remCalc('44px')};`}
        ${displayUpTo('medium') `font-size: ${remCalc('32px')};`}

 	      letter-spacing: 0.5px;
      `;
        case 'xxLarge':
            return css `
        ${displayFrom('large') `font-size: ${remCalc('32px')};`}
        ${displayUpTo('medium') `font-size: ${remCalc('24px')};`}

 	      letter-spacing: 0.5px;
      `;
        case 'xLarge':
            return `
        font-size: ${remCalc('24px')};
        letter-spacing: 0.5px;
      `;
        case 'large':
            return css `
        ${displayFrom('large') `font-size: ${remCalc('19px')};`}
        ${displayUpTo('medium') `font-size: ${remCalc('16px')};`}
      `;
        case 'medium':
            return `font-size: ${remCalc('16px')};
  `;
        case 'small':
            return `font-size: ${remCalc('14px')};
  `;
        case 'xSmall':
            return `font-size: ${remCalc('12px')};
  `;
        default:
            return '';
    }
}
export function getFontWeight(type) {
    switch (type) {
        case 'light':
            return `font-weight: 300;`;
        case 'regular':
            return `font-weight: 400;`;
        case 'medium':
            return `font-weight: 500;`;
        case 'bold':
            return `font-weight: 700;`;
        default:
            return '';
    }
}
export function getFontStyle({ size, weight, lineHeight = size }) {
    return css `
    ${getFontSize(size)}
    ${getFontLineHeight(lineHeight)}
    ${getFontWeight(weight)}
  `;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dFN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXh0U3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzdELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUtyQyxNQUFNLFVBQVUsaUJBQWlCLENBQUMsSUFBaUI7SUFDakQsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLFVBQVU7WUFDYixPQUFPLEdBQUcsQ0FBQTtVQUNOLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQSxnQkFBZ0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHO1VBQ3RELFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQSxnQkFBZ0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHO09BQzFELENBQUM7UUFDSixLQUFLLFNBQVM7WUFDWixPQUFPLEdBQUcsQ0FBQTtVQUNOLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQSxnQkFBZ0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHO1VBQ3RELFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQSxnQkFBZ0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHO09BQzFELENBQUM7UUFDSixLQUFLLFFBQVE7WUFDWCxPQUFPO3VCQUNVLE9BQU8sQ0FBQyxNQUFNLENBQUM7T0FDL0IsQ0FBQztRQUNKLEtBQUssT0FBTztZQUNWLE9BQU8sR0FBRyxDQUFBO1VBQ04sV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBLGdCQUFnQixPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUc7VUFDdEQsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBLGdCQUFnQixPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUc7T0FDMUQsQ0FBQztRQUNKLEtBQUssUUFBUTtZQUNYLE9BQU8sZ0JBQWdCLE9BQU8sQ0FBQyxNQUFNLENBQUM7R0FDekMsQ0FBQztRQUNBLEtBQUssT0FBTztZQUNWLE9BQU8sZ0JBQWdCLE9BQU8sQ0FBQyxNQUFNLENBQUM7R0FDekMsQ0FBQztRQUNBLEtBQUssUUFBUTtZQUNYLE9BQU8sZ0JBQWdCLE9BQU8sQ0FBQyxNQUFNLENBQUM7R0FDekMsQ0FBQztRQUNBO1lBQ0UsT0FBTyxFQUFFLENBQUM7S0FDYjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLElBQWU7SUFDekMsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLFVBQVU7WUFDYixPQUFPLEdBQUcsQ0FBQTtVQUNOLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQSxjQUFjLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRztVQUNwRCxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUEsY0FBYyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUc7OztPQUd4RCxDQUFDO1FBQ0osS0FBSyxTQUFTO1lBQ1osT0FBTyxHQUFHLENBQUE7VUFDTixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUEsY0FBYyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUc7VUFDcEQsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBLGNBQWMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHOzs7T0FHeEQsQ0FBQztRQUNKLEtBQUssUUFBUTtZQUNYLE9BQU87cUJBQ1EsT0FBTyxDQUFDLE1BQU0sQ0FBQzs7T0FFN0IsQ0FBQztRQUNKLEtBQUssT0FBTztZQUNWLE9BQU8sR0FBRyxDQUFBO1VBQ04sV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBLGNBQWMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHO1VBQ3BELFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQSxjQUFjLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRztPQUN4RCxDQUFDO1FBQ0osS0FBSyxRQUFRO1lBQ1gsT0FBTyxjQUFjLE9BQU8sQ0FBQyxNQUFNLENBQUM7R0FDdkMsQ0FBQztRQUNBLEtBQUssT0FBTztZQUNWLE9BQU8sY0FBYyxPQUFPLENBQUMsTUFBTSxDQUFDO0dBQ3ZDLENBQUM7UUFDQSxLQUFLLFFBQVE7WUFDWCxPQUFPLGNBQWMsT0FBTyxDQUFDLE1BQU0sQ0FBQztHQUN2QyxDQUFDO1FBQ0E7WUFDRSxPQUFPLEVBQUUsQ0FBQztLQUNiO0FBQ0gsQ0FBQztBQUdELE1BQU0sVUFBVSxhQUFhLENBQUMsSUFBaUI7SUFDN0MsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLE9BQU87WUFDVixPQUFPLG1CQUFtQixDQUFDO1FBQzdCLEtBQUssU0FBUztZQUNaLE9BQU8sbUJBQW1CLENBQUM7UUFDN0IsS0FBSyxRQUFRO1lBQ1gsT0FBTyxtQkFBbUIsQ0FBQztRQUM3QixLQUFLLE1BQU07WUFDVCxPQUFPLG1CQUFtQixDQUFDO1FBQzdCO1lBQ0UsT0FBTyxFQUFFLENBQUM7S0FDYjtBQUNILENBQUM7QUFRRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEdBQUcsSUFBSSxFQUFrQjtJQUM5RSxPQUFPLEdBQUcsQ0FBQTtNQUNOLFdBQVcsQ0FBQyxJQUFJLENBQUM7TUFDakIsaUJBQWlCLENBQUMsVUFBVSxDQUFDO01BQzdCLGFBQWEsQ0FBQyxNQUFNLENBQUM7R0FDeEIsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW1DYWxjIH0gZnJvbSAnLi91dGlscy9yZW1DYWxjJztcbmltcG9ydCB7IGRpc3BsYXlVcFRvLCBkaXNwbGF5RnJvbSB9IGZyb20gJy4vdXRpbHMvZGlzcGxheVRvJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJy4vdXRpbHMvc3R5bGVkJztcblxuZXhwb3J0IHR5cGUgRm9udFNpemUgPSAneFNtYWxsJyB8ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdsYXJnZScgfCAneExhcmdlJyB8ICd4eExhcmdlJyB8ICd4eHhMYXJnZSc7XG5leHBvcnQgdHlwZSBMaW5lSGVpZ2h0ID0gRm9udFNpemU7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb250TGluZUhlaWdodChzaXplPzogTGluZUhlaWdodCkge1xuICBzd2l0Y2ggKHNpemUpIHtcbiAgICBjYXNlICd4eHhMYXJnZSc6XG4gICAgICByZXR1cm4gY3NzYFxuICAgICAgICAke2Rpc3BsYXlGcm9tKCdsYXJnZScpYGxpbmUtaGVpZ2h0OiAke3JlbUNhbGMoJzU2cHgnKX07YH1cbiAgICAgICAgJHtkaXNwbGF5VXBUbygnbWVkaXVtJylgbGluZS1oZWlnaHQ6ICR7cmVtQ2FsYygnMzZweCcpfTtgfVxuICAgICAgYDtcbiAgICBjYXNlICd4eExhcmdlJzpcbiAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICR7ZGlzcGxheUZyb20oJ2xhcmdlJylgbGluZS1oZWlnaHQ6ICR7cmVtQ2FsYygnMzZweCcpfTtgfVxuICAgICAgICAke2Rpc3BsYXlVcFRvKCdtZWRpdW0nKWBsaW5lLWhlaWdodDogJHtyZW1DYWxjKCcyOHB4Jyl9O2B9XG4gICAgICBgO1xuICAgIGNhc2UgJ3hMYXJnZSc6XG4gICAgICByZXR1cm4gYFxuICAgICAgICBsaW5lLWhlaWdodDogJHtyZW1DYWxjKCcyOHB4Jyl9O1xuICAgICAgYDtcbiAgICBjYXNlICdsYXJnZSc6XG4gICAgICByZXR1cm4gY3NzYFxuICAgICAgICAke2Rpc3BsYXlGcm9tKCdsYXJnZScpYGxpbmUtaGVpZ2h0OiAke3JlbUNhbGMoJzI0cHgnKX07YH1cbiAgICAgICAgJHtkaXNwbGF5VXBUbygnbWVkaXVtJylgbGluZS1oZWlnaHQ6ICR7cmVtQ2FsYygnMjJweCcpfTtgfVxuICAgICAgYDtcbiAgICBjYXNlICdtZWRpdW0nOlxuICAgICAgcmV0dXJuIGBsaW5lLWhlaWdodDogJHtyZW1DYWxjKCcyMnB4Jyl9O1xuICBgO1xuICAgIGNhc2UgJ3NtYWxsJzpcbiAgICAgIHJldHVybiBgbGluZS1oZWlnaHQ6ICR7cmVtQ2FsYygnMThweCcpfTtcbiAgYDtcbiAgICBjYXNlICd4U21hbGwnOlxuICAgICAgcmV0dXJuIGBsaW5lLWhlaWdodDogJHtyZW1DYWxjKCcxNHB4Jyl9O1xuICBgO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZvbnRTaXplKHNpemU/OiBGb250U2l6ZSkge1xuICBzd2l0Y2ggKHNpemUpIHtcbiAgICBjYXNlICd4eHhMYXJnZSc6XG4gICAgICByZXR1cm4gY3NzYFxuICAgICAgICAke2Rpc3BsYXlGcm9tKCdsYXJnZScpYGZvbnQtc2l6ZTogJHtyZW1DYWxjKCc0NHB4Jyl9O2B9XG4gICAgICAgICR7ZGlzcGxheVVwVG8oJ21lZGl1bScpYGZvbnQtc2l6ZTogJHtyZW1DYWxjKCczMnB4Jyl9O2B9XG5cbiBcdCAgICAgIGxldHRlci1zcGFjaW5nOiAwLjVweDtcbiAgICAgIGA7XG4gICAgY2FzZSAneHhMYXJnZSc6XG4gICAgICByZXR1cm4gY3NzYFxuICAgICAgICAke2Rpc3BsYXlGcm9tKCdsYXJnZScpYGZvbnQtc2l6ZTogJHtyZW1DYWxjKCczMnB4Jyl9O2B9XG4gICAgICAgICR7ZGlzcGxheVVwVG8oJ21lZGl1bScpYGZvbnQtc2l6ZTogJHtyZW1DYWxjKCcyNHB4Jyl9O2B9XG5cbiBcdCAgICAgIGxldHRlci1zcGFjaW5nOiAwLjVweDtcbiAgICAgIGA7XG4gICAgY2FzZSAneExhcmdlJzpcbiAgICAgIHJldHVybiBgXG4gICAgICAgIGZvbnQtc2l6ZTogJHtyZW1DYWxjKCcyNHB4Jyl9O1xuICAgICAgICBsZXR0ZXItc3BhY2luZzogMC41cHg7XG4gICAgICBgO1xuICAgIGNhc2UgJ2xhcmdlJzpcbiAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICR7ZGlzcGxheUZyb20oJ2xhcmdlJylgZm9udC1zaXplOiAke3JlbUNhbGMoJzE5cHgnKX07YH1cbiAgICAgICAgJHtkaXNwbGF5VXBUbygnbWVkaXVtJylgZm9udC1zaXplOiAke3JlbUNhbGMoJzE2cHgnKX07YH1cbiAgICAgIGA7XG4gICAgY2FzZSAnbWVkaXVtJzpcbiAgICAgIHJldHVybiBgZm9udC1zaXplOiAke3JlbUNhbGMoJzE2cHgnKX07XG4gIGA7XG4gICAgY2FzZSAnc21hbGwnOlxuICAgICAgcmV0dXJuIGBmb250LXNpemU6ICR7cmVtQ2FsYygnMTRweCcpfTtcbiAgYDtcbiAgICBjYXNlICd4U21hbGwnOlxuICAgICAgcmV0dXJuIGBmb250LXNpemU6ICR7cmVtQ2FsYygnMTJweCcpfTtcbiAgYDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIEZvbnRXZWlnaHQgPSAnbGlnaHQnIHwgJ3JlZ3VsYXInIHwgJ21lZGl1bScgfCAnYm9sZCc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9udFdlaWdodCh0eXBlPzogRm9udFdlaWdodCkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdsaWdodCc6XG4gICAgICByZXR1cm4gYGZvbnQtd2VpZ2h0OiAzMDA7YDtcbiAgICBjYXNlICdyZWd1bGFyJzpcbiAgICAgIHJldHVybiBgZm9udC13ZWlnaHQ6IDQwMDtgO1xuICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICByZXR1cm4gYGZvbnQtd2VpZ2h0OiA1MDA7YDtcbiAgICBjYXNlICdib2xkJzpcbiAgICAgIHJldHVybiBgZm9udC13ZWlnaHQ6IDcwMDtgO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb250U3R5bGVQcm9wcyB7XG4gIHNpemU/OiBGb250U2l6ZTtcbiAgd2VpZ2h0PzogRm9udFdlaWdodDtcbiAgbGluZUhlaWdodD86IExpbmVIZWlnaHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb250U3R5bGUoeyBzaXplLCB3ZWlnaHQsIGxpbmVIZWlnaHQgPSBzaXplIH06IEZvbnRTdHlsZVByb3BzKSB7XG4gIHJldHVybiBjc3NgXG4gICAgJHtnZXRGb250U2l6ZShzaXplKX1cbiAgICAke2dldEZvbnRMaW5lSGVpZ2h0KGxpbmVIZWlnaHQpfVxuICAgICR7Z2V0Rm9udFdlaWdodCh3ZWlnaHQpfVxuICBgO1xufVxuIl19