import * as React from 'react';
import { NotificationsPosition, NotificationOptions } from './types';
import { EventManager } from '../../utils/eventManager';
import { ToastNotification } from './ToastNotification.part';
export { NotificationsPosition, NotificationOption, NotificationType, NotificationOptions, NotificationAction, } from './types';
export { notify } from './notifier';
export interface NotificationsProps {
    /**
     * Custom notification renderer component.
     */
    notificationRenderer?(e: NotificationOptions): React.ReactChild;
    /**
     * The default position for new notifications. By default relative.
     * @default relative
     */
    position?: NotificationsPosition;
    /**
     * Disable the pointer symbol. By default enabled.
     * @default false
     */
    disablePointer?: boolean;
    /**
     * The width to be used, by default auto.
     * @default auto
     */
    width?: number;
    /**
     * Automatically closes notifications after a certain time. By default
     * the notifications are not closed.
     * @default false
     */
    autoClose?: false | number;
    /**
     * Show the latest on top. By default latest notifications are shown below.
     * @default false
     */
    newestOnTop?: boolean;
    /**
     * Sets the event manager to use. By default a standard event manager is used.
     */
    events?: EventManager;
}
export interface NotificationsState {
    notifications: Array<string>;
}
export interface StyledNotificationsProps {
    position?: NotificationsPosition;
    disablePointer?: boolean;
    width?: number;
}
export interface AbsoluteContainerProps {
    position: NotificationsPosition;
    width: number;
}
/**
 * The host element for arbitrary notifications. Use as a singleton only.
 */
export declare class Notifications extends React.Component<NotificationsProps, NotificationsState> {
    private collection;
    private eventManager;
    constructor(props: NotificationsProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    private removeNotification;
    private clearNotifications;
    private getNotificationContent;
    private hide;
    private show;
    private defaultNotificationRenderer;
    private makeNotification;
    render(): JSX.Element;
    static inner: {
        readonly ToastNotification: typeof ToastNotification;
        readonly StyledNotifications: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, StyledNotificationsProps, never>;
    };
}
