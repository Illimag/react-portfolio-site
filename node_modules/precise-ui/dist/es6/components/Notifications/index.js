import * as React from 'react';
import styled, { css } from '../../utils/styled';
import { NotificationAction, } from './types';
import { eventManagers } from '../../utils/eventManager';
import { capitalizeFirst } from '../../utils/text';
import { ToastNotification } from './ToastNotification.part';
export { NotificationAction, } from './types';
export { notify } from './notifier';
const defaultProps = {
    width: 320,
};
const getNotificationPositionStyle = (pos) => {
    let positionStyle = `${pos.split('-')[0]}:1rem;`;
    if (pos.indexOf('center') !== -1) {
        positionStyle += `left:50%;transform:translateX(-50%);`;
    }
    else {
        positionStyle += `${pos.split('-')[1]}:1rem;`;
    }
    return positionStyle;
};
const AbsoluteContainer = css `
  z-index: 10001;
  position: fixed;
  ${props => getNotificationPositionStyle(props.position)};
  width: ${props => (props.width ? props.width : defaultProps.width)}px;
  @media (max-width: 480px) {
    width: 100vw;
    padding: 0;
    right: 0;
    margin: 0;
    position: fixed;
    ${props => (props.position.substring(0, 3) === 'top' ? 'top: 0' : 'bottom: 0')};
  }
`;
const StyledNotifications = styled.div `
  box-sizing: border-box;
  width: ${props => (!props.width ? 'auto' : `${props.width}px`)};
  ${props => (props.disablePointer ? `pointer-events: none` : ``)};
  @media (max-width: 480px) {
    padding: 0;
    margin: 0;
  }
  ${props => (props.position !== 'relative' ? AbsoluteContainer : '')};
`;
/**
 * The host element for arbitrary notifications. Use as a singleton only.
 */
export class Notifications extends React.Component {
    constructor(props) {
        super(props);
        this.collection = [];
        this.hide = (id) => {
            if (typeof id === 'string') {
                this.removeNotification(id);
            }
            else {
                this.clearNotifications();
            }
        };
        this.show = (payload) => {
            const { content, options = {} } = payload;
            const { position, autoClose } = this.props;
            const { notifications } = this.state;
            const id = options.id || `${~~(Math.random() * 1000000)}`;
            const opts = {
                id,
                type: options.type || 'none',
                onClose: () => this.removeNotification(id),
                position: options.position || position,
                title: options.title || capitalizeFirst(options.type || ''),
                actionRenderer: options.actionRenderer,
                autoClose: typeof options.autoClose === 'number' ? options.autoClose : autoClose,
            };
            this.collection.push({
                name: id,
                options: opts,
                content: this.getNotificationContent(content, opts.onClose),
            });
            this.setState({
                notifications: [...notifications, id],
            });
        };
        const { events } = props;
        this.eventManager = events || eventManagers[0];
        this.state = {
            notifications: [],
        };
    }
    componentDidMount() {
        const em = this.eventManager;
        em.on(NotificationAction.showNotification, this.show);
        em.on(NotificationAction.clearNotification, this.hide);
        eventManagers.push(em);
    }
    componentWillUnmount() {
        const em = this.eventManager;
        em.off(NotificationAction.showNotification, this.show);
        em.off(NotificationAction.clearNotification, this.hide);
        eventManagers.splice(eventManagers.lastIndexOf(em), 1);
    }
    removeNotification(id) {
        this.setState({
            notifications: this.state.notifications.filter(v => v !== id),
        });
    }
    clearNotifications() {
        this.setState({
            notifications: [],
        });
    }
    getNotificationContent(content, onClose) {
        if (React.isValidElement(content)) {
            return React.cloneElement(content, { onClose });
        }
        else if (typeof content === 'function') {
            return content({ onClose });
        }
        return content;
    }
    defaultNotificationRenderer(payload) {
        const { content, options = {} } = payload;
        return (React.createElement(ToastNotification, Object.assign({}, options, { title: options.title, key: `notification-${options.id}` }), content));
    }
    makeNotification(payload) {
        const { notificationRenderer } = this.props;
        const renderer = notificationRenderer || this.defaultNotificationRenderer;
        return renderer(payload);
    }
    render() {
        const { position = 'relative', width, newestOnTop = false } = this.props;
        const { notifications } = this.state;
        const notificationsToRender = {};
        const collection = this.collection.map((item, i) => ({
            id: item.name,
            item: item,
            index: i,
        }));
        if (newestOnTop) {
            collection.reverse();
        }
        collection.forEach(({ id, item, index }) => {
            const options = item.options || {};
            const itemPosition = options.position || position;
            notificationsToRender[itemPosition] || (notificationsToRender[itemPosition] = []);
            if (notifications.indexOf(id) !== -1) {
                notificationsToRender[itemPosition].push(this.makeNotification(item));
            }
            else {
                notificationsToRender[itemPosition].push(undefined);
                this.collection.splice(index, 1);
            }
        });
        return (React.createElement("div", null, Object.keys(notificationsToRender).map((position) => {
            const disablePointer = notificationsToRender[position].length === 1 && notificationsToRender[position][0] === null;
            return (React.createElement(StyledNotifications, { key: `notification-container-${position}`, width: width, position: position, disablePointer: disablePointer }, notificationsToRender[position]));
        })));
    }
}
Notifications.inner = {
    get ToastNotification() { return ToastNotification; },
    get StyledNotifications() { return StyledNotifications; }
};
//# sourceMappingURL=data:application/json;base64,