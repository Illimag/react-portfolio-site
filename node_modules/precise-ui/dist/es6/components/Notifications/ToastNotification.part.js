var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { keyframes } from '../../utils/styled';
import { distance } from '../../distance';
import { remCalc } from '../../utils/remCalc';
import { Notification } from '../Notification';
const animationDuration = 200; // ms
const offsetDistance = 32;
function sideMultiplier(position) {
    switch (position) {
        case 'bottom-left':
        case 'top-left':
            return -1;
        case 'top-right':
        case 'bottom-right':
            return 1;
        default:
            return 0;
    }
}
const InAnimation = (startOffset) => keyframes `
  from {
    opacity: 0;
    transform: translate(${startOffset}px);
  }
  to {
    opacity: 1;
    transform: translate(0px);
  }
`;
const OutAnimation = (endOffset) => keyframes `
  from {
    opacity: 1;
    transform: translate(0px);
  }
  to {
    opacity: 0;
    transform: translate(${endOffset}px);
  }
`;
const StyledNotification = styled(Notification) `
  opacity: 0;
  animation: ${props => props.closing
    ? OutAnimation(sideMultiplier(props.position) * offsetDistance)
    : InAnimation(sideMultiplier(props.position) * offsetDistance)}
    ${animationDuration / 1000}s ease-in-out forwards;
`;
export class ToastNotification extends React.Component {
    constructor(props) {
        super(props);
        this.onCloseHandler = () => {
            this.close();
            return false;
        };
        this.close = () => {
            const { onClose } = this.props;
            this.setState({ closing: true }, () => {
                this.closeId = setTimeout(() => {
                    if (typeof onClose === 'function') {
                        onClose();
                    }
                }, animationDuration);
            });
        };
        this.state = {
            closing: false,
        };
    }
    UNSAFE_componentWillMount() {
        const { autoClose } = this.props;
        if (autoClose) {
            this.autoCloseId = setTimeout(this.close, autoClose);
        }
    }
    componentWillUnmount() {
        if (this.closeId) {
            clearTimeout(this.closeId);
        }
        if (this.autoCloseId) {
            clearTimeout(this.autoCloseId);
        }
    }
    render() {
        const { closing } = this.state;
        const _a = this.props, { autoClose: _0, events: _1, id: _2, onClose: _4, position } = _a, other = __rest(_a, ["autoClose", "events", "id", "onClose", "position"]);
        const toastTheme = {
            notificationPadding: `${distance.small} ${distance.small} ${distance.medium}`,
            notificationBorderWidth: `0 0 0 5px`,
            notificationTextFontSize: remCalc('12px'),
            notificationTextLineHeight: `14px`,
            notificationIconMarginRight: distance.small,
        };
        return (React.createElement(StyledNotification, Object.assign({ position: position, closing: closing, theme: toastTheme, onClose: this.onCloseHandler }, other)));
    }
}
ToastNotification.inner = {
    get StyledNotification() { return StyledNotification; }
};
//# sourceMappingURL=data:application/json;base64,