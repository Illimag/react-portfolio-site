var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as icons from './icons';
import styled from '../../utils/styled';
import { getIcon } from './registerIcons';
export * from './icon.types';
const StyledIcon = styled.i `
  display: inline-block;

  > svg {
    float: left;
  }
`;
/**
 * The icon component displays an icon from the given set of icons.
 */
export const Icon = Object.assign(((_a) => {
    var { size = 1, name, stroke, color } = _a, rest = __rest(_a, ["size", "name", "stroke", "color"]);
    const dim = typeof size === 'number' ? `${size}em` : size;
    const SvgIcon = icons[name] || getIcon(name);
    if (SvgIcon) {
        return (React.createElement(StyledIcon, Object.assign({}, rest),
            React.createElement(SvgIcon, { width: dim, height: dim, style: { fill: color || 'currentColor', stroke } })));
    }
    else if (process.env.NODE_ENV === 'development') {
        console.error(`An icon with the name ${name} could not be found.`);
    }
    // tslint:disable-next-line
    return null;
}), { inner: {
        get StyledIcon() { return StyledIcon; }
    } });
Icon.displayName = 'Icon';
export { registerIcons } from './registerIcons';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9JY29uL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEtBQUssS0FBSyxNQUFNLFNBQVMsQ0FBQztBQUNqQyxPQUFPLE1BQU0sTUFBTSxvQkFBb0IsQ0FBQztBQUd4QyxPQUFPLEVBQUUsT0FBTyxFQUFpQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pELGNBQWMsY0FBYyxDQUFDO0FBaUM3QixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDOzs7Ozs7Q0FNM0IsQ0FBQztBQUNGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDLEVBQTBDLEVBQUUsRUFBRTtRQUE5QyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLE9BQVcsRUFBVCxzREFBTztJQUN6RSxNQUFNLEdBQUcsR0FBRyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUMxRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLElBQUksT0FBTyxFQUFFO1FBQ1QsT0FBTyxDQUFDLG9CQUFDLFVBQVUsb0JBQUssSUFBSTtZQUM1QixvQkFBQyxPQUFPLElBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLElBQUksY0FBYyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQzFFLENBQUMsQ0FBQztLQUNoQjtTQUNJLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssYUFBYSxFQUFFO1FBQzdDLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLElBQUksc0JBQXNCLENBQUMsQ0FBQztLQUN0RTtJQUNELDJCQUEyQjtJQUMzQixPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDLENBQXlCLEVBQUUsRUFBRSxLQUFLLEVBQUU7UUFDN0IsSUFBSSxVQUFVLEtBQUssT0FBTyxVQUErQixDQUFDLENBQUMsQ0FBQztLQUMvRCxFQUFFLENBQUMsQ0FBQztBQUNULElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO0FBQzFCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIGljb25zIGZyb20gJy4vaWNvbnMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBJY29uTmFtZSwgSWNvbk5hbWVzIH0gZnJvbSAnLi9pY29uLnR5cGVzJztcbmltcG9ydCB7IGdldEljb24sIHJlZ2lzdGVySWNvbnMgfSBmcm9tICcuL3JlZ2lzdGVySWNvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi9pY29uLnR5cGVzJztcbmV4cG9ydCBpbnRlcmZhY2UgSWNvblByb3BzIGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGljb24gdG8gZGlzcGxheS5cbiAgICAgKi9cbiAgICBuYW1lOiBJY29uTmFtZTtcbiAgICAvKipcbiAgICAgKiBUaGUgQ1NTIGNvbG9yIG9mIHRoZSBpY29uLCBvdGhlcndpc2UgdXNlcyB0aGUgdGhlbWUncyBmb3JlZ3JvdW5kIGNvbG9yLlxuICAgICAqIEBkZWZhdWx0IGN1cnJlbnRDb2xvclxuICAgICAqL1xuICAgIGNvbG9yPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1Mgc3Ryb2tlIGNvbG9yIG9mIHRoZSBpY29uLCBvdGhlcndpc2UgaXMgbm90IGRlZmluZWQuXG4gICAgICovXG4gICAgc3Ryb2tlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjaGlsZHJlbj86IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVGhlIHJlbGF0aXZlIChudW1iZXIpIG9yIGFic29sdXRlIHNpemUgb2YgdGhlIGljb24sIHdoZXJlIDFcbiAgICAgKiBpcyB0aGUgZGVmYXVsdCBzaXplLlxuICAgICAqL1xuICAgIHNpemU/OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBpY29uIGlzIGNsaWNrZWQuXG4gICAgICovXG4gICAgb25DbGljaz8oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFdmVudCBlbWl0dGVkIHdoZW4gdGhlIG1vdXNlIGRvd24gb24gdGhlIGljb24uXG4gICAgICovXG4gICAgb25Nb3VzZURvd24/KGU6IFJlYWN0Lk1vdXNlRXZlbnQpOiB2b2lkO1xufVxuY29uc3QgU3R5bGVkSWNvbiA9IHN0eWxlZC5pIGBcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXG4gID4gc3ZnIHtcbiAgICBmbG9hdDogbGVmdDtcbiAgfVxuYDtcbi8qKlxuICogVGhlIGljb24gY29tcG9uZW50IGRpc3BsYXlzIGFuIGljb24gZnJvbSB0aGUgZ2l2ZW4gc2V0IG9mIGljb25zLlxuICovXG5leHBvcnQgY29uc3QgSWNvbiA9IE9iamVjdC5hc3NpZ24oKCgoeyBzaXplID0gMSwgbmFtZSwgc3Ryb2tlLCBjb2xvciwgLi4ucmVzdCB9KSA9PiB7XG4gICAgY29uc3QgZGltID0gdHlwZW9mIHNpemUgPT09ICdudW1iZXInID8gYCR7c2l6ZX1lbWAgOiBzaXplO1xuICAgIGNvbnN0IFN2Z0ljb24gPSBpY29uc1tuYW1lXSB8fCBnZXRJY29uKG5hbWUpO1xuICAgIGlmIChTdmdJY29uKSB7XG4gICAgICAgIHJldHVybiAoPFN0eWxlZEljb24gey4uLnJlc3R9PlxuICAgICAgICA8U3ZnSWNvbiB3aWR0aD17ZGltfSBoZWlnaHQ9e2RpbX0gc3R5bGU9e3sgZmlsbDogY29sb3IgfHwgJ2N1cnJlbnRDb2xvcicsIHN0cm9rZSB9fS8+XG4gICAgICA8L1N0eWxlZEljb24+KTtcbiAgICB9XG4gICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgQW4gaWNvbiB3aXRoIHRoZSBuYW1lICR7bmFtZX0gY291bGQgbm90IGJlIGZvdW5kLmApO1xuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZXR1cm4gbnVsbDtcbn0pIGFzIFJlYWN0LkZDPEljb25Qcm9wcz4pLCB7IGlubmVyOiB7XG4gICAgICAgIGdldCBTdHlsZWRJY29uKCkgeyByZXR1cm4gU3R5bGVkSWNvbiBhcyB0eXBlb2YgU3R5bGVkSWNvbjsgfVxuICAgIH0gfSk7XG5JY29uLmRpc3BsYXlOYW1lID0gJ0ljb24nO1xuZXhwb3J0IHsgcmVnaXN0ZXJJY29ucyB9IGZyb20gJy4vcmVnaXN0ZXJJY29ucyc7XG4iXX0=