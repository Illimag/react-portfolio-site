var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed, css } from '../../utils/styled';
import { Anchor } from '../Anchor';
import { Icon } from '../Icon';
import { distance } from '../../distance';
import { displayUpTo } from '../../utils/';
import { getFontSize } from '../../textStyles';
function getThemeSettings(theme, buttonStyle) {
    switch (buttonStyle) {
        default:
        case 'primary':
            return theme.buttonPrimary;
        case 'secondary':
            return theme.buttonSecondary;
    }
}
function getButtonFontStyle(themeSettings, size = 'medium') {
    switch (size) {
        default:
        case 'medium':
            return `
        line-height: ${themeSettings.lineHeightMedium};
        ${getFontSize('medium')};
      `;
        case 'small':
            return `
        line-height: ${themeSettings.lineHeightSmall};
        ${getFontSize('small')};
      `;
    }
}
function getIconSize(size) {
    switch (size) {
        default:
        case 'medium':
            return '22px';
        case 'small':
            return '16px';
    }
}
function getButtonPadding(size) {
    switch (size) {
        default:
        case 'medium':
            return `9px ${distance.medium} 7px`;
        case 'small':
            return `5px ${distance.small} 3px`;
    }
}
const PseudoButtonStyle = (colorTheme) => css `
  &:hover {
    background-color: ${colorTheme.hoverBackground};
    border: ${colorTheme.hoverBorder};
    color: ${colorTheme.hoverText};
  }
  &:focus {
    background-color: ${colorTheme.focusBackground};
    border: ${colorTheme.focusBorder};
    color: ${colorTheme.focusText};
  }
`;
const AnchorInt = Object.assign(((_a) => {
    var { buttonStyle } = _a, props = __rest(_a, ["buttonStyle"]);
    return React.createElement(Anchor, Object.assign({}, props));
}), { inner: {
        get Anchor() { return Anchor; }
    } });
const StyledButton = styled(AnchorInt)(themed(props => {
    const themeSettings = getThemeSettings(props.theme, props.buttonStyle);
    return css `
      box-sizing: border-box;
      outline: none;
      border-radius: 0;
      margin: ${distance.small};
      &:first-of-type {
        margin-left: 0;
      }
      &:last-of-type {
        margin-right: 0;
      }
      border: ${props.disabled ? `${themeSettings.disabledBorder}` : `${themeSettings.border}`};
      background-color: ${props.disabled ? themeSettings.disabledBackground : themeSettings.background};
      color: ${props.disabled ? themeSettings.disabledText : themeSettings.text};
      font-family: ${props.theme.fontFamily};
      ${getButtonFontStyle(themeSettings, props.size)};
      padding: ${getButtonPadding(props.size)};
      display: ${props.block ? 'block' : 'inline-block'};
      cursor: ${props.disabled ? 'not-allowed' : 'pointer'};
      ${!props.disabled ? PseudoButtonStyle(themeSettings) : ''};
      ${!props.disableMobileFullWidth &&
        displayUpTo('medium') `
        width: 100%;
        margin: ${distance.small} 0;
      `};
    `;
}));
const DefaultWrapper = styled.div ``;
const WithIconWrapper = styled('div') `
  ${props => props.theme.buttonIconPosition === 'left'
    ? `padding-left: ${distance.xlarge}`
    : `padding-right: ${distance.xlarge}`};
  position: relative;
`;
const StyledIcon = styled(Icon) `
  ${props => (props.theme.buttonIconPosition === 'left' ? 'left: 0' : 'right: 0')};
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
`;
/**
 * The button component renders a simple button optionally with an icon.
 */
export const Button = Object.assign(((_a) => {
    var { children, icon, size, theme } = _a, rest = __rest(_a, ["children", "icon", "size", "theme"]);
    const Wrapper = icon ? WithIconWrapper : DefaultWrapper;
    return (React.createElement(StyledButton, Object.assign({ tagName: "button", theme: theme, size: size }, rest),
        React.createElement(Wrapper, { theme: theme },
            children,
            icon && React.createElement(StyledIcon, { name: icon, theme: theme, size: getIconSize(size) }))));
}), { inner: {
        get StyledButton() { return StyledButton; },
        get StyledIcon() { return StyledIcon; }
    } });
Button.displayName = 'Button';
//# sourceMappingURL=data:application/json;base64,