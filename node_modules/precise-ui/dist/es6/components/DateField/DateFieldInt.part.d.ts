import * as React from 'react';
import { ReactDatePickerProps } from 'react-datepicker';
import { TextInputProps, Omit, InputChangeEvent } from '../../common';
import { FormContextProps } from '../../hoc';
export { ReactDatePickerProps };
export interface DateFieldOpenChangedEvent {
    /**
     * If the calendar flyout is supposed to be open or closed.
     */
    open: boolean;
}
declare const excludedReactDatePickerProps: {
    autoComplete: number;
    onBlur: number;
    onChange: number;
    onFocus: number;
    children: number;
    todayButton: number;
    placeholderText: number;
    isClearable: number;
    withPortal: number;
    showYearDropdown: number;
    showMonthDropdown: number;
    useShortMonthInDropdown: number;
    showMonthYearDropdown: number;
    dropdownMode: number;
    monthsShown: number;
    showTimeInput: number;
    showMonthYearPicker: number;
};
export interface DatePickerOnChangeEvent extends InputChangeEvent<string> {
    date?: Date;
}
export interface DateFieldBasicProps extends FormContextProps, TextInputProps {
    /**
     * Optional abbreviations for the 12 months (Jan - Dec) of the year to use.
     */
    months?: Array<string>;
    /**
     * Optional abbreviations for the 7 days (Mon - Sun) of the week to use.
     */
    weekDays?: Array<string>;
    /**
     * Sets the visibilty of the calendar flyout. If set the flyout will be set
     * to controlled mode, otherwise it is managed.
     */
    open?: boolean;
    /**
     * Event fired when the flyout wants to open or close.
     */
    onOpenChange?(e: DateFieldOpenChangedEvent): void;
    /**
     * Event emitted once the value changes due to user input.
     */
    onChange?(e: DatePickerOnChangeEvent): void;
    /**
     * @ignore
     */
    children?: void;
}
export declare type DateFieldProps = DateFieldBasicProps & Omit<ReactDatePickerProps, keyof typeof excludedReactDatePickerProps>;
export declare const DateField: React.FunctionComponent<DateFieldProps>;
