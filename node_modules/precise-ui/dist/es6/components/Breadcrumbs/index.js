var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { Breadcrumb } from '../Breadcrumb';
import { dark } from '../../colors';
import { distance } from '../../distance';
import { OverflowMenu } from '../OverflowMenu';
import { getFontStyle } from '../../textStyles';
const BreadcrumbContainer = styled.div `
  ${getFontStyle({ size: 'small' })}
  
  color: ${themed(props => props.theme.ui8)};
`;
const BreadcrumbSeparator = styled.span `
  padding: 0 ${distance.medium};
  color: ${dark};
  font-size: inherit;
  &:after {
    content: '/';
  }
`;
function collapse(items, target, size) {
    items[target] = (React.createElement(OverflowMenu, { items: items.splice(target, 1 + items.length - size, ''), button: React.createElement(Breadcrumb, { title: "...", href: "#" }) }));
}
function insertSeparators(items) {
    for (let i = items.length; i-- > 1;) {
        items.splice(i, 0, React.createElement(BreadcrumbSeparator, null));
    }
}
/**
 * Display a list of Breadcrumb elements with optional grouping.
 */
export const Breadcrumbs = Object.assign(((_a) => {
    var { size = 5, children } = _a, props = __rest(_a, ["size", "children"]);
    const displayElements = [];
    const count = Math.max(size, 1);
    React.Children.forEach(children, child => {
        if (child) {
            displayElements.push(child);
        }
    });
    if (displayElements.length > count) {
        collapse(displayElements, +(count > 2), count);
    }
    insertSeparators(displayElements);
    return (React.createElement(BreadcrumbContainer, Object.assign({}, props), displayElements.map((element, i) => (React.createElement("span", { key: i }, element)))));
}), { inner: {
        get BreadcrumbContainer() { return BreadcrumbContainer; }
    } });
Breadcrumbs.displayName = 'Breadcrumbs';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9CcmVhZGNydW1icy9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ25DLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQzs7V0FFeEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7Q0FDMUMsQ0FBQztBQUNGLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztlQUN6QixRQUFRLENBQUMsTUFBTTtXQUNuQixJQUFJOzs7OztDQUtkLENBQUM7QUFZRixTQUFTLFFBQVEsQ0FBQyxLQUE4QixFQUFFLE1BQWMsRUFBRSxJQUFZO0lBQzFFLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG9CQUFDLFlBQVksSUFBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxvQkFBQyxVQUFVLElBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxJQUFJLEVBQUMsR0FBRyxHQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzVJLENBQUM7QUFDRCxTQUFTLGdCQUFnQixDQUFDLEtBQThCO0lBQ3BELEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUc7UUFDakMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLG9CQUFDLG1CQUFtQixPQUFHLENBQUMsQ0FBQztLQUMvQztBQUNMLENBQUM7QUFDRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLENBQUMsQ0FBQyxFQUFnQyxFQUFFLEVBQUU7UUFBcEMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLFFBQVEsT0FBWSxFQUFWLHdDQUFRO0lBQ3RFLE1BQU0sZUFBZSxHQUE0QixFQUFFLENBQUM7SUFDcEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFO1FBQ3JDLElBQUksS0FBSyxFQUFFO1lBQ1AsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUF5QixDQUFDLENBQUM7U0FDbkQ7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILElBQUksZUFBZSxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUU7UUFDaEMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ2xEO0lBQ0QsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbEMsT0FBTyxDQUFDLG9CQUFDLG1CQUFtQixvQkFBSyxLQUFLLEdBQ25DLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLDhCQUFNLEdBQUcsRUFBRSxDQUFDLElBQUcsT0FBTyxDQUFRLENBQUMsQ0FBQyxDQUNsRCxDQUFDLENBQUM7QUFDNUIsQ0FBQyxDQUFpQyxFQUFFLEVBQUUsS0FBSyxFQUFFO1FBQ3JDLElBQUksbUJBQW1CLEtBQUssT0FBTyxtQkFBaUQsQ0FBQyxDQUFDLENBQUM7S0FDMUYsRUFBRSxDQUFDLENBQUM7QUFDVCxXQUFXLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsgdGhlbWVkIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3R5bGVkJztcbmltcG9ydCB7IEJyZWFkY3J1bWIgfSBmcm9tICcuLi9CcmVhZGNydW1iJztcbmltcG9ydCB7IGRhcmsgfSBmcm9tICcuLi8uLi9jb2xvcnMnO1xuaW1wb3J0IHsgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBkaXN0YW5jZSB9IGZyb20gJy4uLy4uL2Rpc3RhbmNlJztcbmltcG9ydCB7IE92ZXJmbG93TWVudSB9IGZyb20gJy4uL092ZXJmbG93TWVudSc7XG5pbXBvcnQgeyBnZXRGb250U3R5bGUgfSBmcm9tICcuLi8uLi90ZXh0U3R5bGVzJztcbmNvbnN0IEJyZWFkY3J1bWJDb250YWluZXIgPSBzdHlsZWQuZGl2IGBcbiAgJHtnZXRGb250U3R5bGUoeyBzaXplOiAnc21hbGwnIH0pfVxuICBcbiAgY29sb3I6ICR7dGhlbWVkKHByb3BzID0+IHByb3BzLnRoZW1lLnVpOCl9O1xuYDtcbmNvbnN0IEJyZWFkY3J1bWJTZXBhcmF0b3IgPSBzdHlsZWQuc3BhbiBgXG4gIHBhZGRpbmc6IDAgJHtkaXN0YW5jZS5tZWRpdW19O1xuICBjb2xvcjogJHtkYXJrfTtcbiAgZm9udC1zaXplOiBpbmhlcml0O1xuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnLyc7XG4gIH1cbmA7XG5leHBvcnQgaW50ZXJmYWNlIEJyZWFkY3J1bWJzUHJvcHMgZXh0ZW5kcyBTdGFuZGFyZFByb3BzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgZWxlbWVudHMuIEJ5IGRlZmF1bHQsIHNldCB0byA1LlxuICAgICAqIEBkZWZhdWx0IDVcbiAgICAgKi9cbiAgICBzaXplPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBicmVhZGNydW1iIGl0ZW1zIHRvIGRpc3BsYXkuXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG59XG5mdW5jdGlvbiBjb2xsYXBzZShpdGVtczogQXJyYXk8UmVhY3QuUmVhY3RDaGlsZD4sIHRhcmdldDogbnVtYmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICBpdGVtc1t0YXJnZXRdID0gKDxPdmVyZmxvd01lbnUgaXRlbXM9e2l0ZW1zLnNwbGljZSh0YXJnZXQsIDEgKyBpdGVtcy5sZW5ndGggLSBzaXplLCAnJyl9IGJ1dHRvbj17PEJyZWFkY3J1bWIgdGl0bGU9XCIuLi5cIiBocmVmPVwiI1wiLz59Lz4pO1xufVxuZnVuY3Rpb24gaW5zZXJ0U2VwYXJhdG9ycyhpdGVtczogQXJyYXk8UmVhY3QuUmVhY3RDaGlsZD4pIHtcbiAgICBmb3IgKGxldCBpID0gaXRlbXMubGVuZ3RoOyBpLS0gPiAxOykge1xuICAgICAgICBpdGVtcy5zcGxpY2UoaSwgMCwgPEJyZWFkY3J1bWJTZXBhcmF0b3IgLz4pO1xuICAgIH1cbn1cbi8qKlxuICogRGlzcGxheSBhIGxpc3Qgb2YgQnJlYWRjcnVtYiBlbGVtZW50cyB3aXRoIG9wdGlvbmFsIGdyb3VwaW5nLlxuICovXG5leHBvcnQgY29uc3QgQnJlYWRjcnVtYnMgPSBPYmplY3QuYXNzaWduKCgoKHsgc2l6ZSA9IDUsIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PiB7XG4gICAgY29uc3QgZGlzcGxheUVsZW1lbnRzOiBBcnJheTxSZWFjdC5SZWFjdENoaWxkPiA9IFtdO1xuICAgIGNvbnN0IGNvdW50ID0gTWF0aC5tYXgoc2l6ZSwgMSk7XG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgY2hpbGQgPT4ge1xuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGRpc3BsYXlFbGVtZW50cy5wdXNoKGNoaWxkIGFzIFJlYWN0LlJlYWN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGRpc3BsYXlFbGVtZW50cy5sZW5ndGggPiBjb3VudCkge1xuICAgICAgICBjb2xsYXBzZShkaXNwbGF5RWxlbWVudHMsICsoY291bnQgPiAyKSwgY291bnQpO1xuICAgIH1cbiAgICBpbnNlcnRTZXBhcmF0b3JzKGRpc3BsYXlFbGVtZW50cyk7XG4gICAgcmV0dXJuICg8QnJlYWRjcnVtYkNvbnRhaW5lciB7Li4ucHJvcHN9PlxuICAgICAge2Rpc3BsYXlFbGVtZW50cy5tYXAoKGVsZW1lbnQsIGkpID0+ICg8c3BhbiBrZXk9e2l9PntlbGVtZW50fTwvc3Bhbj4pKX1cbiAgICA8L0JyZWFkY3J1bWJDb250YWluZXI+KTtcbn0pIGFzIFJlYWN0LlNGQzxCcmVhZGNydW1ic1Byb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IEJyZWFkY3J1bWJDb250YWluZXIoKSB7IHJldHVybiBCcmVhZGNydW1iQ29udGFpbmVyIGFzIHR5cGVvZiBCcmVhZGNydW1iQ29udGFpbmVyOyB9XG4gICAgfSB9KTtcbkJyZWFkY3J1bWJzLmRpc3BsYXlOYW1lID0gJ0JyZWFkY3J1bWJzJztcbiJdfQ==