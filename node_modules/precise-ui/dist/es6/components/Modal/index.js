var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { keyframes, css } from '../../utils/styled';
import { Headline } from '../Headline';
import { white, cyan, dark, grey6 } from '../../colors';
import { Blocker } from '../Blocker';
import { CloseButton } from '../CloseButton';
import { distance } from '../../distance';
import { getFontStyle } from '../../textStyles';
const openAnimationDuration = 300;
const closeAnimationDuration = 200;
const blockerAnimationDuration = 200;
const InAnimation = (startOffset) => keyframes `
  from {
    opacity: 0;
    transform: translate(0, ${startOffset}px);
  }
  to {
    opacity: 1;
    transform: translate(0px);
  }
`;
const OutAnimation = () => keyframes `
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
`;
const BlockerInAnimation = () => keyframes `
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
`;
const StyledModal = styled('div')(({ width, closing }) => css `
    outline: none;
    color: ${dark};
    ${width ? `width: ${width}` : 'max-width: 500px'};
    margin: ${distance.xlarge} auto;
    display: flex;
    align-items: center;
    min-height: calc(100% - (${distance.xlarge} * 2));
    animation: ${closing ? OutAnimation() : InAnimation(-72)}
      ${closing ? closeAnimationDuration : openAnimationDuration}ms cubic-bezier(0, 0, 0.25, 1);
    animation-fill-mode: forwards;

    @media screen and (max-width: ${width || '500px'}) {
      width: 100%;
      min-height: 100%;
      margin: 0;
      align-items: stretch;
    }
  `);
const StyledBlocker = styled(Blocker)(({ closing }) => css `
    animation: ${closing ? OutAnimation() : BlockerInAnimation()} ${blockerAnimationDuration}ms
      cubic-bezier(0, 0, 0.25, 1);
    animation-fill-mode: forwards;
  `);
const ModalContent = styled.div(({ minHeight }) => `
    position: relative;
    display: flex;
    flex-direction: column;
    background: ${white};
    box-shadow: 0 12px 24px 0 rgba(0, 0, 0, 0.1);
    border-top: 4px solid ${cyan};
    width: 100%;
    ${minHeight ? `min-height: ${minHeight}` : ''};
  `);
const ModalLabel = styled.span `
  ${getFontStyle({ size: 'small' })}

  padding-bottom: ${distance.small};
`;
const StyledModalBody = styled.div `
  ${getFontStyle({ size: 'medium', weight: 'regular' })}

  text-align: left;
  padding: 0 ${distance.xxlarge} ${distance.xxlarge};
  margin-bottom: auto;
`;
const StyledModalHeader = styled.div `
  margin-bottom: ${distance.medium};
  padding: ${distance.xxlarge} ${distance.xxlarge} 0;
`;
const StyledModalFooter = styled.div `
  background: ${grey6};
  padding: ${distance.large} ${distance.xxlarge};
  text-align: right;
`;
/**
 * A simple modal dialog for requiring user interaction.
 */
export class Modal extends React.PureComponent {
    constructor(props) {
        super(props);
        this.closeBackground = () => {
            this.closeFrom('background');
        };
        this.closeButton = () => {
            this.closeFrom('button');
        };
        this.state = {
            closing: false,
        };
    }
    closeFrom(origin) {
        const { onClose, onBeforeClose } = this.props;
        const closeEvent = { origin };
        this.callOnBeforeCloseHandler(onBeforeClose, closeEvent).then(closePermitted => {
            if (!closePermitted) {
                return;
            }
            this.setState({ closing: true }, () => setTimeout(() => {
                if (typeof onClose === 'function') {
                    onClose(closeEvent);
                }
                this.setState({ closing: false });
            }, closeAnimationDuration));
        });
    }
    callOnBeforeCloseHandler(onBeforeClose, closeEvent) {
        if (typeof onBeforeClose !== 'function') {
            return Promise.resolve(true);
        }
        const canClose = onBeforeClose(closeEvent);
        return Promise.resolve(canClose);
    }
    render() {
        const _a = this.props, { onBeforeClose: _0, children, onClose, open = false, minHeight } = _a, rest = __rest(_a, ["onBeforeClose", "children", "onClose", "open", "minHeight"]);
        const canClose = typeof onClose === 'function';
        const { closing } = this.state;
        return (open && (React.createElement(StyledBlocker, { closing: closing, onClose: this.closeBackground },
            React.createElement(StyledModal, Object.assign({ tabIndex: 0, closing: closing }, rest),
                React.createElement(ModalContent, { minHeight: minHeight },
                    children,
                    canClose && React.createElement(CloseButton, { onClick: this.closeButton }))))));
    }
}
Modal.inner = {
    get StyledBlocker() { return StyledBlocker; },
    get StyledModal() { return StyledModal; },
    get ModalContent() { return ModalContent; },
    get CloseButton() { return CloseButton; }
};
/**
 * Styles the body of a modal dialog.
 */
export const ModalBody = Object.assign((props => (React.createElement(StyledModalBody, Object.assign({}, props)))), { inner: {
        get StyledModalBody() { return StyledModalBody; }
    } });
ModalBody.displayName = 'ModalBody';
/**
 * Styles the header of a modal dialog
 */
export const ModalHeader = Object.assign(((_a) => {
    var { title, label } = _a, rest = __rest(_a, ["title", "label"]);
    return (React.createElement(StyledModalHeader, Object.assign({}, rest),
        label && React.createElement(ModalLabel, null, label),
        title && React.createElement(Headline, { level: 2 }, title)));
}), { inner: {
        get StyledModalHeader() { return StyledModalHeader; },
        get ModalLabel() { return ModalLabel; },
        get Headline() { return Headline; }
    } });
ModalHeader.displayName = 'ModalHeader';
/**
 * Styles the footer of a modal dialog.
 */
export const ModalFooter = Object.assign((props => React.createElement(StyledModalFooter, Object.assign({}, props))), { inner: {
        get StyledModalFooter() { return StyledModalFooter; }
    } });
ModalFooter.displayName = 'ModalFooter';
//# sourceMappingURL=data:application/json;base64,