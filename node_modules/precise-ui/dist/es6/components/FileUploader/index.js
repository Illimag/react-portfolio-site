import * as React from 'react';
import { eventManagers } from '../../utils/eventManager';
import { Dropzone } from '../Dropzone';
import { FileUploadActions } from '../FileUploaderDetails';
import { generateId, getSimpleStatus } from './helpers';
export class UploadData {
    constructor(events) {
        this.filesChanged = ({ files }) => {
            const filteredFiles = files.filter(item => item.uploaderId === this.id);
            if (filteredFiles.length > 0) {
                const ids = filteredFiles.map(item => item.fileId);
                let changed = false;
                for (const file of this.files) {
                    const index = ids.indexOf(file.id);
                    if (index !== -1) {
                        const updatedFile = filteredFiles[index];
                        const updatedStatus = getSimpleStatus(updatedFile);
                        const hasChanged = updatedFile.data !== file.data || updatedFile.progress !== file.progress || file.status !== updatedStatus;
                        if (hasChanged) {
                            changed = true;
                            file.data = updatedFile.data;
                            file.progress = updatedFile.progress;
                            file.status = updatedStatus;
                        }
                    }
                }
                if (changed) {
                    this.emit('change');
                    if (this.ready) {
                        this.emit('ready');
                    }
                }
            }
        };
        this.id = generateId();
        this.events = events || eventManagers[0];
        this.files = [];
        this.notifications = [];
    }
    get completedFiles() {
        return this.files.filter(m => m.status === 'complete');
    }
    get ready() {
        return this.files.reduce((prev, curr) => prev && (curr.status === 'complete' || curr.status === 'canceled'), true);
    }
    get total() {
        return this.files.filter(file => file.status !== 'canceled').length;
    }
    commit(cb) {
        const handler = () => cb(this.completedFiles);
        if (this.ready) {
            handler();
        }
        else {
            this.once('ready', handler);
        }
    }
    once(type, cb) {
        const handler = () => {
            this.off(type, handler);
            cb();
        };
        this.on(type, handler);
    }
    on(type, cb) {
        if (this.notifications.length === 0) {
            this.connect();
        }
        this.notifications.push({ type, cb });
    }
    off(type, cb) {
        for (let i = this.notifications.length; i--;) {
            const notification = this.notifications[i];
            if (notification.type === type && notification.cb === cb) {
                this.notifications.splice(i, 1);
            }
        }
        if (this.notifications.length === 0) {
            this.disconnect();
        }
    }
    connect() {
        const em = this.events;
        em.on(FileUploadActions.uploadProgress, this.filesChanged);
        em.on(FileUploadActions.uploadFailure, this.filesChanged);
        em.on(FileUploadActions.uploadSuccess, this.filesChanged);
    }
    disconnect() {
        const em = this.events;
        em.off(FileUploadActions.uploadProgress, this.filesChanged);
        em.off(FileUploadActions.uploadFailure, this.filesChanged);
        em.off(FileUploadActions.uploadSuccess, this.filesChanged);
        em.emit(FileUploadActions.clearUploads, this.id);
    }
    emit(type) {
        for (const notification of this.notifications) {
            if (notification.type === type) {
                notification.cb();
            }
        }
    }
    push(files) {
        /**
         * TODO:
         * Update `FileSelect` component to assign generated id
         * to a file to enable multiple selection of the same file
         */
        const names = this.files.map(item => (item.status !== 'canceled' ? item.name : ''));
        const newUploadFiles = [];
        for (const file of files) {
            if (names.indexOf(file.name) === -1) {
                const id = generateId();
                const added = new Date();
                const data = {};
                newUploadFiles.push({
                    name: file.name,
                    fileId: id,
                    content: file,
                    type: file.type,
                    uploaderId: this.id,
                    timestamp: added,
                    data,
                });
                this.files.push({
                    id,
                    added,
                    status: 'new',
                    data,
                    name: file.name,
                    progress: 0,
                    type: file.type,
                });
            }
        }
        if (newUploadFiles.length) {
            this.emit('change');
            this.events.emit(FileUploadActions.startUpload, { files: newUploadFiles });
        }
    }
}
/**
 * The file uploader component that passes selected files to global uploader. Should be used with `FileUploaderDetails` component.
 */
export class FileUploader extends React.Component {
    constructor(props) {
        super(props);
        this.emitChange = () => {
            const { onChange } = this.props;
            if (typeof onChange === 'function') {
                const { files, ready, total } = this.data;
                onChange({
                    files: files.map(file => ({
                        data: file.data,
                        id: file.id,
                        name: file.name,
                        progress: file.progress,
                        state: file.status,
                        type: file.type,
                    })),
                    ready,
                    total,
                });
            }
        };
        this.filesAdded = (e) => {
            this.data.push(e.value);
        };
        this.fileSelect = (e) => {
            const { multiple } = this.props;
            const { files, events } = this.data;
            const notCanceledFiles = files.filter(file => file.status !== 'canceled');
            if (!multiple && notCanceledFiles.length === 1) {
                const completedFiles = notCanceledFiles.filter(file => file.status === 'complete');
                if (completedFiles.length === 0) {
                    e.preventDefault();
                    events.emit(FileUploadActions.showUploads, {});
                }
            }
        };
        const { data = new UploadData() } = props;
        this.data = data;
    }
    componentDidMount() {
        this.data.on('change', this.emitChange);
    }
    componentWillUnmount() {
        this.data.off('change', this.emitChange);
    }
    render() {
        const { multiple, message, children, showFileList } = this.props;
        const additionalProps = !showFileList ? { value: [] } : {};
        return (React.createElement(Dropzone, Object.assign({ multiple: multiple, onChange: this.filesAdded, onOpen: this.fileSelect, message: message }, additionalProps), children));
    }
}
FileUploader.inner = {
    get Dropzone() { return Dropzone; }
};
//# sourceMappingURL=data:application/json;base64,