var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { SidebarPopup } from './SidebarPopup.part';
import { SidebarActivatorContainer } from './SidebarActivatorContainer.part';
export class Sidebar extends React.Component {
    constructor(props) {
        super(props);
        this.show = () => {
            if (!this.controlled) {
                this.setState({ open: true });
            }
            typeof this.props.onShow === 'function' && this.props.onShow();
        };
        this.hide = () => {
            if (!this.controlled) {
                this.setState({ open: false });
            }
            typeof this.props.onClose === 'function' && this.props.onClose();
        };
        this.onKeyPress = (e) => {
            if (e.keyCode === 27 /* escape */) {
                this.hide();
            }
        };
        const { open } = this.props;
        this.controlled = open !== undefined;
        this.state = {
            open: open !== undefined ? open : false,
        };
    }
    UNSAFE_componentWillReceiveProps(props) {
        if (this.controlled) {
            this.setState({ open: Boolean(props.open) });
        }
    }
    componentDidMount() {
        document.addEventListener('keydown', this.onKeyPress);
    }
    componentWillUnmount() {
        document.removeEventListener('keydown', this.onKeyPress);
    }
    render() {
        const _a = this.props, { onShow: _0, activator, size = '275px' } = _a, props = __rest(_a, ["onShow", "activator", "size"]);
        const { open } = this.state;
        return (React.createElement(React.Fragment, null,
            React.createElement(SidebarActivatorContainer, { onClick: this.show }, activator),
            React.createElement(SidebarPopup, Object.assign({}, props, { open: open, onClose: this.hide, size: size }))));
    }
}
Sidebar.inner = {
    get SidebarActivatorContainer() { return SidebarActivatorContainer; },
    get SidebarPopup() { return SidebarPopup; }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9TaWRlYmFyL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUUvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFpQzdFLE1BQU0sT0FBTyxPQUFRLFNBQVEsS0FBSyxDQUFDLFNBQXFDO0lBRXBFLFlBQVksS0FBbUI7UUFDM0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBa0JULFNBQUksR0FBRyxHQUFHLEVBQUU7WUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUNqQztZQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssVUFBVSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbkUsQ0FBQyxDQUFDO1FBQ00sU0FBSSxHQUFHLEdBQUcsRUFBRTtZQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2FBQ2xDO1lBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxVQUFVLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyRSxDQUFDLENBQUM7UUFDTSxlQUFVLEdBQUcsQ0FBQyxDQUFnQixFQUFFLEVBQUU7WUFDdEMsSUFBSSxDQUFDLENBQUMsT0FBTyxvQkFBb0IsRUFBRTtnQkFDL0IsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2Y7UUFDTCxDQUFDLENBQUM7UUFqQ0UsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLEtBQUssU0FBUyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDVCxJQUFJLEVBQUUsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLO1NBQzFDLENBQUM7SUFDTixDQUFDO0lBQ0QsZ0NBQWdDLENBQUMsS0FBbUI7UUFDaEQsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDaEQ7SUFDTCxDQUFDO0lBQ0QsaUJBQWlCO1FBQ2IsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNELG9CQUFvQjtRQUNoQixRQUFRLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBa0JELE1BQU07UUFDRixNQUFNLGVBQWdFLEVBQWhFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxHQUFHLE9BQU8sT0FBeUIsRUFBdkIsbURBQXVCLENBQUM7UUFDdkUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDNUIsT0FBTyxDQUFDO1lBQ1Isb0JBQUMseUJBQXlCLElBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLElBQUcsU0FBUyxDQUE2QjtZQUN0RixvQkFBQyxZQUFZLG9CQUFLLEtBQUssSUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLElBQUcsQ0FDckUsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7QUFDTSxhQUFLLEdBQUc7SUFDWCxJQUFJLHlCQUF5QixLQUFLLE9BQU8seUJBQTZELENBQUMsQ0FBQyxDQUFDO0lBQ3pHLElBQUksWUFBWSxLQUFLLE9BQU8sWUFBbUMsQ0FBQyxDQUFDLENBQUM7Q0FDckUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEtleUNvZGVzIH0gZnJvbSAnLi4vLi4vdXRpbHMva2V5Q29kZXMnO1xuaW1wb3J0IHsgU2lkZWJhclBvcHVwIH0gZnJvbSAnLi9TaWRlYmFyUG9wdXAucGFydCc7XG5pbXBvcnQgeyBTaWRlYmFyQWN0aXZhdG9yQ29udGFpbmVyIH0gZnJvbSAnLi9TaWRlYmFyQWN0aXZhdG9yQ29udGFpbmVyLnBhcnQnO1xudHlwZSBQb3NpdGlvblR5cGUgPSAndG9wJyB8ICdsZWZ0JyB8ICdib3R0b20nIHwgJ3JpZ2h0JztcbmV4cG9ydCBpbnRlcmZhY2UgU2lkZWJhclByb3BzIHtcbiAgICAvKipcbiAgICAgKiBFbGVtZW50IHdoaWNoIHRyaWdnZXJzIHNpZGViYXIgc2hvd2luZyBieSBjbGljay5cbiAgICAgKi9cbiAgICBhY3RpdmF0b3I6IFJlYWN0LlJlYWN0Q2hpbGQ7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGVyZSB0byBzaG93IGEgc2lkZWJhci4gVmFsaWQgcG9zaXRpb25zIGFyZTogbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLlxuICAgICAqIEBkZWZhdWx0IHJpZ2h0XG4gICAgICovXG4gICAgcG9zaXRpb24/OiBQb3NpdGlvblR5cGU7XG4gICAgLyoqXG4gICAgICogU2l6ZSBpbiB2YWxpZCBjc3MgdW5pdHMuXG4gICAgICogQGRlZmF1bHQgMjc1cHhcbiAgICAgKi9cbiAgICBzaXplPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgc2lkZWJhciBpcyBvcGVuZWQgb3IgY2xvc2VkLiBQdXRzIHNpZGViYXIgaW4gY29udHJvbGxlZCBtb2RlLlxuICAgICAqL1xuICAgIG9wZW4/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHRoaXMgZXZlbnQgYWZ0ZXIgdHJpZ2dlciBlbGVtZW50IHdhcyBjbGlja2VkLlxuICAgICAqL1xuICAgIG9uU2hvdz8oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB0aGlzIGV2ZW50IHdoZW4gc2lkZWJhciBzaG91bGQgYmUgY2xvc2VkLlxuICAgICAqL1xuICAgIG9uQ2xvc2U/KCk6IHZvaWQ7XG59XG5pbnRlcmZhY2UgU2lkZWJhclN0YXRlIHtcbiAgICBvcGVuOiBib29sZWFuO1xufVxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8U2lkZWJhclByb3BzLCBTaWRlYmFyU3RhdGU+IHtcbiAgICBwcml2YXRlIGNvbnRyb2xsZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IocHJvcHM6IFNpZGViYXJQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIGNvbnN0IHsgb3BlbiB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgdGhpcy5jb250cm9sbGVkID0gb3BlbiAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgb3Blbjogb3BlbiAhPT0gdW5kZWZpbmVkID8gb3BlbiA6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhwcm9wczogU2lkZWJhclByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBCb29sZWFuKHByb3BzLm9wZW4pIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleVByZXNzKTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5UHJlc3MpO1xuICAgIH1cbiAgICBwcml2YXRlIHNob3cgPSAoKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5jb250cm9sbGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICB0eXBlb2YgdGhpcy5wcm9wcy5vblNob3cgPT09ICdmdW5jdGlvbicgJiYgdGhpcy5wcm9wcy5vblNob3coKTtcbiAgICB9O1xuICAgIHByaXZhdGUgaGlkZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgICB0eXBlb2YgdGhpcy5wcm9wcy5vbkNsb3NlID09PSAnZnVuY3Rpb24nICYmIHRoaXMucHJvcHMub25DbG9zZSgpO1xuICAgIH07XG4gICAgcHJpdmF0ZSBvbktleVByZXNzID0gKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gS2V5Q29kZXMuZXNjYXBlKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IG9uU2hvdzogXzAsIGFjdGl2YXRvciwgc2l6ZSA9ICcyNzVweCcsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7IG9wZW4gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHJldHVybiAoPD5cbiAgICAgICAgPFNpZGViYXJBY3RpdmF0b3JDb250YWluZXIgb25DbGljaz17dGhpcy5zaG93fT57YWN0aXZhdG9yfTwvU2lkZWJhckFjdGl2YXRvckNvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJQb3B1cCB7Li4ucHJvcHN9IG9wZW49e29wZW59IG9uQ2xvc2U9e3RoaXMuaGlkZX0gc2l6ZT17c2l6ZX0vPlxuICAgICAgPC8+KTtcbiAgICB9XG4gICAgc3RhdGljIGlubmVyID0ge1xuICAgICAgICBnZXQgU2lkZWJhckFjdGl2YXRvckNvbnRhaW5lcigpIHsgcmV0dXJuIFNpZGViYXJBY3RpdmF0b3JDb250YWluZXIgYXMgdHlwZW9mIFNpZGViYXJBY3RpdmF0b3JDb250YWluZXI7IH0sXG4gICAgICAgIGdldCBTaWRlYmFyUG9wdXAoKSB7IHJldHVybiBTaWRlYmFyUG9wdXAgYXMgdHlwZW9mIFNpZGViYXJQb3B1cDsgfVxuICAgIH07XG59XG4iXX0=