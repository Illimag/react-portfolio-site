import styled, { keyframes, css } from '../../utils/styled';
import { Blocker } from '../Blocker';
import * as React from 'react';
const InAnimation = () => keyframes `
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
`;
const OutAnimation = () => keyframes `
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
`;
const animationDuration = 500;
export const StyledSidebarBlocker = styled(Blocker)(({ closing }) => css `
    animation: ${closing ? OutAnimation() : InAnimation()} ${animationDuration}ms;
    animation-fill-mode: forwards;
  `);
export const SidebarBlocker = Object.assign((props => {
    const [closed, setClosed] = React.useState(!props.open);
    React.useEffect(() => {
        if (props.open) {
            setClosed(false);
            return;
        }
        else {
            const timeout = setTimeout(() => setClosed(true), animationDuration);
            return () => clearTimeout(timeout);
        }
    }, [props.open]);
    //tslint:disable-next-line
    return !closed ? React.createElement(StyledSidebarBlocker, Object.assign({}, props, { closing: !props.open })) : null;
}), { inner: {
        get StyledSidebarBlocker() { return StyledSidebarBlocker; }
    } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lkZWJhckJsb2NrZXIucGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1NpZGViYXIvU2lkZWJhckJsb2NrZXIucGFydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUQsT0FBTyxFQUFFLE9BQU8sRUFBZ0IsTUFBTSxZQUFZLENBQUM7QUFDbkQsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFJL0IsTUFBTSxXQUFXLEdBQUcsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDOzs7Ozs7O0NBT25DLENBQUM7QUFDRixNQUFNLFlBQVksR0FBRyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUM7Ozs7Ozs7Q0FPcEMsQ0FBQztBQUNGLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FFaEQsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7aUJBQ1AsT0FBTyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLElBQUksaUJBQWlCOztHQUUzRSxDQUFDLENBQUM7QUFDTCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQ2xELE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4RCxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNqQixJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDWixTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakIsT0FBTztTQUNWO2FBQ0k7WUFDRCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDckUsT0FBTyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEM7SUFDTCxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqQiwwQkFBMEI7SUFDMUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsb0JBQUMsb0JBQW9CLG9CQUFLLEtBQUssSUFBRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNyRixDQUFDLENBQW1DLEVBQUUsRUFBRSxLQUFLLEVBQUU7UUFDdkMsSUFBSSxvQkFBb0IsS0FBSyxPQUFPLG9CQUFtRCxDQUFDLENBQUMsQ0FBQztLQUM3RixFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzLCBjc3MgfSBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgQmxvY2tlciwgQmxvY2tlclByb3BzIH0gZnJvbSAnLi4vQmxvY2tlcic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgaW50ZXJmYWNlIFNpZGViYXJCbG9ja2VyUHJvcHMgZXh0ZW5kcyBCbG9ja2VyUHJvcHMge1xuICAgIG9wZW46IGJvb2xlYW47XG59XG5jb25zdCBJbkFuaW1hdGlvbiA9ICgpID0+IGtleWZyYW1lcyBgXG4gIGZyb20ge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbiAgdG8ge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbmA7XG5jb25zdCBPdXRBbmltYXRpb24gPSAoKSA9PiBrZXlmcmFtZXMgYFxuICBmcm9tIHtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG4gIHRvIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5gO1xuY29uc3QgYW5pbWF0aW9uRHVyYXRpb24gPSA1MDA7XG5leHBvcnQgY29uc3QgU3R5bGVkU2lkZWJhckJsb2NrZXIgPSBzdHlsZWQoQmxvY2tlcik8e1xuICAgIGNsb3Npbmc6IGJvb2xlYW47XG59PigoeyBjbG9zaW5nIH0pID0+IGNzcyBgXG4gICAgYW5pbWF0aW9uOiAke2Nsb3NpbmcgPyBPdXRBbmltYXRpb24oKSA6IEluQW5pbWF0aW9uKCl9ICR7YW5pbWF0aW9uRHVyYXRpb259bXM7XG4gICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XG4gIGApO1xuZXhwb3J0IGNvbnN0IFNpZGViYXJCbG9ja2VyID0gT2JqZWN0LmFzc2lnbigoKHByb3BzID0+IHtcbiAgICBjb25zdCBbY2xvc2VkLCBzZXRDbG9zZWRdID0gUmVhY3QudXNlU3RhdGUoIXByb3BzLm9wZW4pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChwcm9wcy5vcGVuKSB7XG4gICAgICAgICAgICBzZXRDbG9zZWQoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gc2V0Q2xvc2VkKHRydWUpLCBhbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgfSwgW3Byb3BzLm9wZW5dKTtcbiAgICAvL3RzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgIHJldHVybiAhY2xvc2VkID8gPFN0eWxlZFNpZGViYXJCbG9ja2VyIHsuLi5wcm9wc30gY2xvc2luZz17IXByb3BzLm9wZW59Lz4gOiBudWxsO1xufSkgYXMgUmVhY3QuRkM8U2lkZWJhckJsb2NrZXJQcm9wcz4pLCB7IGlubmVyOiB7XG4gICAgICAgIGdldCBTdHlsZWRTaWRlYmFyQmxvY2tlcigpIHsgcmV0dXJuIFN0eWxlZFNpZGViYXJCbG9ja2VyIGFzIHR5cGVvZiBTdHlsZWRTaWRlYmFyQmxvY2tlcjsgfVxuICAgIH0gfSk7XG4iXX0=