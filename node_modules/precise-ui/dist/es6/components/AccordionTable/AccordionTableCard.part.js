var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { normalizeIndex, toggleIndex, hasIndex } from './helpers/indexHelper';
import { defaultCellRenderer } from '../Table/TableShared.part';
import { defaultBodyRenderer } from '../Table/TableCard.part';
import { AccordionCard } from '../AccordionCard';
import { ListItem } from '../ListItem';
import { List } from '../List';
import { distance } from '../../distance';
import { getFontStyle } from '../../textStyles';
const PropContainer = styled.div `
  margin-bottom: ${distance.medium};

  &:last-child {
    margin-bottom: 0;
  }
`;
const PropName = styled.div `
  ${getFontStyle({ size: 'xSmall' })}
`;
const PropValue = styled.div `
  ${getFontStyle({ weight: 'medium' })}
`;
const PlaceholderContainer = styled.div `
  text-align: center;
`;
const StyledList = styled(List) `
  overflow: visible;
`;
const StyledListItem = styled(ListItem) `
  padding: 0;
  margin-bottom: ${distance.xlarge};
  border: none;

  &:last-child {
    margin-bottom: 0;
  }
`;
const AccordionTableCardHost = Object.assign((props => React.createElement(StyledList, Object.assign({}, props))), { inner: {
        get StyledList() { return StyledList; }
    } });
export class AccordionTableCard extends React.Component {
    constructor(props) {
        super(props);
        this.renderItem = ({ item, index, open, keys, closeLabel, openLabel }) => {
            const { detailsRenderer, theme } = this.props;
            return (React.createElement(StyledListItem, { theme: theme, key: index },
                React.createElement(AccordionCard, { openLabel: openLabel, closeLabel: closeLabel, theme: theme, header: this.renderItemProps(item, keys, index), opened: open, onActionClick: () => this.handleClick(index, item) }, open && detailsRenderer && detailsRenderer({ data: item, index }))));
        };
        this.state = {
            selectedIndexes: normalizeIndex(props.selectedIndex),
            controlled: props.selectedIndex !== undefined,
        };
    }
    static getDerivedStateFromProps(props, state) {
        const { selectedIndex } = props;
        if (state.controlled && selectedIndex !== undefined) {
            return {
                selectedIndexes: normalizeIndex(props.selectedIndex),
            };
        }
        return state;
    }
    handleClick(target, data) {
        const { onChange, multiple } = this.props;
        const { controlled, selectedIndexes } = this.state;
        const nextIndexes = toggleIndex(selectedIndexes, target, multiple);
        if (typeof onChange === 'function') {
            onChange({
                selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,
                previousIndex: multiple ? selectedIndexes : selectedIndexes[0] !== undefined ? selectedIndexes[0] : -1,
                data,
            });
        }
        if (!controlled) {
            this.setState({
                selectedIndexes: nextIndexes,
            });
        }
    }
    getHeader(key) {
        const { columns } = this.props;
        if (columns) {
            const column = columns[key];
            return typeof column === 'string' ? column : column.header;
        }
        return key;
    }
    renderItemProps(item, keys, row) {
        return keys.map((key, index) => this.renderItemProp(key, item[key], index, row));
    }
    renderItemProp(key, propValue, index, row) {
        const { cellRenderer = defaultCellRenderer } = this.props;
        const propKey = this.getHeader(key);
        return (React.createElement(PropContainer, { key: index },
            React.createElement(PropName, null, propKey),
            React.createElement(PropValue, null, cellRenderer({
                row,
                column: index,
                key,
                value: propValue,
                render: defaultCellRenderer,
            }))));
    }
    render() {
        const _a = this.props, { data = [], columns, placeholder, theme, cardRenderer = this.renderItem, bodyRenderer = defaultBodyRenderer, openLabel, closeLabel } = _a, props = __rest(_a, ["data", "columns", "placeholder", "theme", "cardRenderer", "bodyRenderer", "openLabel", "closeLabel"]);
        const keys = Object.keys(columns || data[0] || {});
        const rows = data.length === 0
            ? placeholder
                ? [
                    React.createElement(StyledListItem, { theme: theme, key: 0 },
                        React.createElement(PlaceholderContainer, { theme: theme }, placeholder)),
                ]
                : []
            : data.map((item, index) => cardRenderer({
                item,
                index,
                open: hasIndex(this.state.selectedIndexes, index),
                keys,
                openLabel,
                closeLabel,
            }));
        return bodyRenderer({
            rows,
            mode: 'card',
            props: Object.assign({ theme, borderless: true }, props),
            table: AccordionTableCardHost,
        });
    }
}
AccordionTableCard.inner = {
    get StyledListItem() { return StyledListItem; },
    get AccordionCard() { return AccordionCard; },
    get PropContainer() { return PropContainer; },
    get PropName() { return PropName; },
    get PropValue() { return PropValue; },
    get PlaceholderContainer() { return PlaceholderContainer; }
};
//# sourceMappingURL=data:application/json;base64,