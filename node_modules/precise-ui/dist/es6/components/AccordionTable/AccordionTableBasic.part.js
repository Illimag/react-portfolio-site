var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed, css } from '../../utils/styled';
import { remCalc } from '../../utils/remCalc';
import { Table } from '../Table';
import { defaultCellRenderer } from '../Table/TableShared.part';
import { Icon } from '../Icon';
import { AccordionTableRow } from '../AccordionTableRow';
import { normalizeIndex, toggleIndex, hasIndex } from './helpers/indexHelper';
import { distance } from '../../distance';
import { getFontStyle } from '../../textStyles';
const animationDuration = '0.3s';
const animationFunction = 'cubic-bezier(0, 0, 0.25, 1)';
const StyledTable = styled(Table) `
  th,
  td {
    padding-right: ${distance.medium};
    padding-left: ${distance.medium};
  }
`;
const StyledTableRowCollapse = styled.tr(themed(({ theme, active }) => css `
      border: ${active ? `1px solid ${theme.ui5}` : 'none'};
      ${!active ? 'display: none;' : ''}
    `));
const StyledCollapseAnimator = styled('div') `
  transition: all ${animationDuration} ${animationFunction};
  max-height: ${({ active }) => (active ? '10000px' : '0')};
  opacity: ${({ active }) => (active ? '1' : '0')};
`;
const GroupTableCell = styled.td `
  ${getFontStyle({ weight: 'bold' })}

  padding-left: 0.5em !important;
`;
const StyledDetailsContainer = styled.td `
  /*
    AccordionTable is a Table abstraction.
    Table has default paddings for it's cells.
    Expanded AccordionTable row is a container and should not have any paddings.
  */
  padding: 0 !important;
`;
const StyledIconInt = Object.assign(((_a) => {
    var { isRotated: _0 } = _a, props = __rest(_a, ["isRotated"]);
    return React.createElement(Icon, Object.assign({}, props));
}), { inner: {
        get Icon() { return Icon; }
    } });
const StyledIcon = styled(StyledIconInt) `
  display: block;
  font-size: ${remCalc('18px')};
  height: 18px;
  width: 18px;
  transition: transform ${animationDuration} ${animationFunction};
  transform: ${({ isRotated }) => `rotate(${isRotated ? 90 : 0}deg)`};
`;
function defaultGroupRenderer(e) {
    return (React.createElement(React.Fragment, null,
        e.group ? e.group.toString() : e.group,
        " (",
        e.items.length,
        ")"));
}
export class AccordionTableBasic extends React.Component {
    constructor(props) {
        super(props);
        this.getGroupByValue = (rowData) => {
            const { groupBy, noValueGroupLabel } = this.props;
            if (groupBy) {
                const rowValue = rowData[groupBy];
                if (rowValue || rowValue === 0) {
                    if (Array.isArray(rowValue) && rowValue.length === 0) {
                        return noValueGroupLabel;
                    }
                    else {
                        return rowValue;
                    }
                }
                else {
                    return noValueGroupLabel;
                }
            }
            return undefined;
        };
        this.rowRenderer = ({ cells, index, data, key, state }) => {
            const { detailsRenderer, rowRenderer, theme, arrowToggle } = this.props;
            const { selectedIndex, expandedGroups } = this.state;
            const { groupedRows = [] } = state;
            const active = hasIndex(selectedIndex, index);
            const count = React.Children.count(cells);
            const col = this.getGroupByValue(data);
            const open = !(col || col === 0) || AccordionTableBasic.arrayIncludes(col, expandedGroups);
            const renderData = { cells, index, data, active, key, state };
            const isNewGroup = (col || col === 0) && !AccordionTableBasic.arrayIncludes(col, groupedRows);
            if (isNewGroup) {
                state.groupedRows = [...groupedRows, col];
            }
            return (React.createElement(React.Fragment, { key: key },
                isNewGroup && this.groupRenderer(col, count, open),
                open && (React.createElement(React.Fragment, null,
                    (rowRenderer && rowRenderer(renderData)) || (React.createElement(AccordionTableRow, { active: active, clickable: !arrowToggle, onClick: () => this.handleClick(index, data), theme: theme }, cells)),
                    React.createElement(StyledTableRowCollapse, { active: active },
                        React.createElement(StyledDetailsContainer, { colSpan: count },
                            React.createElement(StyledCollapseAnimator, { active: active }, active && detailsRenderer && detailsRenderer({ index, data }))))))));
        };
        this.cellRenderer = (e) => {
            const { row, data } = e;
            if (e.column === 0) {
                return (React.createElement(StyledIcon, { isRotated: hasIndex(this.state.selectedIndex, row), name: "KeyboardArrowRight", onClick: () => data && this.handleClick(row, data) }));
            }
            const { cellRenderer } = this.props;
            return typeof cellRenderer === 'function' ? cellRenderer(e) : defaultCellRenderer(e);
        };
        const controlledDetails = props.selectedIndex !== undefined;
        const controlledGroups = Array.isArray(props.expandedGroups);
        this.state = {
            selectedIndex: normalizeIndex(props.selectedIndex),
            controlledIndex: controlledDetails,
            controlledGroups: controlledGroups,
            expandedGroups: controlledGroups ? props.expandedGroups || [] : [],
        };
    }
    static getDerivedStateFromProps(props, state) {
        const { selectedIndex, expandedGroups } = props;
        const newIndex = state.controlledIndex && selectedIndex !== undefined;
        const newGroups = state.controlledGroups && expandedGroups !== undefined;
        if (newIndex || newGroups) {
            return Object.assign({}, state, { selectedIndex: newIndex ? normalizeIndex(selectedIndex) : state.selectedIndex, expandedGroups: newGroups ? expandedGroups : state.expandedGroups });
        }
        return state;
    }
    getGroupItems(data, groupBy, group) {
        const { noValueGroupLabel } = this.props;
        if (groupBy) {
            if (group === noValueGroupLabel) {
                return data.filter(m => {
                    const value = m[groupBy];
                    // the number '0' shouldn't be in the no-value-group.
                    if (typeof value === 'number' && value === 0) {
                        return false;
                    }
                    else {
                        // empty arrays should be in the no-value-group
                        return !value || (Array.isArray(value) && value.length === 0);
                    }
                });
            }
            else {
                return data.filter(m => {
                    const value = m[groupBy];
                    if (value === group) {
                        return true;
                    }
                    else {
                        // special handling for arrays is needed because '===' doesn't work for arrays
                        if (Array.isArray(value) && Array.isArray(group)) {
                            return value.toString() === group.toString();
                        }
                        else {
                            return false;
                        }
                    }
                });
            }
        }
        return [];
    }
    handleClick(target, data) {
        const { onChange, multiple } = this.props;
        const { controlledIndex, selectedIndex } = this.state;
        const nextIndexes = toggleIndex(selectedIndex, target, multiple);
        if (typeof onChange === 'function') {
            onChange({
                selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,
                previousIndex: multiple ? selectedIndex : selectedIndex[0] !== undefined ? selectedIndex[0] : -1,
                data,
            });
        }
        if (!controlledIndex) {
            this.setState({
                selectedIndex: nextIndexes,
            });
        }
    }
    toggleGroup(group) {
        const { data, onToggleGroup, groupBy } = this.props;
        const { expandedGroups, controlledGroups } = this.state;
        if (typeof onToggleGroup === 'function') {
            onToggleGroup({
                group,
                type: 'expand',
                items: this.getGroupItems(data, groupBy, group),
            });
        }
        if (!controlledGroups) {
            if (expandedGroups.indexOf(group) !== -1) {
                this.setState({
                    expandedGroups: expandedGroups.filter(m => m !== group),
                });
            }
            else {
                this.setState({
                    expandedGroups: [...expandedGroups, group],
                });
            }
        }
    }
    groupRenderer(group, count, expanded) {
        const { theme, groupRenderer = defaultGroupRenderer, data, groupBy } = this.props;
        const items = this.getGroupItems(data, groupBy, group);
        return (React.createElement(React.Fragment, null,
            React.createElement(AccordionTableRow, { clickable: true, onClick: () => this.toggleGroup(group), theme: theme },
                React.createElement(GroupTableCell, null,
                    React.createElement(StyledIcon, { isRotated: expanded, name: "KeyboardArrowRight" })),
                React.createElement(GroupTableCell, { colSpan: count - 1 }, groupRenderer({ expanded, group, items }))),
            React.createElement(StyledTableRowCollapse, null)));
    }
    /**
     * helper method to check if an element is included in an array.
     * This method has special handling for arrays of arrays. In this case normal strict equality checking (===)
     * wouldn't work.
     */
    static arrayIncludes(element, arr) {
        return ((Array.isArray(element) ? JSON.stringify(arr).indexOf(JSON.stringify(element)) : arr.indexOf(element)) !== -1);
    }
    getColumns() {
        const { data, columns, indexed } = this.props;
        if (columns || (data && data.length)) {
            const cols = {
                '': {
                    header: '',
                    width: remCalc('50px'),
                    sortable: false,
                },
            };
            if (indexed) {
                cols['#'] = {
                    header: '#',
                    sortable: false,
                };
            }
            const keys = Object.keys(columns || data[0]);
            return keys.reduce((acc, key) => {
                acc[key] = columns ? columns[key] : key;
                return acc;
            }, cols);
        }
        return {};
    }
    render() {
        const _a = this.props, { detailsRenderer: _0, columns: _1, indexed: _2, groupRenderer: _3, expandedGroups: _4, onToggleGroup: _5, openLabel: _6, closeLabel: _7, multiple: _8 } = _a, props = __rest(_a, ["detailsRenderer", "columns", "indexed", "groupRenderer", "expandedGroups", "onToggleGroup", "openLabel", "closeLabel", "multiple"]);
        return (React.createElement(StyledTable, Object.assign({}, props, { mode: "table", columns: this.getColumns(), rowRenderer: this.rowRenderer, cellRenderer: this.cellRenderer })));
    }
}
AccordionTableBasic.defaultProps = {
    multiple: false,
    noValueGroupLabel: '—',
};
AccordionTableBasic.inner = {
    get AccordionTableRow() { return AccordionTableRow; },
    get GroupTableCell() { return GroupTableCell; },
    get StyledIcon() { return StyledIcon; },
    get StyledTableRowCollapse() { return StyledTableRowCollapse; },
    get StyledDetailsContainer() { return StyledDetailsContainer; },
    get StyledCollapseAnimator() { return StyledCollapseAnimator; },
    get StyledTable() { return StyledTable; }
};
//# sourceMappingURL=data:application/json;base64,