import * as React from 'react';
import styled from '../../utils/styled';
import { StyledFileImagePreview, StyledFileItem, StyledFileList } from '../../quarks';
import { withFormContext } from '../../hoc/withFormContext';
import { Button } from '../Button';
import { Icon } from '../Icon';
import { Spinner } from '../Spinner';
import { showInputInfo } from '../../utils/input';
const FileInput = styled.input `
  display: none;
`;
const Remove = styled.div `
  cursor: pointer;
  line-height: 1;
`;
function getFiles(target, files = []) {
    target.push(...files);
    return target;
}
class FileSelectInt extends React.Component {
    constructor(props) {
        super(props);
        this.addFileEntries = (ev) => {
            const { multiple, form, name = '' } = this.props;
            const files = ev.target.files;
            if (!this.state.controlled) {
                if (form) {
                    form.change({
                        name,
                        value: getFiles(multiple ? [...this.state.value] : [], files),
                    });
                }
                else {
                    this.setState(prevState => ({
                        value: getFiles(multiple ? [...prevState.value] : [], files),
                        previews: [],
                    }), () => this.notifyChanges(this.state.value));
                }
            }
            else {
                this.notifyChanges(getFiles(multiple ? [...this.state.value] : [], files));
            }
        };
        this.setInputRef = (el) => {
            this.fileInput = el;
        };
        this.openFilePicker = () => {
            const { onOpen } = this.props;
            let open = true;
            if (typeof onOpen === 'function') {
                onOpen({
                    preventDefault() {
                        open = false;
                    },
                });
            }
            if (open && this.fileInput) {
                this.fileInput.click();
            }
        };
        const value = props.value || props.defaultValue || [];
        this.state = {
            value,
            controlled: props.value !== undefined,
            previews: [],
            error: props.error,
        };
    }
    componentDidMount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.subscribe(this);
        }
    }
    componentWillUnmount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    }
    UNSAFE_componentWillReceiveProps({ value = [], error }) {
        if (this.state.controlled && value && this.state.value !== value) {
            this.setState({
                value,
                previews: [],
            });
        }
        this.setState({ error });
    }
    removeFileEntry(f) {
        const { form, name = '' } = this.props;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name,
                    value: this.state.value.filter(file => f !== file),
                });
            }
            else {
                this.setState(prevState => ({
                    value: prevState.value.filter(file => f !== file),
                    previews: prevState.previews.filter(preview => preview.file !== f),
                }), () => this.notifyChanges(this.state.value));
            }
        }
        else {
            const files = this.state.value.filter(file => f !== file);
            this.notifyChanges(files);
        }
    }
    notifyChanges(files) {
        const { onChange } = this.props;
        if (typeof onChange === 'function') {
            onChange({
                value: files,
            });
        }
    }
    renderPreview(f) {
        const preview = this.state.previews.filter(preview => preview.file === f)[0];
        if (f.size > 1000000 || !f.type.match(/image/)) {
            return this.renderItem(f);
        }
        if (preview) {
            return (React.createElement(StyledFileImagePreview, { src: preview.data },
                React.createElement(Remove, { onClick: () => this.removeFileEntry(f) },
                    React.createElement(Icon, { name: "RemoveCircle", size: 1 }))));
        }
        const reader = new FileReader();
        reader.onload = (file => () => {
            const result = reader.result;
            typeof result === 'string' &&
                this.setState(prevState => ({
                    previews: [
                        ...prevState.previews,
                        {
                            file,
                            data: result,
                        },
                    ],
                }));
        })(f);
        reader.readAsDataURL(f);
        return (React.createElement(StyledFileImagePreview, null,
            React.createElement(Spinner, { size: "small" })));
    }
    renderItem(f) {
        return (React.createElement(StyledFileItem, { key: f.name, name: f.name },
            React.createElement(Remove, { onClick: () => this.removeFileEntry(f) },
                React.createElement(Icon, { name: "RemoveCircle", size: 1 }))));
    }
    render() {
        const { children, disabled, multiple, info } = this.props;
        const { value, error } = this.state;
        return (React.createElement("div", null,
            React.createElement(Button, { onClick: this.openFilePicker, disabled: disabled, buttonStyle: "secondary", type: "button" }, children),
            React.createElement(FileInput, { ref: this.setInputRef, type: "file", multiple: multiple, onChange: this.addFileEntries, value: "" }),
            value && value.length > 0 && (React.createElement(StyledFileList, null, value.map(file => (this.props.preview ? this.renderPreview(file) : this.renderItem(file))))),
            showInputInfo(error, info)));
    }
}
FileSelectInt.inner = {
    get StyledFileImagePreview() { return StyledFileImagePreview; },
    get Remove() { return Remove; },
    get Icon() { return Icon; },
    get Spinner() { return Spinner; },
    get StyledFileItem() { return StyledFileItem; },
    get Button() { return Button; },
    get FileInput() { return FileInput; },
    get StyledFileList() { return StyledFileList; }
};
/**
 * A custom field for handling file selection.
 */
export const FileSelect = withFormContext(FileSelectInt);
FileSelect.displayName = 'FileSelect';
//# sourceMappingURL=data:application/json;base64,