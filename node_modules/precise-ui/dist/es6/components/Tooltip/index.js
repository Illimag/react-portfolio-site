var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { Flyout } from '../Flyout';
import { tuna, white } from '../../colors';
import { remCalc } from '../../utils/remCalc';
const TooltipContainer = styled.div `
  position: relative;
  width: fit-content;
  display: inline-block;
`;
export class Tooltip extends React.Component {
    constructor(props) {
        super(props);
        this.setTargetRef = (el) => {
            this.targetContainer = el;
        };
        this.onMouseOver = () => {
            if (!this.state.controlled) {
                this.setOpen(true);
            }
        };
        this.onMouseOut = () => {
            if (!this.state.controlled) {
                this.setOpen(false);
            }
        };
        this.state = {
            controlled: props.open !== undefined,
            open: props.open || false,
            targetRect: { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 },
            dirtyFlag: false,
        };
    }
    componentDidMount() {
        this.updateMeasurements();
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.controlled && nextProps.open !== undefined) {
            this.setOpen(nextProps.open);
        }
    }
    componentDidUpdate() {
        const { dirtyFlag } = this.state;
        if (dirtyFlag) {
            this.updateMeasurements();
            this.setState({
                dirtyFlag: false,
            });
        }
    }
    updateMeasurements() {
        if (this.targetContainer) {
            const targetRect = this.targetContainer.getBoundingClientRect();
            this.setState({
                targetRect,
            });
        }
    }
    setOpen(open) {
        const { onChange } = this.props;
        if (typeof onChange === 'function') {
            onChange({ open });
        }
        this.setState({
            open,
            dirtyFlag: open === true,
        });
    }
    render() {
        const _a = this.props, { open: _0, theme } = _a, props = __rest(_a, ["open", "theme"]);
        const { open } = this.state;
        const tooltipFlyoutTheme = Object.assign({ flyout: { background: tuna, textColor: white, fontSize: remCalc('14px'), maxWidth: '250px' } }, theme);
        return (React.createElement(TooltipContainer, { ref: this.setTargetRef, onFocus: this.onMouseOver, onBlur: this.onMouseOut, onMouseOver: this.onMouseOver, onMouseOut: this.onMouseOut },
            React.createElement(Flyout, Object.assign({}, props, { open: open, theme: tooltipFlyoutTheme }))));
    }
}
Tooltip.inner = {
    get TooltipContainer() { return TooltipContainer; },
    get Flyout() { return Flyout; }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Ub29sdGlwL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLE1BQU0sTUFBTSxvQkFBb0IsQ0FBQztBQUV4QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU5QyxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7Ozs7Q0FJbkMsQ0FBQztBQU9GLE1BQU0sT0FBTyxPQUFRLFNBQVEsS0FBSyxDQUFDLFNBQXFDO0lBRXBFLFlBQVksS0FBbUI7UUFDM0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBaUNULGlCQUFZLEdBQUcsQ0FBQyxFQUF5QixFQUFFLEVBQUU7WUFDakQsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7UUFDOUIsQ0FBQyxDQUFDO1FBV00sZ0JBQVcsR0FBRyxHQUFHLEVBQUU7WUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO2dCQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3RCO1FBQ0wsQ0FBQyxDQUFDO1FBQ00sZUFBVSxHQUFHLEdBQUcsRUFBRTtZQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkI7UUFDTCxDQUFDLENBQUM7UUF0REUsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNULFVBQVUsRUFBRSxLQUFLLENBQUMsSUFB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YWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vLi4vdXRpbHMvc3R5bGVkJztcbmltcG9ydCB7IFRvb2x0aXBQcm9wcyB9IGZyb20gJy4vVG9vbHRpcC50eXBlcy5wYXJ0JztcbmltcG9ydCB7IEZseW91dCB9IGZyb20gJy4uL0ZseW91dCc7XG5pbXBvcnQgeyB0dW5hLCB3aGl0ZSB9IGZyb20gJy4uLy4uL2NvbG9ycyc7XG5pbXBvcnQgeyByZW1DYWxjIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVtQ2FsYyc7XG5leHBvcnQgeyBUb29sdGlwUG9zaXRpb24sIFRvb2x0aXBDaGFuZ2VFdmVudCwgVG9vbHRpcFByb3BzIH0gZnJvbSAnLi9Ub29sdGlwLnR5cGVzLnBhcnQnO1xuY29uc3QgVG9vbHRpcENvbnRhaW5lciA9IHN0eWxlZC5kaXYgYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiBmaXQtY29udGVudDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuYDtcbmV4cG9ydCBpbnRlcmZhY2UgVG9vbHRpcFN0YXRlIHtcbiAgICBjb250cm9sbGVkOiBib29sZWFuO1xuICAgIHRhcmdldFJlY3Q6IENsaWVudFJlY3Q7XG4gICAgZGlydHlGbGFnOiBib29sZWFuO1xuICAgIG9wZW46IGJvb2xlYW47XG59XG5leHBvcnQgY2xhc3MgVG9vbHRpcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxUb29sdGlwUHJvcHMsIFRvb2x0aXBTdGF0ZT4ge1xuICAgIHByaXZhdGUgdGFyZ2V0Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCB8IG51bGw7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IFRvb2x0aXBQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb250cm9sbGVkOiBwcm9wcy5vcGVuICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvcGVuOiBwcm9wcy5vcGVuIHx8IGZhbHNlLFxuICAgICAgICAgICAgdGFyZ2V0UmVjdDogeyB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDAsIGxlZnQ6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSxcbiAgICAgICAgICAgIGRpcnR5RmxhZzogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnVwZGF0ZU1lYXN1cmVtZW50cygpO1xuICAgIH1cbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IFRvb2x0aXBQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jb250cm9sbGVkICYmIG5leHRQcm9wcy5vcGVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0T3BlbihuZXh0UHJvcHMub3Blbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICBjb25zdCB7IGRpcnR5RmxhZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKGRpcnR5RmxhZykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNZWFzdXJlbWVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGRpcnR5RmxhZzogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIHVwZGF0ZU1lYXN1cmVtZW50cygpIHtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0Q29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRSZWN0ID0gdGhpcy50YXJnZXRDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB0YXJnZXRSZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBzZXRUYXJnZXRSZWYgPSAoZWw6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCkgPT4ge1xuICAgICAgICB0aGlzLnRhcmdldENvbnRhaW5lciA9IGVsO1xuICAgIH07XG4gICAgcHJpdmF0ZSBzZXRPcGVuKG9wZW46IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgeyBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKHR5cGVvZiBvbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25DaGFuZ2UoeyBvcGVuIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgb3BlbixcbiAgICAgICAgICAgIGRpcnR5RmxhZzogb3BlbiA9PT0gdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHByaXZhdGUgb25Nb3VzZU92ZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5jb250cm9sbGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldE9wZW4odHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHByaXZhdGUgb25Nb3VzZU91dCA9ICgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmNvbnRyb2xsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBvcGVuOiBfMCwgdGhlbWUsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7IG9wZW4gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IHRvb2x0aXBGbHlvdXRUaGVtZSA9IHtcbiAgICAgICAgICAgIGZseW91dDogeyBiYWNrZ3JvdW5kOiB0dW5hLCB0ZXh0Q29sb3I6IHdoaXRlLCBmb250U2l6ZTogcmVtQ2FsYygnMTRweCcpLCBtYXhXaWR0aDogJzI1MHB4JyB9LFxuICAgICAgICAgICAgLi4udGhlbWUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAoPFRvb2x0aXBDb250YWluZXIgcmVmPXt0aGlzLnNldFRhcmdldFJlZn0gb25Gb2N1cz17dGhpcy5vbk1vdXNlT3Zlcn0gb25CbHVyPXt0aGlzLm9uTW91c2VPdXR9IG9uTW91c2VPdmVyPXt0aGlzLm9uTW91c2VPdmVyfSBvbk1vdXNlT3V0PXt0aGlzLm9uTW91c2VPdXR9PlxuICAgICAgICA8Rmx5b3V0IHsuLi5wcm9wc30gb3Blbj17b3Blbn0gdGhlbWU9e3Rvb2x0aXBGbHlvdXRUaGVtZX0vPlxuICAgICAgPC9Ub29sdGlwQ29udGFpbmVyPik7XG4gICAgfVxuICAgIHN0YXRpYyBpbm5lciA9IHtcbiAgICAgICAgZ2V0IFRvb2x0aXBDb250YWluZXIoKSB7IHJldHVybiBUb29sdGlwQ29udGFpbmVyIGFzIHR5cGVvZiBUb29sdGlwQ29udGFpbmVyOyB9LFxuICAgICAgICBnZXQgRmx5b3V0KCkgeyByZXR1cm4gRmx5b3V0IGFzIHR5cGVvZiBGbHlvdXQ7IH1cbiAgICB9O1xufVxuIl19