import * as React from 'react';
import { getWidthBreakpointsQuery, getScreenSizeBreakpoints, getMediaQueries } from '../../utils/displayTo';
import { light, breakpoints } from '../../themes';
export class Responsive extends React.Component {
    constructor(props) {
        super(props);
        this.mediaQueriesToListen = {};
        this.updateMatches = () => {
            this.setState({
                matchesTo: this.currentlyMatches(),
            });
        };
        const { theme = light, screenSize, screenSizeCondition = 'equal', render } = this.props;
        const themedBreakpoints = Object.assign({}, breakpoints, theme.breakpoints);
        if (screenSize) {
            const screenSizeBreakpoints = this.getBreakpoints(themedBreakpoints, screenSize, screenSizeCondition);
            if (screenSizeBreakpoints) {
                this.mediaQueriesToListen[screenSize] = window.matchMedia(getWidthBreakpointsQuery(screenSizeBreakpoints));
            }
        }
        else {
            const allMediaQueries = getMediaQueries(themedBreakpoints);
            for (const screenSize in allMediaQueries) {
                this.mediaQueriesToListen[screenSize] = window.matchMedia(allMediaQueries[screenSize]);
            }
        }
        if (typeof render !== 'function' && !Object.keys(this.mediaQueriesToListen).length) {
            console.error('`render` callback method or valid `screenSize` and `screenSizeCondition` should be defined');
        }
        this.state = {
            matchesTo: undefined,
        };
    }
    getBreakpoints(breakpoints, screenSize, screenSizeCondition) {
        const screenSizeBreakpoints = getScreenSizeBreakpoints(screenSize, breakpoints);
        if (!screenSizeBreakpoints) {
            console.error(`Invalid screen size ${screenSize}`);
            return;
        }
        switch (screenSizeCondition) {
            case 'equal':
                return Object.assign({}, screenSizeBreakpoints);
            case 'from':
                return Object.assign({}, screenSizeBreakpoints, { max: undefined });
            case 'upTo':
                return Object.assign({}, screenSizeBreakpoints, { min: undefined });
            default:
                console.error(`Invalid screen size condition ${screenSizeCondition}`);
                return;
        }
    }
    currentlyMatches() {
        const mediaQueries = this.mediaQueriesToListen;
        for (const screenSize of Object.keys(mediaQueries)) {
            if (mediaQueries[screenSize].matches) {
                return screenSize;
            }
        }
        return undefined;
    }
    componentDidMount() {
        for (const screenSizeListenTo in this.mediaQueriesToListen) {
            this.mediaQueriesToListen[screenSizeListenTo].addListener(this.updateMatches);
        }
        this.updateMatches();
    }
    componentWillUnmount() {
        for (const sceenSize of Object.keys(this.mediaQueriesToListen)) {
            this.mediaQueriesToListen[sceenSize].removeListener(this.updateMatches);
        }
    }
    render() {
        const { children, render } = this.props;
        const { matchesTo } = this.state;
        if (render) {
            return render(matchesTo);
        }
        else {
            return children && matchesTo ? React.createElement(React.Fragment, null, children) : false;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,