var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { showInputInfo } from '../../utils/input';
import { InputIcon } from '../InputIcon';
import { transparent } from '../../colors';
import { distance } from '../../distance';
import { light } from '../../themes';
import { Icon } from '../Icon';
import { Responsive } from '../Responsive';
import { WindowPopup } from '../WindowPopup';
import { InteractiveList, InteractiveListDirection, } from '../InteractiveList';
import { StyledInputRow, StyledInputBox, getTextFieldBorderType, StyledTagItem, StyledIconContainer, } from '../../quarks';
import { getFontStyle } from '../../textStyles';
const DropdownContainer = styled.div `
  position: relative;
  outline: 0;
`;
export const DropdownSelect = styled.div `
  display: flex;
`;
const DropdownInputBox = styled(StyledInputBox) `
  border: 1px solid ${themed(({ focused, theme: { ui4 } }) => (focused ? ui4 : transparent))};
`;
const DropdownOptionText = styled.div `
  ${getFontStyle({ size: 'medium' })}
  padding: ${props => !props.labelShown ? `${distance.medium}` : `${distance.large} ${distance.medium} ${distance.small}`};
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: ${themed(({ theme, disabled }) => (disabled ? theme.text3 : theme.text1))};
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: ${props => (props.disabled ? 'not-allowed' : 'auto')};
`;
const SingleDropdownItem = styled.span `
  display: inline-block;
  line-height: normal;
  border: 0;
  color: ${themed(props => props.theme.text6)};
`;
const StyledStandardWrapper = styled('ul') `
  list-style: none;
  width: 100%;
  position: absolute;
  transform: translateY(${props => (props.direction === InteractiveListDirection.normal ? 0 : -100)}%);
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  padding: 0;
  background: ${themed(props => props.theme.ui1)};
  border: 1px solid
    ${themed(({ border, theme: { ui0, ui4 } }) => (border === 0 /* none */ ? ui0 : ui4))};
  max-height: 50vh;
  ${props => props.direction === InteractiveListDirection.normal
    ? 'border-top-color: transparent'
    : 'border-bottom-color: transparent'};
  top: ${props => (props.direction === InteractiveListDirection.normal ? -1 : -53)}px;
  overflow-y: auto;
  z-index: 100;
`;
const StyledLabel = styled.div `
  padding-left: ${distance.medium};
`;
const DropdownPopup = styled(WindowPopup) `
  border: 2em solid transparent;
`;
// tslint:disable-next-line
const NotOpenComponent = null;
const StandardWrapper = Object.assign(((_a) => {
    var { open } = _a, props = __rest(_a, ["open"]);
    return open ? React.createElement(StyledStandardWrapper, Object.assign({}, props)) : NotOpenComponent;
}), { inner: {
        get StyledStandardWrapper() { return StyledStandardWrapper; }
    } });
StandardWrapper.displayName = 'StandardWrapper';
const getMobileWrapper = (label) => ({ onClick, children, open, }) => open ? (React.createElement(DropdownPopup, { onClose: onClick, label: label }, children)) : (NotOpenComponent);
function getChosen(selected, multiple) {
    if (multiple) {
        return Array.isArray(selected) ? selected : [selected];
    }
    else {
        return [Array.isArray(selected) ? selected[0] : selected];
    }
}
function getKeys(data, selected) {
    return selected.map(index => {
        const item = data[index];
        return typeof item === 'string' ? item : item.key;
    });
}
function getIndices(data, selected, multiple) {
    const chosen = getChosen(selected, multiple);
    const indices = [];
    for (let i = 0; i < data.length; i++) {
        const item = data[i];
        const key = typeof item === 'string' ? item : item.key;
        if (chosen.indexOf(key) !== -1) {
            indices.push(i);
        }
    }
    if (!multiple && indices.length > 1) {
        indices.splice(1);
    }
    return indices;
}
function getContent(item) {
    if (typeof item !== 'string') {
        return item.content || item.key;
    }
    return item;
}
function getSingleContent(item, theme) {
    const key = typeof item === 'string' ? item : item.key;
    return (React.createElement(SingleDropdownItem, { theme: theme, key: key }, getContent(item)));
}
const MultipleDropdownItem = styled(StyledTagItem) `
  margin: 0 ${distance.small} 0 0;
`;
function getMultipleContent(item, theme) {
    const key = typeof item === 'string' ? item : item.key;
    return (React.createElement(MultipleDropdownItem, { theme: theme, key: key }, getContent(item)));
}
export class DropdownFieldInt extends React.Component {
    constructor(props) {
        super(props);
        this.show = () => new Promise(resolve => {
            this.setState({ open: true }, resolve);
        });
        this.hide = () => new Promise(resolve => {
            this.setState({ open: false }, resolve);
        });
        this.handleClickOutside = this.hide;
        this.toggle = () => __awaiter(this, void 0, void 0, function* () {
            const { onToggle, disabled } = this.props;
            if (!disabled) {
                const { open } = this.state;
                if (typeof onToggle === 'function') {
                    onToggle({
                        state: open ? 'close' : 'open',
                    });
                }
                if (open) {
                    yield this.hide();
                }
                else {
                    yield this.show();
                }
            }
        });
        this.control = (e) => {
            switch (e.keyCode) {
                case 13 /* enter */:
                case 32 /* space */:
                    this.show();
                    break;
                case 27 /* escape */:
                    this.hide();
                    break;
                case 38 /* up */:
                case 40 /* down */:
                    if (!this.state.open) {
                        this.show();
                    }
                    return;
                default:
                    return;
            }
            e.stopPropagation();
            e.preventDefault();
        };
        this.handleMouseDown = (e) => {
            this.toggle();
            e.preventDefault();
        };
        this.handleChange = ({ value }) => {
            const { controlled } = this.state;
            const { onChange, data, multiple, form, name = '' } = this.props;
            if (!multiple) {
                this.hide();
            }
            if (!controlled) {
                if (form) {
                    form.change({
                        name,
                        value,
                    });
                }
                else {
                    this.setState({
                        value: value,
                    });
                }
            }
            if (typeof onChange === 'function') {
                onChange({
                    value: value.length ? getKeys(data, value) : [],
                });
            }
        };
        this.renderList = (screenSize) => {
            const { data = [], theme, disabled, multiple, direction, disabledItems } = this.props;
            const { open, value } = this.state;
            const mobile = screenSize === 'small';
            const wrapper = mobile ? getMobileWrapper(React.createElement(StyledLabel, null, this.props.label)) : StandardWrapper;
            return (React.createElement(InteractiveList, { theme: theme, data: data, multiple: multiple, open: open && !disabled, onChange: this.handleChange, onClick: mobile ? this.toggle : undefined, onBlur: mobile ? undefined : this.hide, onKeyDown: mobile ? this.control : undefined, indices: value, customWrapper: wrapper, onClickOutside: () => { }, direction: direction, autoPosition: undefined === direction, disabledItems: disabledItems, autoFocus: true }));
        };
        const data = props.data || [];
        let value = [];
        if (typeof props.value === 'string' || Array.isArray(props.value)) {
            value = props.value;
        }
        else if (typeof props.defaultValue === 'string' || Array.isArray(props.defaultValue)) {
            value = props.defaultValue;
        }
        this.state = {
            value: getIndices(data, value, props.multiple),
            open: props.open === true,
            controlled: props.value !== undefined,
            error: props.error,
        };
    }
    componentDidMount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.subscribe(this);
        }
    }
    componentWillUnmount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    }
    UNSAFE_componentWillReceiveProps({ data = [], value = [], error, multiple }) {
        const { controlled } = this.state;
        if (controlled) {
            this.setState({
                value: getIndices(data, value, multiple),
            });
        }
        this.setState({ error });
    }
    render() {
        const _a = this.props, { borderless, children: _0, value: _1, defaultValue: _2, onInput: _3, data = [], theme, className: classNameProp, label, placeholder, maxSelectedShown = 8, disabled, multiple, info, onChange, disabledItems } = _a, other = __rest(_a, ["borderless", "children", "value", "defaultValue", "onInput", "data", "theme", "className", "label", "placeholder", "maxSelectedShown", "disabled", "multiple", "info", "onChange", "disabledItems"]);
        const { open: openState, value, error } = this.state;
        const open = openState && !disabled;
        const getContent = multiple ? getMultipleContent : getSingleContent;
        const hasValue = !!value.length;
        const border = getTextFieldBorderType(borderless, !!error, open);
        const items = value.map(i => data[i]);
        const th = theme || light;
        if (value.length > maxSelectedShown) {
            const rest = 1 + value.length - maxSelectedShown;
            items.splice(maxSelectedShown - 1, rest, `+ ${rest}`);
        }
        return (React.createElement(DropdownContainer, Object.assign({}, other),
            React.createElement(DropdownSelect, { onMouseDown: this.handleMouseDown, tabIndex: 0, onKeyDown: this.control },
                React.createElement(DropdownInputBox, { disabled: disabled, hasValue: hasValue, border: border, focused: open, theme: theme },
                    React.createElement(StyledInputRow, { label: label, placeholder: placeholder, error: !!error, focused: open, hasValue: hasValue },
                        React.createElement(DropdownOptionText, { labelShown: label !== undefined, disabled: disabled }, hasValue || label ? items.map(item => getContent(item, theme)) : placeholder)),
                    React.createElement(InputIcon, { disabled: disabled, theme: theme, error: error, hasValue: hasValue }),
                    React.createElement(StyledIconContainer, null,
                        React.createElement(Icon, { name: open ? 'KeyboardArrowUp' : 'KeyboardArrowDown', color: disabled ? th.ui4 : th.ui5, size: "22px" })))),
            React.createElement(Responsive, { render: this.renderList }),
            showInputInfo(error, info)));
    }
}
DropdownFieldInt.inner = {
    get StyledLabel() { return StyledLabel; },
    get InteractiveList() { return InteractiveList; },
    get DropdownContainer() { return DropdownContainer; },
    get DropdownSelect() { return DropdownSelect; },
    get DropdownInputBox() { return DropdownInputBox; },
    get StyledInputRow() { return StyledInputRow; },
    get DropdownOptionText() { return DropdownOptionText; },
    get InputIcon() { return InputIcon; },
    get StyledIconContainer() { return StyledIconContainer; },
    get Icon() { return Icon; },
    get Responsive() { return Responsive; }
};
//# sourceMappingURL=data:application/json;base64,