var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { css } from '../../utils/styled';
import { distance } from '../../distance';
function getAlignMargin(alignment) {
    if (alignment !== 'center') {
        return alignment === 'left' ? 'margin-right: auto' : 'margin-left: auto';
    }
    return 'margin: 0 auto';
}
const FluidContainer = css `
  width: 100%;
`;
const FixedWidthContainer = css `
  position: relative;
  ${props => getAlignMargin(props.align)};
  max-width: ${props => props.maxWidth}px;
  padding: 0 ${distance.medium};
`;
const StyledContainer = styled.div `
  ${(props) => props.maxWidth ? FixedWidthContainer : FluidContainer};
`;
const defaultAlign = 'center';
/**
 * Represents a simple reusable container for outer layouts.
 */
export const Container = Object.assign(((_a) => {
    var { align = defaultAlign, maxWidth = undefined, innerRef } = _a, rest = __rest(_a, ["align", "maxWidth", "innerRef"]);
    return React.createElement(StyledContainer, Object.assign({ align: align, maxWidth: maxWidth, ref: innerRef }, rest));
}), { inner: {
        get StyledContainer() { return StyledContainer; }
    } });
Container.displayName = 'Container';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db250YWluZXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFakQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBNEIxQyxTQUFTLGNBQWMsQ0FBQyxTQUE2QjtJQUNqRCxJQUFJLFNBQVMsS0FBSyxRQUFRLEVBQUU7UUFDeEIsT0FBTyxTQUFTLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUM7S0FDNUU7SUFDRCxPQUFPLGdCQUFnQixDQUFDO0FBQzVCLENBQUM7QUFDRCxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUM7O0NBRTFCLENBQUM7QUFDRixNQUFNLG1CQUFtQixHQUFHLEdBQUcsQ0FBMkI7O0lBRXRELEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7ZUFDekIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUTtlQUN2QixRQUFRLENBQUMsTUFBTTtDQUM3QixDQUFDO0FBQ0YsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUMvQixDQUFDLEtBR0osRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLGNBQWM7Q0FDMUQsQ0FBQztBQUNGLE1BQU0sWUFBWSxHQUF1QixRQUFRLENBQUM7QUFDbEQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUMsRUFBaUUsRUFBRSxFQUFFO1FBQXJFLEVBQUUsS0FBSyxHQUFHLFlBQVksRUFBRSxRQUFRLEdBQUcsU0FBUyxFQUFFLFFBQVEsT0FBVyxFQUFULG9EQUFPO0lBQU8sT0FBQSxvQkFBQyxlQUFlLGtCQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxJQUFNLElBQUksRUFBRyxDQUFBO0NBQUEsQ0FBK0IsRUFBRSxFQUFFLEtBQUssRUFBRTtRQUMvTixJQUFJLGVBQWUsS0FBSyxPQUFPLGVBQXlDLENBQUMsQ0FBQyxDQUFDO0tBQzlFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsU0FBUyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7IGNzcyB9IGZyb20gJy4uLy4uL3V0aWxzL3N0eWxlZCc7XG5pbXBvcnQgeyBTdGFuZGFyZFByb3BzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IGRpc3RhbmNlIH0gZnJvbSAnLi4vLi4vZGlzdGFuY2UnO1xuZXhwb3J0IHR5cGUgQ29udGFpbmVyQWxpZ25tZW50ID0gJ2xlZnQnIHwgJ2NlbnRlcicgfCAncmlnaHQnO1xuZXhwb3J0IGludGVyZmFjZSBDb250YWluZXJQcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNoaWxkcmVuIHRvIGRpc3BsYXkuXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCB0aGUgY29udGFpbmVyIGlzIGZsdWlkLCBtZWFuaW5nIGl0IG9jY3VwaWVzIDEwMCUgb2YgaXQnc1xuICAgICAqIHBhcmVudCB3aWR0aCwgYW5kIGJ5IGRlZmluaW5nIG1heFdpZHRoIHByb3BlcnR5LCBjb250YWluZXIgbG9vc2VzIGl0J3NcbiAgICAgKiBmbHVpZCBiZWhhdmlvdXIgYW5kIGJlY29tZXMgZGVmaW5lZCB3aXRoIG1heC13aWR0aC5cbiAgICAgKi9cbiAgICBtYXhXaWR0aD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBXaGVyZSB0aGUgY29udGFpbmVyIGNvbnRlbnQgc2hvdWxkIGJlIGFsaWduZWQuIFRoaXMgcHJvcGVydHkgaXMgb25seVxuICAgICAqIGFwcGxpY2FibGUgaW4gY2FzZSB3aGVuIGZ1bGxXaWR0aCBpcyBkZWZpbmVkLiBCeSBkZWZhdWx0LCBpdCBpcyAnY2VudGVyJy5cbiAgICAgKiBAZGVmYXVsdCBjZW50ZXJcbiAgICAgKi9cbiAgICBhbGlnbj86IENvbnRhaW5lckFsaWdubWVudDtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSByZWZlcmVuY2UgdG8gdGhlIHVuZGVybHlpbmcgSFRNTCBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBpbm5lclJlZj8oaW5zdGFuY2U6IEhUTUxFbGVtZW50IHwgbnVsbCk6IHZvaWQ7XG59XG5pbnRlcmZhY2UgRml4ZWRXaWR0aENvbnRhaW5lclByb3BzIHtcbiAgICBtYXhXaWR0aDogbnVtYmVyO1xuICAgIGFsaWduOiBDb250YWluZXJBbGlnbm1lbnQ7XG59XG5mdW5jdGlvbiBnZXRBbGlnbk1hcmdpbihhbGlnbm1lbnQ6IENvbnRhaW5lckFsaWdubWVudCkge1xuICAgIGlmIChhbGlnbm1lbnQgIT09ICdjZW50ZXInKSB7XG4gICAgICAgIHJldHVybiBhbGlnbm1lbnQgPT09ICdsZWZ0JyA/ICdtYXJnaW4tcmlnaHQ6IGF1dG8nIDogJ21hcmdpbi1sZWZ0OiBhdXRvJztcbiAgICB9XG4gICAgcmV0dXJuICdtYXJnaW46IDAgYXV0byc7XG59XG5jb25zdCBGbHVpZENvbnRhaW5lciA9IGNzcyBgXG4gIHdpZHRoOiAxMDAlO1xuYDtcbmNvbnN0IEZpeGVkV2lkdGhDb250YWluZXIgPSBjc3M8Rml4ZWRXaWR0aENvbnRhaW5lclByb3BzPiBgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgJHtwcm9wcyA9PiBnZXRBbGlnbk1hcmdpbihwcm9wcy5hbGlnbil9O1xuICBtYXgtd2lkdGg6ICR7cHJvcHMgPT4gcHJvcHMubWF4V2lkdGh9cHg7XG4gIHBhZGRpbmc6IDAgJHtkaXN0YW5jZS5tZWRpdW19O1xuYDtcbmNvbnN0IFN0eWxlZENvbnRhaW5lciA9IHN0eWxlZC5kaXYgYFxuICAkeyhwcm9wczoge1xuICAgIG1heFdpZHRoPzogbnVtYmVyO1xuICAgIGFsaWduOiBDb250YWluZXJBbGlnbm1lbnQ7XG59KSA9PiBwcm9wcy5tYXhXaWR0aCA/IEZpeGVkV2lkdGhDb250YWluZXIgOiBGbHVpZENvbnRhaW5lcn07XG5gO1xuY29uc3QgZGVmYXVsdEFsaWduOiBDb250YWluZXJBbGlnbm1lbnQgPSAnY2VudGVyJztcbi8qKlxuICogUmVwcmVzZW50cyBhIHNpbXBsZSByZXVzYWJsZSBjb250YWluZXIgZm9yIG91dGVyIGxheW91dHMuXG4gKi9cbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBPYmplY3QuYXNzaWduKCgoKHsgYWxpZ24gPSBkZWZhdWx0QWxpZ24sIG1heFdpZHRoID0gdW5kZWZpbmVkLCBpbm5lclJlZiwgLi4ucmVzdCB9KSA9PiA8U3R5bGVkQ29udGFpbmVyIGFsaWduPXthbGlnbn0gbWF4V2lkdGg9e21heFdpZHRofSByZWY9e2lubmVyUmVmfSB7Li4ucmVzdH0vPikgYXMgUmVhY3QuU0ZDPENvbnRhaW5lclByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IFN0eWxlZENvbnRhaW5lcigpIHsgcmV0dXJuIFN0eWxlZENvbnRhaW5lciBhcyB0eXBlb2YgU3R5bGVkQ29udGFpbmVyOyB9XG4gICAgfSB9KTtcbkNvbnRhaW5lci5kaXNwbGF5TmFtZSA9ICdDb250YWluZXInO1xuIl19