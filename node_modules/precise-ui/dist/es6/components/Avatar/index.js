var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { colorCycle } from '../../utils/colorCycle';
import { remCalc } from '../../utils/remCalc';
const avatarSize = {
    'xx-small': '16px',
    'x-small': '24px',
    small: '32px',
    medium: '40px',
    large: '48px',
    'x-large': '72px',
};
const avatarFontSize = {
    'xx-small': remCalc('9px'),
    'x-small': remCalc('11px'),
    small: remCalc('14px'),
    medium: remCalc('14px'),
    large: remCalc('17px'),
    'x-large': remCalc('28px'),
};
const AvatarContainer = styled('div') `
  position: relative;
  overflow: hidden;
  ${({ size }) => `
    width: ${avatarSize[size]};
    height: ${avatarSize[size]}
  `};
`;
const AvatarContent = styled('div') `
  border: 0;
  perspective: 1px;

  color: ${themed(props => props.theme.text7)};
  border-radius: 50%;
  overflow: hidden;

  ${({ size }) => `
    width: ${avatarSize[size]};
    height: ${avatarSize[size]};
  `};
`;
const AvatarInitials = styled('div') `
  display: flex;
  align-items: center;
  justify-content: center;

  text-align: center;
  background-color: ${themed(props => props.color || colorCycle(props.theme.colorCycle, props.initials))};
  ${({ size }) => `
    height: ${avatarSize[size]};
    width: ${avatarSize[size]};
    font-size: ${avatarFontSize[size]};
  `};
`;
const AvatarImage = styled.img `
  transform: translate(-50%, -50%);
  width: 100%;
  height: auto;
  left: 50%;
  opacity: 1;
  position: relative;
  top: 50%;
  display: block;
`;
const avatarBadgeSize = {
    'xx-small': '6px',
    'x-small': '8px',
    small: '10px',
    medium: '12px',
    large: '16px',
    'x-large': '20px',
};
const avatarBadgeFontSize = {
    'xx-small': '0',
    'x-small': '0',
    small: '0',
    medium: '8px',
    large: '10px',
    'x-large': '10px',
};
const AvatarBadge = styled('div') `
  position: absolute;
  overflow: hidden;
  border-radius: 50%;
  border: solid 2px ${themed(props => props.theme.ui1)};
  color: ${themed(props => props.theme.text7)};
  bottom: -2px;
  right: -2px;

  ${({ size }) => `
    width: ${avatarBadgeSize[size]};
    height: ${avatarBadgeSize[size]};
    line-height: ${avatarBadgeSize[size]};
    font-size: ${avatarBadgeFontSize[size]}
  `};
`;
const defaultSize = 'medium';
/**
 * The avatar component renders an avatar sticker with an optional badge.
 *
 * We must provide either an `image` or an `initials` prop for the Avatar component to work correctly.
 */
export const Avatar = Object.assign(((_a) => {
    var { image, description, children, size = defaultSize } = _a, props = __rest(_a, ["image", "description", "children", "size"]);
    return (React.createElement(AvatarContainer, Object.assign({}, props, { title: description, size: size }),
        React.createElement(AvatarContent, { size: size, theme: props.theme }, image ? (React.createElement(AvatarImage, { src: image, alt: description })) : (React.createElement(AvatarInitials, { size: size, theme: props.theme, color: props.color }, (props.initials || '').substr(0, 2)))),
        children && (React.createElement(AvatarBadge, { theme: props.theme, size: size }, children))));
}), { inner: {
        get AvatarContainer() { return AvatarContainer; },
        get AvatarContent() { return AvatarContent; },
        get AvatarImage() { return AvatarImage; },
        get AvatarInitials() { return AvatarInitials; },
        get AvatarBadge() { return AvatarBadge; }
    } });
Avatar.displayName = 'Avatar';
//# sourceMappingURL=data:application/json;base64,