var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed, css } from '../../utils/styled';
import { TextField } from '../TextField';
import { withFormContext } from '../../hoc/withFormContext';
import { InteractiveList, InteractiveListDirection, } from '../InteractiveList';
const AutocompleteWrapper = styled.div `
  position: relative;
  width: 100%;
`;
const StyledInteractiveList = styled(InteractiveList) `
  position: static;
`;
const StyledAutosuggestWrapper = styled.ul(themed(({ direction, theme: { ui1, ui4 } }) => css `
      list-style: none;
      width: 100%;
      box-sizing: border-box;
      box-shadow: none;
      margin: 0;
      padding: 0;
      background: ${ui1};
      border: 1px solid ${ui4};
      ${direction === InteractiveListDirection.normal
    ? 'border-top-color: transparent'
    : 'border-bottom-color: transparent'};
      max-height: 50vh;
      position: absolute;
      top: ${direction === InteractiveListDirection.normal ? '100%' : '0px'};
      transform: translateY(${direction === InteractiveListDirection.normal ? 0 : -100}%);
      overflow-y: auto;
      z-index: 100;
    `));
function defaultSuggestionRenderer(suggestion) {
    const value = String(suggestion);
    return {
        content: value,
        key: value,
    };
}
function defaultInputRenderer(props) {
    return React.createElement(TextField, Object.assign({}, props));
}
const NotOpenComponent = React.createElement(React.Fragment, null);
const AutosuggestWrapper = Object.assign(((_a) => {
    var { border: _0, open } = _a, props = __rest(_a, ["border", "open"]);
    return open ? React.createElement(StyledAutosuggestWrapper, Object.assign({}, props)) : NotOpenComponent;
}), { inner: {
        get StyledAutosuggestWrapper() { return StyledAutosuggestWrapper; }
    } });
AutosuggestWrapper.displayName = 'AutosuggestWrapper';
class AutocompleteInt extends React.Component {
    constructor(props) {
        super(props);
        this.handleKeyDown = (e) => {
            const { keyCode } = e;
            switch (keyCode) {
                case 40 /* down */:
                case 38 /* up */:
                    e.preventDefault();
                    const { open } = this.state;
                    open &&
                        this.setState(() => ({
                            listFocus: true,
                            focus: false,
                        }));
                    break;
            }
        };
        this.handleListChange = (e) => {
            const { suggestions = [] } = this.props;
            const index = e.value[0];
            const suggestion = suggestions[index];
            this.handle(suggestion);
        };
        this.show = () => {
            this.setState({ open: true });
        };
        this.hide = () => {
            this.setState(() => ({ open: false }), this.props.onBlur);
        };
        this.handleFocus = () => {
            const { onFocus } = this.props;
            cancelAnimationFrame(this.delayedBlur);
            this.show();
            this.setState(() => ({ focus: true, listFocus: false }));
            typeof onFocus === 'function' && onFocus();
        };
        this.handleBlur = () => {
            cancelAnimationFrame(this.delayedBlur);
            this.delayedBlur = requestAnimationFrame(() => {
                this.setState(() => ({
                    focus: false,
                    listFocus: false,
                }), this.hide);
            });
        };
        this.changed = (e) => {
            this.updateValue(e.value);
        };
        this.setNode = (node) => {
            this._element = node;
            const { inputRef } = this.props;
            typeof inputRef === 'function' && inputRef(node);
        };
        this.state = {
            controlled: props.value !== undefined,
            value: props.value || props.defaultValue || '',
            open: false,
            listFocus: false,
            focus: false,
            error: props.error,
        };
    }
    UNSAFE_componentWillReceiveProps({ value = '', error }) {
        if (this.state.controlled) {
            this.setState({ value });
        }
        this.setState({ error });
    }
    componentDidMount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.subscribe(this);
        }
    }
    componentWillUnmount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    }
    updateValue(value, suggestionSelected = false) {
        const { onChange, name = '', form } = this.props;
        if (!this.state.controlled) {
            form ? form.change({ name, value }) : this.setState({ value });
        }
        suggestionSelected ? this.hide() : this.show();
        typeof onChange === 'function' && onChange({ value });
    }
    handle(suggestion) {
        const { getSuggestionValue, onSuggestionSelected } = this.props;
        if (typeof getSuggestionValue === 'function') {
            const value = getSuggestionValue(suggestion);
            this.updateValue(value, true);
        }
        else if (typeof suggestion === 'string') {
            this.updateValue(suggestion, true);
        }
        typeof onSuggestionSelected === 'function' && onSuggestionSelected({ value: suggestion });
    }
    render() {
        const _a = this.props, { suggestions = [], noSuggestionsMessage, renderSuggestion = defaultSuggestionRenderer, inputRenderer = defaultInputRenderer, getSuggestionValue: _1, onChange: _2, children: _3, onBlur: _4, onFocus: _5, defaultValue: _6, inputRef: _7, onSuggestionSelected: _8, info } = _a, props = __rest(_a, ["suggestions", "noSuggestionsMessage", "renderSuggestion", "inputRenderer", "getSuggestionValue", "onChange", "children", "onBlur", "onFocus", "defaultValue", "inputRef", "onSuggestionSelected", "info"]);
        const { open, listFocus, value, error } = this.state;
        const isListOpen = open && (!!suggestions.length || !!noSuggestionsMessage);
        return (React.createElement(AutocompleteWrapper, { onKeyDown: this.handleKeyDown, onFocus: this.handleFocus, onBlur: this.handleBlur },
            inputRenderer(Object.assign({}, props, { clearable: true, info: isListOpen ? undefined : info, onChange: this.changed, inputRef: this.setNode, value,
                error })),
            React.createElement(StyledInteractiveList, { data: suggestions.length ? suggestions.map(renderSuggestion) : [{ key: 'default', content: noSuggestionsMessage }], disabled: suggestions.length === 0, customWrapper: AutosuggestWrapper, focus: listFocus, onChange: this.handleListChange, autoPosition: true, open: isListOpen }),
            isListOpen && info && React.createElement("div", null, info)));
    }
}
AutocompleteInt.inner = {
    get AutocompleteWrapper() { return AutocompleteWrapper; },
    get StyledInteractiveList() { return StyledInteractiveList; }
};
/**
 * Extends a TextField with autocompletion capabilities.
 */
export const Autocomplete = withFormContext(AutocompleteInt);
Autocomplete.displayName = 'Autocomplete';
//# sourceMappingURL=data:application/json;base64,