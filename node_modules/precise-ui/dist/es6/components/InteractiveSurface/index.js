var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { trackMouse, trackTouch } from '../../utils/interactivity';
const Container = styled.div `
  position: relative;
  touch-action: ${props => (props.disabled ? 'auto' : 'none')};
  user-select: ${props => (props.disabled ? 'auto' : 'none')};
`;
/**
 * The interactive surface provides a component that reacts on touch (or click) interactivity.
 */
export class InteractiveSurface extends React.Component {
    constructor() {
        super(...arguments);
        this.mounted = false;
        this.moved = false;
        this.updateValue = (x, y, active, rect, moved) => {
            let canceled = true;
            if (this.mounted) {
                const { onChange } = this.props;
                this.moved = this.moved || moved;
                if (typeof onChange === 'function') {
                    onChange({
                        x,
                        y,
                        moved: this.moved,
                        active,
                        rect,
                        release() {
                            canceled = false;
                        },
                    });
                }
            }
            return canceled;
        };
        this.changeValue = (e) => {
            const { disabled } = this.props;
            this.moved = false;
            if (!disabled) {
                trackMouse(e, this.updateValue);
            }
        };
        this.preventValue = (e) => {
            const { disabled, opaque } = this.props;
            if (!disabled && !opaque && this.moved) {
                e.preventDefault();
                e.stopPropagation();
            }
        };
        this.changeTouchValue = (e) => {
            const { disabled } = this.props;
            this.moved = false;
            if (!disabled) {
                trackTouch(e, this.updateValue);
            }
        };
    }
    UNSAFE_componentWillMount() {
        this.mounted = true;
    }
    componentWillUnmount() {
        this.mounted = false;
    }
    render() {
        const _a = this.props, { children, disabled, onChange: _0, opaque: _1 } = _a, props = __rest(_a, ["children", "disabled", "onChange", "opaque"]);
        return (React.createElement(Container, Object.assign({}, props, { onMouseDownCapture: this.changeValue, onClickCapture: this.preventValue, onTouchStartCapture: this.changeTouchValue }), children));
    }
}
InteractiveSurface.inner = {
    get Container() { return Container; }
};
//# sourceMappingURL=data:application/json;base64,