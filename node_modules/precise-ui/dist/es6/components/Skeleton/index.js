import * as React from 'react';
import styled, { keyframes, themed } from '../../utils/styled';
const defaultBaseColor = themed(({ theme }) => theme.ui3);
const defaultHighlightColor = themed(({ theme }) => theme.ui2);
const shine = keyframes `
  from {
    background-position: -200px;
  }
  to {
    background-position: 130%;
  }
`;
const Span = styled.span `
  background-color: ${defaultBaseColor};
  background-image: linear-gradient(90deg, ${defaultBaseColor}, ${defaultHighlightColor}, ${defaultBaseColor});
  background-size: 60px 100%;
  background-repeat: no-repeat;
  display: inline-block;
  line-height: 1;
`;
const randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
/**
 * The `Sekeleton` component displays a low fidelity UI into which information will be gradually loaded.
 */
export const Skeleton = props => {
    const { count = 1, duration = 1.2, width = '100%', height = '100%', isCircle, isText, isPulsing = true } = props;
    const skeletons = [];
    for (let i = 0; i < count; i++) {
        const StyledSpan = styled(Span) `
      animation: ${shine} ${duration}s infinite linear ${!isPulsing ? 'paused' : 'running'};

      ${count > 1 && isText
            ? { width: `${randomInt(80, 100)}%` }
            : { width: typeof width === 'number' ? `${width}px` : width }};

      height: ${typeof height === 'number' ? `${height}px` : height};

      ${height &&
            width &&
            isCircle && {
            borderRadius: '50%',
        }};
    `;
        skeletons.push(React.createElement(StyledSpan, Object.assign({ key: i }, props), "\u200C"));
    }
    return React.createElement(React.Fragment, null, skeletons);
};
Skeleton.displayName = 'Skeleton';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Ta2VsZXRvbi9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQU8sTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFxQ3BFLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFELE1BQU0scUJBQXFCLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9ELE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQzs7Ozs7OztDQU92QixDQUFDO0FBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztzQkFDSCxnQkFBZ0I7NkNBQ08sZ0JBQWdCLEtBQUsscUJBQXFCLEtBQUssZ0JBQWdCOzs7OztDQUszRyxDQUFDO0FBQ0YsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFXLEVBQUUsR0FBVyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDbEc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQTRCLEtBQUssQ0FBQyxFQUFFO0lBQ3JELE1BQU0sRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLFFBQVEsR0FBRyxHQUFHLEVBQUUsS0FBSyxHQUFHLE1BQU0sRUFBRSxNQUFNLEdBQUcsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztJQUNqSCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM1QixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7bUJBQ3JCLEtBQUssSUFBSSxRQUFRLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTOztRQUVsRixLQUFLLEdBQUcsQ0FBQyxJQUFJLE1BQU07WUFDZixDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxTQUFTLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDckMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFOztnQkFFekQsT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNOztRQUUzRCxNQUFNO1lBQ0YsS0FBSztZQUNMLFFBQVEsSUFBSTtZQUNaLFlBQVksRUFBRSxLQUFLO1NBQ3RCO0tBQ0osQ0FBQztRQUNFLFNBQVMsQ0FBQyxJQUFJLENBQUMsb0JBQUMsVUFBVSxrQkFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFNLEtBQUssWUFFakMsQ0FBQyxDQUFDO0tBQ2hCO0lBQ0QsT0FBTywwQ0FBRyxTQUFTLENBQUksQ0FBQztBQUM1QixDQUFDLENBQUM7QUFDRixRQUFRLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzLCBjc3MsIHRoZW1lZCB9IGZyb20gJy4uLy4uL3V0aWxzL3N0eWxlZCc7XG5pbXBvcnQgeyBTdGFuZGFyZFByb3BzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmV4cG9ydCBpbnRlcmZhY2UgU2tlbGV0b25Qcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgc2hpbmUgYW5pbWF0aW9uLlxuICAgICAqIEBkZWZhdWx0IDEuMlxuICAgICAqL1xuICAgIGR1cmF0aW9uPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgc2tlbGV0b24sIGl0IGNvdWxkIGJlIGEgbnVtYmVyICh0cmFuc2Zvcm1lZCBpbnRvIHB4KSBvciBhIHN0cmluZyAoZS5nLjogJzc1JScpXG4gICAgICogQGRlZmF1bHQgJzEwMCUnXG4gICAgICovXG4gICAgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGhlaWdodCBvZiB0aGUgc2tlbGV0b24sIGl0IGNvdWxkIGJlIGEgbnVtYmVyICh0cmFuc2Zvcm1lZCBpbnRvIHB4KSBvciBhIHN0cmluZyAoZS5nLjogJzIwcHgnKVxuICAgICAqIEBkZWZhdWx0ICcxMDAlJ1xuICAgICAqL1xuICAgIGhlaWdodD86IG51bWJlciB8IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBza2VsZXRvbiBzaG91bGQgYmUgYSBjaXJjbGUgKGUuZy46IGF2YXRhcikuIFRoZSBmaW5hbCBzaGFwZSB3aWxsIGRlcGVuZCBvbiB0aGUgYHdpZHRoYCBhbmQgYGhlaWdodGAgdmFsdWVzLlxuICAgICAqL1xuICAgIGlzQ2lyY2xlPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHNrZWxldG9ucyB5b3Ugd2FudCB0byBkaXNwbGF5LlxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICBjb3VudD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBSYW5kb21seSBzaW11bGF0ZXMgZGlmZmVyZW50IHRleHQgbGluZSBsZW5ndGhzLiBUaGlzIHdpbGwgd29yayBvbmx5IHdoZW4gYGNvdW50YCBpcyBncmVhdGVyIHRoYXQgMS5cbiAgICAgKi9cbiAgICBpc1RleHQ/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgcHVsc2luZyBhbmltYXRpb24gaXMgYWN0aXZlIG9yIG5vdC4gQ291bGQgYmUgdXNlIHRvIHN0b3AgdGhlIGFuaW1hdGlvbiBpbiBjYXNlIHlvdXIgY29tcG9uZW50IGhhcyBzb21lIGtpbmQgb2YgZXJyb3Igb3IganVzdCB0byBoYXZlIGEgbW9yZSBzaW1wbGUgYFNrZWxldG9uYCBjb21wb25lbnQuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIGlzUHVsc2luZz86IGJvb2xlYW47XG59XG5jb25zdCBkZWZhdWx0QmFzZUNvbG9yID0gdGhlbWVkKCh7IHRoZW1lIH0pID0+IHRoZW1lLnVpMyk7XG5jb25zdCBkZWZhdWx0SGlnaGxpZ2h0Q29sb3IgPSB0aGVtZWQoKHsgdGhlbWUgfSkgPT4gdGhlbWUudWkyKTtcbmNvbnN0IHNoaW5lID0ga2V5ZnJhbWVzIGBcbiAgZnJvbSB7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4O1xuICB9XG4gIHRvIHtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAxMzAlO1xuICB9XG5gO1xuY29uc3QgU3BhbiA9IHN0eWxlZC5zcGFuIGBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtkZWZhdWx0QmFzZUNvbG9yfTtcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDkwZGVnLCAke2RlZmF1bHRCYXNlQ29sb3J9LCAke2RlZmF1bHRIaWdobGlnaHRDb2xvcn0sICR7ZGVmYXVsdEJhc2VDb2xvcn0pO1xuICBiYWNrZ3JvdW5kLXNpemU6IDYwcHggMTAwJTtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBsaW5lLWhlaWdodDogMTtcbmA7XG5jb25zdCByYW5kb21JbnQgPSAobWluOiBudW1iZXIsIG1heDogbnVtYmVyKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xuLyoqXG4gKiBUaGUgYFNla2VsZXRvbmAgY29tcG9uZW50IGRpc3BsYXlzIGEgbG93IGZpZGVsaXR5IFVJIGludG8gd2hpY2ggaW5mb3JtYXRpb24gd2lsbCBiZSBncmFkdWFsbHkgbG9hZGVkLlxuICovXG5leHBvcnQgY29uc3QgU2tlbGV0b246IFJlYWN0LkZDPFNrZWxldG9uUHJvcHM+ID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHsgY291bnQgPSAxLCBkdXJhdGlvbiA9IDEuMiwgd2lkdGggPSAnMTAwJScsIGhlaWdodCA9ICcxMDAlJywgaXNDaXJjbGUsIGlzVGV4dCwgaXNQdWxzaW5nID0gdHJ1ZSB9ID0gcHJvcHM7XG4gICAgY29uc3Qgc2tlbGV0b25zID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IFN0eWxlZFNwYW4gPSBzdHlsZWQoU3BhbikgYFxuICAgICAgYW5pbWF0aW9uOiAke3NoaW5lfSAke2R1cmF0aW9ufXMgaW5maW5pdGUgbGluZWFyICR7IWlzUHVsc2luZyA/ICdwYXVzZWQnIDogJ3J1bm5pbmcnfTtcblxuICAgICAgJHtjb3VudCA+IDEgJiYgaXNUZXh0XG4gICAgICAgICAgICA/IHsgd2lkdGg6IGAke3JhbmRvbUludCg4MCwgMTAwKX0lYCB9XG4gICAgICAgICAgICA6IHsgd2lkdGg6IHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgPyBgJHt3aWR0aH1weGAgOiB3aWR0aCB9fTtcblxuICAgICAgaGVpZ2h0OiAke3R5cGVvZiBoZWlnaHQgPT09ICdudW1iZXInID8gYCR7aGVpZ2h0fXB4YCA6IGhlaWdodH07XG5cbiAgICAgICR7aGVpZ2h0ICYmXG4gICAgICAgICAgICB3aWR0aCAmJlxuICAgICAgICAgICAgaXNDaXJjbGUgJiYge1xuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgfX07XG4gICAgYDtcbiAgICAgICAgc2tlbGV0b25zLnB1c2goPFN0eWxlZFNwYW4ga2V5PXtpfSB7Li4ucHJvcHN9PlxuICAgICAgICAmenduajtcbiAgICAgIDwvU3R5bGVkU3Bhbj4pO1xuICAgIH1cbiAgICByZXR1cm4gPD57c2tlbGV0b25zfTwvPjtcbn07XG5Ta2VsZXRvbi5kaXNwbGF5TmFtZSA9ICdTa2VsZXRvbic7XG4iXX0=