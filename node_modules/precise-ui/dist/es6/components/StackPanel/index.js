var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
export var StackPanelDirection;
(function (StackPanelDirection) {
    StackPanelDirection["leftToRight"] = "left";
    StackPanelDirection["rightToLeft"] = "right";
    StackPanelDirection["topToBottom"] = "top";
    StackPanelDirection["bottomToTop"] = "bottom";
})(StackPanelDirection || (StackPanelDirection = {}));
const StackLayout = styled.div `
  display: flex;
  flex-direction: ${props => props.dir};
  flex-wrap: ${props => props.wrapping};
  justify-content: flex-start;
`;
function mapFlex(direction) {
    switch (direction) {
        case StackPanelDirection.rightToLeft:
            return 'row-reverse';
        case StackPanelDirection.topToBottom:
            return 'column';
        case StackPanelDirection.bottomToTop:
            return 'column-reverse';
    }
    return 'row';
}
/**
 * The stack panel displays a stack of children in a given direction.
 */
export const StackPanel = Object.assign(((_a) => {
    var { theme, direction, wrap, innerRef } = _a, props = __rest(_a, ["theme", "direction", "wrap", "innerRef"]);
    const wrapping = wrap ? 'wrap' : 'nowrap';
    const dir = mapFlex(direction);
    return React.createElement(StackLayout, Object.assign({ theme: theme, dir: dir, wrapping: wrapping, ref: innerRef }, props));
}), { inner: {
        get StackLayout() { return StackLayout; }
    } });
StackPanel.displayName = 'StackPanel';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9TdGFja1BhbmVsL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLE1BQU0sTUFBTSxvQkFBb0IsQ0FBQztBQUV4QyxNQUFNLENBQU4sSUFBWSxtQkFLWDtBQUxELFdBQVksbUJBQW1CO0lBQzNCLDJDQUFvQixDQUFBO0lBQ3BCLDRDQUFxQixDQUFBO0lBQ3JCLDBDQUFtQixDQUFBO0lBQ25CLDZDQUFzQixDQUFBO0FBQzFCLENBQUMsRUFMVyxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBSzlCO0FBMEJELE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQW1COztvQkFFN0IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRztlQUN2QixLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFROztDQUVyQyxDQUFDO0FBQ0YsU0FBUyxPQUFPLENBQUMsU0FBK0I7SUFDNUMsUUFBUSxTQUFTLEVBQUU7UUFDZixLQUFLLG1CQUFtQixDQUFDLFdBQVc7WUFDaEMsT0FBTyxhQUFhLENBQUM7UUFDekIsS0FBSyxtQkFBbUIsQ0FBQyxXQUFXO1lBQ2hDLE9BQU8sUUFBUSxDQUFDO1FBQ3BCLEtBQUssbUJBQW1CLENBQUMsV0FBVztZQUNoQyxPQUFPLGdCQUFnQixDQUFDO0tBQy9CO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUNEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDLEVBQThDLEVBQUUsRUFBRTtRQUFsRCxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFFBQVEsT0FBWSxFQUFWLDhEQUFRO0lBQ25GLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDMUMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9CLE9BQU8sb0JBQUMsV0FBVyxrQkFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxJQUFNLEtBQUssRUFBRyxDQUFDO0FBQ2hHLENBQUMsQ0FBZ0MsRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNwQyxJQUFJLFdBQVcsS0FBSyxPQUFPLFdBQWlDLENBQUMsQ0FBQyxDQUFDO0tBQ2xFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsVUFBVSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uLy4uL3V0aWxzL3N0eWxlZCc7XG5pbXBvcnQgeyBTdGFuZGFyZFByb3BzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmV4cG9ydCBlbnVtIFN0YWNrUGFuZWxEaXJlY3Rpb24ge1xuICAgIGxlZnRUb1JpZ2h0ID0gJ2xlZnQnLFxuICAgIHJpZ2h0VG9MZWZ0ID0gJ3JpZ2h0JyxcbiAgICB0b3BUb0JvdHRvbSA9ICd0b3AnLFxuICAgIGJvdHRvbVRvVG9wID0gJ2JvdHRvbSdcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU3RhY2tQYW5lbFByb3BzIGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcGFuZWwncyBjaGlsZHJlbi5cbiAgICAgKi9cbiAgICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHBhbmVsJ3MgaXRlbXMuIEJ5IGRlZmF1bHQgbGVmdCB0byByaWdodC5cbiAgICAgKiBAZGVmYXVsdCBsZWZ0XG4gICAgICovXG4gICAgZGlyZWN0aW9uPzogU3RhY2tQYW5lbERpcmVjdGlvbjtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBzdGFjayBzaG91bGQgYmUgd3JhcHBlZC4gQnkgZGVmYXVsdCBpdCBpcyBub3Qgd3JhcHBlZC5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHdyYXA/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJlZmVyZW5jZSB0byB0aGUgdW5kZXJseWluZyBIVE1MIERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGlubmVyUmVmPyhpbnN0YW5jZTogSFRNTEVsZW1lbnQgfCBudWxsKTogdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU3RhY2tMYXlvdXRQcm9wcyB7XG4gICAgd3JhcHBpbmc6IHN0cmluZztcbiAgICBkaXI6IHN0cmluZztcbiAgICB0aGVtZTogYW55O1xufVxuY29uc3QgU3RhY2tMYXlvdXQgPSBzdHlsZWQuZGl2PFN0YWNrTGF5b3V0UHJvcHM+IGBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246ICR7cHJvcHMgPT4gcHJvcHMuZGlyfTtcbiAgZmxleC13cmFwOiAke3Byb3BzID0+IHByb3BzLndyYXBwaW5nfTtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuYDtcbmZ1bmN0aW9uIG1hcEZsZXgoZGlyZWN0aW9uPzogU3RhY2tQYW5lbERpcmVjdGlvbikge1xuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgIGNhc2UgU3RhY2tQYW5lbERpcmVjdGlvbi5yaWdodFRvTGVmdDpcbiAgICAgICAgICAgIHJldHVybiAncm93LXJldmVyc2UnO1xuICAgICAgICBjYXNlIFN0YWNrUGFuZWxEaXJlY3Rpb24udG9wVG9Cb3R0b206XG4gICAgICAgICAgICByZXR1cm4gJ2NvbHVtbic7XG4gICAgICAgIGNhc2UgU3RhY2tQYW5lbERpcmVjdGlvbi5ib3R0b21Ub1RvcDpcbiAgICAgICAgICAgIHJldHVybiAnY29sdW1uLXJldmVyc2UnO1xuICAgIH1cbiAgICByZXR1cm4gJ3Jvdyc7XG59XG4vKipcbiAqIFRoZSBzdGFjayBwYW5lbCBkaXNwbGF5cyBhIHN0YWNrIG9mIGNoaWxkcmVuIGluIGEgZ2l2ZW4gZGlyZWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgU3RhY2tQYW5lbCA9IE9iamVjdC5hc3NpZ24oKCgoeyB0aGVtZSwgZGlyZWN0aW9uLCB3cmFwLCBpbm5lclJlZiwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIGNvbnN0IHdyYXBwaW5nID0gd3JhcCA/ICd3cmFwJyA6ICdub3dyYXAnO1xuICAgIGNvbnN0IGRpciA9IG1hcEZsZXgoZGlyZWN0aW9uKTtcbiAgICByZXR1cm4gPFN0YWNrTGF5b3V0IHRoZW1lPXt0aGVtZX0gZGlyPXtkaXJ9IHdyYXBwaW5nPXt3cmFwcGluZ30gcmVmPXtpbm5lclJlZn0gey4uLnByb3BzfS8+O1xufSkgYXMgUmVhY3QuU0ZDPFN0YWNrUGFuZWxQcm9wcz4pLCB7IGlubmVyOiB7XG4gICAgICAgIGdldCBTdGFja0xheW91dCgpIHsgcmV0dXJuIFN0YWNrTGF5b3V0IGFzIHR5cGVvZiBTdGFja0xheW91dDsgfVxuICAgIH0gfSk7XG5TdGFja1BhbmVsLmRpc3BsYXlOYW1lID0gJ1N0YWNrUGFuZWwnO1xuIl19