var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { withFormContext } from '../../hoc';
import { distance } from '../../distance';
import { IndicatorKnob } from '../IndicatorKnob';
import { getFontStyle } from '../../textStyles';
import { InputNotification } from '../InputNotification';
import { PaddedContainer } from '../PaddedContainer';
const transitionDuration = '0.3s';
const transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';
const ToggleContainer = styled('div') `
  ${getFontStyle({ size: 'medium' })};
  position: relative;
  display: inline-block;
  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};
  color: ${themed(props => props.theme.text1)};
`;
const ToggleBoxWrapper = styled.div `
  display: inline-block;
  vertical-align: middle;
  padding: ${distance.xsmall} 0;
`;
const StyledInput = styled.input `
  opacity: 0;
  position: absolute;
  top: 0;
  left: 0;
`;
const ToggleBox = styled('div') `
  outline: 0;
  display: block;
  width: ${distance.xxlarge};
  height: ${distance.medium};
  border-radius: ${distance.small};
  position: relative;
  background: ${themed(props => props.theme.ui4)};
  transition: all ${transitionDuration} ${transitionEase};
`;
const StyledLabel = styled.label `
  display: block;
  margin-bottom: ${distance.small};
`;
const StyledDesc = styled.span `
  display: inline-block;
  margin-left: ${distance.small};
  vertical-align: middle;
`;
const IndicatorKnobStyle = {
    transform: 'translate(0, -50%)',
};
class ToggleInt extends React.PureComponent {
    constructor(props) {
        super(props);
        this.handleOnClick = (e) => {
            this.changeValue();
            e.preventDefault();
        };
        this.handleCheckboxChange = () => {
            this.changeValue();
        };
        this.handleCheckboxFocus = () => {
            this.setState({
                focused: true,
            });
        };
        this.handleCheckboxBlur = () => {
            this.setState({
                focused: false,
            });
        };
        this.state = {
            controlled: typeof props.value !== 'undefined',
            value: props.value || props.defaultValue || false,
            focused: false,
            error: props.error,
        };
    }
    componentDidMount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.subscribe(this);
        }
    }
    componentWillUnmount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    }
    UNSAFE_componentWillReceiveProps({ value = false, error }) {
        if (this.state.controlled) {
            this.setState({ value });
        }
        this.setState({ error });
    }
    changeValue() {
        const { onChange, disabled, form, name = '' } = this.props;
        if (!disabled) {
            const { controlled, value } = this.state;
            const status = !value;
            if (!controlled) {
                if (form) {
                    form.change({
                        name,
                        value: status,
                    });
                }
                else {
                    this.setState({
                        value: status,
                    });
                }
            }
            if (typeof onChange === 'function') {
                onChange({
                    value: status,
                });
            }
        }
    }
    render() {
        const _a = this.props, { children, disabled, theme, value: _0, defaultValue: _1, onChange: _2, onInput: _3, info, label } = _a, props = __rest(_a, ["children", "disabled", "theme", "value", "defaultValue", "onChange", "onInput", "info", "label"]);
        const { value, focused, error } = this.state;
        const containerProps = Object.assign({}, props, { theme, onClick: this.handleOnClick, disabled });
        const boxProps = {
            checked: value,
            theme,
        };
        return (React.createElement(ToggleContainer, Object.assign({}, containerProps),
            label && React.createElement(StyledLabel, { theme: theme }, label),
            React.createElement(ToggleBoxWrapper, null,
                React.createElement(StyledInput, { checked: value, onChange: this.handleCheckboxChange, onFocus: this.handleCheckboxFocus, onBlur: this.handleCheckboxBlur }),
                React.createElement(ToggleBox, Object.assign({}, boxProps),
                    React.createElement(IndicatorKnob, { style: IndicatorKnobStyle, x: value ? 0.5 : 0, active: value, focus: focused, disabled: containerProps.disabled, animate: true }))),
            children && React.createElement(StyledDesc, null, children),
            (error || info) && (React.createElement(PaddedContainer, { top: "xsmall", bottom: "xsmall" },
                React.createElement(InputNotification, { error: error, info: info })))));
    }
}
ToggleInt.inner = {
    get ToggleContainer() { return ToggleContainer; },
    get StyledLabel() { return StyledLabel; },
    get ToggleBoxWrapper() { return ToggleBoxWrapper; },
    get StyledInput() { return StyledInput; },
    get ToggleBox() { return ToggleBox; },
    get IndicatorKnob() { return IndicatorKnob; },
    get StyledDesc() { return StyledDesc; },
    get PaddedContainer() { return PaddedContainer; },
    get InputNotification() { return InputNotification; }
};
/**
 * The toggle component displays a button to toggle a checked state.
 */
export const Toggle = withFormContext(ToggleInt);
Toggle.displayName = 'Toggle';
//# sourceMappingURL=data:application/json;base64,