var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { distance } from '../../distance';
import { getFontStyle } from '../../textStyles';
const BasicBadge = styled.div `
  position: relative;
  border-radius: 0.25em;
  text-align: center;
`;
const FilledBadge = styled(BasicBadge) `
  color: ${themed(({ theme }) => theme.badgeBackground)};
  background: ${themed(({ theme }) => theme.badgeColor)};
`;
const NormalBadge = styled(BasicBadge) `
  ${getFontStyle({ size: 'xSmall' })}
  display: inline-block;
  color: ${themed(({ theme }) => theme.badgeColor)};
  background: ${themed(({ theme }) => theme.badgeBackground)};
  min-width: 2em;
  padding: 0 ${distance.xsmall};
  border: solid 1px ${themed(({ theme }) => theme.badgeColor)};
`;
/**
 * The badge component is a simple informative display.
 */
export const Badge = Object.assign(((_a) => {
    var { fill = false } = _a, props = __rest(_a, ["fill"]);
    return fill ? React.createElement(FilledBadge, Object.assign({}, props)) : React.createElement(NormalBadge, Object.assign({}, props));
}), { inner: {
        get FilledBadge() { return FilledBadge; },
        get NormalBadge() { return NormalBadge; }
    } });
Badge.displayName = 'Badge';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9CYWRnZS9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBYWhELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7Ozs7Q0FJN0IsQ0FBQztBQUNGLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztXQUM1QixNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDO2dCQUN2QyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO0NBQ3RELENBQUM7QUFDRixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkMsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDOztXQUV6QixNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO2dCQUNsQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDOztlQUU3QyxRQUFRLENBQUMsTUFBTTtzQkFDUixNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO0NBQzVELENBQUM7QUFDRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLENBQUMsQ0FBQyxFQUEwQixFQUFFLEVBQUU7UUFBOUIsRUFBRSxJQUFJLEdBQUcsS0FBSyxPQUFZLEVBQVYsNEJBQVE7SUFBTyxPQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsb0JBQUMsV0FBVyxvQkFBSyxLQUFLLEVBQUcsQ0FBQyxDQUFDLENBQUMsb0JBQUMsV0FBVyxvQkFBSyxLQUFLLEVBQUcsQ0FBQTtDQUFBLENBQTJCLEVBQUUsRUFBRSxLQUFLLEVBQUU7UUFDL0osSUFBSSxXQUFXLEtBQUssT0FBTyxXQUFpQyxDQUFDLENBQUMsQ0FBQztRQUMvRCxJQUFJLFdBQVcsS0FBSyxPQUFPLFdBQWlDLENBQUMsQ0FBQyxDQUFDO0tBQ2xFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsS0FBSyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7IHRoZW1lZCB9IGZyb20gJy4uLy4uL3V0aWxzL3N0eWxlZCc7XG5pbXBvcnQgeyBTdGFuZGFyZFByb3BzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IGRpc3RhbmNlIH0gZnJvbSAnLi4vLi4vZGlzdGFuY2UnO1xuaW1wb3J0IHsgZ2V0Rm9udFN0eWxlIH0gZnJvbSAnLi4vLi4vdGV4dFN0eWxlcyc7XG5leHBvcnQgaW50ZXJmYWNlIEJhZGdlUHJvcHMgZXh0ZW5kcyBTdGFuZGFyZFByb3BzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29udGVudCBvZiB0aGUgYmFkZ2UgdG8gZGlzcGxheS5cbiAgICAgKi9cbiAgICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtb2RlIHRvIGEgZmlsbGluZyBiYWRnZS4gVXNlZnVsIHRvZ2V0aGVyIHdpdGggdGhlIGBBdmF0YXJgLlxuICAgICAqIEJ5IGRlZmF1bHQgZmFsc2UuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBmaWxsPzogYm9vbGVhbjtcbn1cbmNvbnN0IEJhc2ljQmFkZ2UgPSBzdHlsZWQuZGl2IGBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXItcmFkaXVzOiAwLjI1ZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbmA7XG5jb25zdCBGaWxsZWRCYWRnZSA9IHN0eWxlZChCYXNpY0JhZGdlKSBgXG4gIGNvbG9yOiAke3RoZW1lZCgoeyB0aGVtZSB9KSA9PiB0aGVtZS5iYWRnZUJhY2tncm91bmQpfTtcbiAgYmFja2dyb3VuZDogJHt0aGVtZWQoKHsgdGhlbWUgfSkgPT4gdGhlbWUuYmFkZ2VDb2xvcil9O1xuYDtcbmNvbnN0IE5vcm1hbEJhZGdlID0gc3R5bGVkKEJhc2ljQmFkZ2UpIGBcbiAgJHtnZXRGb250U3R5bGUoeyBzaXplOiAneFNtYWxsJyB9KX1cbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBjb2xvcjogJHt0aGVtZWQoKHsgdGhlbWUgfSkgPT4gdGhlbWUuYmFkZ2VDb2xvcil9O1xuICBiYWNrZ3JvdW5kOiAke3RoZW1lZCgoeyB0aGVtZSB9KSA9PiB0aGVtZS5iYWRnZUJhY2tncm91bmQpfTtcbiAgbWluLXdpZHRoOiAyZW07XG4gIHBhZGRpbmc6IDAgJHtkaXN0YW5jZS54c21hbGx9O1xuICBib3JkZXI6IHNvbGlkIDFweCAke3RoZW1lZCgoeyB0aGVtZSB9KSA9PiB0aGVtZS5iYWRnZUNvbG9yKX07XG5gO1xuLyoqXG4gKiBUaGUgYmFkZ2UgY29tcG9uZW50IGlzIGEgc2ltcGxlIGluZm9ybWF0aXZlIGRpc3BsYXkuXG4gKi9cbmV4cG9ydCBjb25zdCBCYWRnZSA9IE9iamVjdC5hc3NpZ24oKCgoeyBmaWxsID0gZmFsc2UsIC4uLnByb3BzIH0pID0+IGZpbGwgPyA8RmlsbGVkQmFkZ2Ugey4uLnByb3BzfS8+IDogPE5vcm1hbEJhZGdlIHsuLi5wcm9wc30vPikgYXMgUmVhY3QuU0ZDPEJhZGdlUHJvcHM+KSwgeyBpbm5lcjoge1xuICAgICAgICBnZXQgRmlsbGVkQmFkZ2UoKSB7IHJldHVybiBGaWxsZWRCYWRnZSBhcyB0eXBlb2YgRmlsbGVkQmFkZ2U7IH0sXG4gICAgICAgIGdldCBOb3JtYWxCYWRnZSgpIHsgcmV0dXJuIE5vcm1hbEJhZGdlIGFzIHR5cGVvZiBOb3JtYWxCYWRnZTsgfVxuICAgIH0gfSk7XG5CYWRnZS5kaXNwbGF5TmFtZSA9ICdCYWRnZSc7XG4iXX0=