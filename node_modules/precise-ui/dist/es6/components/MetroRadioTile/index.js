var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as colors from '../../colors';
import styled from '../../utils/styled';
import { RadioButton } from '../RadioButton';
import { StyledTileIcon } from '../../quarks/StyledTileIcon';
import { getFontStyle } from '../../textStyles';
const Tile = styled(RadioButton) `
  cursor: pointer;
  position: relative;
  display: inline-block;
  width: 96px;
  height: 96px;
  padding: 8px;
  overflow: hidden;
  margin: 10px !important;
  user-select: none;
  color: ${colors.black};
  background: ${colors.grey7};
  ${props => (props.checked ? `outline: ${colors.cyan} solid 4px;` : '')};

  &:hover {
    ${props => (!props.checked ? `outline: rgba(29, 29, 29, 0.1) solid 4px;` : '')};
  }
`;
const TileTitle = styled.span `
  ${getFontStyle({ size: 'small', weight: 'medium' })}

  position: absolute;
  bottom: 8px;
  right: 8px;

  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  z-index: 2;
`;
export class MetroRadioTile extends React.Component {
    constructor(props) {
        super(props);
        this.change = (e) => {
            const { onChange } = this.props;
            if (!this.state.controlled) {
                this.setState({
                    checked: e.value,
                });
            }
            if (typeof onChange === 'function') {
                onChange(e);
            }
        };
        this.state = {
            controlled: props.value !== undefined,
            checked: props.value || props.defaultValue || false,
        };
    }
    UNSAFE_componentWillReceiveProps(props) {
        if (this.state.controlled) {
            this.setState({
                checked: props.value || false,
            });
        }
    }
    render() {
        const _a = this.props, { image, title } = _a, props = __rest(_a, ["image", "title"]);
        const { checked } = this.state;
        return (React.createElement(Tile, Object.assign({ onChange: this.change, checked: checked }, props),
            image && React.createElement(StyledTileIcon, { src: image, width: "50px", height: "50px" }),
            title && React.createElement(TileTitle, null, title)));
    }
}
MetroRadioTile.inner = {
    get Tile() { return Tile; },
    get StyledTileIcon() { return StyledTileIcon; },
    get TileTitle() { return TileTitle; }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXRyb1JhZGlvVGlsZS9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxLQUFLLE1BQU0sTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxNQUFNLE1BQU0sb0JBQW9CLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBNEMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FFN0I7Ozs7Ozs7Ozs7V0FVUSxNQUFNLENBQUMsS0FBSztnQkFDUCxNQUFNLENBQUMsS0FBSztJQUN4QixLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWSxNQUFNLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7O01BR2xFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLDJDQUEyQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7O0NBRWpGLENBQUM7QUFDRixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzFCLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDOzs7Ozs7Ozs7O0NBVXBELENBQUM7QUFlRixNQUFNLE9BQU8sY0FBZSxTQUFRLEtBQUssQ0FBQyxTQUFtRDtJQUN6RixZQUFZLEtBQTBCO1FBQ2xDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQWFULFdBQU0sR0FBRyxDQUFDLENBQXlCLEVBQUUsRUFBRTtZQUMzQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUM7b0JBQ1YsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLO2lCQUNuQixDQUFDLENBQUM7YUFDTjtZQUNELElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFO2dCQUNoQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDZjtRQUNMLENBQUMsQ0FBQztRQXRCRSxJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1QsVUFBVSxFQUFFLEtBQUssQ0FBQyxLQUFLLEtBQUssU0FBUztZQUNyQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsWUFBWSxJQUFJLEtBQUs7U0FDdEQsQ0FBQztJQUNOLENBQUM7SUFDRCxnQ0FBZ0MsQ0FBQyxLQUEwQjtRQUN2RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ1YsT0FBTyxFQUFFLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSzthQUNoQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFZRCxNQUFNO1FBQ0YsTUFBTSxlQUF1QyxFQUF2QyxFQUFFLEtBQUssRUFBRSxLQUFLLE9BQXlCLEVBQXZCLHNDQUF1QixDQUFDO1FBQzlDLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxvQkFBQyxJQUFJLGtCQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLElBQU0sS0FBSztZQUMvRCxLQUFLLElBQUksb0JBQUMsY0FBYyxJQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsTUFBTSxHQUFFO1lBQ2pFLEtBQUssSUFBSSxvQkFBQyxTQUFTLFFBQUUsS0FBSyxDQUFhLENBQ25DLENBQUMsQ0FBQztJQUNYLENBQUM7O0FBQ00sb0JBQUssR0FBRztJQUNYLElBQUksSUFBSSxLQUFLLE9BQU8sSUFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDMUMsSUFBSSxjQUFjLEtBQUssT0FBTyxjQUF1QyxDQUFDLENBQUMsQ0FBQztJQUN4RSxJQUFJLFNBQVMsS0FBSyxPQUFPLFNBQTZCLENBQUMsQ0FBQyxDQUFDO0NBQzVELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnLi4vLi4vY29sb3JzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vLi4vdXRpbHMvc3R5bGVkJztcbmltcG9ydCB7IFJhZGlvQnV0dG9uLCBSYWRpb0J1dHRvbkNoYW5nZUV2ZW50LCBSYWRpb0J1dHRvblByb3BzIH0gZnJvbSAnLi4vUmFkaW9CdXR0b24nO1xuaW1wb3J0IHsgU3R5bGVkVGlsZUljb24gfSBmcm9tICcuLi8uLi9xdWFya3MvU3R5bGVkVGlsZUljb24nO1xuaW1wb3J0IHsgZ2V0Rm9udFN0eWxlIH0gZnJvbSAnLi4vLi4vdGV4dFN0eWxlcyc7XG5jb25zdCBUaWxlID0gc3R5bGVkKFJhZGlvQnV0dG9uKTx7XG4gICAgY2hlY2tlZDogYm9vbGVhbjtcbn0+IGBcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDk2cHg7XG4gIGhlaWdodDogOTZweDtcbiAgcGFkZGluZzogOHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW46IDEwcHggIWltcG9ydGFudDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGNvbG9yOiAke2NvbG9ycy5ibGFja307XG4gIGJhY2tncm91bmQ6ICR7Y29sb3JzLmdyZXk3fTtcbiAgJHtwcm9wcyA9PiAocHJvcHMuY2hlY2tlZCA/IGBvdXRsaW5lOiAke2NvbG9ycy5jeWFufSBzb2xpZCA0cHg7YCA6ICcnKX07XG5cbiAgJjpob3ZlciB7XG4gICAgJHtwcm9wcyA9PiAoIXByb3BzLmNoZWNrZWQgPyBgb3V0bGluZTogcmdiYSgyOSwgMjksIDI5LCAwLjEpIHNvbGlkIDRweDtgIDogJycpfTtcbiAgfVxuYDtcbmNvbnN0IFRpbGVUaXRsZSA9IHN0eWxlZC5zcGFuIGBcbiAgJHtnZXRGb250U3R5bGUoeyBzaXplOiAnc21hbGwnLCB3ZWlnaHQ6ICdtZWRpdW0nIH0pfVxuXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiA4cHg7XG4gIHJpZ2h0OiA4cHg7XG5cbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHotaW5kZXg6IDI7XG5gO1xuZXhwb3J0IGludGVyZmFjZSBNZXRyb1JhZGlvVGlsZVByb3BzIGV4dGVuZHMgUmFkaW9CdXR0b25Qcm9wcyB7XG4gICAgLyoqXG4gICAgICogVGhlIHNvdXJjZSBVUkwgb2YgYW4gaWNvbiwgaWYgdXNlZC4gVGhlIGljb24gaXMgc2NhbGVkIHRvIG1heC4gNTBweCBvZiB0aGUgdGlsZS5cbiAgICAgKi9cbiAgICBpbWFnZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdGl0bGUgb2YgdGhlIHRpbGUsIGlmIGFueXRoaW5nLlxuICAgICAqL1xuICAgIHRpdGxlPzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBNZXRyb1JhZGlvVGlsZVN0YXRlIHtcbiAgICBjaGVja2VkOiBib29sZWFuO1xuICAgIGNvbnRyb2xsZWQ6IGJvb2xlYW47XG59XG5leHBvcnQgY2xhc3MgTWV0cm9SYWRpb1RpbGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8TWV0cm9SYWRpb1RpbGVQcm9wcywgTWV0cm9SYWRpb1RpbGVTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBNZXRyb1JhZGlvVGlsZVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZWQ6IHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBjaGVja2VkOiBwcm9wcy52YWx1ZSB8fCBwcm9wcy5kZWZhdWx0VmFsdWUgfHwgZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzOiBNZXRyb1JhZGlvVGlsZVByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmNvbnRyb2xsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IHByb3BzLnZhbHVlIHx8IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBjaGFuZ2UgPSAoZTogUmFkaW9CdXR0b25DaGFuZ2VFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuY29udHJvbGxlZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY2hlY2tlZDogZS52YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb25DaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9uQ2hhbmdlKGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgaW1hZ2UsIHRpdGxlLCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBjaGVja2VkIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICByZXR1cm4gKDxUaWxlIG9uQ2hhbmdlPXt0aGlzLmNoYW5nZX0gY2hlY2tlZD17Y2hlY2tlZH0gey4uLnByb3BzfT5cbiAgICAgICAge2ltYWdlICYmIDxTdHlsZWRUaWxlSWNvbiBzcmM9e2ltYWdlfSB3aWR0aD1cIjUwcHhcIiBoZWlnaHQ9XCI1MHB4XCIvPn1cbiAgICAgICAge3RpdGxlICYmIDxUaWxlVGl0bGU+e3RpdGxlfTwvVGlsZVRpdGxlPn1cbiAgICAgIDwvVGlsZT4pO1xuICAgIH1cbiAgICBzdGF0aWMgaW5uZXIgPSB7XG4gICAgICAgIGdldCBUaWxlKCkgeyByZXR1cm4gVGlsZSBhcyB0eXBlb2YgVGlsZTsgfSxcbiAgICAgICAgZ2V0IFN0eWxlZFRpbGVJY29uKCkgeyByZXR1cm4gU3R5bGVkVGlsZUljb24gYXMgdHlwZW9mIFN0eWxlZFRpbGVJY29uOyB9LFxuICAgICAgICBnZXQgVGlsZVRpdGxlKCkgeyByZXR1cm4gVGlsZVRpdGxlIGFzIHR5cGVvZiBUaWxlVGl0bGU7IH1cbiAgICB9O1xufVxuIl19