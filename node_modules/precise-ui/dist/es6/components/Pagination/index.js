var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { PaginationBar } from '../PaginationBar';
import { PaginationLayout } from './PaginationLayout.part';
/**
 * The Pagination component allows generic pagination of arbitrary components.
 */
export class Pagination extends React.Component {
    constructor(props) {
        super(props);
        this.handlePageChange = ({ page }) => {
            const { onChange, value } = this.props;
            if (value === undefined) {
                this.setState({
                    current: page,
                });
            }
            if (typeof onChange === 'function') {
                onChange({
                    value: page,
                });
            }
        };
        this.handleSizeChange = ({ size }) => {
            const { children } = this.props;
            const { current } = this.state;
            const total = React.Children.count(children);
            const maxPageCount = Math.max(Math.ceil(total / size) - 1, 0);
            this.setState({
                size,
                current: Math.min(current, maxPageCount),
            });
        };
        const { value, defaultValue, size = 20 } = props;
        this.state = {
            current: value || defaultValue || 0,
            size: Array.isArray(size) ? size[0] : size,
        };
    }
    getDim(count) {
        const { current, size: sizeState } = this.state;
        const min = current * sizeState;
        if (min < count) {
            return {
                current,
                min,
                max: min + sizeState,
                sizeState,
            };
        }
        else {
            const previous = ~~((count - 1) / sizeState);
            return {
                current: previous,
                min: previous * sizeState,
                max: (previous + 1) * sizeState,
                sizeState,
            };
        }
    }
    render() {
        const _a = this.props, { children, host, size: sizeProp, itemsInfo, pagesInfo, label, render } = _a, props = __rest(_a, ["children", "host", "size", "itemsInfo", "pagesInfo", "label", "render"]);
        const count = React.Children.count(children);
        const { current, min, max, sizeState } = this.getDim(count);
        const content = count < sizeState
            ? children
            : React.Children.map(children, (child, index) => {
                if (index >= min && index < max) {
                    return child;
                }
                return undefined;
            });
        if (typeof render === 'function') {
            return render({
                current,
                min,
                max,
                count,
                content,
                sizeChanged: this.handleSizeChange,
                pageChanged: this.handlePageChange,
            });
        }
        return (React.createElement(PaginationLayout, Object.assign({}, props, { host: host, content: content, controls: React.createElement(PaginationBar, { selectedPage: current, itemsInfo: itemsInfo, itemsPerPageLabel: label, pagesInfo: pagesInfo, size: sizeState, items: count, onSizeChanged: this.handleSizeChange, onPageChanged: this.handlePageChange, availableSizes: Array.isArray(sizeProp) ? sizeProp : [] }) })));
    }
}
Pagination.inner = {
    get PaginationLayout() { return PaginationLayout; }
};
//# sourceMappingURL=data:application/json;base64,