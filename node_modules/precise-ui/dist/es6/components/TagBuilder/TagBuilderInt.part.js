import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { showInputInfo } from '../../utils/input';
import { lowerize } from '../../utils/text';
import { Icon } from '../Icon';
import { InputIcon } from '../InputIcon';
import { transparent, dark, purpleRed } from '../../colors';
import { distance } from '../../distance';
import { withFormContext } from '../../hoc/withFormContext';
import { StyledInputRow, StyledInputBox, getTextFieldBorderType, StyledTagItem } from '../../quarks';
import { getFontStyle, getFontSize } from '../../textStyles';
const finishTagKeys = [13 /* enter */, 32 /* space */, 188 /* comma */, 186 /* semicolon */];
const StyledIcon = styled(Icon) `
  ${getFontStyle({ size: 'small' })}

  cursor: pointer;
  vertical-align: middle;
  color: ${themed(props => props.theme.ui5)};
  font-family: ${themed(props => props.theme.fontFamily)};
  margin-left: ${distance.small};
`;
const TagBuilderContainer = styled.div ``;
function getContainerPadding(props) {
    const { tagRenderer, labelShown } = props;
    if (!tagRenderer) {
        return !labelShown
            ? `${distance.medium} ${distance.medium} ${distance.small}`
            : `${distance.large} ${distance.medium} 0`;
    }
    return !labelShown ? `${distance.medium}` : `${distance.large} ${distance.medium} ${distance.small}`;
}
const StyledTagsContainer = styled.div `
  padding: ${getContainerPadding};
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
`;
const StyledInput = styled('input') `
  ${getFontSize('medium')}
  box-sizing: content-box;
  box-shadow: none;
  border: none;
  border-radius: 0;
  margin: 0;
  outline: none;
  outline-color: transparent !important;
  background: ${transparent};
  width: ${props => (props.value.length > 2 ? props.value.length * 10 + 'px' : '20px')};
  color: ${themed(({ disabled, theme, valid }) => (valid ? (disabled ? theme.textDisabled : dark) : purpleRed))};
  cursor: ${props => (props.disabled ? 'not-allowed' : 'auto')};
  font-family: inherit;
`;
const RestyledTagItem = styled(StyledTagItem) `
  margin: 0 ${distance.small} ${distance.small} 0;
`;
const InputContainer = styled('div') `
  display: inline;
  padding-bottom: ${({ tagRenderer }) => (!tagRenderer ? `${distance.small}` : '0')};
`;
const StyledText = styled.span `
  display: inline-block;
  vertical-align: middle;
`;
const CloseIcon = Object.assign((({ theme, onClick, onMouseDown }) => (React.createElement(StyledIcon, { theme: theme, name: "Close", onClick: onClick, onMouseDown: onMouseDown }))), { inner: {
        get StyledIcon() { return StyledIcon; }
    } });
export class TagBuilderInt extends React.Component {
    constructor(props) {
        super(props);
        this.inputChanged = (e) => {
            const { onInput } = this.props;
            const { controlled, value: prevTags } = this.state;
            const { value } = e.currentTarget;
            if (typeof onInput === 'function') {
                onInput({ value: value });
            }
            if (!controlled) {
                this.setState({ inputValue: value, valid: value.length > 0 ? prevTags.indexOf(value) === -1 : true });
            }
        };
        this.keyDownHandler = (e) => {
            const { inputValue, controlled } = this.state;
            const { shouldFinishTag } = this.props;
            let isHandled = false;
            const handleKeyEvent = () => {
                e.stopPropagation();
                e.preventDefault();
                isHandled = true;
            };
            if (inputValue.length === 0) {
                switch (e.keyCode) {
                    case 8 /* backspace */:
                        this.removePrevTag();
                        handleKeyEvent();
                        break;
                    case 46 /* delete */:
                        this.removeNextTag();
                        handleKeyEvent();
                        break;
                }
            }
            if (!isHandled && !controlled) {
                if (typeof shouldFinishTag === 'function') {
                    if (shouldFinishTag(e)) {
                        this.addTag(inputValue);
                        handleKeyEvent();
                        return;
                    }
                }
                else if (finishTagKeys.indexOf(e.keyCode) !== -1) {
                    this.addTag(inputValue);
                    handleKeyEvent();
                }
                if (inputValue.length === 0) {
                    switch (e.keyCode) {
                        case 35 /* end */:
                            this.inputMoveEnd();
                            handleKeyEvent();
                            break;
                        case 36 /* home */:
                            this.inputMoveHome();
                            handleKeyEvent();
                            break;
                        case 37 /* left */:
                            this.inputMoveLeft();
                            handleKeyEvent();
                            break;
                        case 39 /* right */:
                            this.inputMoveRight();
                            handleKeyEvent();
                            break;
                    }
                }
            }
        };
        this.inputFocused = () => {
            const { onFocus } = this.props;
            this.setState({
                focused: true,
            }, onFocus);
        };
        this.inputBlurred = () => {
            const { onBlur, appendTagOnBlur } = this.props;
            if (!!appendTagOnBlur && !this.state.controlled) {
                const { inputValue } = this.state;
                if (inputValue) {
                    this.addTag(inputValue);
                }
            }
            this.setState({
                focused: false,
            }, onBlur);
        };
        this.setFocus = () => {
            this._input && this._input.focus();
        };
        this.removeTagMouseDownHandler = (event) => {
            event.preventDefault();
        };
        this.renderTag = (e) => {
            const { theme, disabled } = this.props;
            return (React.createElement(RestyledTagItem, { theme: theme, key: e.item + e.index },
                React.createElement(StyledText, null, e.item),
                !disabled && (React.createElement(CloseIcon, { theme: theme, onMouseDown: this.removeTagMouseDownHandler, onClick: () => this.removeTag(e.index) }))));
        };
        this.setContainer = (node) => {
            this._input = node;
            const { inputRef } = this.props;
            if (typeof inputRef === 'function') {
                inputRef(node);
            }
        };
        const tags = (props.value || props.defaultValue || []).map(lowerize);
        this.state = {
            value: tags,
            inputValue: props.inputValue || '',
            controlled: props.value !== undefined || props.inputValue !== undefined,
            focused: false,
            valid: true,
            error: props.error,
        };
    }
    UNSAFE_componentWillReceiveProps({ value, inputValue = '', error }) {
        if (this.state.controlled && value !== undefined) {
            this.setState({
                value: [...value],
                inputValue: inputValue,
            });
        }
        this.setState({ error });
    }
    componentDidMount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.subscribe(this);
        }
    }
    componentWillUnmount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    }
    fireBeforeTagRemoveEvent(index) {
        const { onBeforeTagRemove } = this.props;
        if (typeof onBeforeTagRemove === 'function') {
            onBeforeTagRemove(index);
        }
    }
    inputMoveLeft() {
        const { value } = this.state;
        const { inputPosition = value.length } = this.state;
        if (inputPosition > 0) {
            this.setState({ inputPosition: inputPosition - 1 });
        }
    }
    inputMoveRight() {
        const { value, inputPosition } = this.state;
        if (inputPosition !== undefined && inputPosition < value.length) {
            this.setState({ inputPosition: inputPosition + 1 });
        }
    }
    inputMoveEnd() {
        const { value } = this.state;
        this.setState({ inputPosition: value.length });
    }
    inputMoveHome() {
        this.setState({ inputPosition: 0 });
    }
    addTag(inputValue) {
        const { value: prevTags, valid } = this.state;
        const { inputPosition = prevTags.length } = this.state;
        inputValue = inputValue.trim().toLowerCase();
        if (inputValue.length > 0 && valid) {
            const tags = [...prevTags];
            tags.splice(inputPosition, 0, inputValue);
            this.setState({ inputValue: '', inputPosition: inputPosition + 1 }, () => this.onChange(tags));
        }
    }
    removePrevTag() {
        const { value: prevTags } = this.state;
        const { inputPosition = prevTags.length } = this.state;
        if (inputPosition > 0) {
            this.removeTag(inputPosition - 1);
            this.setState({ inputPosition: inputPosition - 1 });
        }
    }
    removeNextTag() {
        const { value: prevTags, inputPosition } = this.state;
        if (inputPosition !== undefined && inputPosition < prevTags.length) {
            this.removeTag(inputPosition);
        }
    }
    removeTag(index) {
        const { value: prevTags } = this.state;
        this.fireBeforeTagRemoveEvent(index);
        const tags = [...prevTags.slice(0, index), ...prevTags.slice(index + 1)];
        this.onChange(tags);
    }
    onChange(value) {
        const { onChange, name = '', form } = this.props;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name,
                    value,
                });
            }
            else {
                this.setState({
                    value,
                });
            }
        }
        if (typeof onChange === 'function') {
            onChange({
                value,
            });
        }
    }
    render() {
        const { tagRenderer, info, disabled, borderless, theme, label, placeholder } = this.props;
        const { value, inputValue, focused, valid, error } = this.state;
        const { inputPosition = value.length } = this.state;
        const border = getTextFieldBorderType(borderless, !!error, focused);
        const renderer = tagRenderer || this.renderTag;
        const children = value.map((item, index) => renderer({ item, index, tags: value }));
        const hasValue = !!inputValue || value.length > 0;
        children.splice(inputPosition, 0, React.createElement(InputContainer, { key: "input", onKeyDown: this.keyDownHandler, tagRenderer: !!tagRenderer },
            React.createElement(StyledInput, { theme: theme, disabled: disabled, ref: this.setContainer, type: "text", value: inputValue, onChange: this.inputChanged, onFocus: this.inputFocused, onBlur: this.inputBlurred, valid: valid })));
        return (React.createElement(TagBuilderContainer, null,
            React.createElement(StyledInputBox, { border: border, disabled: disabled, focused: focused, hasValue: hasValue },
                React.createElement(StyledInputRow, { onClick: this.setFocus, label: label, hasValue: hasValue, placeholder: placeholder, error: !!error, focused: focused },
                    React.createElement(StyledTagsContainer, { labelShown: !!label, tagRenderer: !!tagRenderer }, children)),
                React.createElement(InputIcon, { disabled: disabled, theme: theme, error: error, hasValue: hasValue })),
            showInputInfo(error, info)));
    }
}
TagBuilderInt.inner = {
    get RestyledTagItem() { return RestyledTagItem; },
    get StyledText() { return StyledText; },
    get CloseIcon() { return CloseIcon; },
    get InputContainer() { return InputContainer; },
    get StyledInput() { return StyledInput; },
    get TagBuilderContainer() { return TagBuilderContainer; },
    get StyledInputBox() { return StyledInputBox; },
    get StyledInputRow() { return StyledInputRow; },
    get StyledTagsContainer() { return StyledTagsContainer; },
    get InputIcon() { return InputIcon; }
};
export const TagBuilder = withFormContext(TagBuilderInt);
TagBuilder.displayName = 'TagBuilder';
//# sourceMappingURL=data:application/json;base64,