var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed, css } from '../utils/styled';
const IncreaseDecreaseContainer = styled.span `
  width: 4px;
  position: relative;
  &:before {
    content: ' ';
    white-space: pre;
  }
`;
const IncreaseDecreaseArrow = styled.div `
  width: 8px;
  height: 4px;
  position: absolute;
  cursor: pointer;
  left: 0;

  &:before {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    width: 0;
    height: 0;
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
  }
`;
const getBorderStyle = (position, active = false) => css `
  border-${position}: 4px solid ${themed(({ theme }) => (active ? theme.ui5 : theme.ui4))};
`;
const IncreaseDecreaseArrowUp = styled(IncreaseDecreaseArrow) `
  top: 4px;

  &:before {
    ${({ active }) => getBorderStyle('bottom', active)}
  }

  &:hover:before {
    ${getBorderStyle('bottom', true)}
  }
`;
const IncreaseDecreaseArrowDown = styled(IncreaseDecreaseArrow) `
  bottom: 4px;

  &:before {
    ${({ active }) => getBorderStyle('top', active)}
  }

  &:hover:before {
    ${getBorderStyle('top', true)}
  }
`;
export const IncreaseDecrease = Object.assign(((_a) => {
    var { onIncrease, onDecrease, value } = _a, props = __rest(_a, ["onIncrease", "onDecrease", "value"]);
    return (React.createElement(IncreaseDecreaseContainer, Object.assign({}, props),
        React.createElement(IncreaseDecreaseArrowUp, { onClick: onIncrease, active: value === 'increase' }),
        React.createElement(IncreaseDecreaseArrowDown, { onClick: onDecrease, active: value === 'decrease' })));
}), { inner: {
        get IncreaseDecreaseContainer() { return IncreaseDecreaseContainer; },
        get IncreaseDecreaseArrowUp() { return IncreaseDecreaseArrowUp; },
        get IncreaseDecreaseArrowDown() { return IncreaseDecreaseArrowDown; }
    } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5jcmVhc2VEZWNyZWFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0luY3JlYXNlRGVjcmVhc2UudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RELE1BQU0seUJBQXlCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQzs7Ozs7OztDQU83QyxDQUFDO0FBQ0YsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUVyQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQkYsQ0FBQztBQUNGLE1BQU0sY0FBYyxHQUFHLENBQUMsUUFBMEIsRUFBRSxNQUFNLEdBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7V0FDaEUsUUFBUSxlQUFlLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDeEYsQ0FBQztBQUNGLE1BQU0sdUJBQXVCLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7Ozs7TUFJeEQsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQzs7OztNQUloRCxjQUFjLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQzs7Q0FFbkMsQ0FBQztBQUNGLE1BQU0seUJBQXlCLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7Ozs7TUFJMUQsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQzs7OztNQUk3QyxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQzs7Q0FFaEMsQ0FBQztBQWVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDLEVBQTJDLEVBQUUsRUFBRTtRQUEvQyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsS0FBSyxPQUFZLEVBQVYseURBQVE7SUFDdEYsT0FBTyxDQUFDLG9CQUFDLHlCQUF5QixvQkFBSyxLQUFLO1FBQzFDLG9CQUFDLHVCQUF1QixJQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssS0FBSyxVQUFVLEdBQUc7UUFDN0Usb0JBQUMseUJBQXlCLElBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxLQUFLLFVBQVUsR0FBRyxDQUNyRCxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFxQyxFQUFFLEVBQUUsS0FBSyxFQUFFO1FBQ3pDLElBQUkseUJBQXlCLEtBQUssT0FBTyx5QkFBNkQsQ0FBQyxDQUFDLENBQUM7UUFDekcsSUFBSSx1QkFBdUIsS0FBSyxPQUFPLHVCQUF5RCxDQUFDLENBQUMsQ0FBQztRQUNuRyxJQUFJLHlCQUF5QixLQUFLLE9BQU8seUJBQTZELENBQUMsQ0FBQyxDQUFDO0tBQzVHLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwgeyB0aGVtZWQsIGNzcyB9IGZyb20gJy4uL3V0aWxzL3N0eWxlZCc7XG5jb25zdCBJbmNyZWFzZURlY3JlYXNlQ29udGFpbmVyID0gc3R5bGVkLnNwYW4gYFxuICB3aWR0aDogNHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICY6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnICc7XG4gICAgd2hpdGUtc3BhY2U6IHByZTtcbiAgfVxuYDtcbmNvbnN0IEluY3JlYXNlRGVjcmVhc2VBcnJvdyA9IHN0eWxlZC5kaXY8e1xuICAgIGFjdGl2ZT86IGJvb2xlYW47XG59PiBgXG4gIHdpZHRoOiA4cHg7XG4gIGhlaWdodDogNHB4O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgbGVmdDogMDtcblxuICAmOmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgd2lkdGg6IDA7XG4gICAgaGVpZ2h0OiAwO1xuICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLXJpZ2h0OiA0cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIH1cbmA7XG5jb25zdCBnZXRCb3JkZXJTdHlsZSA9IChwb3NpdGlvbjogJ3RvcCcgfCAnYm90dG9tJywgYWN0aXZlID0gZmFsc2UpID0+IGNzcyBgXG4gIGJvcmRlci0ke3Bvc2l0aW9ufTogNHB4IHNvbGlkICR7dGhlbWVkKCh7IHRoZW1lIH0pID0+IChhY3RpdmUgPyB0aGVtZS51aTUgOiB0aGVtZS51aTQpKX07XG5gO1xuY29uc3QgSW5jcmVhc2VEZWNyZWFzZUFycm93VXAgPSBzdHlsZWQoSW5jcmVhc2VEZWNyZWFzZUFycm93KSBgXG4gIHRvcDogNHB4O1xuXG4gICY6YmVmb3JlIHtcbiAgICAkeyh7IGFjdGl2ZSB9KSA9PiBnZXRCb3JkZXJTdHlsZSgnYm90dG9tJywgYWN0aXZlKX1cbiAgfVxuXG4gICY6aG92ZXI6YmVmb3JlIHtcbiAgICAke2dldEJvcmRlclN0eWxlKCdib3R0b20nLCB0cnVlKX1cbiAgfVxuYDtcbmNvbnN0IEluY3JlYXNlRGVjcmVhc2VBcnJvd0Rvd24gPSBzdHlsZWQoSW5jcmVhc2VEZWNyZWFzZUFycm93KSBgXG4gIGJvdHRvbTogNHB4O1xuXG4gICY6YmVmb3JlIHtcbiAgICAkeyh7IGFjdGl2ZSB9KSA9PiBnZXRCb3JkZXJTdHlsZSgndG9wJywgYWN0aXZlKX1cbiAgfVxuXG4gICY6aG92ZXI6YmVmb3JlIHtcbiAgICAke2dldEJvcmRlclN0eWxlKCd0b3AnLCB0cnVlKX1cbiAgfVxuYDtcbmV4cG9ydCBpbnRlcmZhY2UgSW5jcmVhc2VEZWNyZWFzZVByb3BzIHtcbiAgICAvKipcbiAgICAgKiBFdmVudCB3aGljaCBmaXJlcyB3aGVuIGluY3JlYXNlIGJ1dHRvbiB3YXMgY2xpY2tlZC5cbiAgICAgKi9cbiAgICBvbkluY3JlYXNlPyhlOiBSZWFjdC5Nb3VzZUV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFdmVudCB3aGljaCBmaXJlcyB3aGVuIGRlY3JlYXNlIGJ1dHRvbiB3YXMgY2xpY2tlZC5cbiAgICAgKi9cbiAgICBvbkRlY3JlYXNlPyhlOiBSZWFjdC5Nb3VzZUV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBIaWdobGlnaHRzIGluY3JlYXNlIG9yIGRlY3JlYXNlIGJ1dHRvbi5cbiAgICAgKi9cbiAgICB2YWx1ZT86ICdpbmNyZWFzZScgfCAnZGVjcmVhc2UnO1xufVxuZXhwb3J0IGNvbnN0IEluY3JlYXNlRGVjcmVhc2UgPSBPYmplY3QuYXNzaWduKCgoKHsgb25JbmNyZWFzZSwgb25EZWNyZWFzZSwgdmFsdWUsIC4uLnByb3BzIH0pID0+IHtcbiAgICByZXR1cm4gKDxJbmNyZWFzZURlY3JlYXNlQ29udGFpbmVyIHsuLi5wcm9wc30+XG4gICAgICA8SW5jcmVhc2VEZWNyZWFzZUFycm93VXAgb25DbGljaz17b25JbmNyZWFzZX0gYWN0aXZlPXt2YWx1ZSA9PT0gJ2luY3JlYXNlJ30vPlxuICAgICAgPEluY3JlYXNlRGVjcmVhc2VBcnJvd0Rvd24gb25DbGljaz17b25EZWNyZWFzZX0gYWN0aXZlPXt2YWx1ZSA9PT0gJ2RlY3JlYXNlJ30vPlxuICAgIDwvSW5jcmVhc2VEZWNyZWFzZUNvbnRhaW5lcj4pO1xufSkgYXMgUmVhY3QuRkM8SW5jcmVhc2VEZWNyZWFzZVByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IEluY3JlYXNlRGVjcmVhc2VDb250YWluZXIoKSB7IHJldHVybiBJbmNyZWFzZURlY3JlYXNlQ29udGFpbmVyIGFzIHR5cGVvZiBJbmNyZWFzZURlY3JlYXNlQ29udGFpbmVyOyB9LFxuICAgICAgICBnZXQgSW5jcmVhc2VEZWNyZWFzZUFycm93VXAoKSB7IHJldHVybiBJbmNyZWFzZURlY3JlYXNlQXJyb3dVcCBhcyB0eXBlb2YgSW5jcmVhc2VEZWNyZWFzZUFycm93VXA7IH0sXG4gICAgICAgIGdldCBJbmNyZWFzZURlY3JlYXNlQXJyb3dEb3duKCkgeyByZXR1cm4gSW5jcmVhc2VEZWNyZWFzZUFycm93RG93biBhcyB0eXBlb2YgSW5jcmVhc2VEZWNyZWFzZUFycm93RG93bjsgfVxuICAgIH0gfSk7XG4iXX0=