var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { css } from '../../utils/styled';
import { remCalc } from '../../utils/remCalc';
import { InteractiveSurface } from '../InteractiveSurface';
import { Icon } from '../Icon';
import { distance } from '../../distance';
import { getFontStyle } from '../../textStyles';
const shiftThreshold = 0.3;
const animationDuration = '0.3s';
const animationFunction = 'ease-in-out';
const RootContainer = styled.div `
  outline: none;
`;
const DefaultBulletsContainer = styled.div `
  box-sizing: border-box;
  display: flex;
  justify-content: center;
`;
const ActiveBullet = css `
  background-color: rgba(116, 118, 120, 1);
`;
const DefaultBullet = styled.div `
  height: ${remCalc('12px')};
  width: ${remCalc('12px')};
  background-color: rgba(224, 225, 221, 1);
  border-radius: 50%;
  display: inline-block;
  cursor: pointer;
  margin: ${distance.xsmall};
  ${props => (props.active ? ActiveBullet : '')};
`;
const PageItem = styled.div `
  min-width: 100%;
`;
const PagesContainer = styled.div `
  box-sizing: border-box;
  display: flex;
  position: relative;
  left: ${props => -props.selectedIndex * 100}%;
  transition: left ${animationDuration} ${animationFunction};
`;
const Mask = styled.div `
  position: relative;
  box-sizing: border-box;
  overflow: hidden;
`;
const Arrow = styled.button `
  ${getFontStyle({ size: 'medium' })}

  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: transparent;
  padding: 0;
  border: none;
  align-self: start;
  cursor: pointer;
  > i {
    vertical-align: middle;
  }
`;
const ArrowLeft = styled(Arrow) `
  left: 8px;
`;
const ArrowRight = styled(Arrow) `
  right: 8px;
`;
function calcNextPage(currentPage, totalPages, infinite = false) {
    const maxIndex = totalPages - 1;
    const nextPage = currentPage + 1;
    return infinite && nextPage > maxIndex ? 0 : Math.min(nextPage, maxIndex);
}
function calcPrevPage(currentPage, totalPages, infinite = false) {
    const prevPage = currentPage - 1;
    const maxIndex = totalPages - 1;
    return infinite && prevPage < 0 ? maxIndex : Math.max(prevPage, 0);
}
function calcLeftShiftPercent(selectedIndex) {
    return selectedIndex * -100;
}
const defaultAutoPlayTime = 3000;
/**
 * The Carousel component displays a toggling list of content. Page can be changed using bullet
 * controls or swiping gestures.
 */
export class Carousel extends React.PureComponent {
    constructor(props) {
        super(props);
        this.selects = [];
        this.resume = () => {
            if (!this.autoPlayTimeout) {
                this.tryToPlay();
            }
        };
        this.dragTile = (e) => {
            const { controlled, selectedIndex, dragStatus } = this.state;
            const shift = dragStatus.start ? e.x - dragStatus.start.x : 0;
            if (controlled) {
                e.release();
            }
            if (this.pagesContainer) {
                if (e.active) {
                    if (!dragStatus.isDragging) {
                        this.setState({ dragStatus: { isDragging: true, start: { x: e.x, y: e.y } } });
                        this.setDragStyle(this.pagesContainer);
                    }
                    this.pagesContainer.style.left = `${calcLeftShiftPercent(selectedIndex) + shift * 100}%`;
                }
                else {
                    this.setState({ dragStatus: { isDragging: false, start: undefined } });
                    this.resetInitialStyle(this.pagesContainer);
                    this.checkPageChange(shift);
                }
            }
        };
        this.swipeLeft = () => {
            this.swipe(-1, true);
        };
        this.swipeRight = () => {
            this.swipe(1, true);
        };
        this.swipeRightAuto = () => {
            this.swipe(1, false);
        };
        this.handleKeyDown = (e) => {
            const { children, infinite } = this.props;
            const { selectedIndex } = this.state;
            const childrenCount = React.Children.count(children);
            let nextIndex = selectedIndex;
            switch (e.keyCode) {
                case 37 /* left */:
                    nextIndex = calcPrevPage(selectedIndex, childrenCount, infinite);
                    break;
                case 39 /* right */:
                    nextIndex = calcNextPage(selectedIndex, childrenCount, infinite);
                    break;
                case 35 /* end */:
                    nextIndex = childrenCount - 1;
                    break;
                case 36 /* home */:
                    nextIndex = 0;
                    break;
                default:
                    return;
            }
            this.changePage(nextIndex);
        };
        this.state = {
            selectedIndex: props.selectedIndex || props.defaultIndex || 0,
            controlled: props.selectedIndex !== undefined,
            dragStatus: { isDragging: false },
        };
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        const { selectedIndex } = nextProps;
        const { controlled } = this.state;
        if (controlled && typeof selectedIndex === 'number') {
            this.setState({
                selectedIndex,
            });
        }
    }
    componentDidMount() {
        this.tryToPlay();
    }
    componentWillUnmount() {
        this.stop();
    }
    tryToPlay() {
        this.stop();
        const { autoplay } = this.props;
        if (autoplay) {
            this.play(typeof autoplay === 'number' ? autoplay : defaultAutoPlayTime);
        }
    }
    play(time) {
        this.autoPlayTimeout = setInterval(this.swipeRightAuto, time);
    }
    stop() {
        this.autoPlayTimeout = clearInterval(this.autoPlayTimeout);
    }
    changePage(target, manual = true) {
        const { onPageChange, onStop, children } = this.props;
        const childrenCount = React.Children.count(children);
        const { controlled, selectedIndex } = this.state;
        const shouldStop = target >= childrenCount || target < 0;
        if (manual || shouldStop) {
            if (this.autoPlayTimeout) {
                this.stop();
                if (typeof onStop === 'function') {
                    onStop({
                        reason: manual ? 'manual' : 'ended',
                        resume: this.resume,
                    });
                }
            }
        }
        if (!shouldStop) {
            if (typeof onPageChange === 'function') {
                onPageChange({
                    previousIndex: selectedIndex,
                    selectedIndex: target,
                });
            }
            if (!controlled) {
                this.setState(() => ({
                    selectedIndex: target,
                }));
            }
        }
    }
    checkPageChange(shift) {
        const { selectedIndex } = this.state;
        if (shift <= -shiftThreshold) {
            const nextIndex = calcNextPage(selectedIndex, React.Children.count(this.props.children), this.props.infinite);
            this.changePage(nextIndex);
        }
        else if (shift >= shiftThreshold) {
            const prevIndex = calcPrevPage(selectedIndex, React.Children.count(this.props.children), this.props.infinite);
            this.changePage(prevIndex);
        }
    }
    setDragStyle(node) {
        const style = node.style;
        style.transitionProperty = 'unset';
        style.transitionDuration = 'unset';
        style.transitionTimingFunction = 'unset';
    }
    resetInitialStyle(node) {
        const style = node.style;
        // tslint:disable-next-line
        style.left = null;
        style.transitionProperty = 'left';
        style.transitionDuration = animationDuration;
        style.transitionTimingFunction = animationFunction;
    }
    swipe(direction, manual) {
        const { selectedIndex } = this.state;
        const { children, infinite } = this.props;
        const childrenCount = React.Children.count(children);
        let nextIndex = selectedIndex;
        if (direction === 1) {
            nextIndex = calcNextPage(selectedIndex, childrenCount, infinite);
        }
        else if (direction === -1) {
            nextIndex = calcPrevPage(selectedIndex, childrenCount, infinite);
        }
        this.changePage(nextIndex, manual);
    }
    render() {
        const { selectedIndex } = this.state;
        const _a = this.props, { children, theme, selectedIndex: _0, defaultIndex: _1, onPageChange: _2, bulletsContainer: CustomBulletsContainer, bullet: CustomBullet, arrows = false, infinite = false, opaque = false } = _a, props = __rest(_a, ["children", "theme", "selectedIndex", "defaultIndex", "onPageChange", "bulletsContainer", "bullet", "arrows", "infinite", "opaque"]);
        const childrenCount = React.Children.count(children);
        const bullets = [];
        const items = [];
        const selects = this.selects;
        const BulletsContainer = CustomBulletsContainer || DefaultBulletsContainer;
        const Bullet = CustomBullet || DefaultBullet;
        React.Children.forEach(children, (element, index) => {
            if (element && React.isValidElement(element)) {
                const active = index === selectedIndex;
                if (selects[index] === undefined) {
                    selects[index] = () => this.changePage(index);
                }
                bullets.push(React.createElement(Bullet, { theme: theme, key: `bullet-${index}`, active: active, index: index, onClick: selects[index] }));
                items.push(React.createElement(PageItem, { key: `item-${index}` }, element));
            }
        });
        const disableLeft = !infinite && selectedIndex < 1;
        const disableRight = !infinite && selectedIndex > childrenCount - 2;
        return (React.createElement(RootContainer, Object.assign({}, props, { onKeyDown: this.handleKeyDown, tabIndex: 0 }),
            React.createElement(Mask, null,
                React.createElement(InteractiveSurface, { theme: theme, onChange: this.dragTile, opaque: opaque },
                    React.createElement(PagesContainer, { ref: node => (this.pagesContainer = node), selectedIndex: selectedIndex }, items)),
                arrows && (React.createElement("div", null,
                    React.createElement(ArrowLeft, { onClick: this.swipeLeft, disabled: disableLeft, type: "button" },
                        React.createElement(Icon, { name: "KeyboardArrowLeft", size: 2 })),
                    React.createElement(ArrowRight, { onClick: this.swipeRight, disabled: disableRight, type: "button" },
                        React.createElement(Icon, { name: "KeyboardArrowRight", size: 2 }))))),
            React.createElement(BulletsContainer, null, bullets)));
    }
}
Carousel.inner = {
    get PageItem() { return PageItem; },
    get RootContainer() { return RootContainer; },
    get Mask() { return Mask; },
    get InteractiveSurface() { return InteractiveSurface; },
    get PagesContainer() { return PagesContainer; },
    get ArrowLeft() { return ArrowLeft; },
    get Icon() { return Icon; },
    get ArrowRight() { return ArrowRight; }
};
//# sourceMappingURL=data:application/json;base64,