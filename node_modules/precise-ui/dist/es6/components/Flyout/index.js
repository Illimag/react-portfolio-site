var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import onClickOutside from 'react-onclickoutside';
import styled from '../../utils/styled';
import { FlyoutWindow } from './FlyoutWindow.part';
const FlyoutContainer = styled.div `
  position: relative;
  display: inline-block;
  width: fit-content;
`;
const StyledTargetWrapper = styled.div ``;
class FlyoutInt extends React.Component {
    constructor(props) {
        super(props);
        this.handleClickOutside = () => {
            this.state.open && !this.state.controlled && this.setOpen(false);
        };
        this.setTargetRef = (el) => {
            this.targetContainer = el;
        };
        this.onClick = () => {
            if (!this.state.controlled) {
                this.setOpen(!this.state.open);
            }
        };
        this.state = {
            controlled: props.open !== undefined,
            open: props.open || false,
            targetRect: undefined,
            dirtyFlag: false,
        };
    }
    componentDidMount() {
        this.updateMeasurements();
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.controlled && nextProps.open !== undefined) {
            this.setOpen(nextProps.open);
        }
    }
    componentDidUpdate() {
        const { dirtyFlag } = this.state;
        if (dirtyFlag) {
            this.updateMeasurements();
            this.setState({
                dirtyFlag: false,
            });
        }
    }
    updateMeasurements() {
        if (this.targetContainer) {
            const targetRect = this.targetContainer.getBoundingClientRect();
            this.setState({
                targetRect,
            });
        }
    }
    setOpen(open) {
        const { onChange } = this.props;
        if (typeof onChange === 'function') {
            onChange({ open });
        }
        this.setState({
            open,
            dirtyFlag: open === true,
        });
    }
    render() {
        const _a = this.props, { children, content, open: _0, onChange: _1 } = _a, props = __rest(_a, ["children", "content", "open", "onChange"]);
        const { targetRect } = this.state;
        const { open } = this.state;
        return (React.createElement(FlyoutContainer, { ref: this.setTargetRef },
            React.createElement(StyledTargetWrapper, { onClick: this.onClick }, children),
            !!content && targetRect && open && (React.createElement(FlyoutWindow, Object.assign({}, props, { targetRect: targetRect }), content))));
    }
}
FlyoutInt.inner = {
    get FlyoutContainer() { return FlyoutContainer; },
    get StyledTargetWrapper() { return StyledTargetWrapper; },
    get FlyoutWindow() { return FlyoutWindow; }
};
export const Flyout = onClickOutside(FlyoutInt);
Flyout.displayName = 'Flyout';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9GbHlvdXQvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sY0FBbUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN2RSxPQUFPLE1BQU0sTUFBTSxvQkFBb0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHbkQsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQzs7OztDQUlsQyxDQUFDO0FBQ0YsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztBQU8xQyxNQUFNLFNBQVUsU0FBUSxLQUFLLENBQUMsU0FBbUM7SUFFN0QsWUFBWSxLQUFrQjtRQUMxQixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFRakIsdUJBQWtCLEdBQUcsR0FBRyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUM7UUEwQk0saUJBQVksR0FBRyxDQUFDLEVBQXlCLEVBQUUsRUFBRTtZQUNqRCxJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUM5QixDQUFDLENBQUM7UUFXTSxZQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbEM7UUFDTCxDQUFDLENBQUM7UUFwREUsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNULFVBQVUsRUFBRSxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVM7WUFDcEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSztZQUN6QixVQUFVLEVBQUUsU0FBUztZQUNyQixTQUFTLEVBQUUsS0FBSztTQUNuQixDQUFDO0lBQ04sQ0FBQztJQUlELGlCQUFpQjtRQUNiLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFDRCxnQ0FBZ0MsQ0FBQyxTQUFzQjtRQUNuRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3ZELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQztJQUNELGtCQUFrQjtRQUNkLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2pDLElBQUksU0FBUyxFQUFFO1lBQ1gsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDVixTQUFTLEVBQUUsS0FBSzthQUNuQixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFDTyxrQkFBa0I7UUFDdEIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUNoRSxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUNWLFVBQVU7YUFDYixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFJTyxPQUFPLENBQUMsSUFBYTtRQUN6QixNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNoQyxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRTtZQUNoQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNWLElBQUk7WUFDSixTQUFTLEVBQUUsSUFBSSxLQUFLLElBQUk7U0FDM0IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQU1ELE1BQU07UUFDRixNQUFNLGVBQW9FLEVBQXBFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQXlCLEVBQXZCLCtEQUF1QixDQUFDO1FBQzNFLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2xDLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxvQkFBQyxlQUFlLElBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9DLG9CQUFDLG1CQUFtQixJQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxJQUFHLFFBQVEsQ0FBdUI7WUFDM0UsQ0FBQyxDQUFDLE9BQU8sSUFBSSxVQUFVLElBQUksSUFBSSxJQUFJLENBQUMsb0JBQUMsWUFBWSxvQkFBSyxLQUFLLElBQUUsVUFBVSxFQUFFLFVBQVUsS0FDL0UsT0FBTyxDQUNLLENBQUMsQ0FDRixDQUFDLENBQUM7SUFDdEIsQ0FBQzs7QUFDTSxlQUFLLEdBQUc7SUFDWCxJQUFJLGVBQWUsS0FBSyxPQUFPLGVBQXlDLENBQUMsQ0FBQyxDQUFDO0lBQzNFLElBQUksbUJBQW1CLEtBQUssT0FBTyxtQkFBaUQsQ0FBQyxDQUFDLENBQUM7SUFDdkYsSUFBSSxZQUFZLEtBQUssT0FBTyxZQUFtQyxDQUFDLENBQUMsQ0FBQztDQUNyRSxDQUFDO0FBRU4sTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUF3RCxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDckcsTUFBTSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgb25DbGlja091dHNpZGUsIHsgQWRkaXRpb25hbFByb3BzIH0gZnJvbSAncmVhY3Qtb25jbGlja291dHNpZGUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgRmx5b3V0V2luZG93IH0gZnJvbSAnLi9GbHlvdXRXaW5kb3cucGFydCc7XG5pbXBvcnQgeyBGbHlvdXRQcm9wcyB9IGZyb20gJy4vRmx5b3V0LnR5cGVzLnBhcnQnO1xuZXhwb3J0IHsgRmx5b3V0UG9zaXRpb24sIEZseW91dENoYW5nZUV2ZW50LCBGbHlvdXRQcm9wcyB9IGZyb20gJy4vRmx5b3V0LnR5cGVzLnBhcnQnO1xuY29uc3QgRmx5b3V0Q29udGFpbmVyID0gc3R5bGVkLmRpdiBgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG5gO1xuY29uc3QgU3R5bGVkVGFyZ2V0V3JhcHBlciA9IHN0eWxlZC5kaXYgYGA7XG5leHBvcnQgaW50ZXJmYWNlIEZseW91dFN0YXRlIHtcbiAgICBjb250cm9sbGVkOiBib29sZWFuO1xuICAgIHRhcmdldFJlY3Q/OiBDbGllbnRSZWN0O1xuICAgIGRpcnR5RmxhZzogYm9vbGVhbjtcbiAgICBvcGVuOiBib29sZWFuO1xufVxuY2xhc3MgRmx5b3V0SW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEZseW91dFByb3BzLCBGbHlvdXRTdGF0ZT4ge1xuICAgIHByaXZhdGUgdGFyZ2V0Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCB8IG51bGw7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IEZseW91dFByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZWQ6IHByb3BzLm9wZW4gIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG9wZW46IHByb3BzLm9wZW4gfHwgZmFsc2UsXG4gICAgICAgICAgICB0YXJnZXRSZWN0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkaXJ0eUZsYWc6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBoYW5kbGVDbGlja091dHNpZGUgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUub3BlbiAmJiAhdGhpcy5zdGF0ZS5jb250cm9sbGVkICYmIHRoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgfTtcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVNZWFzdXJlbWVudHMoKTtcbiAgICB9XG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzOiBGbHlvdXRQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jb250cm9sbGVkICYmIG5leHRQcm9wcy5vcGVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0T3BlbihuZXh0UHJvcHMub3Blbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICBjb25zdCB7IGRpcnR5RmxhZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKGRpcnR5RmxhZykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNZWFzdXJlbWVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGRpcnR5RmxhZzogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIHVwZGF0ZU1lYXN1cmVtZW50cygpIHtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0Q29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRSZWN0ID0gdGhpcy50YXJnZXRDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB0YXJnZXRSZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBzZXRUYXJnZXRSZWYgPSAoZWw6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCkgPT4ge1xuICAgICAgICB0aGlzLnRhcmdldENvbnRhaW5lciA9IGVsO1xuICAgIH07XG4gICAgcHJpdmF0ZSBzZXRPcGVuKG9wZW46IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgeyBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKHR5cGVvZiBvbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25DaGFuZ2UoeyBvcGVuIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgb3BlbixcbiAgICAgICAgICAgIGRpcnR5RmxhZzogb3BlbiA9PT0gdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHByaXZhdGUgb25DbGljayA9ICgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmNvbnRyb2xsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0T3BlbighdGhpcy5zdGF0ZS5vcGVuKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuLCBjb250ZW50LCBvcGVuOiBfMCwgb25DaGFuZ2U6IF8xLCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyB0YXJnZXRSZWN0IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCB7IG9wZW4gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHJldHVybiAoPEZseW91dENvbnRhaW5lciByZWY9e3RoaXMuc2V0VGFyZ2V0UmVmfT5cbiAgICAgICAgPFN0eWxlZFRhcmdldFdyYXBwZXIgb25DbGljaz17dGhpcy5vbkNsaWNrfT57Y2hpbGRyZW59PC9TdHlsZWRUYXJnZXRXcmFwcGVyPlxuICAgICAgICB7ISFjb250ZW50ICYmIHRhcmdldFJlY3QgJiYgb3BlbiAmJiAoPEZseW91dFdpbmRvdyB7Li4ucHJvcHN9IHRhcmdldFJlY3Q9e3RhcmdldFJlY3R9PlxuICAgICAgICAgICAge2NvbnRlbnR9XG4gICAgICAgICAgPC9GbHlvdXRXaW5kb3c+KX1cbiAgICAgIDwvRmx5b3V0Q29udGFpbmVyPik7XG4gICAgfVxuICAgIHN0YXRpYyBpbm5lciA9IHtcbiAgICAgICAgZ2V0IEZseW91dENvbnRhaW5lcigpIHsgcmV0dXJuIEZseW91dENvbnRhaW5lciBhcyB0eXBlb2YgRmx5b3V0Q29udGFpbmVyOyB9LFxuICAgICAgICBnZXQgU3R5bGVkVGFyZ2V0V3JhcHBlcigpIHsgcmV0dXJuIFN0eWxlZFRhcmdldFdyYXBwZXIgYXMgdHlwZW9mIFN0eWxlZFRhcmdldFdyYXBwZXI7IH0sXG4gICAgICAgIGdldCBGbHlvdXRXaW5kb3coKSB7IHJldHVybiBGbHlvdXRXaW5kb3cgYXMgdHlwZW9mIEZseW91dFdpbmRvdzsgfVxuICAgIH07XG59XG5leHBvcnQgY29uc3QgRmx5b3V0OiBSZWFjdC5Db21wb25lbnRDbGFzczxGbHlvdXRQcm9wcyAmIEFkZGl0aW9uYWxQcm9wcz4gPSBvbkNsaWNrT3V0c2lkZShGbHlvdXRJbnQpO1xuRmx5b3V0LmRpc3BsYXlOYW1lID0gJ0ZseW91dCc7XG4iXX0=