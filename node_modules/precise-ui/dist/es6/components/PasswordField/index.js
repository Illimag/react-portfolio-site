var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { TextField } from '../TextField';
import { IconLink } from '../IconLink';
const StyledTextField = styled(TextField) `
  font-family: ${props => (props.reveal ? 'inherit' : 'sans-serif')};
`;
/**
 * A password field for custom user input.
 */
export class PasswordField extends React.Component {
    constructor(props) {
        super(props);
        this.showPassword = (e) => {
            this.setState({
                reveal: true,
            });
            e.preventDefault();
        };
        this.hidePassword = (e) => {
            this.setState({
                reveal: false,
            });
            e.preventDefault();
        };
        this.state = {
            reveal: false,
        };
    }
    renderDefaultSuffix(reveal, theme) {
        const iconName = reveal ? 'VisibilityOff' : 'Visibility';
        return React.createElement(IconLink, { icon: iconName, onClick: reveal ? this.hidePassword : this.showPassword, theme: theme });
    }
    render() {
        const _a = this.props, { theme, suffix } = _a, rest = __rest(_a, ["theme", "suffix"]);
        const { reveal } = this.state;
        const props = Object.assign({ suffix: suffix === undefined ? this.renderDefaultSuffix(reveal, theme) : suffix, type: reveal ? 'text' : 'password', theme,
            reveal }, rest);
        return React.createElement(StyledTextField, Object.assign({}, props));
    }
}
PasswordField.inner = {
    get IconLink() { return IconLink; },
    get StyledTextField() { return StyledTextField; }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9QYXNzd29yZEZpZWxkL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLE1BQU0sTUFBTSxvQkFBb0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFrQixNQUFNLGNBQWMsQ0FBQztBQUV6RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBSXZDLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBdUI7aUJBQy9DLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztDQUNsRSxDQUFDO0FBVUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sYUFBYyxTQUFRLEtBQUssQ0FBQyxTQUFpRDtJQUN0RixZQUFZLEtBQXlCO1FBQ2pDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUtULGlCQUFZLEdBQUcsQ0FBQyxDQUFzQyxFQUFFLEVBQUU7WUFDOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDVixNQUFNLEVBQUUsSUFBSTthQUNmLENBQUMsQ0FBQztZQUNILENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUM7UUFDTSxpQkFBWSxHQUFHLENBQUMsQ0FBc0MsRUFBRSxFQUFFO1lBQzlELElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEtBQUs7YUFDaEIsQ0FBQyxDQUFDO1lBQ0gsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQztRQWZFLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDVCxNQUFNLEVBQUUsS0FBSztTQUNoQixDQUFDO0lBQ04sQ0FBQztJQWFPLG1CQUFtQixDQUFDLE1BQWUsRUFBRSxLQUFvQjtRQUM3RCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1FBQ3pELE9BQU8sb0JBQUMsUUFBUSxJQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLENBQUM7SUFDOUcsQ0FBQztJQUNELE1BQU07UUFDRixNQUFNLGVBQXVDLEVBQXZDLEVBQUUsS0FBSyxFQUFFLE1BQU0sT0FBd0IsRUFBdEIsc0NBQXNCLENBQUM7UUFDOUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDOUIsTUFBTSxLQUFLLG1CQUNQLE1BQU0sRUFBRSxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQy9FLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUNsQyxLQUFLO1lBQ0wsTUFBTSxJQUNILElBQUksQ0FDVixDQUFDO1FBQ0YsT0FBTyxvQkFBQyxlQUFlLG9CQUFLLEtBQUssRUFBRyxDQUFDO0lBQ3pDLENBQUM7O0FBQ00sbUJBQUssR0FBRztJQUNYLElBQUksUUFBUSxLQUFLLE9BQU8sUUFBMkIsQ0FBQyxDQUFDLENBQUM7SUFDdEQsSUFBSSxlQUFlLEtBQUssT0FBTyxlQUF5QyxDQUFDLENBQUMsQ0FBQztDQUM5RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgVGV4dEZpZWxkLCBUZXh0RmllbGRQcm9wcyB9IGZyb20gJy4uL1RleHRGaWVsZCc7XG5pbXBvcnQgeyBQcmVjaXNlVGhlbWUsIFRleHRJbnB1dFByb3BzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IEljb25MaW5rIH0gZnJvbSAnLi4vSWNvbkxpbmsnO1xuaW50ZXJmYWNlIFN0eWxlZFRleHRGaWVsZFByb3BzIGV4dGVuZHMgVGV4dEZpZWxkUHJvcHMge1xuICAgIHJldmVhbDogYm9vbGVhbjtcbn1cbmNvbnN0IFN0eWxlZFRleHRGaWVsZCA9IHN0eWxlZChUZXh0RmllbGQpPFN0eWxlZFRleHRGaWVsZFByb3BzPiBgXG4gIGZvbnQtZmFtaWx5OiAke3Byb3BzID0+IChwcm9wcy5yZXZlYWwgPyAnaW5oZXJpdCcgOiAnc2Fucy1zZXJpZicpfTtcbmA7XG5leHBvcnQgaW50ZXJmYWNlIFBhc3N3b3JkRmllbGRQcm9wcyBleHRlbmRzIFRleHRJbnB1dFByb3BzIHtcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiB2b2lkO1xufVxuZXhwb3J0IGludGVyZmFjZSBQYXNzd29yZEZpZWxkU3RhdGUge1xuICAgIHJldmVhbDogYm9vbGVhbjtcbn1cbi8qKlxuICogQSBwYXNzd29yZCBmaWVsZCBmb3IgY3VzdG9tIHVzZXIgaW5wdXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXNzd29yZEZpZWxkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFBhc3N3b3JkRmllbGRQcm9wcywgUGFzc3dvcmRGaWVsZFN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IFBhc3N3b3JkRmllbGRQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICByZXZlYWw6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBwcml2YXRlIHNob3dQYXNzd29yZCA9IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxBbmNob3JFbGVtZW50PikgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHJldmVhbDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuICAgIHByaXZhdGUgaGlkZVBhc3N3b3JkID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQ+KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcmV2ZWFsOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuICAgIHByaXZhdGUgcmVuZGVyRGVmYXVsdFN1ZmZpeChyZXZlYWw6IGJvb2xlYW4sIHRoZW1lPzogUHJlY2lzZVRoZW1lKSB7XG4gICAgICAgIGNvbnN0IGljb25OYW1lID0gcmV2ZWFsID8gJ1Zpc2liaWxpdHlPZmYnIDogJ1Zpc2liaWxpdHknO1xuICAgICAgICByZXR1cm4gPEljb25MaW5rIGljb249e2ljb25OYW1lfSBvbkNsaWNrPXtyZXZlYWwgPyB0aGlzLmhpZGVQYXNzd29yZCA6IHRoaXMuc2hvd1Bhc3N3b3JkfSB0aGVtZT17dGhlbWV9Lz47XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyB0aGVtZSwgc3VmZml4LCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7IHJldmVhbCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgICBzdWZmaXg6IHN1ZmZpeCA9PT0gdW5kZWZpbmVkID8gdGhpcy5yZW5kZXJEZWZhdWx0U3VmZml4KHJldmVhbCwgdGhlbWUpIDogc3VmZml4LFxuICAgICAgICAgICAgdHlwZTogcmV2ZWFsID8gJ3RleHQnIDogJ3Bhc3N3b3JkJyxcbiAgICAgICAgICAgIHRoZW1lLFxuICAgICAgICAgICAgcmV2ZWFsLFxuICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIDxTdHlsZWRUZXh0RmllbGQgey4uLnByb3BzfS8+O1xuICAgIH1cbiAgICBzdGF0aWMgaW5uZXIgPSB7XG4gICAgICAgIGdldCBJY29uTGluaygpIHsgcmV0dXJuIEljb25MaW5rIGFzIHR5cGVvZiBJY29uTGluazsgfSxcbiAgICAgICAgZ2V0IFN0eWxlZFRleHRGaWVsZCgpIHsgcmV0dXJuIFN0eWxlZFRleHRGaWVsZCBhcyB0eXBlb2YgU3R5bGVkVGV4dEZpZWxkOyB9XG4gICAgfTtcbn1cbiJdfQ==