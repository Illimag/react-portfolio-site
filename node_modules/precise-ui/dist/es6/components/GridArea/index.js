var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
const GridAreaContainer = styled.div `
  height: 100%;
`;
/**
 * The GridArea component to declare areas within a Grid instance.
 */
export class GridArea extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.clicked = (e) => {
            this.tapped(e.currentTarget, e.clientX, e.clientY);
        };
        this.touched = (e) => {
            const touch = e.touches[0];
            this.tapped(e.currentTarget, touch.clientX, touch.clientY);
        };
    }
    tapped(node, clientX, clientY) {
        const { onTap } = this.props;
        if (typeof onTap === 'function') {
            const r = node.getBoundingClientRect();
            onTap({
                node,
                x: clientX - r.left,
                y: clientY - r.top,
                width: r.width,
                height: r.height,
            });
        }
    }
    render() {
        const _a = this.props, { colSpan, rowSpan, column, row, onTap, hidden } = _a, props = __rest(_a, ["colSpan", "rowSpan", "column", "row", "onTap", "hidden"]);
        return React.createElement(GridAreaContainer, Object.assign({}, props, { onMouseDown: this.clicked, onTouchStartCapture: this.touched }));
    }
}
GridArea.inner = {
    get GridAreaContainer() { return GridAreaContainer; }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9HcmlkQXJlYS9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxNQUFNLE1BQU0sb0JBQW9CLENBQUM7QUFtQ3hDLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQzs7Q0FFcEMsQ0FBQztBQUNGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFFBQVMsU0FBUSxLQUFLLENBQUMsYUFBNEI7SUFBaEU7O1FBQ1ksWUFBTyxHQUFHLENBQUMsQ0FBbUMsRUFBRSxFQUFFO1lBQ3RELElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUM7UUFDTSxZQUFPLEdBQUcsQ0FBQyxDQUFtQyxFQUFFLEVBQUU7WUFDdEQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDO0lBcUJOLENBQUM7SUFwQlcsTUFBTSxDQUFDLElBQWlCLEVBQUUsT0FBZSxFQUFFLE9BQWU7UUFDOUQsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxPQUFPLEtBQUssS0FBSyxVQUFVLEVBQUU7WUFDN0IsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFDdkMsS0FBSyxDQUFDO2dCQUNGLElBQUk7Z0JBQ0osQ0FBQyxFQUFFLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSTtnQkFDbkIsQ0FBQyxFQUFFLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRztnQkFDbEIsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLO2dCQUNkLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTTthQUNuQixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFDRCxNQUFNO1FBQ0YsTUFBTSxlQUF1RSxFQUF2RSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxPQUF5QixFQUF2Qiw4RUFBdUIsQ0FBQztRQUM5RSxPQUFPLG9CQUFDLGlCQUFpQixvQkFBSyxLQUFLLElBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLE9BQU8sSUFBRyxDQUFDO0lBQ3pHLENBQUM7O0FBQ00sY0FBSyxHQUFHO0lBQ1gsSUFBSSxpQkFBaUIsS0FBSyxPQUFPLGlCQUE2QyxDQUFDLENBQUMsQ0FBQztDQUNwRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBHcmlkQ2VsbERlZmluaXRpb24gfSBmcm9tICcuLi8uLi91dGlscy9ncmlkTGF5b3V0JztcbmV4cG9ydCBpbnRlcmZhY2UgR3JpZEFyZWFUYXBFdmVudCB7XG4gICAgLyoqXG4gICAgICogVGhlIHNwZWNpZmljIHRhcmdldCB0aGF0IHdhcyB0YXBwZWQuXG4gICAgICovXG4gICAgbm9kZTogSFRNTEVsZW1lbnQ7XG4gICAgLyoqXG4gICAgICogVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgdGFwLlxuICAgICAqL1xuICAgIHg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSB0YXAuXG4gICAgICovXG4gICAgeTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgYm91bmRpbmcgYm94LlxuICAgICAqL1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGhlaWdodCBvZiB0aGUgYm91bmRpbmcgYm94LlxuICAgICAqL1xuICAgIGhlaWdodDogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBHcmlkQXJlYVByb3BzIGV4dGVuZHMgU3RhbmRhcmRQcm9wcywgR3JpZENlbGxEZWZpbml0aW9uIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY2hpbGRyZW4sIHVzdWFsbHkgcGFzc2VkIGFzIGEgY29sbGVjdGlvbiBvZiBUYWJQYWdlIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICAgIC8qKlxuICAgICAqIFRoZSBldmVudCB0aGF0IGlzIGZpcmVkIG9uY2UgdGhlIGVsZW1lbnQgaXMgY2xpY2tlZCBvciB0b3VjaGVkLlxuICAgICAqL1xuICAgIG9uVGFwPyhlOiBHcmlkQXJlYVRhcEV2ZW50KTogdm9pZDtcbn1cbmNvbnN0IEdyaWRBcmVhQ29udGFpbmVyID0gc3R5bGVkLmRpdiBgXG4gIGhlaWdodDogMTAwJTtcbmA7XG4vKipcbiAqIFRoZSBHcmlkQXJlYSBjb21wb25lbnQgdG8gZGVjbGFyZSBhcmVhcyB3aXRoaW4gYSBHcmlkIGluc3RhbmNlLlxuICovXG5leHBvcnQgY2xhc3MgR3JpZEFyZWEgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PEdyaWRBcmVhUHJvcHM+IHtcbiAgICBwcml2YXRlIGNsaWNrZWQgPSAoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgICAgICAgdGhpcy50YXBwZWQoZS5jdXJyZW50VGFyZ2V0LCBlLmNsaWVudFgsIGUuY2xpZW50WSk7XG4gICAgfTtcbiAgICBwcml2YXRlIHRvdWNoZWQgPSAoZTogUmVhY3QuVG91Y2hFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgICAgICAgY29uc3QgdG91Y2ggPSBlLnRvdWNoZXNbMF07XG4gICAgICAgIHRoaXMudGFwcGVkKGUuY3VycmVudFRhcmdldCwgdG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WSk7XG4gICAgfTtcbiAgICBwcml2YXRlIHRhcHBlZChub2RlOiBIVE1MRWxlbWVudCwgY2xpZW50WDogbnVtYmVyLCBjbGllbnRZOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBvblRhcCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKHR5cGVvZiBvblRhcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc3QgciA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBvblRhcCh7XG4gICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICB4OiBjbGllbnRYIC0gci5sZWZ0LFxuICAgICAgICAgICAgICAgIHk6IGNsaWVudFkgLSByLnRvcCxcbiAgICAgICAgICAgICAgICB3aWR0aDogci53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHIuaGVpZ2h0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNvbFNwYW4sIHJvd1NwYW4sIGNvbHVtbiwgcm93LCBvblRhcCwgaGlkZGVuLCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuIDxHcmlkQXJlYUNvbnRhaW5lciB7Li4ucHJvcHN9IG9uTW91c2VEb3duPXt0aGlzLmNsaWNrZWR9IG9uVG91Y2hTdGFydENhcHR1cmU9e3RoaXMudG91Y2hlZH0vPjtcbiAgICB9XG4gICAgc3RhdGljIGlubmVyID0ge1xuICAgICAgICBnZXQgR3JpZEFyZWFDb250YWluZXIoKSB7IHJldHVybiBHcmlkQXJlYUNvbnRhaW5lciBhcyB0eXBlb2YgR3JpZEFyZWFDb250YWluZXI7IH1cbiAgICB9O1xufVxuIl19