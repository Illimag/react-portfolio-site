var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { Prompt } from '../Prompt';
import { FormContext } from '../../contexts';
const StyledForm = styled.form `
  margin: 0;
`;
function isDifferent(a, b) {
    if (a !== b) {
        if (Array.isArray(a) && Array.isArray(b)) {
            if (a.length === b.length) {
                for (let i = 0; i < a.length; i++) {
                    if (isDifferent(a[i], b[i])) {
                        return true;
                    }
                }
                return false;
            }
        }
        else if (typeof a === 'object' && typeof b === 'object') {
            const keysA = Object.keys(a);
            const keysB = Object.keys(b);
            if (keysA.length === keysB.length) {
                for (const key of keysA) {
                    if (isDifferent(a[key], b[key])) {
                        return true;
                    }
                }
                return false;
            }
        }
        return true;
    }
    return false;
}
function isChanged(initial, current) {
    const keys = Object.keys(current);
    for (const key of keys) {
        if (isDifferent(current[key], initial[key])) {
            return true;
        }
    }
    return false;
}
/**
 * Represents a field aggregator that enables easily creating forms.
 */
export class Form extends React.Component {
    constructor(props) {
        super(props);
        this.fields = [];
        this.ctx = this.createContext();
        this.submit = (e) => {
            const { onSubmit, disabled } = this.props;
            const { current, changed, errors } = this.state;
            this.setErrors(current);
            if (!disabled && typeof onSubmit === 'function') {
                const arrayErrors = Object.keys(errors).reduce((arrayErrors, field) => {
                    const error = errors[field];
                    if (error) {
                        arrayErrors.push({ field, error });
                    }
                    return arrayErrors;
                }, []);
                this.setState({
                    changed: false,
                    initial: current,
                }, () => onSubmit({
                    data: current,
                    errors: arrayErrors,
                    changed,
                }));
            }
            e.preventDefault();
            return false;
        };
        const data = props.value || props.defaultValue || {};
        this.state = {
            changed: false,
            controlled: props.value !== undefined,
            initial: data,
            current: data,
            errors: {},
        };
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        const { controlled, initial } = this.state;
        if (controlled) {
            const { value = {} } = nextProps;
            const changed = isChanged(initial, value);
            this.setValues(value, changed);
        }
    }
    setValues(current, changed) {
        const keys = Object.keys(current);
        this.setState({
            current,
            changed,
        });
        for (const key of keys) {
            const value = current[key];
            for (const field of this.fields) {
                if (field.props.name === key && field.state.value !== value) {
                    field.setState({
                        value,
                    });
                }
            }
        }
    }
    getError(name, value) {
        const validator = this.props.validationRules && this.props.validationRules[name];
        const validationResult = validator ? validator(value) : true;
        const error = validationResult === true ? undefined : validationResult;
        return error;
    }
    setFieldError(name, error) {
        for (const fieldEntity of this.fields) {
            if (fieldEntity.props.name === name) {
                fieldEntity.setState({ error });
                return;
            }
        }
    }
    setError({ name, value }) {
        const error = this.getError(name, value);
        this.setFieldError(name, error);
        this.setState({ errors: Object.assign({}, this.state.errors, { [name]: error }) });
    }
    setErrors(current) {
        const keys = Object.keys(current);
        const errors = Object.assign({}, this.state.errors);
        for (const key of keys) {
            const value = current[key];
            const error = this.getError(key, value);
            errors[key] = error;
            this.setFieldError(key, error);
        }
        this.setState({ errors });
    }
    createContext() {
        return {
            change: (field) => {
                const { onChange } = this.props;
                const { controlled, current, initial } = this.state;
                const proposed = Object.assign({}, current, { [field.name]: field.value });
                const changed = isChanged(initial, proposed);
                if (!controlled) {
                    this.setValues(proposed, changed);
                }
                this.setError(field);
                if (typeof onChange === 'function') {
                    onChange({
                        changed,
                        value: proposed,
                    });
                }
            },
            subscribe: (field) => {
                const { current, errors = {} } = this.state;
                const { name } = field.props;
                if (name) {
                    this.fields.push(field);
                    let error;
                    if (name in current) {
                        const value = current[name];
                        error = this.getError(name, value);
                        field.setState({
                            value,
                        });
                    }
                    else {
                        const value = field.state.value;
                        current[name] = value;
                        error = this.getError(name, value);
                    }
                    if (error) {
                        this.setState({ errors: Object.assign({}, errors, { [name]: error }) });
                    }
                }
            },
            unsubscribe: (field) => {
                const index = this.fields.indexOf(field);
                index >= 0 && this.fields.splice(index, 1);
            },
        };
    }
    render() {
        const _a = this.props, { value: _0, defaultValue: _1, onChange: _2, onSubmit: _3, disabled: _4, children, prompt } = _a, rest = __rest(_a, ["value", "defaultValue", "onChange", "onSubmit", "disabled", "children", "prompt"]);
        const { changed } = this.state;
        return (React.createElement(StyledForm, Object.assign({}, rest, { onSubmit: this.submit }),
            prompt && (typeof prompt === 'function' ? prompt(changed) : React.createElement(Prompt, { when: changed, message: prompt })),
            React.createElement(FormContext.Provider, { value: this.ctx }, children)));
    }
}
Form.inner = {
    get StyledForm() { return StyledForm; },
    get Prompt() { return Prompt; }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Gb3JtL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLE1BQU0sTUFBTSxvQkFBb0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxXQUFXLEVBQXVELE1BQU0sZ0JBQWdCLENBQUM7QUE2RWxHLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7O0NBRTlCLENBQUM7QUFDRixTQUFTLFdBQVcsQ0FBQyxDQUFNLEVBQUUsQ0FBTTtJQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDVCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRTtnQkFDdkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQy9CLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDekIsT0FBTyxJQUFJLENBQUM7cUJBQ2Y7aUJBQ0o7Z0JBQ0QsT0FBTyxLQUFLLENBQUM7YUFDaEI7U0FDSjthQUNJLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUNyRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sS0FBSyxHQUFH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RSxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUF3QixFQUF0QixzR0FBc0IsQ0FBQztRQUN4SCxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMvQixPQUFPLENBQUMsb0JBQUMsVUFBVSxvQkFBSyxJQUFJLElBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2xELE1BQU0sSUFBSSxDQUFDLE9BQU8sTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBQyxNQUFNLElBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxHQUFHLENBQUM7WUFDdkcsb0JBQUMsV0FBVyxDQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBRyxRQUFRLENBQXdCLENBQzdELENBQUMsQ0FBQztJQUNqQixDQUFDOztBQUNNLFVBQUssR0FBRztJQUNYLElBQUksVUFBVSxLQUFLLE9BQU8sVUFBK0IsQ0FBQyxDQUFDLENBQUM7SUFDNUQsSUFBSSxNQUFNLEtBQUssT0FBTyxNQUF1QixDQUFDLENBQUMsQ0FBQztDQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgUHJvbXB0IH0gZnJvbSAnLi4vUHJvbXB0JztcbmltcG9ydCB7IEZvcm1Db250ZXh0LCBGb3JtQ29udGV4dFR5cGUsIEZvcm1WYWx1ZU5vdGlmaWVyLCBGb3JtVmFsdWVDaGFuZ2UgfSBmcm9tICcuLi8uLi9jb250ZXh0cyc7XG5pbXBvcnQgeyBTdGFuZGFyZFByb3BzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmV4cG9ydCBpbnRlcmZhY2UgRm9ybVN1Ym1pdEV2ZW50IHtcbiAgICAvKipcbiAgICAgKiBUaGUgZGF0YSB0byBiZSBzdWJtaXR0ZWQuXG4gICAgICovXG4gICAgZGF0YTogRm9ybVZhbHVlc0RhdGE7XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGlvbiBlcnJvcnNcbiAgICAgKi9cbiAgICBlcnJvcnM/OiBBcnJheTxGb3JtVmFsaWRhdGlvbkVycm9yPjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZGF0YSBoYXMgY2hhbmdlZCBmcm9tIHRoZSBpbml0aWFsIHN0YXRlLlxuICAgICAqL1xuICAgIGNoYW5nZWQ6IGJvb2xlYW47XG59XG5leHBvcnQgaW50ZXJmYWNlIEZvcm1DaGFuZ2VFdmVudCB7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgdmFsdWVzIG9mIHRoZSBmb3JtIGZpZWxkcy5cbiAgICAgKi9cbiAgICB2YWx1ZTogRm9ybVZhbHVlc0RhdGE7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGRhdGEgaGFzIGNoYW5nZWQgZnJvbSB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAgICAgKi9cbiAgICBjaGFuZ2VkOiBib29sZWFuO1xufVxuZXhwb3J0IGludGVyZmFjZSBGb3JtVmFsdWVzRGF0YSB7XG4gICAgW25hbWU6IHN0cmluZ106IGFueTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRm9ybVZhbGlkYXRpb25FcnJvciB7XG4gICAgZmllbGQ6IHN0cmluZztcbiAgICBlcnJvcjogUmVhY3QuUmVhY3RDaGlsZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRm9ybVByb3BzPEZvcm1WYWx1ZXM+IGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIGdpdmVuIG1lc3NhZ2UgaWYgdGhlIHVzZXIgd2FudHMgdG8gbmF2aWdhdGVcbiAgICAgKiB3aXRoIGNoYW5nZXMgYmVpbmcgbWFkZSBvciByZW5kZXJzIGN1c3RvbSBjb21wb25lbnQgd2l0aCBtZXNzYWdlIGlmIHByb3ZpZGVkLlxuICAgICAqL1xuICAgIHByb21wdD86ICgoY2hhbmdlZDogYm9vbGVhbikgPT4gUmVhY3QuUmVhY3RDaGlsZCkgfCBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIG9mIHRoZSBmb3JtIHRvIGJlIHVzZWQgaW4gY29udHJvbGxlZCBtb2RlLlxuICAgICAqL1xuICAgIHZhbHVlPzogRm9ybVZhbHVlcztcbiAgICAvKipcbiAgICAgKiBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgZm9ybSB0byBiZSB1c2VkIGluIG1hbmFnZWQgbW9kZS5cbiAgICAgKi9cbiAgICBkZWZhdWx0VmFsdWU/OiBGb3JtVmFsdWVzO1xuICAgIC8qKlxuICAgICAqIFJ1bGVzIGZvciB2YWxpZGF0aW5nIGZpZWxkcyB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFsaWRhdGlvblJ1bGVzPzoge1xuICAgICAgICBbVCBpbiBrZXlvZiBGb3JtVmFsdWVzXT86ICh2YWx1ZTogYW55KSA9PiBSZWFjdC5SZWFjdENoaWxkIHwgdHJ1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBhIGZpZWxkIG9mIHRoZSBmb3JtIGNoYW5nZWQuXG4gICAgICovXG4gICAgb25DaGFuZ2U/KGU6IEZvcm1DaGFuZ2VFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBmb3JtIGlzIHN1Ym1pdHRlZC5cbiAgICAgKi9cbiAgICBvblN1Ym1pdD8oZTogRm9ybVN1Ym1pdEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyB0aGUgZm9ybSBpbiBjYXNlIG9mIGludmFsaWQgaW5wdXQuIEVmZmVjdGl2ZWx5XG4gICAgICogZGlzYWJsZXMgdGhlIHBvc3NpYmlsaXR5IG9mIHN1Ym1pdHRpbmcgZm9ybXMuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG59XG5leHBvcnQgaW50ZXJmYWNlIEZvcm1TdGF0ZTxGb3JtVmFsdWVzPiB7XG4gICAgY2hhbmdlZDogYm9vbGVhbjtcbiAgICBpbml0aWFsOiBGb3JtVmFsdWVzO1xuICAgIGNvbnRyb2xsZWQ6IGJvb2xlYW47XG4gICAgY3VycmVudDogRm9ybVZhbHVlcztcbiAgICBlcnJvcnM6IFBhcnRpYWw8e1xuICAgICAgICBbVCBpbiBrZXlvZiBGb3JtVmFsdWVzXTogUmVhY3QuUmVhY3RDaGlsZDtcbiAgICB9Pjtcbn1cbmNvbnN0IFN0eWxlZEZvcm0gPSBzdHlsZWQuZm9ybSBgXG4gIG1hcmdpbjogMDtcbmA7XG5mdW5jdGlvbiBpc0RpZmZlcmVudChhOiBhbnksIGI6IGFueSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGEpICYmIEFycmF5LmlzQXJyYXkoYikpIHtcbiAgICAgICAgICAgIGlmIChhLmxlbmd0aCA9PT0gYi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGlmZmVyZW50KGFbaV0sIGJbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnICYmIHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgICAgIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgICAgICBpZiAoa2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzQSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEaWZmZXJlbnQoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzQ2hhbmdlZChpbml0aWFsOiBGb3JtVmFsdWVzRGF0YSwgY3VycmVudDogRm9ybVZhbHVlc0RhdGEpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY3VycmVudCk7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICBpZiAoaXNEaWZmZXJlbnQoY3VycmVudFtrZXldLCBpbml0aWFsW2tleV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYSBmaWVsZCBhZ2dyZWdhdG9yIHRoYXQgZW5hYmxlcyBlYXNpbHkgY3JlYXRpbmcgZm9ybXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBGb3JtPFZhbHVlcyBleHRlbmRzIEZvcm1WYWx1ZXNEYXRhPiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxGb3JtUHJvcHM8VmFsdWVzPiwgRm9ybVN0YXRlPFZhbHVlcz4+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpZWxkczogQXJyYXk8Rm9ybVZhbHVlTm90aWZpZXI+ID0gW107XG4gICAgcHJpdmF0ZSByZWFkb25seSBjdHg6IEZvcm1Db250ZXh0VHlwZSA9IHRoaXMuY3JlYXRlQ29udGV4dCgpO1xuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBGb3JtUHJvcHM8VmFsdWVzPikge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBwcm9wcy52YWx1ZSB8fCBwcm9wcy5kZWZhdWx0VmFsdWUgfHwge307XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjaGFuZ2VkOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbnRyb2xsZWQ6IHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBpbml0aWFsOiBkYXRhIGFzIFZhbHVlcyxcbiAgICAgICAgICAgIGN1cnJlbnQ6IGRhdGEgYXMgVmFsdWVzLFxuICAgICAgICAgICAgZXJyb3JzOiB7fSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzOiBGb3JtUHJvcHM8VmFsdWVzPikge1xuICAgICAgICBjb25zdCB7IGNvbnRyb2xsZWQsIGluaXRpYWwgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmIChjb250cm9sbGVkKSB7XG4gICAgICAgICAgICBjb25zdCB7IHZhbHVlID0ge30gfSA9IG5leHRQcm9wcyBhcyBWYWx1ZXM7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VkID0gaXNDaGFuZ2VkKGluaXRpYWwsIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVzKHZhbHVlLCBjaGFuZ2VkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIHNldFZhbHVlcyhjdXJyZW50OiBWYWx1ZXMsIGNoYW5nZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGN1cnJlbnQpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICBjaGFuZ2VkLFxuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50W2tleV07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHRoaXMuZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkLnByb3BzLm5hbWUgPT09IGtleSAmJiBmaWVsZC5zdGF0ZS52YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIGdldEVycm9yKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSB0aGlzLnByb3BzLnZhbGlkYXRpb25SdWxlcyAmJiB0aGlzLnByb3BzLnZhbGlkYXRpb25SdWxlc1tuYW1lXTtcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSkgOiB0cnVlO1xuICAgICAgICBjb25zdCBlcnJvciA9IHZhbGlkYXRpb25SZXN1bHQgPT09IHRydWUgPyB1bmRlZmluZWQgOiB2YWxpZGF0aW9uUmVzdWx0O1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuICAgIHByaXZhdGUgc2V0RmllbGRFcnJvcihuYW1lOiBrZXlvZiBWYWx1ZXMsIGVycm9yPzogUmVhY3QuUmVhY3RDaGlsZCkge1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkRW50aXR5IG9mIHRoaXMuZmllbGRzKSB7XG4gICAgICAgICAgICBpZiAoZmllbGRFbnRpdHkucHJvcHMubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIGZpZWxkRW50aXR5LnNldFN0YXRlKHsgZXJyb3IgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHByaXZhdGUgc2V0RXJyb3IoeyBuYW1lLCB2YWx1ZSB9OiBGb3JtVmFsdWVDaGFuZ2UpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSB0aGlzLmdldEVycm9yKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5zZXRGaWVsZEVycm9yKG5hbWUsIGVycm9yKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yczogeyAuLi50aGlzLnN0YXRlLmVycm9ycywgW25hbWVdOiBlcnJvciB9IH0pO1xuICAgIH1cbiAgICBwcml2YXRlIHNldEVycm9ycyhjdXJyZW50OiBWYWx1ZXMpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGN1cnJlbnQpO1xuICAgICAgICBjb25zdCBlcnJvcnMgPSB7IC4uLnRoaXMuc3RhdGUuZXJyb3JzIH07XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudFtrZXldO1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB0aGlzLmdldEVycm9yKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgZXJyb3JzW2tleV0gPSBlcnJvcjtcbiAgICAgICAgICAgIHRoaXMuc2V0RmllbGRFcnJvcihrZXksIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JzIH0pO1xuICAgIH1cbiAgICBwcml2YXRlIGNyZWF0ZUNvbnRleHQoKTogRm9ybUNvbnRleHRUeXBlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoYW5nZTogKGZpZWxkOiBGb3JtVmFsdWVDaGFuZ2UpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY29udHJvbGxlZCwgY3VycmVudCwgaW5pdGlhbCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wb3NlZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY3VycmVudCxcbiAgICAgICAgICAgICAgICAgICAgW2ZpZWxkLm5hbWVdOiBmaWVsZC52YWx1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZWQgPSBpc0NoYW5nZWQoaW5pdGlhbCwgcHJvcG9zZWQpO1xuICAgICAgICAgICAgICAgIGlmICghY29udHJvbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlcyhwcm9wb3NlZCwgY2hhbmdlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3IoZmllbGQpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb25DaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9wb3NlZCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1YnNjcmliZTogKGZpZWxkOiBGb3JtVmFsdWVOb3RpZmllcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY3VycmVudCwgZXJyb3JzID0ge30gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBmaWVsZC5wcm9wcztcbiAgICAgICAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSBpbiBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuZ2V0RXJyb3IobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZpZWxkLnN0YXRlLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFtuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmdldEVycm9yKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvcnM6IHsgLi4uZXJyb3JzLCBbbmFtZV06IGVycm9yIH0gYXMgRm9ybVN0YXRlPFZhbHVlcz5bJ2Vycm9ycyddIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiAoZmllbGQ6IEZvcm1WYWx1ZU5vdGlmaWVyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmZpZWxkcy5pbmRleE9mKGZpZWxkKTtcbiAgICAgICAgICAgICAgICBpbmRleCA+PSAwICYmIHRoaXMuZmllbGRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBwcml2YXRlIHN1Ym1pdCA9IChlOiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PikgPT4ge1xuICAgICAgICBjb25zdCB7IG9uU3VibWl0LCBkaXNhYmxlZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBjdXJyZW50LCBjaGFuZ2VkLCBlcnJvcnMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JzKGN1cnJlbnQpO1xuICAgICAgICBpZiAoIWRpc2FibGVkICYmIHR5cGVvZiBvblN1Ym1pdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc3QgYXJyYXlFcnJvcnMgPSBPYmplY3Qua2V5cyhlcnJvcnMpLnJlZHVjZTxBcnJheTxGb3JtVmFsaWRhdGlvbkVycm9yPj4oKGFycmF5RXJyb3JzLCBmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZXJyb3JzW2ZpZWxkXTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlFcnJvcnMucHVzaCh7IGZpZWxkLCBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5RXJyb3JzO1xuICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY2hhbmdlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5pdGlhbDogY3VycmVudCxcbiAgICAgICAgICAgIH0sICgpID0+IG9uU3VibWl0KHtcbiAgICAgICAgICAgICAgICBkYXRhOiBjdXJyZW50LFxuICAgICAgICAgICAgICAgIGVycm9yczogYXJyYXlFcnJvcnMsXG4gICAgICAgICAgICAgICAgY2hhbmdlZCxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZTogXzAsIGRlZmF1bHRWYWx1ZTogXzEsIG9uQ2hhbmdlOiBfMiwgb25TdWJtaXQ6IF8zLCBkaXNhYmxlZDogXzQsIGNoaWxkcmVuLCBwcm9tcHQsIC4uLnJlc3QgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgY2hhbmdlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuICg8U3R5bGVkRm9ybSB7Li4ucmVzdH0gb25TdWJtaXQ9e3RoaXMuc3VibWl0fT5cbiAgICAgICAge3Byb21wdCAmJiAodHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChjaGFuZ2VkKSA6IDxQcm9tcHQgd2hlbj17Y2hhbmdlZH0gbWVzc2FnZT17cHJvbXB0fS8+KX1cbiAgICAgICAgPEZvcm1Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGlzLmN0eH0+e2NoaWxkcmVufTwvRm9ybUNvbnRleHQuUHJvdmlkZXI+XG4gICAgICA8L1N0eWxlZEZvcm0+KTtcbiAgICB9XG4gICAgc3RhdGljIGlubmVyID0ge1xuICAgICAgICBnZXQgU3R5bGVkRm9ybSgpIHsgcmV0dXJuIFN0eWxlZEZvcm0gYXMgdHlwZW9mIFN0eWxlZEZvcm07IH0sXG4gICAgICAgIGdldCBQcm9tcHQoKSB7IHJldHVybiBQcm9tcHQgYXMgdHlwZW9mIFByb21wdDsgfVxuICAgIH07XG59XG4iXX0=