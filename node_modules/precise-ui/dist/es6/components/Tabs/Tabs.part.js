var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { breakpoints } from '../../themes';
import { withResponsiveMode } from '../../hoc';
import { TabContent, TabHeader, TabHeaders } from '../TabPanel/TabPanel.part';
import { DropdownContainer, SlideDownTabs } from '../DropdownPanel/DropdownPanel.part';
const TabInt = Object.assign(((_a) => {
    var { theme, mode, innerRef, activeIndex = 0, onSelect, headers = [], children } = _a, props = __rest(_a, ["theme", "mode", "innerRef", "activeIndex", "onSelect", "headers", "children"]);
    let TabHeaderHolder = false;
    if (mode === 'tab') {
        TabHeaderHolder = (React.createElement(TabHeaders, Object.assign({ theme: theme }, props), headers.map((text, index) => (React.createElement(TabHeader, { theme: theme, key: `head-${index}`, active: index === activeIndex, onClick: () => onSelect(index) }, text)))));
    }
    else if (mode === 'dropdown') {
        TabHeaderHolder = (React.createElement(DropdownContainer, Object.assign({ theme: theme }, props),
            React.createElement(SlideDownTabs, { data: headers.map((content, index) => ({
                    key: `${index}`,
                    content,
                    type: 'item',
                })), selectedIndex: activeIndex, onChange: onSelect })));
    }
    return (React.createElement("div", { ref: innerRef },
        TabHeaderHolder,
        React.createElement(TabContent, { theme: theme }, children)));
}), { inner: {
        get TabHeaders() { return TabHeaders; },
        get TabHeader() { return TabHeader; },
        get DropdownContainer() { return DropdownContainer; },
        get SlideDownTabs() { return SlideDownTabs; },
        get TabContent() { return TabContent; }
    } });
export const ResponsiveTabs = withResponsiveMode(width => !width || width > breakpoints.medium ? 'tab' : 'dropdown')(TabInt);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFicy5wYXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVGFicy9UYWJzLnBhcnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBRS9CLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFM0MsT0FBTyxFQUFxQixrQkFBa0IsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNsRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUFpQixNQUFNLHFDQUFxQyxDQUFDO0FBSXRHLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDLEVBQXNGLEVBQUUsRUFBRTtRQUExRixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQUUsUUFBUSxPQUFZLEVBQVYsbUdBQVE7SUFDaEgsSUFBSSxlQUFlLEdBQW9CLEtBQUssQ0FBQztJQUM3QyxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7UUFDaEIsZUFBZSxHQUFHLENBQUMsb0JBQUMsVUFBVSxrQkFBQyxLQUFLLEVBQUUsS0FBSyxJQUFNLEtBQUssR0FDckQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsb0JBQUMsU0FBUyxJQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFFBQVEsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssS0FBSyxXQUFXLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFDdEksSUFBSSxDQUNLLENBQUMsQ0FBQyxDQUNMLENBQUMsQ0FBQztLQUNoQjtTQUNJLElBQUksSUFBSSxLQUFLLFVBQVUsRUFBRTtRQUMxQixlQUFlLEdBQUcsQ0FBQyxvQkFBQyxpQkFBaUIsa0JBQUMsS0FBSyxFQUFFLEtBQUssSUFBTSxLQUFLO1lBQzdELG9CQUFDLGFBQWEsSUFBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ2xELEdBQUcsRUFBRSxHQUFHLEtBQUssRUFBRTtvQkFDZixPQUFPO29CQUNQLElBQUksRUFBRSxNQUFNO2lCQUNHLENBQUEsQ0FBQyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFFBQVEsR0FBRyxDQUNyRCxDQUFDLENBQUM7S0FDdkI7SUFDRCxPQUFPLENBQUMsNkJBQUssR0FBRyxFQUFFLFFBQVE7UUFDdkIsZUFBZTtRQUNoQixvQkFBQyxVQUFVLElBQUMsS0FBSyxFQUFFLEtBQUssSUFBRyxRQUFRLENBQWMsQ0FDN0MsQ0FBQyxDQUFDO0FBQ1osQ0FBQyxDQUFvRCxFQUFFLEVBQUUsS0FBSyxFQUFFO1FBQ3hELElBQUksVUFBVSxLQUFLLE9BQU8sVUFBK0IsQ0FBQyxDQUFDLENBQUM7UUFDNUQsSUFBSSxTQUFTLEtBQUssT0FBTyxTQUE2QixDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLGlCQUFpQixLQUFLLE9BQU8saUJBQTZDLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLElBQUksYUFBYSxLQUFLLE9BQU8sYUFBcUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsSUFBSSxVQUFVLEtBQUssT0FBTyxVQUErQixDQUFDLENBQUMsQ0FBQztLQUMvRCxFQUFFLENBQUMsQ0FBQztBQU1ULE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBdUIsa0JBQWtCLENBQXFCLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdGFuZGFyZFByb3BzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IGJyZWFrcG9pbnRzIH0gZnJvbSAnLi4vLi4vdGhlbWVzJztcbmltcG9ydCB7IFRhYkNvbnRyb2xIb2xkZXJQcm9wcyB9IGZyb20gJy4uL1RhYkNvbnRyb2wnO1xuaW1wb3J0IHsgTW9kZVByb3ZpZGVyUHJvcHMsIHdpdGhSZXNwb25zaXZlTW9kZSB9IGZyb20gJy4uLy4uL2hvYyc7XG5pbXBvcnQgeyBUYWJDb250ZW50LCBUYWJIZWFkZXIsIFRhYkhlYWRlcnMgfSBmcm9tICcuLi9UYWJQYW5lbC9UYWJQYW5lbC5wYXJ0JztcbmltcG9ydCB7IERyb3Bkb3duQ29udGFpbmVyLCBTbGlkZURvd25UYWJzLCBUYWJIZWFkZXJJdGVtIH0gZnJvbSAnLi4vRHJvcGRvd25QYW5lbC9Ecm9wZG93blBhbmVsLnBhcnQnO1xuZXhwb3J0IHR5cGUgVGFic01vZGUgPSAndGFiJyB8ICdkcm9wZG93bic7XG5leHBvcnQgaW50ZXJmYWNlIFRhYkludFByb3BzIGV4dGVuZHMgU3RhbmRhcmRQcm9wcywgTW9kZVByb3ZpZGVyUHJvcHM8VGFic01vZGU+LCBUYWJDb250cm9sSG9sZGVyUHJvcHMge1xufVxuY29uc3QgVGFiSW50ID0gT2JqZWN0LmFzc2lnbigoKCh7IHRoZW1lLCBtb2RlLCBpbm5lclJlZiwgYWN0aXZlSW5kZXggPSAwLCBvblNlbGVjdCwgaGVhZGVycyA9IFtdLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIGxldCBUYWJIZWFkZXJIb2xkZXI6IFJlYWN0LlJlYWN0Tm9kZSA9IGZhbHNlO1xuICAgIGlmIChtb2RlID09PSAndGFiJykge1xuICAgICAgICBUYWJIZWFkZXJIb2xkZXIgPSAoPFRhYkhlYWRlcnMgdGhlbWU9e3RoZW1lfSB7Li4ucHJvcHN9PlxuICAgICAgICB7aGVhZGVycy5tYXAoKHRleHQsIGluZGV4KSA9PiAoPFRhYkhlYWRlciB0aGVtZT17dGhlbWV9IGtleT17YGhlYWQtJHtpbmRleH1gfSBhY3RpdmU9e2luZGV4ID09PSBhY3RpdmVJbmRleH0gb25DbGljaz17KCkgPT4gb25TZWxlY3QoaW5kZXgpfT5cbiAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgIDwvVGFiSGVhZGVyPikpfVxuICAgICAgPC9UYWJIZWFkZXJzPik7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1vZGUgPT09ICdkcm9wZG93bicpIHtcbiAgICAgICAgVGFiSGVhZGVySG9sZGVyID0gKDxEcm9wZG93bkNvbnRhaW5lciB0aGVtZT17dGhlbWV9IHsuLi5wcm9wc30+XG4gICAgICAgIDxTbGlkZURvd25UYWJzIGRhdGE9e2hlYWRlcnMubWFwKChjb250ZW50LCBpbmRleCkgPT4gKHtcbiAgICAgICAgICAgIGtleTogYCR7aW5kZXh9YCxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB0eXBlOiAnaXRlbScsXG4gICAgICAgIH0gYXMgVGFiSGVhZGVySXRlbSkpfSBzZWxlY3RlZEluZGV4PXthY3RpdmVJbmRleH0gb25DaGFuZ2U9e29uU2VsZWN0fS8+XG4gICAgICA8L0Ryb3Bkb3duQ29udGFpbmVyPik7XG4gICAgfVxuICAgIHJldHVybiAoPGRpdiByZWY9e2lubmVyUmVmfT5cbiAgICAgIHtUYWJIZWFkZXJIb2xkZXJ9XG4gICAgICA8VGFiQ29udGVudCB0aGVtZT17dGhlbWV9PntjaGlsZHJlbn08L1RhYkNvbnRlbnQ+XG4gICAgPC9kaXY+KTtcbn0pIGFzIFJlYWN0LkZDPFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPFRhYkludFByb3BzPj4pLCB7IGlubmVyOiB7XG4gICAgICAgIGdldCBUYWJIZWFkZXJzKCkgeyByZXR1cm4gVGFiSGVhZGVycyBhcyB0eXBlb2YgVGFiSGVhZGVyczsgfSxcbiAgICAgICAgZ2V0IFRhYkhlYWRlcigpIHsgcmV0dXJuIFRhYkhlYWRlciBhcyB0eXBlb2YgVGFiSGVhZGVyOyB9LFxuICAgICAgICBnZXQgRHJvcGRvd25Db250YWluZXIoKSB7IHJldHVybiBEcm9wZG93bkNvbnRhaW5lciBhcyB0eXBlb2YgRHJvcGRvd25Db250YWluZXI7IH0sXG4gICAgICAgIGdldCBTbGlkZURvd25UYWJzKCkgeyByZXR1cm4gU2xpZGVEb3duVGFicyBhcyB0eXBlb2YgU2xpZGVEb3duVGFiczsgfSxcbiAgICAgICAgZ2V0IFRhYkNvbnRlbnQoKSB7IHJldHVybiBUYWJDb250ZW50IGFzIHR5cGVvZiBUYWJDb250ZW50OyB9XG4gICAgfSB9KTtcbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2l2ZVRhYnNUeXBlIGV4dGVuZHMgUmVhY3QuRkM8VGFiSW50UHJvcHM+IHtcbiAgICAocHJvcHM6IFRhYkludFByb3BzICYge1xuICAgICAgICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICB9LCBjb250ZXh0PzogYW55KTogSlNYLkVsZW1lbnQ7XG59XG5leHBvcnQgY29uc3QgUmVzcG9uc2l2ZVRhYnM6IFJlc3BvbnNpdmVUYWJzVHlwZSA9IHdpdGhSZXNwb25zaXZlTW9kZTwndGFiJyB8ICdkcm9wZG93bic+KHdpZHRoID0+ICF3aWR0aCB8fCB3aWR0aCA+IGJyZWFrcG9pbnRzLm1lZGl1bSA/ICd0YWInIDogJ2Ryb3Bkb3duJykoVGFiSW50KSBhcyBhbnk7XG4iXX0=