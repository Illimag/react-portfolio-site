import * as React from 'react';
import { withFormContext } from '../../hoc/withFormContext';
import { RadioButtonGroupContext, } from '../../contexts/RadioButtonGroupContext';
class RadioButtonGroupInt extends React.PureComponent {
    constructor(props) {
        super(props);
        this.buttons = [];
        this.ctx = this.createContext();
        this.getNextValue = (groupItemName) => {
            const { multiple } = this.props;
            const { value } = this.state;
            if (value && Array.isArray(value) && groupItemName) {
                if (value.indexOf(groupItemName) !== -1) {
                    return value.filter(f => f !== groupItemName);
                }
                return [...value, groupItemName];
            }
            return multiple && groupItemName ? [groupItemName] : groupItemName;
        };
        const controlled = props.value !== undefined;
        const { value: propValue, defaultValue } = props;
        const value = controlled ? propValue : defaultValue;
        this.state = {
            controlled,
            value,
        };
    }
    setState(state) {
        const value = state.value;
        if (value) {
            for (const button of this.buttons) {
                const selected = Array.isArray(value) && button.name ? value.indexOf(button.name) !== -1 : button.name === value;
                button.setValue(selected);
            }
            super.setState(Object.assign({}, state, { value }));
        }
        super.setState(state);
    }
    componentDidMount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.subscribe(this);
        }
    }
    componentWillUnmount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    }
    UNSAFE_componentWillReceiveProps({ value }) {
        const { controlled } = this.state;
        if (controlled) {
            this.setState({
                value,
            });
        }
    }
    createContext() {
        return {
            select: (rb) => {
                const { onChange, form, name = '' } = this.props;
                const { controlled } = this.state;
                const value = this.getNextValue(rb.name);
                if (!controlled) {
                    if (form) {
                        form.change({
                            name,
                            value,
                        });
                    }
                    else if (value) {
                        this.setState({
                            value,
                        });
                    }
                    else {
                        for (const button of this.buttons) {
                            button.setValue(button === rb);
                        }
                        super.setState({
                            value: undefined,
                        });
                    }
                }
                if (typeof onChange === 'function' && value) {
                    onChange({
                        value,
                    });
                }
            },
            subscribe: (rb) => {
                const { value } = this.state;
                this.buttons.push(rb);
                if (value !== undefined) {
                    const selected = Array.isArray(value) && rb.name ? value.indexOf(rb.name) !== -1 : rb.name === value;
                    rb.setValue(selected);
                }
            },
            unsubscribe: (rb) => {
                const index = this.buttons.indexOf(rb);
                index >= 0 && this.buttons.splice(index, 1);
            },
        };
    }
    render() {
        return React.createElement(RadioButtonGroupContext.Provider, { value: this.ctx }, this.props.children);
    }
}
/**
 * The radio button group manages a group of radio buttons.
 */
export const RadioButtonGroup = withFormContext(RadioButtonGroupInt);
RadioButtonGroup.displayName = 'RadioButtonGroup';
//# sourceMappingURL=data:application/json;base64,