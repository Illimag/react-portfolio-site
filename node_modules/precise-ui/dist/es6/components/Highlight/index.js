import * as React from 'react';
import styled, { themed } from '../../utils/styled';
const Highlighted = styled.span `
  background-color: ${themed(props => props.theme.highlightColor)};
`;
/**
 * Validates that the matches provided are valid, if not it will throw an error
 *
 * @param matches
 */
function validateMatches(matches) {
    let lastMatch = -1;
    if (!Array.isArray(matches)) {
        throw Error(`match must be an Array of [start, end], but provided ${JSON.stringify(matches)}`);
    }
    matches.forEach(match => {
        if (!Array.isArray(match) || match.length !== 2) {
            throw Error('match must be an Array of [start, end]');
        }
        if (!Number.isInteger(match[0]) || !Number.isInteger(match[1]) || match[0] < 0 || match[1] < 0) {
            throw Error('match [start] and [end] must be a positive integers.');
        }
        if (match[0] >= match[1]) {
            throw Error('[start] must be lower than [end].');
        }
        if (match[0] <= lastMatch) {
            throw Error('match indices cannot overlap.');
        }
        lastMatch = match[1];
    });
}
/**
 * Highlight component is meant to be a simple component to display text with highlighted search.
 * Component will render a SPAN or series of SPAN with the content and highlights
 */
export const Highlight = Object.assign((({ text, matches, highlight, ignoreCase = true, theme }) => {
    if (!matches && undefined === highlight) {
        throw new Error('You must set either indices or highlight');
    }
    if (matches) {
        validateMatches(matches);
        let lastMatch = 0;
        return (React.createElement(React.Fragment, null,
            matches.map((match, i) => {
                const r = (React.createElement(React.Fragment, { key: i },
                    React.createElement("span", null, text.substring(lastMatch, match[0])),
                    React.createElement(Highlighted, { theme: theme }, text.substring(match[0], match[1]))));
                lastMatch = match[1];
                return r;
            }),
            React.createElement("span", null, text.substring(lastMatch, text.length))));
    }
    if (highlight === '') {
        return React.createElement(React.Fragment, null, text);
    }
    // Sanitized the user input to prevent them from using RegEx patterns
    const sanitized = highlight && highlight.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const parts = text.split(new RegExp(`(${sanitized})`, ignoreCase ? 'gi' : 'g')).filter(Boolean);
    return (React.createElement(React.Fragment, null, parts.map((part, i) => part.toLowerCase() === (highlight && highlight.toLowerCase()) ? (React.createElement(Highlighted, { theme: theme, key: i }, part)) : (React.createElement("span", { key: i }, part)))));
}), { inner: {
        get Highlighted() { return Highlighted; }
    } });
Highlight.displayName = 'Highlight';
//# sourceMappingURL=data:application/json;base64,