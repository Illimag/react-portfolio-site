var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed, css } from '../../utils/styled';
import { distance } from '../../distance';
import { setLabels, getPropLabel } from '../../utils/labels';
import { getFontStyle } from '../../textStyles';
setLabels({
    openLabel: 'Open Details',
    closeLabel: 'Close Details',
});
const animationDuration = '0.3s';
const animationFunction = 'cubic-bezier(0, 0, 0.25, 1)';
const StyledContainer = styled('div')(themed(({ open, theme: { accordionCard: { borderColor, openedBorderColor }, text1, }, }) => `
    ${getFontStyle({ size: 'medium' })}
    
    position: relative;
    color: ${text1};
    border: 1px solid ${open ? openedBorderColor : borderColor};
  `));
const StyledHeaderContainer = styled('div')(themed(({ open, theme: { accordionCard: { headerPadding, openedHeaderBorderColor, openedHeaderBackground, headerBackground }, }, }) => `
      padding: ${headerPadding};
      background: ${open ? openedHeaderBackground : headerBackground};
      border-bottom: ${open ? `1px solid ${openedHeaderBorderColor}` : 'none'};
    `));
export const StyledActionContainer = styled.div(themed(({ open, theme: { ui0, ui1 } }) => css `
      text-align: center;
      padding: ${distance.small} ${distance.medium};
      cursor: pointer;
      background: ${open ? ui1 : ui0};
      border: ${open ? `1px solid ${ui0}` : 'none'};
      margin: -1px -1px -1px -1px;
      color: ${open ? ui0 : ui1};
    `));
const StyledDetailsContainerAnimator = styled('div') `
  transition: all ${animationDuration} ${animationFunction};
  max-height: ${({ open }) => (open ? '10000px' : '0')};
  opacity: ${({ open }) => (open ? '1' : '0')};
  overflow: hidden;
`;
export class AccordionCard extends React.Component {
    constructor(props) {
        super(props);
        this.handleClick = () => {
            const { onActionClick } = this.props;
            const { opened, controlled } = this.state;
            !controlled && this.setState({ opened: !opened });
            if (typeof onActionClick === 'function') {
                onActionClick({ opened: controlled ? opened : !opened });
            }
        };
        this.renderDefaultAction = (_) => {
            const { theme } = this.props;
            const { opened } = this.state;
            return (React.createElement(StyledActionContainer, { theme: theme, onClick: this.handleClick, open: opened }, getPropLabel(this.props, opened ? 'closeLabel' : 'openLabel')));
        };
        this.state = {
            opened: props.opened !== undefined ? props.opened : false,
            controlled: props.opened !== undefined,
        };
    }
    static getDerivedStateFromProps(props, state) {
        return state.controlled ? { opened: props.opened } : {};
    }
    renderActions() {
        const { renderAction = this.renderDefaultAction } = this.props;
        const { opened } = this.state;
        return renderAction({ opened });
    }
    render() {
        const _a = this.props, { onActionClick: _0, theme, children, header } = _a, props = __rest(_a, ["onActionClick", "theme", "children", "header"]);
        const { opened } = this.state;
        return (React.createElement(StyledContainer, Object.assign({}, props, { theme: theme, open: opened }),
            React.createElement(StyledHeaderContainer, { theme: theme, open: opened }, header),
            React.createElement(StyledDetailsContainerAnimator, { theme: theme, open: opened }, children),
            this.renderActions()));
    }
}
AccordionCard.inner = {
    get StyledActionContainer() { return StyledActionContainer; },
    get StyledContainer() { return StyledContainer; },
    get StyledHeaderContainer() { return StyledHeaderContainer; },
    get StyledDetailsContainerAnimator() { return StyledDetailsContainerAnimator; }
};
//# sourceMappingURL=data:application/json;base64,