var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import memoize from 'memoize-one';
import { debounce } from '../../utils';
import { TagBuilder } from '../TagBuilder';
import { Autocomplete } from '../Autocomplete';
export class AutocompleteTagBuilderInt extends React.Component {
    constructor(props) {
        super(props);
        this.removeValueByIndex = (index) => {
            const { value } = this.state;
            const keys = Array.from(value.keys());
            index = index >= 0 ? index : keys.length + index;
            if (index >= 0 && index < keys.length) {
                value.splice(index, 1);
                const newValue = [...value];
                this.updateValue(newValue);
            }
        };
        this.getTagsArray = memoize((value) => {
            return value.map(x => this.getSuggestionValue(x));
        });
        this.tagRemoveHandler = (index) => {
            this.removeValueByIndex(index);
        };
        this.suggestionSelectedHandler = (e) => {
            this.addSuggestion(e.value);
        };
        this.inputChangeHandler = (e) => {
            this.changeInputValue(e.value);
        };
        this.inputRefHandler = (node) => {
            this._inputNode = node;
        };
        this.tagBuilderRenderer = (inputProps) => {
            const { disabled, tagRenderer, borderless = false } = this.props;
            const { value } = this.state;
            const { onChange, value: inputValue } = inputProps, restProps = __rest(inputProps, ["onChange", "value"]);
            const tagBuilderValue = this.getTagsArray(value);
            return (React.createElement(TagBuilder, Object.assign({}, restProps, { disabled: disabled, inputValue: inputValue, onInput: onChange, value: tagBuilderValue, tagRenderer: tagRenderer, borderless: borderless, onBeforeTagRemove: this.tagRemoveHandler })));
        };
        const { value: nullableValue, defaultValue, onInputChange, inputValue, delay = 0 } = this.props;
        const value = nullableValue || defaultValue || [];
        this.state = {
            value: value,
            inputValue: inputValue || '',
            controlled: props.value !== undefined || inputValue !== undefined,
        };
        this._fireOnInputChange = debounce((value) => {
            onInputChange && onInputChange({ value });
        }, delay);
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.controlled) {
            const { value, inputValue } = nextProps;
            this.setState({
                value: value || [],
                inputValue: inputValue || '',
            });
        }
    }
    componentDidMount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.subscribe(this);
        }
    }
    componentWillUnmount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    }
    addSuggestion(suggestion) {
        const { value } = this.state;
        const key = this.getSuggestionKey(suggestion);
        const suggestionAlreadyAdded = value.some(x => this.getSuggestionKey(x) === key);
        if (!suggestionAlreadyAdded) {
            const newValue = [...value];
            newValue.push(suggestion);
            this.updateValue(newValue);
        }
        this.changeInputValue('');
    }
    updateValue(newValue) {
        const { onChange, name = '', form } = this.props;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name,
                    value: newValue,
                });
            }
            else {
                this.setState({
                    value: newValue,
                });
            }
        }
        if (this._inputNode) {
            this._inputNode.focus();
        }
        if (typeof onChange === 'function') {
            onChange({ value: newValue });
        }
    }
    changeInputValue(newValue) {
        if (!this.state.controlled) {
            this.setState({
                inputValue: newValue,
            });
        }
        this._fireOnInputChange(newValue);
    }
    getSuggestionValue(item) {
        const { getSuggestionValue } = this.props;
        if (typeof item === 'string') {
            return item;
        }
        else if (typeof getSuggestionValue === 'function') {
            return getSuggestionValue(item);
        }
        else {
            throw new Error('Get suggestion value should be specified');
        }
    }
    getSuggestionKey(item) {
        const { getSuggestionKey } = this.props;
        if (typeof item === 'string') {
            return item;
        }
        else if (typeof getSuggestionKey === 'function') {
            return getSuggestionKey(item);
        }
        else {
            throw new Error('Get suggestion key should be specified');
        }
    }
    defaultSuggestionRenderer(suggestion) {
        return {
            content: this.getSuggestionValue(suggestion),
            key: this.getSuggestionKey(suggestion),
        };
    }
    render() {
        const { suggestions = [], noSuggestionsMessage, disabled, renderSuggestion = (item) => this.defaultSuggestionRenderer(item), label, placeholder, info, borderless = false, error, onBlur, onFocus, } = this.props;
        const { inputValue } = this.state;
        return (React.createElement(Autocomplete, { noSuggestionsMessage: noSuggestionsMessage, suggestions: suggestions, inputRenderer: this.tagBuilderRenderer, renderSuggestion: renderSuggestion, disabled: disabled, value: inputValue, onChange: this.inputChangeHandler, onSuggestionSelected: this.suggestionSelectedHandler, inputRef: this.inputRefHandler, label: label, placeholder: placeholder, info: info, error: error, borderless: borderless, onBlur: onBlur, onFocus: onFocus }));
    }
}
AutocompleteTagBuilderInt.inner = {
    get TagBuilder() { return TagBuilder; },
    get Autocomplete() { return Autocomplete; }
};
//# sourceMappingURL=data:application/json;base64,