import * as React from 'react';
import { StandardProps } from '../../common';
export interface AnchorUrlLocator {
    pathname?: string;
    search?: string;
    state?: any;
    hash?: string;
    key?: string;
}
export interface AnchorProps extends StandardProps {
    /**
     * Sets the component as disabled.
     */
    disabled?: boolean;
    /**
     * Redirects to the given URL if clicked.
     */
    href?: string;
    /**
     * Redirects to the given internal URL if clicked.
     */
    to?: string | AnchorUrlLocator;
    /**
     * The tagName to use, e.g., a or button.
     * @default a
     */
    tagName?: string;
    /**
     * Used to notify once clicked.
     */
    onClick?(e: React.MouseEvent<HTMLElement>): void;
    /**
     * Sets the action link children.
     */
    children?: React.ReactNode | void;
    /**
     * Specifies where to display the linked URL.
     * Applies only in case of `a` tag
     * Default is `_self`
     * @default _self
     */
    target?: '_self' | '_blank' | '_parent' | '_top';
}
export declare class Anchor extends React.PureComponent<AnchorProps> {
    static contextTypes: {
        router: () => null;
    };
    private clicked;
    render(): React.DOMElement<{
        onClick: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;
        href: string | undefined;
        children?: string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | (void & undefined) | (void & {}) | (void & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (void & React.ReactNodeArray) | (void & React.ReactPortal) | (string & {}) | (string & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (string & React.ReactNodeArray) | (string & React.ReactPortal) | (number & {}) | (number & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (number & React.ReactNodeArray) | (number & React.ReactPortal) | (false & {}) | (false & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (false & React.ReactNodeArray) | (false & React.ReactPortal) | (true & {}) | (true & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (true & React.ReactNodeArray) | (true & React.ReactPortal) | ({} & string) | ({} & number) | ({} & false) | ({} & true) | (React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & string) | (React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & number) | (React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & false) | (React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & true) | (React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & React.ReactNodeArray) | (React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & React.ReactPortal) | (React.ReactNodeArray & string) | (React.ReactNodeArray & number) | (React.ReactNodeArray & false) | (React.ReactNodeArray & true) | (React.ReactNodeArray & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (React.ReactNodeArray & React.ReactPortal) | (React.ReactPortal & string) | (React.ReactPortal & number) | (React.ReactPortal & false) | (React.ReactPortal & true) | (React.ReactPortal & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (React.ReactPortal & React.ReactNodeArray) | null | undefined;
        className?: string | undefined;
        style?: React.CSSProperties | undefined;
    }, Element>;
}
