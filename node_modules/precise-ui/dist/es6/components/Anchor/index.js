var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
function getHref(link) {
    if (link !== undefined) {
        if (typeof link !== 'string') {
            const { pathname, search, hash } = link;
            const parts = [];
            if (pathname) {
                parts.push(pathname);
            }
            if (search) {
                parts.push('?');
                parts.push(search);
            }
            if (hash) {
                parts.push('#');
                parts.push(hash);
            }
            return parts.join('');
        }
        return link;
    }
    return undefined;
}
export class Anchor extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.clicked = (e) => {
            const { tagName = 'a', disabled = false, target = '_self', href, to, onClick } = this.props;
            if (!disabled) {
                if (typeof onClick === 'function') {
                    onClick(e);
                    if (e.defaultPrevented) {
                        return;
                    }
                }
                if (to !== undefined) {
                    const ctx = this.context;
                    const history = ctx && ctx.router && ctx.router.history;
                    if (history) {
                        history.push(to);
                    }
                }
                else if (typeof href === 'string') {
                    if (tagName !== 'a') {
                        window.open(href, target);
                    }
                    return;
                }
                else if (tagName === 'button') {
                    return;
                }
            }
            e.preventDefault();
        };
    }
    render() {
        const _a = this.props, { tagName = 'a', theme: _0, to, disabled, target } = _a, props = __rest(_a, ["tagName", "theme", "to", "disabled", "target"]);
        if (tagName === 'a' && target) {
            props.target = target;
        }
        return React.createElement(tagName, Object.assign({ href: getHref(to) || (props.onClick ? '#' : undefined) }, props, { onClick: this.clicked }));
    }
}
Anchor.contextTypes = {
    // tslint:disable-next-line
    router: () => null,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BbmNob3IvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBMkMvQixTQUFTLE9BQU8sQ0FBQyxJQUEyQztJQUN4RCxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7UUFDcEIsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDMUIsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBQ3hDLE1BQU0sS0FBSyxHQUFrQixFQUFFLENBQUM7WUFDaEMsSUFBSSxRQUFRLEVBQUU7Z0JBQ1YsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN4QjtZQUNELElBQUksTUFBTSxFQUFFO2dCQUNSLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2hCLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdEI7WUFDRCxJQUFJLElBQUksRUFBRTtnQkFDTixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3BCO1lBQ0QsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ3JCLENBQUM7QUFDRCxNQUFNLE9BQU8sTUFBTyxTQUFRLEtBQUssQ0FBQyxhQUEwQjtJQUE1RDs7UUFLWSxZQUFPLEdBQUcsQ0FBQyxDQUFnQyxFQUFFLEVBQUU7WUFDbkQsTUFBTSxFQUFFLE9BQU8sR0FBRyxHQUFHLEVBQUUsUUFBUSxHQUFHLEtBQUssRUFBRSxNQUFNLEdBQUcsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUM1RixJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNYLElBQUksT0FBTyxPQUFPLEtBQUssVUFBVSxFQUFFO29CQUMvQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ1gsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEVBQUU7d0JBQ3BCLE9BQU87cUJBQ1Y7aUJBQ0o7Z0JBQ0QsSUFBSSxFQUFFLEtBQUssU0FBUyxFQUFFO29CQUNsQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO29CQUN6QixNQUFNLE9BQU8sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztvQkFDeEQsSUFBSSxPQUFPLEVBQUU7d0JBQ1QsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztxQkFDcEI7aUJBQ0o7cUJBQ0ksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7b0JBQy9CLElBQUksT0FBTyxLQUFLLEdBQUcsRUFBRTt3QkFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7cUJBQzdCO29CQUNELE9BQU87aUJBQ1Y7cUJBQ0ksSUFBSSxPQUFPLEtBQUssUUFBUSxFQUFFO29CQUMzQixPQUFPO2lCQUNWO2FBQ0o7WUFDRCxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsQ0FBQyxDQUFDO0lBWU4sQ0FBQztJQVhHLE1BQU07UUFDRixNQUFNLGVBQXlFLEVBQXpFLEVBQUUsT0FBTyxHQUFHLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUF5QixFQUF2QixvRUFBdUIsQ0FBQztRQUNoRixJQUFJLE9BQU8sS0FBSyxHQUFHLElBQUksTUFBTSxFQUFFO1lBQzFCLEtBQWEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQ2xDO1FBQ0QsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sa0JBQzlCLElBQUksRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUNuRCxLQUFLLElBQ1IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLElBQ3ZCLENBQUM7SUFDUCxDQUFDOztBQTFDTSxtQkFBWSxHQUFHO0lBQ2xCLDJCQUEyQjtJQUMzQixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSTtDQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5leHBvcnQgaW50ZXJmYWNlIEFuY2hvclVybExvY2F0b3Ige1xuICAgIHBhdGhuYW1lPzogc3RyaW5nO1xuICAgIHNlYXJjaD86IHN0cmluZztcbiAgICBzdGF0ZT86IGFueTtcbiAgICBoYXNoPzogc3RyaW5nO1xuICAgIGtleT86IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQW5jaG9yUHJvcHMgZXh0ZW5kcyBTdGFuZGFyZFByb3BzIHtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjb21wb25lbnQgYXMgZGlzYWJsZWQuXG4gICAgICovXG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJlZGlyZWN0cyB0byB0aGUgZ2l2ZW4gVVJMIGlmIGNsaWNrZWQuXG4gICAgICovXG4gICAgaHJlZj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBSZWRpcmVjdHMgdG8gdGhlIGdpdmVuIGludGVybmFsIFVSTCBpZiBjbGlja2VkLlxuICAgICAqL1xuICAgIHRvPzogc3RyaW5nIHwgQW5jaG9yVXJsTG9jYXRvcjtcbiAgICAvKipcbiAgICAgKiBUaGUgdGFnTmFtZSB0byB1c2UsIGUuZy4sIGEgb3IgYnV0dG9uLlxuICAgICAqIEBkZWZhdWx0IGFcbiAgICAgKi9cbiAgICB0YWdOYW1lPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gbm90aWZ5IG9uY2UgY2xpY2tlZC5cbiAgICAgKi9cbiAgICBvbkNsaWNrPyhlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxFbGVtZW50Pik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYWN0aW9uIGxpbmsgY2hpbGRyZW4uXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGUgfCB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGVyZSB0byBkaXNwbGF5IHRoZSBsaW5rZWQgVVJMLlxuICAgICAqIEFwcGxpZXMgb25seSBpbiBjYXNlIG9mIGBhYCB0YWdcbiAgICAgKiBEZWZhdWx0IGlzIGBfc2VsZmBcbiAgICAgKiBAZGVmYXVsdCBfc2VsZlxuICAgICAqL1xuICAgIHRhcmdldD86ICdfc2VsZicgfCAnX2JsYW5rJyB8ICdfcGFyZW50JyB8ICdfdG9wJztcbn1cbmZ1bmN0aW9uIGdldEhyZWYobGluazogc3RyaW5nIHwgQW5jaG9yVXJsTG9jYXRvciB8IHVuZGVmaW5lZCkge1xuICAgIGlmIChsaW5rICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsaW5rICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3QgeyBwYXRobmFtZSwgc2VhcmNoLCBoYXNoIH0gPSBsaW5rO1xuICAgICAgICAgICAgY29uc3QgcGFydHM6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgICAgICAgICAgIGlmIChwYXRobmFtZSkge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2gocGF0aG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlYXJjaCkge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goJz8nKTtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHNlYXJjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzaCkge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goJyMnKTtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKGhhc2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5rO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGNsYXNzIEFuY2hvciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8QW5jaG9yUHJvcHM+IHtcbiAgICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgcm91dGVyOiAoKSA9PiBudWxsLFxuICAgIH07XG4gICAgcHJpdmF0ZSBjbGlja2VkID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEVsZW1lbnQ+KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdGFnTmFtZSA9ICdhJywgZGlzYWJsZWQgPSBmYWxzZSwgdGFyZ2V0ID0gJ19zZWxmJywgaHJlZiwgdG8sIG9uQ2xpY2sgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9uQ2xpY2soZSk7XG4gICAgICAgICAgICAgICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgY29uc3QgaGlzdG9yeSA9IGN0eCAmJiBjdHgucm91dGVyICYmIGN0eC5yb3V0ZXIuaGlzdG9yeTtcbiAgICAgICAgICAgICAgICBpZiAoaGlzdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBocmVmID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlmICh0YWdOYW1lICE9PSAnYScpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oaHJlZiwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGFnTmFtZSA9PT0gJ2J1dHRvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IHRhZ05hbWUgPSAnYScsIHRoZW1lOiBfMCwgdG8sIGRpc2FibGVkLCB0YXJnZXQsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAodGFnTmFtZSA9PT0gJ2EnICYmIHRhcmdldCkge1xuICAgICAgICAgICAgKHByb3BzIGFzIGFueSkudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KHRhZ05hbWUsIHtcbiAgICAgICAgICAgIGhyZWY6IGdldEhyZWYodG8pIHx8IChwcm9wcy5vbkNsaWNrID8gJyMnIDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICAgICAgb25DbGljazogdGhpcy5jbGlja2VkLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=