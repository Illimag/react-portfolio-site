var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed, keyframes } from '../../utils/styled';
import { distance } from '../../distance';
import { getFontStyle } from '../../textStyles';
const spinningWidth = 50;
const ProgressContainer = styled.div `
  color: ${themed(props => props.theme.text6)};
`;
const ProgressRail = styled('div') `
  position: relative;
  border: 0;
  background: ${themed(props => props.theme.ui4)};
  height: ${({ type }) => (type === 'secondary' ? distance.xsmall : distance.xxsmall)};
`;
const ProgressTitle = styled.div `
  ${getFontStyle({ size: 'medium' })}

  margin: 0 0 ${distance.medium};
  padding: 0;
  display: block;
`;
const ProgressDescription = styled.div `
  ${getFontStyle({ size: 'small' })}

  margin: ${distance.small} 0 0;
`;
const ProgressIndicator = styled.div `
  border-radius: inherit;
  border: 0;
  background: ${themed(props => props.theme.ui0)};
  height: 100%;
  width: 0;
`;
const ProgressStop = styled('div') `
  border-radius: ${distance.small};
  position: absolute;
  width: ${distance.small};
  height: ${distance.small};
  background: ${themed(props => (props.active ? props.theme.ui7 : props.theme.text2))};
  top: 50%;
  transform: translateY(-50%);
`;
const SpinningAnimation = keyframes `
  from {
    left: -${spinningWidth}%;
  }
  to {
    left: 100%;
  }
`;
const MaskContainer = styled.div `
  position: relative;
  overflow: hidden;
  height: 100%;
`;
const ProgressAnimation = styled.div `
  position: absolute;
  height: 100%;
  width: 100%;
  left: -${spinningWidth}%;
  animation: ${SpinningAnimation} 2s linear infinite;
`;
function getPercent(current, minimum, maximum) {
    const value = ~~((100 * (current - minimum)) / (maximum - minimum));
    const percent = Math.min(Math.max(0, value), 100);
    return `${percent}%`;
}
function spinning(child) {
    return (React.createElement(MaskContainer, null,
        React.createElement(ProgressAnimation, null, child)));
}
/**
 * The progress bar component displays a progress indicator ranging from min to max.
 */
export const ProgressBar = Object.assign(((_a) => {
    var { minimum = 0, maximum = 100, value: propValue, title, description, animate, stops = [], type = 'primary', theme } = _a, rest = __rest(_a, ["minimum", "maximum", "value", "title", "description", "animate", "stops", "type", "theme"]);
    const value = (animate === 'spinning' ? spinningWidth : propValue) || 0;
    const width = getPercent(value, minimum, maximum);
    const transition = animate ? 'width 200ms' : 'none';
    const indicator = React.createElement(ProgressIndicator, { style: { width, transition }, theme: theme });
    return (React.createElement(ProgressContainer, { theme: theme },
        !!title && React.createElement(ProgressTitle, { theme: theme }, title),
        React.createElement(ProgressRail, Object.assign({ type: type, theme: theme }, rest),
            animate === 'spinning' ? spinning(indicator) : indicator,
            stops.map((stop, index) => (React.createElement(ProgressStop, { key: `${index}-at-${stop}`, style: { left: getPercent(stop, minimum, maximum) }, active: stop <= value, theme: theme })))),
        !!description && React.createElement(ProgressDescription, { theme: theme }, description)));
}), { inner: {
        get ProgressIndicator() { return ProgressIndicator; },
        get ProgressContainer() { return ProgressContainer; },
        get ProgressTitle() { return ProgressTitle; },
        get ProgressRail() { return ProgressRail; },
        get ProgressStop() { return ProgressStop; },
        get ProgressDescription() { return ProgressDescription; }
    } });
ProgressBar.displayName = 'ProgressBar';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Qcm9ncmVzc0Jhci9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFL0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQXNEaEQsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztXQUMxQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztDQUM1QyxDQUFDO0FBQ0YsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUF5Qjs7O2dCQUczQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUNwQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztDQUNwRixDQUFDO0FBQ0YsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUM3QixZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUM7O2dCQUVwQixRQUFRLENBQUMsTUFBTTs7O0NBRzlCLENBQUM7QUFDRixNQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDbkMs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b3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwgeyB0aGVtZWQsIGtleWZyYW1lcyB9IGZyb20gJy4uLy4uL3V0aWxzL3N0eWxlZCc7XG5pbXBvcnQgeyBTdGFuZGFyZFByb3BzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IGRpc3RhbmNlIH0gZnJvbSAnLi4vLi4vZGlzdGFuY2UnO1xuaW1wb3J0IHsgZ2V0Rm9udFN0eWxlIH0gZnJvbSAnLi4vLi4vdGV4dFN0eWxlcyc7XG4vKipcbiAqIFByb2dyZXNzQmFyIHR5cGUuXG4gKi9cbmV4cG9ydCB0eXBlIFByb2dyZXNzQmFyVHlwZSA9ICdwcmltYXJ5JyB8ICdzZWNvbmRhcnknO1xuZXhwb3J0IGludGVyZmFjZSBQcm9ncmVzc0JhclByb3BzIGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNoaWxkcmVuPzogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTaG93cyBhbmltYXRpb25zIGJldHdlZW4gdmFsdWUgdXBkYXRlcy5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGFuaW1hdGU/OiBib29sZWFuIHwgJ3NwaW5uaW5nJztcbiAgICAvKipcbiAgICAgKiBUaGUgbWluaW11bSB2YWx1ZSwgd2hpY2ggaXMgYnkgZGVmYXVsdCAwLlxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBtaW5pbXVtPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHZhbHVlLCB3aGljaCBpcyBieSBkZWZhdWx0IDEwMC5cbiAgICAgKiBAZGVmYXVsdCAxMDBcbiAgICAgKi9cbiAgICBtYXhpbXVtPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHZhbHVlLCB3aGljaCBpcyBieSBkZWZhdWx0IDAuXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHZhbHVlPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25hbCB0aXRsZSB0byBiZSBkaXNwbGF5ZWQuXG4gICAgICovXG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbmFsIHN0b3BzIHRvIGJlIGRpc3BsYXllZC5cbiAgICAgKi9cbiAgICBzdG9wcz86IEFycmF5PG51bWJlcj47XG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbmFsIGRlc2NyaXB0aW9uIHRvIGJlIGRpc3BsYXllZC5cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwcm9ncmVzcyBiYXIgdHlwZS4gQnkgZGVmYXVsdCBwcmltYXJ5LlxuICAgICAqIEBkZWZhdWx0IHByaW1hcnlcbiAgICAgKi9cbiAgICB0eXBlPzogUHJvZ3Jlc3NCYXJUeXBlO1xufVxuZXhwb3J0IGludGVyZmFjZSBTdG9wUHJvcHMge1xuICAgIGFjdGl2ZTogYm9vbGVhbjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZ3Jlc3NDb250YWluZXJQcm9wcyB7XG4gICAgdHlwZTogUHJvZ3Jlc3NCYXJUeXBlO1xufVxuY29uc3Qgc3Bpbm5pbmdXaWR0aCA9IDUwO1xuY29uc3QgUHJvZ3Jlc3NDb250YWluZXIgPSBzdHlsZWQuZGl2IGBcbiAgY29sb3I6ICR7dGhlbWVkKHByb3BzID0+IHByb3BzLnRoZW1lLnRleHQ2KX07XG5gO1xuY29uc3QgUHJvZ3Jlc3NSYWlsID0gc3R5bGVkKCdkaXYnKTxQcm9ncmVzc0NvbnRhaW5lclByb3BzPiBgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm9yZGVyOiAwO1xuICBiYWNrZ3JvdW5kOiAke3RoZW1lZChwcm9wcyA9PiBwcm9wcy50aGVtZS51aTQpfTtcbiAgaGVpZ2h0OiAkeyh7IHR5cGUgfSkgPT4gKHR5cGUgPT09ICdzZWNvbmRhcnknID8gZGlzdGFuY2UueHNtYWxsIDogZGlzdGFuY2UueHhzbWFsbCl9O1xuYDtcbmNvbnN0IFByb2dyZXNzVGl0bGUgPSBzdHlsZWQuZGl2IGBcbiAgJHtnZXRGb250U3R5bGUoeyBzaXplOiAnbWVkaXVtJyB9KX1cblxuICBtYXJnaW46IDAgMCAke2Rpc3RhbmNlLm1lZGl1bX07XG4gIHBhZGRpbmc6IDA7XG4gIGRpc3BsYXk6IGJsb2NrO1xuYDtcbmNvbnN0IFByb2dyZXNzRGVzY3JpcHRpb24gPSBzdHlsZWQuZGl2IGBcbiAgJHtnZXRGb250U3R5bGUoeyBzaXplOiAnc21hbGwnIH0pfVxuXG4gIG1hcmdpbjogJHtkaXN0YW5jZS5zbWFsbH0gMCAwO1xuYDtcbmNvbnN0IFByb2dyZXNzSW5kaWNhdG9yID0gc3R5bGVkLmRpdiBgXG4gIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG4gIGJvcmRlcjogMDtcbiAgYmFja2dyb3VuZDogJHt0aGVtZWQocHJvcHMgPT4gcHJvcHMudGhlbWUudWkwKX07XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDA7XG5gO1xuY29uc3QgUHJvZ3Jlc3NTdG9wID0gc3R5bGVkKCdkaXYnKTxTdG9wUHJvcHMgJiBSZWFjdC5IVE1MUHJvcHM8SFRNTElucHV0RWxlbWVudD4+IGBcbiAgYm9yZGVyLXJhZGl1czogJHtkaXN0YW5jZS5zbWFsbH07XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgd2lkdGg6ICR7ZGlzdGFuY2Uuc21hbGx9O1xuICBoZWlnaHQ6ICR7ZGlzdGFuY2Uuc21hbGx9O1xuICBiYWNrZ3JvdW5kOiAke3RoZW1lZChwcm9wcyA9PiAocHJvcHMuYWN0aXZlID8gcHJvcHMudGhlbWUudWk3IDogcHJvcHMudGhlbWUudGV4dDIpKX07XG4gIHRvcDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG5gO1xuY29uc3QgU3Bpbm5pbmdBbmltYXRpb24gPSBrZXlmcmFtZXMgYFxuICBmcm9tIHtcbiAgICBsZWZ0OiAtJHtzcGlubmluZ1dpZHRofSU7XG4gIH1cbiAgdG8ge1xuICAgIGxlZnQ6IDEwMCU7XG4gIH1cbmA7XG5jb25zdCBNYXNrQ29udGFpbmVyID0gc3R5bGVkLmRpdiBgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgaGVpZ2h0OiAxMDAlO1xuYDtcbmNvbnN0IFByb2dyZXNzQW5pbWF0aW9uID0gc3R5bGVkLmRpdiBgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgbGVmdDogLSR7c3Bpbm5pbmdXaWR0aH0lO1xuICBhbmltYXRpb246ICR7U3Bpbm5pbmdBbmltYXRpb259IDJzIGxpbmVhciBpbmZpbml0ZTtcbmA7XG5mdW5jdGlvbiBnZXRQZXJjZW50KGN1cnJlbnQ6IG51bWJlciwgbWluaW11bTogbnVtYmVyLCBtYXhpbXVtOiBudW1iZXIpIHtcbiAgICBjb25zdCB2YWx1ZSA9IH5+KCgxMDAgKiAoY3VycmVudCAtIG1pbmltdW0pKSAvIChtYXhpbXVtIC0gbWluaW11bSkpO1xuICAgIGNvbnN0IHBlcmNlbnQgPSBNYXRoLm1pbihNYXRoLm1heCgwLCB2YWx1ZSksIDEwMCk7XG4gICAgcmV0dXJuIGAke3BlcmNlbnR9JWA7XG59XG5mdW5jdGlvbiBzcGlubmluZyhjaGlsZDogUmVhY3QuUmVhY3RDaGlsZCkge1xuICAgIHJldHVybiAoPE1hc2tDb250YWluZXI+XG4gICAgICA8UHJvZ3Jlc3NBbmltYXRpb24+e2NoaWxkfTwvUHJvZ3Jlc3NBbmltYXRpb24+XG4gICAgPC9NYXNrQ29udGFpbmVyPik7XG59XG4vKipcbiAqIFRoZSBwcm9ncmVzcyBiYXIgY29tcG9uZW50IGRpc3BsYXlzIGEgcHJvZ3Jlc3MgaW5kaWNhdG9yIHJhbmdpbmcgZnJvbSBtaW4gdG8gbWF4LlxuICovXG5leHBvcnQgY29uc3QgUHJvZ3Jlc3NCYXIgPSBPYmplY3QuYXNzaWduKCgoKHsgbWluaW11bSA9IDAsIG1heGltdW0gPSAxMDAsIHZhbHVlOiBwcm9wVmFsdWUsIHRpdGxlLCBkZXNjcmlwdGlvbiwgYW5pbWF0ZSwgc3RvcHMgPSBbXSwgdHlwZSA9ICdwcmltYXJ5JyBhcyAncHJpbWFyeScsIHRoZW1lLCAuLi5yZXN0IH0pID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IChhbmltYXRlID09PSAnc3Bpbm5pbmcnID8gc3Bpbm5pbmdXaWR0aCA6IHByb3BWYWx1ZSkgfHwgMDtcbiAgICBjb25zdCB3aWR0aCA9IGdldFBlcmNlbnQodmFsdWUsIG1pbmltdW0sIG1heGltdW0pO1xuICAgIGNvbnN0IHRyYW5zaXRpb24gPSBhbmltYXRlID8gJ3dpZHRoIDIwMG1zJyA6ICdub25lJztcbiAgICBjb25zdCBpbmRpY2F0b3IgPSA8UHJvZ3Jlc3NJbmRpY2F0b3Igc3R5bGU9e3sgd2lkdGgsIHRyYW5zaXRpb24gfX0gdGhlbWU9e3RoZW1lfS8+O1xuICAgIHJldHVybiAoPFByb2dyZXNzQ29udGFpbmVyIHRoZW1lPXt0aGVtZX0+XG4gICAgICB7ISF0aXRsZSAmJiA8UHJvZ3Jlc3NUaXRsZSB0aGVtZT17dGhlbWV9Pnt0aXRsZX08L1Byb2dyZXNzVGl0bGU+fVxuICAgICAgPFByb2dyZXNzUmFpbCB0eXBlPXt0eXBlfSB0aGVtZT17dGhlbWV9IHsuLi5yZXN0fT5cbiAgICAgICAge2FuaW1hdGUgPT09ICdzcGlubmluZycgPyBzcGlubmluZyhpbmRpY2F0b3IpIDogaW5kaWNhdG9yfVxuICAgICAgICB7c3RvcHMubWFwKChzdG9wLCBpbmRleCkgPT4gKDxQcm9ncmVzc1N0b3Aga2V5PXtgJHtpbmRleH0tYXQtJHtzdG9wfWB9IHN0eWxlPXt7IGxlZnQ6IGdldFBlcmNlbnQoc3RvcCwgbWluaW11bSwgbWF4aW11bSkgfX0gYWN0aXZlPXtzdG9wIDw9IHZhbHVlfSB0aGVtZT17dGhlbWV9Lz4pKX1cbiAgICAgIDwvUHJvZ3Jlc3NSYWlsPlxuICAgICAgeyEhZGVzY3JpcHRpb24gJiYgPFByb2dyZXNzRGVzY3JpcHRpb24gdGhlbWU9e3RoZW1lfT57ZGVzY3JpcHRpb259PC9Qcm9ncmVzc0Rlc2NyaXB0aW9uPn1cbiAgICA8L1Byb2dyZXNzQ29udGFpbmVyPik7XG59KSBhcyBSZWFjdC5TRkM8UHJvZ3Jlc3NCYXJQcm9wcz4pLCB7IGlubmVyOiB7XG4gICAgICAgIGdldCBQcm9ncmVzc0luZGljYXRvcigpIHsgcmV0dXJuIFByb2dyZXNzSW5kaWNhdG9yIGFzIHR5cGVvZiBQcm9ncmVzc0luZGljYXRvcjsgfSxcbiAgICAgICAgZ2V0IFByb2dyZXNzQ29udGFpbmVyKCkgeyByZXR1cm4gUHJvZ3Jlc3NDb250YWluZXIgYXMgdHlwZW9mIFByb2dyZXNzQ29udGFpbmVyOyB9LFxuICAgICAgICBnZXQgUHJvZ3Jlc3NUaXRsZSgpIHsgcmV0dXJuIFByb2dyZXNzVGl0bGUgYXMgdHlwZW9mIFByb2dyZXNzVGl0bGU7IH0sXG4gICAgICAgIGdldCBQcm9ncmVzc1JhaWwoKSB7IHJldHVybiBQcm9ncmVzc1JhaWwgYXMgdHlwZW9mIFByb2dyZXNzUmFpbDsgfSxcbiAgICAgICAgZ2V0IFByb2dyZXNzU3RvcCgpIHsgcmV0dXJuIFByb2dyZXNzU3RvcCBhcyB0eXBlb2YgUHJvZ3Jlc3NTdG9wOyB9LFxuICAgICAgICBnZXQgUHJvZ3Jlc3NEZXNjcmlwdGlvbigpIHsgcmV0dXJuIFByb2dyZXNzRGVzY3JpcHRpb24gYXMgdHlwZW9mIFByb2dyZXNzRGVzY3JpcHRpb247IH1cbiAgICB9IH0pO1xuUHJvZ3Jlc3NCYXIuZGlzcGxheU5hbWUgPSAnUHJvZ3Jlc3NCYXInO1xuIl19