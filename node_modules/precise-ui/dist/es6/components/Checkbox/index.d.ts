import * as React from 'react';
import { InputChangeEvent, InputProps } from '../../common';
import { FormContextProps } from '../../hoc';
import { GroupContextProps } from '../../hoc/withGroupContext';
export declare type CheckboxChangeEvent = InputChangeEvent<boolean>;
export interface CheckboxProps extends InputProps<boolean>, FormContextProps, GroupContextProps {
    /**
     * The content of the checkbox.
     */
    children?: React.ReactNode;
}
export interface CheckboxState {
    value: boolean;
    error?: React.ReactChild;
    controlled: boolean;
}
interface CheckboxContainerProps {
    disabled?: boolean;
}
interface CheckboxBoxProps {
    checked: boolean;
    disabled: boolean;
    theme: any;
}
export declare class CheckboxInt extends React.PureComponent<CheckboxProps, CheckboxState> {
    readonly name?: string;
    constructor(props: CheckboxProps);
    UNSAFE_componentWillReceiveProps({ value, error }: CheckboxProps): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    setValue: (value: boolean) => void;
    private toggle;
    private changeValue;
    private control;
    render(): JSX.Element;
    static inner: {
        readonly PaddedContainer: React.FunctionComponent<import("../PaddedContainer").PaddedContainerProps> & {
            inner: {
                readonly StyledContainer: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, import("../PaddedContainer").PaddedContainerProps, never>;
            };
        };
        readonly InputNotification: React.FunctionComponent<import("../InputNotification").InputNotificationProps> & {
            inner: {
                readonly InputError: typeof import("..").InputError;
                readonly InputInfo: typeof import("..").InputInfo;
            };
        };
        readonly CheckboxContainer: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, CheckboxContainerProps, never>;
        readonly RealCheckbox: import("styled-components").StyledComponent<"input", import("../../common").PreciseTheme, {}, never>;
        readonly FlexContainer: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, {
            withInputInfo?: boolean | undefined;
        }, never>;
        readonly CheckboxBox: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, CheckboxBoxProps, never>;
        readonly Icon: React.FunctionComponent<import("../Icon").IconProps> & {
            inner: {
                readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../../common").PreciseTheme, {}, never>;
            };
        };
        readonly Label: React.FunctionComponent<import("../Label").LabelProps> & {
            inner: {
                readonly Styledlabel: import("styled-components").StyledComponent<"label", import("../../common").PreciseTheme, import("../Label").LabelProps, never>;
            };
        };
    };
}
/**
 * The checkbox input field.
 */
export declare const Checkbox: React.FunctionComponent<CheckboxProps>;
export {};
