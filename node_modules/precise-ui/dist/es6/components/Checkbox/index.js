var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { css, themed } from '../../utils/styled';
import { light } from '../../themes';
import { Label } from '../Label';
import { Icon } from '../Icon';
import { withFormContext } from '../../hoc';
import { withGroupContext } from '../../hoc/withGroupContext';
import { InputNotification } from '../InputNotification';
import { PaddedContainer } from '../PaddedContainer';
const CheckboxContainer = styled('div') `
  position: relative;
  display: inline-block;
  opacity: ${props => (props.disabled ? '0.5' : '1.0')};
  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};
`;
const CheckboxBox = styled('div')(themed(({ disabled, checked, theme: { ui0, ui1, ui4, ui5 } }) => css `
      outline: 0;
      flex: 0 0 1.0625em;
      max-width: 1.0625em;
      height: 1.0625em;
      position: relative;
      background: ${checked ? ui5 : ui1};
      transition: all 0.2s cubic-bezier(0, 0, 0.25, 1);
      overflow: hidden;
      border-radius: 2px;
      border: 2px solid ${disabled ? (checked ? ui5 : ui4) : ui5};
      box-sizing: border-box;

      &:focus {
        outline: ${ui0} solid 2px;
      }

      > i {
        position: relative;
        top: -2px;
        left: -2px;
        transition: all 0.2s;
        opacity: ${checked ? '1' : '0'};
        transform: ${checked ? 'scale(1)' : 'scale(0)'};
      }
    `));
const RealCheckbox = styled.input `
  display: none;
`;
const FlexContainer = styled.div `
  display: flex;
  padding-right: 0.25em;
  align-items: ${({ withInputInfo }) => (withInputInfo ? 'start' : 'center')};
`;
export class CheckboxInt extends React.PureComponent {
    constructor(props) {
        super(props);
        this.setValue = (value) => {
            const { onChange } = this.props;
            this.setState({
                value,
            });
            if (typeof onChange === 'function') {
                onChange({
                    value,
                });
            }
        };
        this.toggle = () => {
            const { onChange, disabled, form, group, name = '' } = this.props;
            if (!disabled) {
                const { controlled, value } = this.state;
                const checked = !value;
                if (!controlled) {
                    if (group) {
                        group.select(this);
                    }
                    else if (form) {
                        form.change({
                            name,
                            value: checked,
                        });
                    }
                    else {
                        this.setState({
                            value: checked,
                        });
                    }
                }
                if (typeof onChange === 'function') {
                    onChange({
                        value: checked,
                    });
                }
            }
        };
        this.changeValue = (e) => {
            this.toggle();
            e.preventDefault();
        };
        this.control = (e) => {
            switch (e.keyCode) {
                case 13 /* enter */:
                case 32 /* space */:
                    this.toggle();
                    break;
                default:
                    return;
            }
            e.stopPropagation();
            e.preventDefault();
        };
        this.name = props.name;
        this.state = {
            controlled: typeof props.value !== 'undefined',
            value: props.value || props.defaultValue || false,
            error: props.error,
        };
    }
    UNSAFE_componentWillReceiveProps({ value = false, error }) {
        if (this.state.controlled) {
            this.setState({ value });
        }
        this.setState({ error });
    }
    componentDidMount() {
        const { group, form } = this.props;
        const { controlled } = this.state;
        if (!controlled) {
            if (group) {
                group.subscribe(this);
            }
            else if (form) {
                form.subscribe(this);
            }
        }
    }
    componentWillUnmount() {
        const { group, form } = this.props;
        const { controlled } = this.state;
        if (!controlled) {
            if (group) {
                group.unsubscribe(this);
            }
            else if (form) {
                form.unsubscribe(this);
            }
        }
    }
    render() {
        const _a = this.props, { children, disabled, theme, value: _0, defaultValue: _1, onChange: _2, onInput: _3, info } = _a, props = __rest(_a, ["children", "disabled", "theme", "value", "defaultValue", "onChange", "onInput", "info"]);
        const { value, error } = this.state;
        const containerProps = Object.assign({}, props, { theme, onClick: this.changeValue, disabled });
        const boxProps = {
            checked: value,
            disabled: !!disabled,
            onKeyDown: this.control,
            theme,
            tabIndex: disabled ? undefined : 0,
        };
        const InputInfo = (error || info) && (React.createElement(PaddedContainer, { top: "xsmall", bottom: "xsmall" },
            React.createElement(InputNotification, { error: error, info: info })));
        return (React.createElement(CheckboxContainer, Object.assign({}, containerProps),
            React.createElement(RealCheckbox, { type: "checkbox", defaultChecked: value }),
            React.createElement(FlexContainer, { withInputInfo: !!(error || info) },
                React.createElement(CheckboxBox, Object.assign({}, boxProps),
                    React.createElement(Icon, { name: "Check", color: theme ? theme.ui1 : light.ui1, size: 1.0625 })),
                children && (React.createElement(Label, { attached: true, theme: theme },
                    children,
                    InputInfo))),
            !children && InputInfo));
    }
}
CheckboxInt.inner = {
    get PaddedContainer() { return PaddedContainer; },
    get InputNotification() { return InputNotification; },
    get CheckboxContainer() { return CheckboxContainer; },
    get RealCheckbox() { return RealCheckbox; },
    get FlexContainer() { return FlexContainer; },
    get CheckboxBox() { return CheckboxBox; },
    get Icon() { return Icon; },
    get Label() { return Label; }
};
/**
 * The checkbox input field.
 */
export const Checkbox = withFormContext(withGroupContext(CheckboxInt));
Checkbox.displayName = 'Checkbox';
//# sourceMappingURL=data:application/json;base64,