var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { Label } from '../Label';
import { InputError } from '../InputError';
import { FormContext, RadioButtonGroupContext } from '../../contexts';
import { distance } from '../../distance';
import { PaddedContainer } from '../PaddedContainer';
const RadioButtonContainer = styled('div') `
  position: relative;
  display: inline-block;
  opacity: ${props => (props.disabled ? '0.5' : '1.0')};
  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};

  + div {
    margin-left: ${distance.large};
  }
`;
const RadioButtonCircle = styled.div(({ theme: { ui0, ui5 } }) => `
  outline: 0;
  display: inline-block;
  vertical-align: middle;
  position: relative;
  overflow: hidden;
  flex: 0 0 auto;
  padding: 0.1875em;
  border: 2px solid ${ui5};
  border-radius: 100%;

  &:focus {
    box-shadow: 0px 0px 0px 2px ${ui0};
  }

  + label {
    vertical-align: middle;
  }
`);
const SelectMark = styled('div') `
  width: 0.5em;
  height: 0.5em;
  border-radius: 50%;
  outline: 0;
  background: ${themed(({ theme }) => theme.ui5)};
  transition: all 0.2s;
  opacity: ${props => (props.selected ? '1' : '0')};
  transform: ${props => (props.selected ? 'scale(1)' : 'scale(0)')};
`;
const FlexContainer = styled.div `
  display: flex;
  align-items: ${({ withError }) => (withError ? 'start' : 'center')};
`;
/**
 * The RadioButton input.
 */
export class RadioButton extends React.PureComponent {
    render() {
        const _a = this.props, { children } = _a, props = __rest(_a, ["children"]);
        return (React.createElement(FormContext.Consumer, null, form => (React.createElement(RadioButtonGroupContext.Consumer, null, ctx => (React.createElement(RadioButtonInt, Object.assign({ group: ctx, form: form }, props), children))))));
    }
}
RadioButton.inner = {
    get RadioButtonInt() { return RadioButtonInt; }
};
export class RadioButtonInt extends React.PureComponent {
    constructor(props) {
        super(props);
        this.setValue = (value) => {
            const { onChange } = this.props;
            this.setState({
                value,
            });
            if (typeof onChange === 'function') {
                onChange({
                    value,
                });
            }
        };
        this.select = () => {
            const { onChange, disabled, group, form, name = '' } = this.props;
            const { controlled, value } = this.state;
            if (!disabled && !value) {
                if (!controlled) {
                    if (group) {
                        group.select(this);
                    }
                    else if (form) {
                        form.change({
                            name,
                            value,
                        });
                    }
                    else {
                        this.setState({
                            value: true,
                        });
                    }
                }
                if (typeof onChange === 'function') {
                    onChange({
                        value: true,
                    });
                }
            }
        };
        this.onSelected = (e) => {
            this.select();
            e.preventDefault();
        };
        this.control = (e) => {
            switch (e.keyCode) {
                case 13 /* enter */:
                case 32 /* space */:
                    this.select();
                    break;
                default:
                    return;
            }
            e.stopPropagation();
            e.preventDefault();
        };
        this.name = props.name;
        this.state = {
            controlled: props.value !== undefined,
            value: props.value || props.defaultValue || false,
            error: props.error,
        };
    }
    UNSAFE_componentWillReceiveProps({ value = false, error }) {
        if (this.state.controlled) {
            this.setState({ value });
        }
        this.setState({ error });
    }
    componentDidMount() {
        const { group, form } = this.props;
        const { controlled } = this.state;
        if (!controlled) {
            if (group) {
                group.subscribe(this);
            }
            else if (form) {
                form.subscribe(this);
            }
        }
    }
    componentWillUnmount() {
        const { group, form } = this.props;
        const { controlled } = this.state;
        if (!controlled) {
            if (group) {
                group.unsubscribe(this);
            }
            else if (form) {
                form.unsubscribe(this);
            }
        }
    }
    render() {
        const _a = this.props, { children, disabled, theme, value: _0, defaultValue: _1, onChange: _2, group: _3, form: _4, name: _5 } = _a, props = __rest(_a, ["children", "disabled", "theme", "value", "defaultValue", "onChange", "group", "form", "name"]);
        const { value, error } = this.state;
        const containerProps = Object.assign({}, props, { theme, onClick: this.onSelected, disabled });
        const circleProps = {
            selected: value,
            disabled: !!disabled,
            onKeyDown: this.control,
            theme,
            tabIndex: disabled ? undefined : 0,
        };
        const Error = error && (React.createElement(PaddedContainer, { top: "xsmall", bottom: "xsmall" },
            React.createElement(InputError, null, error)));
        return (React.createElement(RadioButtonContainer, Object.assign({}, containerProps),
            React.createElement(FlexContainer, { withError: !!error },
                React.createElement(RadioButtonCircle, Object.assign({}, circleProps),
                    React.createElement(SelectMark, Object.assign({}, circleProps))),
                children && (React.createElement(Label, { attached: true, theme: theme },
                    children,
                    Error))),
            !children && Error));
    }
}
RadioButtonInt.inner = {
    get PaddedContainer() { return PaddedContainer; },
    get InputError() { return InputError; },
    get RadioButtonContainer() { return RadioButtonContainer; },
    get FlexContainer() { return FlexContainer; },
    get RadioButtonCircle() { return RadioButtonCircle; },
    get SelectMark() { return SelectMark; },
    get Label() { return Label; }
};
//# sourceMappingURL=data:application/json;base64,