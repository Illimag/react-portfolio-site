var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { DropdownContainer, SlideDownTabs, TabItem, TabContent } from './DropdownPanel.part';
/**
 * Represents the mobile layout used for a tab control.
 */
export const DropdownPanel = Object.assign(((_a) => {
    var { theme, data, children } = _a, props = __rest(_a, ["theme", "data", "children"]);
    const pages = [];
    const slideDownTabHeaders = [];
    let selectedIndex = -1;
    data.forEach((item, index) => {
        const element = item.element;
        if (element && React.isValidElement(element)) {
            const { header } = element.props;
            const active = item.active;
            if (active) {
                selectedIndex = index;
            }
            pages.push(React.createElement(TabItem, { theme: theme, key: `item-${index}`, active: active }, element));
            slideDownTabHeaders.push({
                key: `${index}`,
                content: header,
                type: 'item',
            });
        }
    });
    return (React.createElement(DropdownContainer, Object.assign({ theme: theme }, props),
        React.createElement(SlideDownTabs, { data: slideDownTabHeaders, selectedIndex: selectedIndex, onChange: index => {
                const item = data[index];
                item && item.onSelect();
            } }),
        React.createElement(TabContent, { theme: theme }, pages)));
}), { inner: {
        get TabItem() { return TabItem; },
        get DropdownContainer() { return DropdownContainer; },
        get SlideDownTabs() { return SlideDownTabs; },
        get TabContent() { return TabContent; }
    } });
DropdownPanel.displayName = 'DropdownPanel';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93blBhbmVsL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUkvQixPQUFPLEVBQUUsaUJBQWlCLEVBQWlCLGFBQWEsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFXNUc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUMsRUFBbUMsRUFBRSxFQUFFO1FBQXZDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLE9BQVksRUFBVixpREFBUTtJQUMzRSxNQUFNLEtBQUssR0FBNEIsRUFBRSxDQUFDO0lBQzFDLE1BQU0sbUJBQW1CLEdBQXlCLEVBQUUsQ0FBQztJQUNyRCxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3pCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUEyQyxDQUFDO1FBQ2pFLElBQUksT0FBTyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDMUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMzQixJQUFJLE1BQU0sRUFBRTtnQkFDUixhQUFhLEdBQUcsS0FBSyxDQUFDO2FBQ3pCO1lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxvQkFBQyxPQUFPLElBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsUUFBUSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxJQUN2RSxPQUFPLENBQ0EsQ0FBQyxDQUFDO1lBQ1IsbUJBQW1CLENBQUMsSUFBSSxDQUFDO2dCQUNyQixHQUFHLEVBQUUsR0FBRyxLQUFLLEVBQUU7Z0JBQ2YsT0FBTyxFQUFFLE1BQU07Z0JBQ2YsSUFBSSxFQUFFLE1BQU07YUFDZixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxDQUFDLG9CQUFDLGlCQUFpQixrQkFBQyxLQUFLLEVBQUUsS0FBSyxJQUFNLEtBQUs7UUFDaEQsb0JBQUMsYUFBYSxJQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDeEYsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN6QixJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzVCLENBQUMsR0FBRztRQUNGLG9CQUFDLFVBQVUsSUFBQyxLQUFLLEVBQUUsS0FBSyxJQUFHLEtBQUssQ0FBYyxDQUM1QixDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFtQyxFQUFFLEVBQUUsS0FBSyxFQUFFO1FBQ3ZDLElBQUksT0FBTyxLQUFLLE9BQU8sT0FBeUIsQ0FBQyxDQUFDLENBQUM7UUFDbkQsSUFBSSxpQkFBaUIsS0FBSyxPQUFPLGlCQUE2QyxDQUFDLENBQUMsQ0FBQztRQUNqRixJQUFJLGFBQWEsS0FBSyxPQUFPLGFBQXFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLElBQUksVUFBVSxLQUFLLE9BQU8sVUFBK0IsQ0FBQyxDQUFDLENBQUM7S0FDL0QsRUFBRSxDQUFDLENBQUM7QUFDVCxhQUFhLENBQUMsV0FBVyxHQUFHLGVBQWUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0YW5kYXJkUHJvcHMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgVGFiQ29udHJvbEl0ZW0gfSBmcm9tICcuLi9UYWJDb250cm9sJztcbmltcG9ydCB7IFRhYlBhZ2VQcm9wcyB9IGZyb20gJy4uL1RhYlBhZ2UnO1xuaW1wb3J0IHsgRHJvcGRvd25Db250YWluZXIsIFRhYkhlYWRlckl0ZW0sIFNsaWRlRG93blRhYnMsIFRhYkl0ZW0sIFRhYkNvbnRlbnQgfSBmcm9tICcuL0Ryb3Bkb3duUGFuZWwucGFydCc7XG5leHBvcnQgaW50ZXJmYWNlIERyb3Bkb3duUGFuZWxQcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFRoZSB0YWIgaXRlbXMgdGhhdCBzaG91bGQgYmUgc2hvd24uXG4gICAgICovXG4gICAgZGF0YTogQXJyYXk8VGFiQ29udHJvbEl0ZW0+O1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjaGlsZHJlbj86IHZvaWQ7XG59XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIG1vYmlsZSBsYXlvdXQgdXNlZCBmb3IgYSB0YWIgY29udHJvbC5cbiAqL1xuZXhwb3J0IGNvbnN0IERyb3Bkb3duUGFuZWwgPSBPYmplY3QuYXNzaWduKCgoKHsgdGhlbWUsIGRhdGEsIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PiB7XG4gICAgY29uc3QgcGFnZXM6IEFycmF5PFJlYWN0LlJlYWN0Q2hpbGQ+ID0gW107XG4gICAgY29uc3Qgc2xpZGVEb3duVGFiSGVhZGVyczogQXJyYXk8VGFiSGVhZGVySXRlbT4gPSBbXTtcbiAgICBsZXQgc2VsZWN0ZWRJbmRleCA9IC0xO1xuICAgIGRhdGEuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGl0ZW0uZWxlbWVudCBhcyBSZWFjdC5SZWFjdEVsZW1lbnQ8VGFiUGFnZVByb3BzPjtcbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaGVhZGVyIH0gPSBlbGVtZW50LnByb3BzO1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlID0gaXRlbS5hY3RpdmU7XG4gICAgICAgICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFnZXMucHVzaCg8VGFiSXRlbSB0aGVtZT17dGhlbWV9IGtleT17YGl0ZW0tJHtpbmRleH1gfSBhY3RpdmU9e2FjdGl2ZX0+XG4gICAgICAgICAge2VsZW1lbnR9XG4gICAgICAgIDwvVGFiSXRlbT4pO1xuICAgICAgICAgICAgc2xpZGVEb3duVGFiSGVhZGVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXk6IGAke2luZGV4fWAsXG4gICAgICAgICAgICAgICAgY29udGVudDogaGVhZGVyLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdpdGVtJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuICg8RHJvcGRvd25Db250YWluZXIgdGhlbWU9e3RoZW1lfSB7Li4ucHJvcHN9PlxuICAgICAgPFNsaWRlRG93blRhYnMgZGF0YT17c2xpZGVEb3duVGFiSGVhZGVyc30gc2VsZWN0ZWRJbmRleD17c2VsZWN0ZWRJbmRleH0gb25DaGFuZ2U9e2luZGV4ID0+IHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGRhdGFbaW5kZXhdO1xuICAgICAgICBpdGVtICYmIGl0ZW0ub25TZWxlY3QoKTtcbiAgICB9fS8+XG4gICAgICA8VGFiQ29udGVudCB0aGVtZT17dGhlbWV9PntwYWdlc308L1RhYkNvbnRlbnQ+XG4gICAgPC9Ecm9wZG93bkNvbnRhaW5lcj4pO1xufSkgYXMgUmVhY3QuU0ZDPERyb3Bkb3duUGFuZWxQcm9wcz4pLCB7IGlubmVyOiB7XG4gICAgICAgIGdldCBUYWJJdGVtKCkgeyByZXR1cm4gVGFiSXRlbSBhcyB0eXBlb2YgVGFiSXRlbTsgfSxcbiAgICAgICAgZ2V0IERyb3Bkb3duQ29udGFpbmVyKCkgeyByZXR1cm4gRHJvcGRvd25Db250YWluZXIgYXMgdHlwZW9mIERyb3Bkb3duQ29udGFpbmVyOyB9LFxuICAgICAgICBnZXQgU2xpZGVEb3duVGFicygpIHsgcmV0dXJuIFNsaWRlRG93blRhYnMgYXMgdHlwZW9mIFNsaWRlRG93blRhYnM7IH0sXG4gICAgICAgIGdldCBUYWJDb250ZW50KCkgeyByZXR1cm4gVGFiQ29udGVudCBhcyB0eXBlb2YgVGFiQ29udGVudDsgfVxuICAgIH0gfSk7XG5Ecm9wZG93blBhbmVsLmRpc3BsYXlOYW1lID0gJ0Ryb3Bkb3duUGFuZWwnO1xuIl19