var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { InteractiveList, } from '../InteractiveList';
import { cyan, transparent } from '../../colors';
import { Icon } from '../Icon';
import { getFontStyle } from '../../textStyles';
import onClickOutside from 'react-onclickoutside';
const StyledWrapper = styled.div `
  box-sizing: border-box;
  box-shadow: none;
  margin: 0 0 ${props => (props.open ? '10px' : '0')} 0;
  padding: 0;
  border: 1px solid ${themed(({ theme, open }) => (open ? theme.ui0 : transparent))};
`;
const MenuCaret = styled.div `
  position: absolute;
  top: 8px;
  right: 9px;
  fill: rgba(0, 139, 208, 1);
`;
const MenuTitle = styled.span `
  ${getFontStyle({ size: 'large', weight: 'regular' })}

  border-bottom: 2px solid black;
`;
const SelectedMenu = styled.div `
  position: relative;
  padding: 10px;
  cursor: pointer;
`;
const CustomWrapper = (_a) => {
    var { border: _0, direction: _1, open: _2 } = _a, props = __rest(_a, ["border", "direction", "open"]);
    return (React.createElement("div", Object.assign({}, props)));
};
class SlideDownTabsInt extends React.Component {
    constructor(props) {
        super(props);
        this.hide = () => {
            this.setState({ isOpen: false });
        };
        this.toggle = (e) => {
            this.setState({ isOpen: !this.state.isOpen });
            e.preventDefault();
        };
        this.onChange = ({ value }) => {
            this.props.onChange(value[0]);
            this.setState({
                isOpen: false,
            });
        };
        this.handleClickOutside = this.hide;
        this.state = {
            isOpen: false,
        };
    }
    render() {
        const { isOpen } = this.state;
        const { data, selectedIndex } = this.props;
        const interactiveList = data.map((item, index) => (index === selectedIndex ? undefined : item));
        return (React.createElement(StyledWrapper, { open: isOpen },
            React.createElement(SelectedMenu, { onMouseDown: this.toggle },
                React.createElement(MenuTitle, null, data[selectedIndex].content),
                React.createElement(MenuCaret, null,
                    React.createElement(Icon, { name: isOpen ? 'KeyboardArrowUp' : 'KeyboardArrowDown', size: "24px", color: cyan }))),
            React.createElement(InteractiveList, { data: interactiveList, open: isOpen, onBlur: this.hide, autoFocus: true, onChange: this.onChange, customWrapper: CustomWrapper, onClickOutside: () => { } })));
    }
}
SlideDownTabsInt.inner = {
    get StyledWrapper() { return StyledWrapper; },
    get SelectedMenu() { return SelectedMenu; },
    get MenuTitle() { return MenuTitle; },
    get MenuCaret() { return MenuCaret; },
    get Icon() { return Icon; },
    get InteractiveList() { return InteractiveList; }
};
export const SlideDownTabs = onClickOutside(SlideDownTabsInt);
export const DropdownContainer = styled.div ``;
export const TabContent = styled.div ``;
export const TabItem = styled.div `
  ${props => (props.active ? '' : 'display: none;')};
`;
//# sourceMappingURL=data:application/json;base64,