var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { InteractiveList, InteractiveListDirection, } from '../InteractiveList';
import { Icon } from '../Icon';
import { white, cyan, skyBlue } from '../../colors';
import { distance } from '../../distance';
import OnClickOut from 'react-onclickoutside';
const RootWrapper = styled.div `
  color: ${cyan};
  &:hover {
    color: ${skyBlue};
  }
`;
const ButtonWrapper = styled.div `
  padding-left: ${distance.xsmall};
  display: flex;
  align-items: center;
  cursor: pointer;
`;
const StyledCustomWrapper = styled.div `
  position: absolute;
  border: solid 1px #dfe3e6;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1);
  position: absolute;
  z-index: 2;
  top: ${props => (props.direction === InteractiveListDirection.normal ? 8 : -30)}px;
  transform: translateY(${props => (props.direction === InteractiveListDirection.normal ? 0 : -100)}%);
  background: ${white};
  border: 1px solid #dfe3e6;
  max-height: 50vh;
  overflow-y: auto;
`;
const CustomWrapper = Object.assign((props => {
    return React.createElement(StyledCustomWrapper, Object.assign({}, props));
}), { inner: {
        get StyledCustomWrapper() { return StyledCustomWrapper; }
    } });
function renderValue(data, value) {
    for (const item of data) {
        if (typeof item !== 'string' && item.key === value) {
            return item.content || value;
        }
    }
    return value;
}
class SelectButtonInt extends React.PureComponent {
    constructor(props) {
        super(props);
        this.handleMouseDown = (e) => {
            const { open } = this.state;
            this.setState({
                open: !open,
            });
            e.preventDefault();
        };
        this.handleChange = (e) => {
            const { onChange, data } = this.props;
            const { controlled } = this.state;
            const index = e.value.length ? e.value[0] : -1;
            const item = data[index];
            const value = item && (typeof item === 'string' ? item : item.key);
            if (!value) {
                return;
            }
            if (!controlled) {
                this.setState({
                    open: false,
                    value,
                });
            }
            else {
                this.setState({
                    open: false,
                });
            }
            if (typeof onChange === 'function') {
                onChange({
                    index,
                    value,
                });
            }
        };
        this.handleBlur = () => {
            this.setState({
                open: false,
            });
        };
        this.handleClickOutside = this.handleBlur;
        const controlled = props.value !== undefined;
        this.state = {
            open: false,
            value: (controlled ? props.value : props.defaultValue) || '',
            controlled,
        };
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        const { controlled } = this.state;
        if (controlled) {
            this.setState({
                value: nextProps.value || '',
            });
        }
    }
    render() {
        const _a = this.props, { data = [], onChange: _0, value: _1 } = _a, props = __rest(_a, ["data", "onChange", "value"]);
        const { open, value } = this.state;
        return (React.createElement(RootWrapper, Object.assign({}, props),
            React.createElement(ButtonWrapper, { onMouseDown: this.handleMouseDown },
                renderValue(data, value),
                React.createElement(Icon, { name: "ArrowDropDown", size: 1.5 })),
            React.createElement(InteractiveList, { data: data, open: open, onBlur: this.handleBlur, onChange: this.handleChange, customWrapper: CustomWrapper, value: value, onClickOutside: () => { }, autoPosition: true, autoFocus: true, showTick: true })));
    }
}
SelectButtonInt.inner = {
    get RootWrapper() { return RootWrapper; },
    get ButtonWrapper() { return ButtonWrapper; },
    get Icon() { return Icon; },
    get InteractiveList() { return InteractiveList; }
};
/**
 * Represents a select button, which is a kind of dropdown button.
 */
export const SelectButton = OnClickOut(SelectButtonInt);
//# sourceMappingURL=data:application/json;base64,