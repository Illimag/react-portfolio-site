var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { keyframes, themed } from '../../utils/styled';
import { distance } from '../../distance';
import { remCalc } from '../../utils/remCalc';
function strToSize(size) {
    switch (size) {
        case 'x-small':
            return 5;
        case 'small':
            return 7;
        case 'large':
            return 12;
        case 'x-large':
            return 15;
    }
    return 10;
}
function strToFontSize(size) {
    return remCalc(size === 'x-small' ? '12px' : '14px');
}
const SpinnerAnimation = keyframes `
  25% {
    transform: translateX(2.625em) rotate(-90deg) scale(0.5);
    -webkit-transform: translateX(2.625em) rotate(-90deg) scale(0.5);
  } 50% {
    transform: translateX(2.625em) translateY(2.625em) rotate(-179deg);
    -webkit-transform: translateX(2.625em) translateY(2.625em) rotate(-179deg);
  } 50.1% {
    transform: translateX(2.625em) translateY(2.625em) rotate(-180deg);
    -webkit-transform: translateX(2.625em) translateY(2.625em) rotate(-180deg);
  } 75% {
    transform: translateX(0px) translateY(2.625em) rotate(-270deg) scale(0.5);
    -webkit-transform: translateX(0px) translateY(2.625em) rotate(-270deg) scale(0.5);
  } 100% {
    transform: rotate(-360deg);
    -webkit-transform: rotate(-360deg);
  }
`;
const SpinningContainer = styled.div `
  text-align: center;
  visibility: ${props => (props.hidden ? 'hidden' : 'visible')};
`;
const SpinningLabel = styled('label') `
  color: ${themed(props => props.theme.text6)};
  display: ${props => (strToSize(props.size) >= 20 ? 'block' : 'inline-block')};
  margin: ${distance.xsmall};
  color: ${themed(props => props.theme.textDisabled)};
  font-size: ${props => strToFontSize(props.size)};
`;
const Cubes = styled.div `
  width: ${props => strToSize(props.size) * 4.6}px;
  height: ${props => strToSize(props.size) * 4.6}px;
  position: relative;
  font-size: ${props => strToSize(props.size)}px;
  margin: auto;
`;
const Cube0 = styled.div `
  background-color: #141e8c;
  width: 2em;
  height: 2em;
  position: absolute;
  top: 0;
  left: 0;
  animation: ${SpinnerAnimation} 1.8s infinite ease-in-out;
`;
const Cube1 = styled(Cube0) `
  animation-delay: -0.9s;
`;
/**
 * The spinner component displays a loading spinner optionally equipped with a label text.
 */
export const Spinner = Object.assign(((_a) => {
    var { theme, size = 'medium', children } = _a, props = __rest(_a, ["theme", "size", "children"]);
    const spinningProps = { theme, size, hidden: props.hidden };
    return (React.createElement(SpinningContainer, Object.assign({}, props),
        React.createElement(Cubes, Object.assign({}, spinningProps),
            React.createElement(Cube0, null),
            React.createElement(Cube1, null)),
        children && React.createElement(SpinningLabel, Object.assign({}, spinningProps), children)));
}), { inner: {
        get SpinningContainer() { return SpinningContainer; },
        get Cubes() { return Cubes; },
        get Cube0() { return Cube0; },
        get Cube1() { return Cube1; },
        get SpinningLabel() { return SpinningLabel; }
    } });
Spinner.displayName = 'Spinner';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9TcGlubmVyL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUvRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBaUI5QyxTQUFTLFNBQVMsQ0FBQyxJQUFhO0lBQzVCLFFBQVEsSUFBSSxFQUFFO1FBQ1YsS0FBSyxTQUFTO1lBQ1YsT0FBTyxDQUFDLENBQUM7UUFDYixLQUFLLE9BQU87WUFDUixPQUFPLENBQUMsQ0FBQztRQUNiLEtBQUssT0FBTztZQUNSLE9BQU8sRUFBRSxDQUFDO1FBQ2QsS0FBSyxTQUFTO1lBQ1YsT0FBTyxFQUFFLENBQUM7S0FDakI7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNkLENBQUM7QUFDRCxTQUFTLGFBQWEsQ0FBQyxJQUFhO0lBQ2hDLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUNELE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCbEMsQ0FBQztBQUNGLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FFakM7O2dCQUVhLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztDQUM3RCxDQUFDO0FBSUYsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFxQjtXQUMvQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUNoQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDO1lBQ2xFLFFBQVEsQ0FBQyxNQUFNO1dBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO2VBQ3JDLEtBQUssQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Q0FDaEQsQ0FBQztBQUNGLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBRXJCO1dBQ1EsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUc7WUFDbkMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUc7O2VBRWpDLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7O0NBRTVDLENBQUM7QUFDRixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDOzs7Ozs7O2VBT1YsZ0JBQWdCO0NBQzlCLENBQUM7QUFDRixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7O0NBRTNCLENBQUM7QUFDRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLENBQUMsQ0FBQyxFQUE4QyxFQUFFLEVBQUU7UUFBbEQsRUFBRSxLQUFLLEVBQUUsSUFBSSxHQUFHLFFBQVEsRUFBRSxRQUFRLE9BQVksRUFBVixpREFBUTtJQUNoRixNQUFNLGFBQWEsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1RCxPQUFPLENBQUMsb0JBQUMsaUJBQWlCLG9CQUFLLEtBQUs7UUFDbEMsb0JBQUMsS0FBSyxvQkFBSyxhQUFhO1lBQ3RCLG9CQUFDLEtBQUssT0FBRztZQUNULG9CQUFDLEtBQUssT0FBRyxDQUNIO1FBQ1AsUUFBUSxJQUFJLG9CQUFDLGFBQWEsb0JBQUssYUFBYSxHQUFHLFFBQVEsQ0FBaUIsQ0FDdkQsQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBNkIsRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNqQyxJQUFJLGlCQUFpQixLQUFLLE9BQU8saUJBQTZDLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLElBQUksS0FBSyxLQUFLLE9BQU8sS0FBcUIsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxLQUFLLEtBQUssT0FBTyxLQUFxQixDQUFDLENBQUMsQ0FBQztRQUM3QyxJQUFJLEtBQUssS0FBSyxPQUFPLEtBQXFCLENBQUMsQ0FBQyxDQUFDO1FBQzdDLElBQUksYUFBYSxLQUFLLE9BQU8sYUFBcUMsQ0FBQyxDQUFDLENBQUM7S0FDeEUsRUFBRSxDQUFDLENBQUM7QUFDVCxPQUFPLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzLCB0aGVtZWQgfSBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBkaXN0YW5jZSB9IGZyb20gJy4uLy4uL2Rpc3RhbmNlJztcbmltcG9ydCB7IHJlbUNhbGMgfSBmcm9tICcuLi8uLi91dGlscy9yZW1DYWxjJztcbmV4cG9ydCB0eXBlIFNwaW5uZXJTaXplID0gJ3gtc21hbGwnIHwgJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ2xhcmdlJyB8ICd4LWxhcmdlJztcbmV4cG9ydCBpbnRlcmZhY2UgU3Bpbm5lclByb3BzIGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgb2YgdGhlIHNwaW5uZXIsIHdoZXJlIG1lZGl1bSBpcyB0aGUgZGVmYXVsdCBzaXplLlxuICAgICAqIEBkZWZhdWx0IG1lZGl1bVxuICAgICAqL1xuICAgIHNpemU/OiBTcGlubmVyU2l6ZTtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBzcGlubmVyIHNob3VsZCBiZSBoaWRkZW4uXG4gICAgICovXG4gICAgaGlkZGVuPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzcGlubmVyJ3MgbGFiZWwsIGlmIGFueS5cbiAgICAgKi9cbiAgICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbn1cbmZ1bmN0aW9uIHN0clRvU2l6ZShzaXplPzogc3RyaW5nKSB7XG4gICAgc3dpdGNoIChzaXplKSB7XG4gICAgICAgIGNhc2UgJ3gtc21hbGwnOlxuICAgICAgICAgICAgcmV0dXJuIDU7XG4gICAgICAgIGNhc2UgJ3NtYWxsJzpcbiAgICAgICAgICAgIHJldHVybiA3O1xuICAgICAgICBjYXNlICdsYXJnZSc6XG4gICAgICAgICAgICByZXR1cm4gMTI7XG4gICAgICAgIGNhc2UgJ3gtbGFyZ2UnOlxuICAgICAgICAgICAgcmV0dXJuIDE1O1xuICAgIH1cbiAgICByZXR1cm4gMTA7XG59XG5mdW5jdGlvbiBzdHJUb0ZvbnRTaXplKHNpemU/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVtQ2FsYyhzaXplID09PSAneC1zbWFsbCcgPyAnMTJweCcgOiAnMTRweCcpO1xufVxuY29uc3QgU3Bpbm5lckFuaW1hdGlvbiA9IGtleWZyYW1lcyBgXG4gIDI1JSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDIuNjI1ZW0pIHJvdGF0ZSgtOTBkZWcpIHNjYWxlKDAuNSk7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMi42MjVlbSkgcm90YXRlKC05MGRlZykgc2NhbGUoMC41KTtcbiAgfSA1MCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgyLjYyNWVtKSB0cmFuc2xhdGVZKDIuNjI1ZW0pIHJvdGF0ZSgtMTc5ZGVnKTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgyLjYyNWVtKSB0cmFuc2xhdGVZKDIuNjI1ZW0pIHJvdGF0ZSgtMTc5ZGVnKTtcbiAgfSA1MC4xJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDIuNjI1ZW0pIHRyYW5zbGF0ZVkoMi42MjVlbSkgcm90YXRlKC0xODBkZWcpO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDIuNjI1ZW0pIHRyYW5zbGF0ZVkoMi42MjVlbSkgcm90YXRlKC0xODBkZWcpO1xuICB9IDc1JSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDBweCkgdHJhbnNsYXRlWSgyLjYyNWVtKSByb3RhdGUoLTI3MGRlZykgc2NhbGUoMC41KTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgwcHgpIHRyYW5zbGF0ZVkoMi42MjVlbSkgcm90YXRlKC0yNzBkZWcpIHNjYWxlKDAuNSk7XG4gIH0gMTAwJSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoLTM2MGRlZyk7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtMzYwZGVnKTtcbiAgfVxuYDtcbmNvbnN0IFNwaW5uaW5nQ29udGFpbmVyID0gc3R5bGVkLmRpdjx7XG4gICAgaGlkZGVuPzogYm9vbGVhbjtcbn0+IGBcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB2aXNpYmlsaXR5OiAke3Byb3BzID0+IChwcm9wcy5oaWRkZW4gPyAnaGlkZGVuJyA6ICd2aXNpYmxlJyl9O1xuYDtcbmV4cG9ydCBpbnRlcmZhY2UgU3Bpbm5pbmdMYWJlbFByb3BzIHtcbiAgICBzaXplPzogc3RyaW5nO1xufVxuY29uc3QgU3Bpbm5pbmdMYWJlbCA9IHN0eWxlZCgnbGFiZWwnKTxTcGlubmluZ0xhYmVsUHJvcHM+IGBcbiAgY29sb3I6ICR7dGhlbWVkKHByb3BzID0+IHByb3BzLnRoZW1lLnRleHQ2KX07XG4gIGRpc3BsYXk6ICR7cHJvcHMgPT4gKHN0clRvU2l6ZShwcm9wcy5zaXplKSA+PSAyMCA/ICdibG9jaycgOiAnaW5saW5lLWJsb2NrJyl9O1xuICBtYXJnaW46ICR7ZGlzdGFuY2UueHNtYWxsfTtcbiAgY29sb3I6ICR7dGhlbWVkKHByb3BzID0+IHByb3BzLnRoZW1lLnRleHREaXNhYmxlZCl9O1xuICBmb250LXNpemU6ICR7cHJvcHMgPT4gc3RyVG9Gb250U2l6ZShwcm9wcy5zaXplKX07XG5gO1xuY29uc3QgQ3ViZXMgPSBzdHlsZWQuZGl2PHtcbiAgICBzaXplPzogc3RyaW5nO1xufT4gYFxuICB3aWR0aDogJHtwcm9wcyA9PiBzdHJUb1NpemUocHJvcHMuc2l6ZSkgKiA0LjZ9cHg7XG4gIGhlaWdodDogJHtwcm9wcyA9PiBzdHJUb1NpemUocHJvcHMuc2l6ZSkgKiA0LjZ9cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZm9udC1zaXplOiAke3Byb3BzID0+IHN0clRvU2l6ZShwcm9wcy5zaXplKX1weDtcbiAgbWFyZ2luOiBhdXRvO1xuYDtcbmNvbnN0IEN1YmUwID0gc3R5bGVkLmRpdiBgXG4gIGJhY2tncm91bmQtY29sb3I6ICMxNDFlOGM7XG4gIHdpZHRoOiAyZW07XG4gIGhlaWdodDogMmVtO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgYW5pbWF0aW9uOiAke1NwaW5uZXJBbmltYXRpb259IDEuOHMgaW5maW5pdGUgZWFzZS1pbi1vdXQ7XG5gO1xuY29uc3QgQ3ViZTEgPSBzdHlsZWQoQ3ViZTApIGBcbiAgYW5pbWF0aW9uLWRlbGF5OiAtMC45cztcbmA7XG4vKipcbiAqIFRoZSBzcGlubmVyIGNvbXBvbmVudCBkaXNwbGF5cyBhIGxvYWRpbmcgc3Bpbm5lciBvcHRpb25hbGx5IGVxdWlwcGVkIHdpdGggYSBsYWJlbCB0ZXh0LlxuICovXG5leHBvcnQgY29uc3QgU3Bpbm5lciA9IE9iamVjdC5hc3NpZ24oKCgoeyB0aGVtZSwgc2l6ZSA9ICdtZWRpdW0nLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIGNvbnN0IHNwaW5uaW5nUHJvcHMgPSB7IHRoZW1lLCBzaXplLCBoaWRkZW46IHByb3BzLmhpZGRlbiB9O1xuICAgIHJldHVybiAoPFNwaW5uaW5nQ29udGFpbmVyIHsuLi5wcm9wc30+XG4gICAgICA8Q3ViZXMgey4uLnNwaW5uaW5nUHJvcHN9PlxuICAgICAgICA8Q3ViZTAgLz5cbiAgICAgICAgPEN1YmUxIC8+XG4gICAgICA8L0N1YmVzPlxuICAgICAge2NoaWxkcmVuICYmIDxTcGlubmluZ0xhYmVsIHsuLi5zcGlubmluZ1Byb3BzfT57Y2hpbGRyZW59PC9TcGlubmluZ0xhYmVsPn1cbiAgICA8L1NwaW5uaW5nQ29udGFpbmVyPik7XG59KSBhcyBSZWFjdC5TRkM8U3Bpbm5lclByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IFNwaW5uaW5nQ29udGFpbmVyKCkgeyByZXR1cm4gU3Bpbm5pbmdDb250YWluZXIgYXMgdHlwZW9mIFNwaW5uaW5nQ29udGFpbmVyOyB9LFxuICAgICAgICBnZXQgQ3ViZXMoKSB7IHJldHVybiBDdWJlcyBhcyB0eXBlb2YgQ3ViZXM7IH0sXG4gICAgICAgIGdldCBDdWJlMCgpIHsgcmV0dXJuIEN1YmUwIGFzIHR5cGVvZiBDdWJlMDsgfSxcbiAgICAgICAgZ2V0IEN1YmUxKCkgeyByZXR1cm4gQ3ViZTEgYXMgdHlwZW9mIEN1YmUxOyB9LFxuICAgICAgICBnZXQgU3Bpbm5pbmdMYWJlbCgpIHsgcmV0dXJuIFNwaW5uaW5nTGFiZWwgYXMgdHlwZW9mIFNwaW5uaW5nTGFiZWw7IH1cbiAgICB9IH0pO1xuU3Bpbm5lci5kaXNwbGF5TmFtZSA9ICdTcGlubmVyJztcbiJdfQ==