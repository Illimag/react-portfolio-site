var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { StackPanel } from '../StackPanel';
import { purpleRed } from '../../colors';
import { InputIcon } from '../InputIcon';
import { withFormContext } from '../../hoc/withFormContext';
import { showInputInfo } from '../../utils/input';
import { distance } from '../../distance';
import { StyledInputRow, StyledInput, StyledInputBox, getTextFieldBorderType } from '../../quarks';
import { getFontSize } from '../../textStyles';
const TextFieldContainer = styled.div `
  position: relative;
`;
const TextFieldWrapper = styled(StackPanel) `
  display: flex;
`;
const TextFieldArea = styled.textarea `
  ::-ms-clear { display: none; }

  white-space: pre-wrap;
  word-break: break-word;

  ${getFontSize('medium')}
  color: ${themed(({ theme, disabled }) => (disabled ? theme.text3 : theme.text2))};
  border-radius: 0;
  font-family: inherit;
  padding: ${props => (props.labelShown ? `${distance.large} ${distance.medium} ${distance.small}` : distance.medium)};
  box-sizing: border-box;
  box-shadow: none;
  resize: ${props => props.resizable || 'none'};
  margin: 0;
  width: 100%;
  cursor: ${props => (props.disabled ? 'not-allowed' : 'auto')};
  border: none;
  border-bottom: 1px solid
    ${themed(({ theme, border }) => (border === 3 /* error */ ? purpleRed : theme.ui4))};
  background: ${themed(({ theme }) => theme.ui2)};

  &::placeholder {
    color: ${themed(({ theme, disabled }) => (disabled ? theme.text3 : theme.text2))};
    opacity: ${props => (props.labelShown ? '0' : '1')};
    transition: inherit;
  }

  &:focus {
    outline: none;

    &::placeholder {
      opacity: 1;
    }
  }
`;
const TextFieldElement = styled.div `
  ${getFontSize('medium')}

  display: flex;
  align-items: center;
  padding: ${distance.medium};
  color: ${themed(({ theme }) => theme.text2)};
  background: ${themed(({ theme }) => theme.ui3)};
`;
class TextFieldInt extends React.Component {
    constructor(props) {
        super(props);
        this.changeValue = (e) => {
            this.updateValue(e.target.value, e);
        };
        this.changeHeight = () => {
            const { resizable } = this.props;
            const element = this._element;
            if (resizable === 'auto' && element) {
                element.style.height = '1px';
                element.style.height = `${element.scrollHeight}px`;
            }
        };
        this.setTextFieldNode = (node) => {
            this._element = node;
            const { inputRef } = this.props;
            if (typeof inputRef === 'function') {
                inputRef(node);
            }
        };
        this.setFocus = () => {
            const { onFocus } = this.props;
            this.setState({
                focused: true,
            }, onFocus);
        };
        this.unsetFocus = () => {
            const { onBlur } = this.props;
            this.setState({
                focused: false,
            }, onBlur);
        };
        this.handleReset = () => {
            const { onClear } = this.props;
            this.updateValue('');
            if (typeof onClear === 'function') {
                onClear();
            }
        };
        this.state = {
            focused: false,
            reveal: false,
            controlled: props.value !== undefined,
            value: props.value || props.defaultValue || '',
            error: props.error,
        };
    }
    UNSAFE_componentWillReceiveProps({ value = '', error }) {
        if (this.state.controlled) {
            this.setState({ value });
        }
        this.setState({ error });
    }
    componentDidMount() {
        this.changeHeight();
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.subscribe(this);
        }
    }
    componentWillUnmount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    }
    updateValue(value, e) {
        const { onChange, name = '', form } = this.props;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name,
                    value,
                });
            }
            else {
                this.setState({
                    value,
                });
            }
        }
        if (typeof onChange === 'function') {
            onChange({
                value,
                originalEvent: e,
            });
        }
    }
    render() {
        const _a = this.props, { theme, borderless, prefix, suffix, multiline, resizable = false, disabled, placeholder, info, label, clearable, onClear, icon, onChange: _0, defaultValue: _1, value: _2, form: _3, onFocus: _4, onBlur: _5, inputRef: _6, onInput: _7 } = _a, rest = __rest(_a, ["theme", "borderless", "prefix", "suffix", "multiline", "resizable", "disabled", "placeholder", "info", "label", "clearable", "onClear", "icon", "onChange", "defaultValue", "value", "form", "onFocus", "onBlur", "inputRef", "onInput"]);
        const { focused, value, error } = this.state;
        const rows = typeof multiline === 'number' ? multiline : undefined;
        const border = getTextFieldBorderType(borderless, !!error, focused);
        const hasValue = !!value;
        const input = rows !== undefined || multiline ? (React.createElement(TextFieldArea, Object.assign({ ref: this.setTextFieldNode, onInput: this.changeHeight, border: border, rows: rows, resizable: typeof resizable === 'string' ? resizable : resizable ? 'auto' : undefined, disabled: disabled, labelShown: label !== undefined, placeholder: placeholder, onFocus: this.setFocus, onBlur: this.unsetFocus, value: value, onChange: this.changeValue }, rest))) : (React.createElement(StyledInput, Object.assign({ ref: el => this.setTextFieldNode(el), theme: theme, disabled: disabled, labelShown: label !== undefined, placeholder: placeholder, onFocus: this.setFocus, onBlur: this.unsetFocus, value: value, onChange: this.changeValue }, rest)));
        const textFieldWrapper = (React.createElement(StyledInputRow, { error: !!error, focused: focused, hasValue: hasValue, label: label, placeholder: placeholder, multiline: rows !== undefined || multiline !== undefined }, input));
        return (React.createElement(TextFieldContainer, null,
            rows !== undefined || multiline ? (textFieldWrapper) : (React.createElement(TextFieldWrapper, null,
                prefix && React.createElement(TextFieldElement, null, prefix),
                React.createElement(StyledInputBox, { border: border, disabled: disabled, focused: focused, hasValue: hasValue },
                    textFieldWrapper,
                    React.createElement(InputIcon, { disabled: disabled, defaultIcon: icon, theme: theme, error: error, hasValue: hasValue, clearable: clearable, onClear: this.handleReset, onClick: () => this._element && this._element.focus() })),
                suffix && React.createElement(TextFieldElement, null, suffix))),
            showInputInfo(error, info)));
    }
}
TextFieldInt.inner = {
    get TextFieldArea() { return TextFieldArea; },
    get StyledInput() { return StyledInput; },
    get StyledInputRow() { return StyledInputRow; },
    get TextFieldContainer() { return TextFieldContainer; },
    get TextFieldWrapper() { return TextFieldWrapper; },
    get TextFieldElement() { return TextFieldElement; },
    get StyledInputBox() { return StyledInputBox; },
    get InputIcon() { return InputIcon; }
};
/**
 * A text field for custom user input.
 */
export const TextField = withFormContext(TextFieldInt);
TextField.displayName = 'TextField';
//# sourceMappingURL=data:application/json;base64,