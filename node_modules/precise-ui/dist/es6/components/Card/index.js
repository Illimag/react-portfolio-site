var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { StackPanel, StackPanelDirection } from '../StackPanel';
const StyledCard = styled(StackPanel) `
  position: relative;
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
  box-sizing: border-box;
`;
const StyledCardChildWrapper = styled.div `
  box-sizing: border-box;
  overflow: auto;
  transition: flex-grow 0.4s;
  ${props => props.grow
    ? `
    flex-grow: ${props.grow};
    flex-basis: 0;`
    : ''};
`;
export const Card = Object.assign(((_a) => {
    var { orientation = 'vertical', children, layout: propsLayout } = _a, rest = __rest(_a, ["orientation", "children", "layout"]);
    const layout = propsLayout || React.Children.map(children, _ => 0) || [];
    const cardChildComponents = [];
    React.Children.forEach(children, (child, index) => {
        if (!child) {
            return;
        }
        const _a = child.props, { children: grandChildren } = _a, childProps = __rest(_a, ["children"]);
        const sticky = children && child.type && child.type.displayName === 'Sticky';
        cardChildComponents.push(sticky ? (React.createElement(child.type, Object.assign({ key: index }, childProps), grandChildren)) : (React.createElement(StyledCardChildWrapper, { key: index, grow: layout[index] },
            React.createElement(child.type, Object.assign({}, childProps), grandChildren))));
    });
    return (React.createElement(StyledCard, Object.assign({ direction: orientation === 'vertical' ? StackPanelDirection.topToBottom : StackPanelDirection.leftToRight }, rest), cardChildComponents));
}), { inner: {
        get StyledCardChildWrapper() { return StyledCardChildWrapper; },
        get StyledCard() { return StyledCard; }
    } });
Card.displayName = 'Card';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9DYXJkL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLE1BQU0sTUFBTSxvQkFBb0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsVUFBVSxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBc0JoRSxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7Ozs7Q0FPckMsQ0FBQztBQUNGLE1BQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBdUI7Ozs7SUFJNUQsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSTtJQUNuQixDQUFDLENBQUM7aUJBQ1csS0FBSyxDQUFDLElBQUk7bUJBQ1I7SUFDZixDQUFDLENBQUMsRUFBRTtDQUNQLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUMsRUFBb0UsRUFBRSxFQUFFO1FBQXhFLEVBQUUsV0FBVyxHQUFHLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsT0FBVyxFQUFULHdEQUFPO0lBQ25HLE1BQU0sTUFBTSxHQUFHLFdBQVcsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekUsTUFBTSxtQkFBbUIsR0FBZSxFQUFFLENBQUM7SUFDM0MsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBdUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNoRixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsT0FBTztTQUNWO1FBQ0QsTUFBTSxnQkFBd0QsRUFBeEQsRUFBRSxRQUFRLEVBQUUsYUFBYSxPQUErQixFQUE3QixxQ0FBNkIsQ0FBQztRQUMvRCxNQUFNLE1BQU0sR0FBRyxRQUFRLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxRQUFRLENBQUM7UUFDN0UsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBQyxLQUFLLENBQUMsSUFBSSxrQkFBQyxHQUFHLEVBQUUsS0FBSyxJQUFNLFVBQVUsR0FDdEUsYUFBYSxDQUNILENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBQyxzQkFBc0IsSUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ3ZFLG9CQUFDLEtBQUssQ0FBQyxJQUFJLG9CQUFLLFVBQVUsR0FBRyxhQUFhLENBQWMsQ0FDakMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLENBQUMsb0JBQUMsVUFBVSxrQkFBQyxTQUFTLEVBQUUsV0FBVyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLElBQU0sSUFBSSxHQUNwSSxtQkFBbUIsQ0FDVCxDQUFDLENBQUM7QUFDbkIsQ0FBQyxDQUEwQixFQUFFLEVBQUUsS0FBSyxFQUFFO1FBQzlCLElBQUksc0JBQXNCLEtBQUssT0FBTyxzQkFBdUQsQ0FBQyxDQUFDLENBQUM7UUFDaEcsSUFBSSxVQUFVLEtBQUssT0FBTyxVQUErQixDQUFDLENBQUMsQ0FBQztLQUMvRCxFQUFFLENBQUMsQ0FBQztBQUNULElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgU3RhY2tQYW5lbCwgU3RhY2tQYW5lbERpcmVjdGlvbiB9IGZyb20gJy4uL1N0YWNrUGFuZWwnO1xuaW1wb3J0IHsgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5leHBvcnQgaW50ZXJmYWNlIENhcmRQcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICAgIC8qKlxuICAgICAqIERpcmVjdGlvbiBvZiB0aGUgY2FyZCBpcyBkZXRlcm1pbmluZyB3aGV0aGVyIHRoZSBjYXJkIHNob3VsZCBiZVxuICAgICAqIGxheWVkLW91dCBmcm9tIHRvcCB0byBib3R0b20gKHZlcnRpY2FsKSBvciBmcm9tIGxlZnQgdG8gcmlnaHQgKGhvcml6b250YWwpXG4gICAgICovXG4gICAgb3JpZW50YXRpb24/OiAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnO1xuICAgIC8qKlxuICAgICAqIExheW91dCBwcm9wZXJ0eSBsZXRzIHRoZSBjb25zdW1lciB0byBkZXRlcm1pbmUgc3BhY2luZyBkaXN0cmlidXRpb24gb2YgdGggY2hpbGRyZW5cbiAgICAgKiBEZWZhdWx0IGlzIDEgZm9yIGV2ZXIgY2hpbGQsIG1lYW5pbmcgdGhhdCBhbGwgdGhlIGNoaWxkIGVsZW1lbnRzXG4gICAgICogd2lsbCBiZSBkaXN0cmlidXRlZCBpbiBhIHdheSB0aGF0IHRoZXkgc2hhcmUgc3BhY2UgZXF1YWxseVxuICAgICAqL1xuICAgIGxheW91dD86IEFycmF5PG51bWJlcj47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY2hpbGRyZW4gb2YgdGhlIGNhcmQgdG8gcmVuZGVyLlxuICAgICAqL1xuICAgIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xufVxuZXhwb3J0IGludGVyZmFjZSBTdHlsZWRDYXJkQ2hpbGRQcm9wcyB7XG4gICAgZ3Jvdz86IG51bWJlcjtcbn1cbmNvbnN0IFN0eWxlZENhcmQgPSBzdHlsZWQoU3RhY2tQYW5lbCkgYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbmA7XG5jb25zdCBTdHlsZWRDYXJkQ2hpbGRXcmFwcGVyID0gc3R5bGVkLmRpdjxTdHlsZWRDYXJkQ2hpbGRQcm9wcz4gYFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBvdmVyZmxvdzogYXV0bztcbiAgdHJhbnNpdGlvbjogZmxleC1ncm93IDAuNHM7XG4gICR7cHJvcHMgPT4gcHJvcHMuZ3Jvd1xuICAgID8gYFxuICAgIGZsZXgtZ3JvdzogJHtwcm9wcy5ncm93fTtcbiAgICBmbGV4LWJhc2lzOiAwO2BcbiAgICA6ICcnfTtcbmA7XG5leHBvcnQgY29uc3QgQ2FyZCA9IE9iamVjdC5hc3NpZ24oKCgoeyBvcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCcsIGNoaWxkcmVuLCBsYXlvdXQ6IHByb3BzTGF5b3V0LCAuLi5yZXN0IH0pID0+IHtcbiAgICBjb25zdCBsYXlvdXQgPSBwcm9wc0xheW91dCB8fCBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIF8gPT4gMCkgfHwgW107XG4gICAgY29uc3QgY2FyZENoaWxkQ29tcG9uZW50czogQXJyYXk8YW55PiA9IFtdO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChjaGlsZDogUmVhY3QuQ29tcG9uZW50RWxlbWVudDxhbnksIGFueT4sIGluZGV4KSA9PiB7XG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGNoaWxkcmVuOiBncmFuZENoaWxkcmVuLCAuLi5jaGlsZFByb3BzIH0gPSBjaGlsZC5wcm9wcztcbiAgICAgICAgY29uc3Qgc3RpY2t5ID0gY2hpbGRyZW4gJiYgY2hpbGQudHlwZSAmJiBjaGlsZC50eXBlLmRpc3BsYXlOYW1lID09PSAnU3RpY2t5JztcbiAgICAgICAgY2FyZENoaWxkQ29tcG9uZW50cy5wdXNoKHN0aWNreSA/ICg8Y2hpbGQudHlwZSBrZXk9e2luZGV4fSB7Li4uY2hpbGRQcm9wc30+XG4gICAgICAgICAge2dyYW5kQ2hpbGRyZW59XG4gICAgICAgIDwvY2hpbGQudHlwZT4pIDogKDxTdHlsZWRDYXJkQ2hpbGRXcmFwcGVyIGtleT17aW5kZXh9IGdyb3c9e2xheW91dFtpbmRleF19PlxuICAgICAgICAgIDxjaGlsZC50eXBlIHsuLi5jaGlsZFByb3BzfT57Z3JhbmRDaGlsZHJlbn08L2NoaWxkLnR5cGU+XG4gICAgICAgIDwvU3R5bGVkQ2FyZENoaWxkV3JhcHBlcj4pKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKDxTdHlsZWRDYXJkIGRpcmVjdGlvbj17b3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgPyBTdGFja1BhbmVsRGlyZWN0aW9uLnRvcFRvQm90dG9tIDogU3RhY2tQYW5lbERpcmVjdGlvbi5sZWZ0VG9SaWdodH0gey4uLnJlc3R9PlxuICAgICAge2NhcmRDaGlsZENvbXBvbmVudHN9XG4gICAgPC9TdHlsZWRDYXJkPik7XG59KSBhcyBSZWFjdC5TRkM8Q2FyZFByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IFN0eWxlZENhcmRDaGlsZFdyYXBwZXIoKSB7IHJldHVybiBTdHlsZWRDYXJkQ2hpbGRXcmFwcGVyIGFzIHR5cGVvZiBTdHlsZWRDYXJkQ2hpbGRXcmFwcGVyOyB9LFxuICAgICAgICBnZXQgU3R5bGVkQ2FyZCgpIHsgcmV0dXJuIFN0eWxlZENhcmQgYXMgdHlwZW9mIFN0eWxlZENhcmQ7IH1cbiAgICB9IH0pO1xuQ2FyZC5kaXNwbGF5TmFtZSA9ICdDYXJkJztcbiJdfQ==