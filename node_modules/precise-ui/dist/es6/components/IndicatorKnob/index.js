var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { distance } from '../../distance';
import { ocean, midnight } from '../../colors';
const transitionDuration = '0.3s';
const transitionDurationBorder = '0.2s';
const transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';
const Indicator = styled('div') `
  width: ${distance.large};
  height: ${distance.large};
  position: absolute;
  border: ${themed(props => props.disabled || !props.focus ? 'none' : `${distance.xsmall} solid ${props.active ? midnight : props.theme.text1}`)};
  border-radius: 50%;
  background: ${themed(props => props.disabled ? props.theme.ui3 : props.active ? props.theme.ui0 : props.theme.text2)};
  transform: translate(-50%, -50%);
  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};
  box-sizing: border-box;
  transition: background ${transitionDuration} ${transitionEase},
    border ${transitionDurationBorder} ${transitionEase}
      ${props => (props.animate ? `, left ${transitionDuration} ${transitionEase}` : '')};

  &:hover {
    border: ${themed(props => props.disabled ? 'none' : `${distance.xsmall} solid ${props.active ? ocean : props.theme.ui5}`)};
  }
`;
function percent(value) {
    return typeof value === 'number' ? `${value * 100}%` : '50%';
}
/**
 * The indicator knob is a button like component that is placed in a container to indicate a position.
 */
export const IndicatorKnob = Object.assign(((_a) => {
    var { x, y, color, style } = _a, props = __rest(_a, ["x", "y", "color", "style"]);
    return (React.createElement(Indicator, Object.assign({ style: Object.assign({}, style, { left: percent(x), top: percent(y), backgroundColor: color }) }, props)));
}), { inner: {
        get Indicator() { return Indicator; }
    } });
IndicatorKnob.displayName = 'IndicatorKnob';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9JbmRpY2F0b3JLbm9iL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXBELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQU8vQyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQztBQUNsQyxNQUFNLHdCQUF3QixHQUFHLE1BQU0sQ0FBQztBQUN4QyxNQUFNLGNBQWMsR0FBRyw2QkFBNkIsQ0FBQztBQUNyRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQWlCO1dBQ3JDLFFBQVEsQ0FBQyxLQUFLO1lBQ2IsUUFBUSxDQUFDLEtBQUs7O1lBRWQsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxVQUFVLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7Z0JBRWhJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7O1lBRTFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQzs7MkJBRXRDLGtCQUFrQixJQUFJLGNBQWM7YUFDbEQsd0JBQXdCLElBQUksY0FBYztRQUMvQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxrQkFBa0IsSUFBSSxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDOzs7Y0FHMUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLFVBQVUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDOztDQUU1SCxDQUFDO0FBQ0YsU0FBUyxPQUFPLENBQUMsS0FBYztJQUMzQixPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNqRSxDQUFDO0FBeUNEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDLEVBQWdDLEVBQUUsRUFBRTtRQUFwQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssT0FBWSxFQUFWLGdEQUFRO0lBQU8sT0FBQSxDQUFDLG9CQUFDLFNBQVMsa0JBQUMsS0FBSyxvQkFDN0YsS0FBSyxJQUNSLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ2hCLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ2YsZUFBZSxFQUFFLEtBQUssT0FDbkIsS0FBSyxFQUFHLENBQUMsQ0FBQTtDQUFBLENBQW1DLEVBQUUsRUFBRSxLQUFLLEVBQUU7UUFDdEQsSUFBSSxTQUFTLEtBQUssT0FBTyxTQUE2QixDQUFDLENBQUMsQ0FBQztLQUM1RCxFQUFFLENBQUMsQ0FBQztBQUNULGFBQWEsQ0FBQyxXQUFXLEdBQUcsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwgeyB0aGVtZWQgfSBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBkaXN0YW5jZSB9IGZyb20gJy4uLy4uL2Rpc3RhbmNlJztcbmltcG9ydCB7IG9jZWFuLCBtaWRuaWdodCB9IGZyb20gJy4uLy4uL2NvbG9ycyc7XG5pbnRlcmZhY2UgSW5kaWNhdG9yUHJvcHMge1xuICAgIGFjdGl2ZT86IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIGFuaW1hdGU/OiBib29sZWFuO1xuICAgIGZvY3VzPzogYm9vbGVhbjtcbn1cbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9ICcwLjNzJztcbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbkJvcmRlciA9ICcwLjJzJztcbmNvbnN0IHRyYW5zaXRpb25FYXNlID0gJ2N1YmljLWJlemllcigwLCAwLCAwLjI1LCAxKSc7XG5jb25zdCBJbmRpY2F0b3IgPSBzdHlsZWQoJ2RpdicpPEluZGljYXRvclByb3BzPiBgXG4gIHdpZHRoOiAke2Rpc3RhbmNlLmxhcmdlfTtcbiAgaGVpZ2h0OiAke2Rpc3RhbmNlLmxhcmdlfTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3JkZXI6ICR7dGhlbWVkKHByb3BzID0+IHByb3BzLmRpc2FibGVkIHx8ICFwcm9wcy5mb2N1cyA/ICdub25lJyA6IGAke2Rpc3RhbmNlLnhzbWFsbH0gc29saWQgJHtwcm9wcy5hY3RpdmUgPyBtaWRuaWdodCA6IHByb3BzLnRoZW1lLnRleHQxfWApfTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBiYWNrZ3JvdW5kOiAke3RoZW1lZChwcm9wcyA9PiBwcm9wcy5kaXNhYmxlZCA/IHByb3BzLnRoZW1lLnVpMyA6IHByb3BzLmFjdGl2ZSA/IHByb3BzLnRoZW1lLnVpMCA6IHByb3BzLnRoZW1lLnRleHQyKX07XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBjdXJzb3I6ICR7cHJvcHMgPT4gKHByb3BzLmRpc2FibGVkID8gJ25vdC1hbGxvd2VkJyA6ICdwb2ludGVyJyl9O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kICR7dHJhbnNpdGlvbkR1cmF0aW9ufSAke3RyYW5zaXRpb25FYXNlfSxcbiAgICBib3JkZXIgJHt0cmFuc2l0aW9uRHVyYXRpb25Cb3JkZXJ9ICR7dHJhbnNpdGlvbkVhc2V9XG4gICAgICAke3Byb3BzID0+IChwcm9wcy5hbmltYXRlID8gYCwgbGVmdCAke3RyYW5zaXRpb25EdXJhdGlvbn0gJHt0cmFuc2l0aW9uRWFzZX1gIDogJycpfTtcblxuICAmOmhvdmVyIHtcbiAgICBib3JkZXI6ICR7dGhlbWVkKHByb3BzID0+IHByb3BzLmRpc2FibGVkID8gJ25vbmUnIDogYCR7ZGlzdGFuY2UueHNtYWxsfSBzb2xpZCAke3Byb3BzLmFjdGl2ZSA/IG9jZWFuIDogcHJvcHMudGhlbWUudWk1fWApfTtcbiAgfVxuYDtcbmZ1bmN0aW9uIHBlcmNlbnQodmFsdWU/OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IGAke3ZhbHVlICogMTAwfSVgIDogJzUwJSc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEluZGljYXRvcktub2JQcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjaGlsZHJlbj86IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSB4IHBvc2l0aW9uIG9mIHRoZSBrbm9iIGluIHRoZSAwIHRvIDEgcmFuZ2UuIEJ5IGRlZmF1bHQgMC41LlxuICAgICAqIEBkZWZhdWx0IDAuNVxuICAgICAqL1xuICAgIHg/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSB5IHBvc2l0aW9uIG9mIHRoZSBrbm9iIGluIHRoZSAwIHRvIDEgcmFuZ2UuIEJ5IGRlZmF1bHQgMC41LlxuICAgICAqIEBkZWZhdWx0IDAuNVxuICAgICAqL1xuICAgIHk/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiB0aGUga25vYi5cbiAgICAgKi9cbiAgICBjb2xvcj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbmRpY2F0b3IgYXMgYWN0aXZlLlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgYWN0aXZlPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbmRpY2F0b3IgYXMgZm9jdXNlZC5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGZvY3VzPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbmRpY2F0b3IgYXMgZGlzYWJsZWQsIGkuZS4sIG5vdCBtb3ZhYmxlLlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEFuaW1hdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBpbmRpY2F0b3JcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGFuaW1hdGU/OiBib29sZWFuO1xufVxuLyoqXG4gKiBUaGUgaW5kaWNhdG9yIGtub2IgaXMgYSBidXR0b24gbGlrZSBjb21wb25lbnQgdGhhdCBpcyBwbGFjZWQgaW4gYSBjb250YWluZXIgdG8gaW5kaWNhdGUgYSBwb3NpdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IEluZGljYXRvcktub2IgPSBPYmplY3QuYXNzaWduKCgoKHsgeCwgeSwgY29sb3IsIHN0eWxlLCAuLi5wcm9wcyB9KSA9PiAoPEluZGljYXRvciBzdHlsZT17e1xuICAgIC4uLnN0eWxlLFxuICAgIGxlZnQ6IHBlcmNlbnQoeCksXG4gICAgdG9wOiBwZXJjZW50KHkpLFxuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG59fSB7Li4ucHJvcHN9Lz4pKSBhcyBSZWFjdC5TRkM8SW5kaWNhdG9yS25vYlByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IEluZGljYXRvcigpIHsgcmV0dXJuIEluZGljYXRvciBhcyB0eXBlb2YgSW5kaWNhdG9yOyB9XG4gICAgfSB9KTtcbkluZGljYXRvcktub2IuZGlzcGxheU5hbWUgPSAnSW5kaWNhdG9yS25vYic7XG4iXX0=