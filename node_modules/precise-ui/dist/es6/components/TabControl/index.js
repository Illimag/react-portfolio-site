var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
/**
 * The functional component to handle tabs.
 * DEPRECATED: Please use `withTabControl` instead.
 * @deprecated
 */
export class TabControl extends React.PureComponent {
    constructor(props) {
        super(props);
        this.selects = [];
        this.changeIndex = (target) => {
            const change = this.props.onTabChange;
            if (typeof change === 'function') {
                change({
                    previousIndex: this.state.selectedIndex,
                    selectedIndex: target,
                });
            }
            if (!this.state.controlled) {
                this.setState({
                    selectedIndex: target,
                });
            }
        };
        this.state = {
            selectedIndex: props.selectedIndex || props.defaultIndex || 0,
            controlled: props.selectedIndex !== undefined,
        };
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        const selectedIndex = nextProps.selectedIndex;
        if (this.state.controlled && typeof selectedIndex === 'number') {
            this.setState({
                selectedIndex,
            });
        }
    }
    render() {
        const selectedIndex = this.state.selectedIndex;
        const { children, render } = this.props;
        const items = [];
        const selects = this.selects;
        React.Children.forEach(children, (element, index) => {
            if (element && React.isValidElement(element)) {
                const active = index === selectedIndex;
                if (selects[index] === undefined) {
                    selects[index] = () => this.changeIndex(index);
                }
                items.push({
                    onSelect: selects[index],
                    active,
                    element,
                });
            }
        });
        return render(items);
    }
}
function isTabPage(child) {
    return !!child;
}
function useTabControl({ children, selectedIndex, defaultIndex, onTabChange }) {
    const [controlled] = React.useState(selectedIndex !== undefined);
    const [activeTabIndex, setActiveTabIndex] = React.useState(selectedIndex || defaultIndex || 0);
    React.useEffect(() => {
        if (controlled && typeof selectedIndex === 'number') {
            setActiveTabIndex(selectedIndex);
        }
    }, [selectedIndex]);
    const elements = React.useMemo(() => (React.Children.map(children, child => (React.isValidElement(child) ? child : undefined)) || []).filter(isTabPage), [children]);
    const headers = React.useMemo(() => elements.map(child => child.props.header), [elements]);
    const onSelect = React.useCallback((selectedIndex) => {
        setActiveTabIndex(previousIndex => {
            if (typeof onTabChange === 'function') {
                onTabChange({
                    previousIndex,
                    selectedIndex,
                });
            }
            return controlled ? previousIndex : selectedIndex;
        });
    }, [onTabChange, controlled]);
    return {
        elements,
        headers,
        activeTabIndex,
        onSelect,
        isActive(index) {
            return activeTabIndex === index;
        },
    };
}
export function withTabControl(Component) {
    const TabControl = Object.assign(((_a) => {
        var { children, tabItemRenderer: Element } = _a, rest = __rest(_a, ["children", "tabItemRenderer"]);
        const { elements, headers, activeTabIndex, isActive, onSelect } = useTabControl(Object.assign({ children }, rest));
        return (React.createElement(Component, Object.assign({}, rest, { headers: headers, activeIndex: activeTabIndex, onSelect: onSelect }), elements.map((child, i) => (React.createElement(Element, { key: `item-${i}`, active: isActive(i) }, child)))));
    }), { inner: {
            get Component() { return Component; }
        } });
    return TabControl;
}
//# sourceMappingURL=data:application/json;base64,