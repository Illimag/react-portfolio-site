import * as React from 'react';
import { TabItemProps } from '../ContentSwitch/ContentSwitch.part';
export interface TabControlItem {
    /**
     * The element to be shown.
     */
    element: React.ReactNode;
    /**
     * Gets if the item is currently active.
     */
    active: boolean;
    /**
     * Callback to use when the item should be active.
     */
    onSelect(): void;
}
export interface TabChangeEvent {
    /**
     * The previously selected tab / index.
     */
    previousIndex: number;
    /**
     * The currently selected tab / index.
     */
    selectedIndex: number;
}
export interface TabOptions {
    /**
     * The default index - only set for use in automatic mode.
     */
    defaultIndex?: number;
    /**
     * The currently selected index - used in the controlled mode.
     */
    selectedIndex?: number;
    /**
     * Notification callback if the selected tab index should change.
     */
    onTabChange?(e: TabChangeEvent): void;
}
/**
 * @deprecated
 */
export interface TabControlProps extends TabOptions {
    /**
     * The children, usually passed as a collection of TabPage elements.
     */
    render(items: Array<TabControlItem>): React.ReactNode;
}
/**
 * @deprecated
 */
export interface TabControlState {
    /**
     * The currently selected index.
     */
    selectedIndex: number;
    /**
     * Determines if the tab component is controlled from the outside or not.
     */
    controlled: boolean;
}
/**
 * The functional component to handle tabs.
 * DEPRECATED: Please use `withTabControl` instead.
 * @deprecated
 */
export declare class TabControl extends React.PureComponent<TabControlProps, TabControlState> {
    private selects;
    constructor(props: TabControlProps);
    UNSAFE_componentWillReceiveProps(nextProps: TabControlProps): void;
    private changeIndex;
    render(): React.ReactNode;
}
export interface TabControlHolderProps {
    headers: Array<React.ReactChild>;
    activeIndex?: number;
    onSelect(index: number): void;
}
export interface WithTabControlProps {
    tabItemRenderer: React.ElementType<TabItemProps>;
}
export declare function withTabControl<T extends TabControlHolderProps>(Component: React.ComponentType<T>): React.FunctionComponent<TabOptions & WithTabControlProps & Pick<T, ({ [P in keyof T]: P; } & {
    onSelect: never;
    headers: never;
    activeIndex: never;
} & {
    [x: string]: never;
})[keyof T]>> & {
    inner: {
        readonly Component: React.ComponentType<T>;
    };
};
