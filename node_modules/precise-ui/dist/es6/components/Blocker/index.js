var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { transparentize } from '../../utils';
import { dark } from '../../colors';
const FixedContainer = styled.div `
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  position: fixed;
  z-index: 10000;
  overflow-x: hidden;
  overflow-y: auto;
`;
const FocusKeeper = styled.a `
  height: 0;
  width: 0;
  overflow: hidden;
`;
const StyledModalBackground = styled(FixedContainer) `
  overflow: hidden;
  z-index: 9999;
  background: ${transparentize(dark, 0.4)};
`;
/**
 * Defines a generic content blocking overlay element, e.g., for a modal dialog.
 */
export class Blocker extends React.Component {
    constructor() {
        super(...arguments);
        this.keepFirstFocus = () => {
            this.keepFocus('first');
        };
        this.keepLastFocus = () => {
            this.keepFocus('last');
        };
        this.setElement = (node) => {
            if (node && node !== this.modalNode) {
                const el = node.querySelector('*[tabindex]');
                (el || node).focus();
            }
            this.modalNode = node;
        };
        this.onContainerClick = (e) => {
            e.stopPropagation();
            if (!this.onScrollbarClick(e) &&
                (e.target === e.currentTarget || (e.target instanceof HTMLElement && e.target.parentElement === e.currentTarget))) {
                this.notifyClose(e);
            }
        };
        this.onScrollbarClick = (e) => {
            return e.target instanceof HTMLElement && e.target.offsetLeft + e.target.scrollWidth < e.clientX;
        };
        this.onKeyPress = (e) => {
            if (e.keyCode === 27 /* escape */) {
                this.notifyClose(e);
            }
        };
    }
    getFocusables() {
        if (this.modalNode) {
            return this.modalNode.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]');
        }
        return undefined;
    }
    componentDidMount() {
        this.changeBodyOverflow(true);
    }
    componentWillUnmount() {
        this.changeBodyOverflow(false);
    }
    changeBodyOverflow(open) {
        const body = document.querySelector('body');
        if (body) {
            if (open) {
                body.style.setProperty('overflow', 'hidden');
            }
            else {
                body.style.removeProperty('overflow');
            }
        }
    }
    keepFocus(position) {
        const focusables = this.getFocusables();
        if (focusables && focusables.length > 2) {
            const nextElement = (position === 'first' ? focusables[1] : focusables[focusables.length - 2]);
            nextElement.focus();
        }
    }
    notifyClose(e) {
        const { onClose } = this.props;
        if (typeof onClose === 'function') {
            onClose(e);
        }
    }
    render() {
        const _a = this.props, { children, onClose } = _a, props = __rest(_a, ["children", "onClose"]);
        return (React.createElement(React.Fragment, null,
            React.createElement(FixedContainer, Object.assign({ ref: this.setElement, onMouseDown: this.onContainerClick, onKeyDown: this.onKeyPress }, props),
                React.createElement(FocusKeeper, { href: "#", onFocus: this.keepLastFocus }),
                children,
                React.createElement(FocusKeeper, { href: "#", onFocus: this.keepFirstFocus })),
            React.createElement(StyledModalBackground, Object.assign({}, props))));
    }
}
Blocker.inner = {
    get FixedContainer() { return FixedContainer; },
    get FocusKeeper() { return FocusKeeper; },
    get StyledModalBackground() { return StyledModalBackground; }
};
//# sourceMappingURL=data:application/json;base64,