var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { Anchor } from '../Anchor';
import { StyledTileIcon } from '../../quarks';
import { getFontStyle } from '../../textStyles';
const Tile = styled(Anchor) `
  cursor: pointer;
  display: block;
  position: relative;
  width: ${themed(({ theme }) => theme.metroInfoTile.size)};
  height: ${themed(({ theme }) => theme.metroInfoTile.size)};
  margin: 0 12px 12px 0;
  overflow: hidden;
  user-select: none;
  background: ${themed(({ theme }) => theme.metroInfoTile.background)};
  color: ${themed(({ theme }) => theme.metroInfoTile.textColor)};

  &:hover {
    outline: rgba(29, 29, 29, 0.1) solid 4px;
  }
`;
const TileTitle = styled.span `
  ${getFontStyle({ size: 'small', weight: 'medium' })}

  position: absolute;
  left: 0;
  bottom: 0;
  right: 0;
  padding: 0 10px 10px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  z-index: 2;
`;
/**
 * Provides a simple tile component that gives a flat info appareance.
 */
export const MetroInfoTile = Object.assign(((_a) => {
    var { children, image, title } = _a, props = __rest(_a, ["children", "image", "title"]);
    return (React.createElement(Tile, Object.assign({}, props),
        image && React.createElement(StyledTileIcon, { src: image, width: "33%", height: "33%" }),
        title && React.createElement(TileTitle, null, title),
        children));
}), { inner: {
        get Tile() { return Tile; },
        get StyledTileIcon() { return StyledTileIcon; },
        get TileTitle() { return TileTitle; }
    } });
MetroInfoTile.displayName = 'MetroInfoTile';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXRyb0luZm9UaWxlL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxNQUFNLEVBQWUsTUFBTSxXQUFXLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7O1dBSWpCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDOzs7O2dCQUkzQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztXQUMxRCxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQzs7Ozs7Q0FLOUQsQ0FBQztBQUNGLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDMUIsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUM7Ozs7Ozs7Ozs7O0NBV3BELENBQUM7QUFXRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLENBQUMsQ0FBQyxFQUFvQyxFQUFFLEVBQUU7UUFBeEMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssT0FBWSxFQUFWLGtEQUFRO0lBQU8sT0FBQSxDQUFDLG9CQUFDLElBQUksb0JBQUssS0FBSztRQUNsRyxLQUFLLElBQUksb0JBQUMsY0FBYyxJQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDLEtBQUssRUFBQyxNQUFNLEVBQUMsS0FBSyxHQUFFO1FBQy9ELEtBQUssSUFBSSxvQkFBQyxTQUFTLFFBQUUsS0FBSyxDQUFhO1FBQ3ZDLFFBQVEsQ0FDSixDQUFDLENBQUE7Q0FBQSxDQUFtQyxFQUFFLEVBQUUsS0FBSyxFQUFFO1FBQ2hELElBQUksSUFBSSxLQUFLLE9BQU8sSUFBbUIsQ0FBQyxDQUFDLENBQUM7UUFDMUMsSUFBSSxjQUFjLEtBQUssT0FBTyxjQUF1QyxDQUFDLENBQUMsQ0FBQztRQUN4RSxJQUFJLFNBQVMsS0FBSyxPQUFPLFNBQTZCLENBQUMsQ0FBQyxDQUFDO0tBQzVELEVBQUUsQ0FBQyxDQUFDO0FBQ1QsYUFBYSxDQUFDLFdBQVcsR0FBRyxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7IHRoZW1lZCB9IGZyb20gJy4uLy4uL3V0aWxzL3N0eWxlZCc7XG5pbXBvcnQgeyBBbmNob3IsIEFuY2hvclByb3BzIH0gZnJvbSAnLi4vQW5jaG9yJztcbmltcG9ydCB7IFN0eWxlZFRpbGVJY29uIH0gZnJvbSAnLi4vLi4vcXVhcmtzJztcbmltcG9ydCB7IGdldEZvbnRTdHlsZSB9IGZyb20gJy4uLy4uL3RleHRTdHlsZXMnO1xuY29uc3QgVGlsZSA9IHN0eWxlZChBbmNob3IpIGBcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogJHt0aGVtZWQoKHsgdGhlbWUgfSkgPT4gdGhlbWUubWV0cm9JbmZvVGlsZS5zaXplKX07XG4gIGhlaWdodDogJHt0aGVtZWQoKHsgdGhlbWUgfSkgPT4gdGhlbWUubWV0cm9JbmZvVGlsZS5zaXplKX07XG4gIG1hcmdpbjogMCAxMnB4IDEycHggMDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGJhY2tncm91bmQ6ICR7dGhlbWVkKCh7IHRoZW1lIH0pID0+IHRoZW1lLm1ldHJvSW5mb1RpbGUuYmFja2dyb3VuZCl9O1xuICBjb2xvcjogJHt0aGVtZWQoKHsgdGhlbWUgfSkgPT4gdGhlbWUubWV0cm9JbmZvVGlsZS50ZXh0Q29sb3IpfTtcblxuICAmOmhvdmVyIHtcbiAgICBvdXRsaW5lOiByZ2JhKDI5LCAyOSwgMjksIDAuMSkgc29saWQgNHB4O1xuICB9XG5gO1xuY29uc3QgVGlsZVRpdGxlID0gc3R5bGVkLnNwYW4gYFxuICAke2dldEZvbnRTdHlsZSh7IHNpemU6ICdzbWFsbCcsIHdlaWdodDogJ21lZGl1bScgfSl9XG5cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICBwYWRkaW5nOiAwIDEwcHggMTBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHotaW5kZXg6IDI7XG5gO1xuZXhwb3J0IGludGVyZmFjZSBNZXRyb0luZm9UaWxlUHJvcHMgZXh0ZW5kcyBBbmNob3JQcm9wcyB7XG4gICAgLyoqXG4gICAgICogVGhlIHNvdXJjZSBVUkwgb2YgYW4gaWNvbiwgaWYgdXNlZC4gVGhlIGljb24gc2NhbGVkIHRvIG1heC4gMzMlIG9mIHRoZSB0aWxlLlxuICAgICAqL1xuICAgIGltYWdlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0aXRsZSBvZiB0aGUgdGlsZSwgaWYgYW55dGhpbmcuXG4gICAgICovXG4gICAgdGl0bGU/OiBzdHJpbmc7XG59XG4vKipcbiAqIFByb3ZpZGVzIGEgc2ltcGxlIHRpbGUgY29tcG9uZW50IHRoYXQgZ2l2ZXMgYSBmbGF0IGluZm8gYXBwYXJlYW5jZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1ldHJvSW5mb1RpbGUgPSBPYmplY3QuYXNzaWduKCgoKHsgY2hpbGRyZW4sIGltYWdlLCB0aXRsZSwgLi4ucHJvcHMgfSkgPT4gKDxUaWxlIHsuLi5wcm9wc30+XG4gICAge2ltYWdlICYmIDxTdHlsZWRUaWxlSWNvbiBzcmM9e2ltYWdlfSB3aWR0aD1cIjMzJVwiIGhlaWdodD1cIjMzJVwiLz59XG4gICAge3RpdGxlICYmIDxUaWxlVGl0bGU+e3RpdGxlfTwvVGlsZVRpdGxlPn1cbiAgICB7Y2hpbGRyZW59XG4gIDwvVGlsZT4pKSBhcyBSZWFjdC5TRkM8TWV0cm9JbmZvVGlsZVByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IFRpbGUoKSB7IHJldHVybiBUaWxlIGFzIHR5cGVvZiBUaWxlOyB9LFxuICAgICAgICBnZXQgU3R5bGVkVGlsZUljb24oKSB7IHJldHVybiBTdHlsZWRUaWxlSWNvbiBhcyB0eXBlb2YgU3R5bGVkVGlsZUljb247IH0sXG4gICAgICAgIGdldCBUaWxlVGl0bGUoKSB7IHJldHVybiBUaWxlVGl0bGUgYXMgdHlwZW9mIFRpbGVUaXRsZTsgfVxuICAgIH0gfSk7XG5NZXRyb0luZm9UaWxlLmRpc3BsYXlOYW1lID0gJ01ldHJvSW5mb1RpbGUnO1xuIl19