import * as React from 'react';
import { NotificationType } from '../Notifications/types';
import { StandardProps } from '../../common';
import { IconProps } from '../Icon';
export interface NotificationProps extends StandardProps {
    /**
     * Sets the type of the notification.
     */
    type?: NotificationType;
    /**
     * Sets the title of the notification message.
     */
    title?: string;
    /**
     * Optionally provides a custom way for rendering an action control.
     * If `closeable` is set to `true`, clicking on the action element will also trigger an `onClose` event.
     */
    actionRenderer?(): React.ReactChild;
    /**
     * Event fired when the close action triggered. Return `false` if don't
     * want notification to self-close after event was played.
     */
    onClose?(e: React.MouseEvent): boolean | void;
    /**
     * Sets if the notification can be closed or not.
     * @default true
     */
    closeable?: boolean;
}
export interface NotificationState {
    closed: boolean;
}
export interface StyledNotificationProps {
    closed: boolean;
    type: NotificationType;
}
interface LayoutProps {
    inline: boolean;
}
interface StyledIconProps extends IconProps {
    type: NotificationType;
}
/**
 * The Notification component for rendering an inline notification message.
 */
export declare class Notification extends React.Component<NotificationProps, NotificationState> {
    constructor(props: NotificationProps);
    static defaultProps: {
        closeable: boolean;
    };
    private onCloseHandler;
    render(): JSX.Element;
    static inner: {
        readonly StyledNotification: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, StyledNotificationProps, never>;
        readonly IconContainer: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, {}, never>;
        readonly StyledIcon: import("styled-components").StyledComponent<React.FunctionComponent<StyledIconProps> & {
            inner: {
                readonly Icon: React.FunctionComponent<IconProps> & {
                    inner: {
                        readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../../common").PreciseTheme, {}, never>;
                    };
                };
            };
        }, import("../../common").PreciseTheme, StyledIconProps, never>;
        readonly ContentContainer: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, LayoutProps, never>;
        readonly StyledTitle: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, {}, never>;
        readonly StyledContent: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, LayoutProps, never>;
        readonly ActionContainer: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, LayoutProps, never>;
        readonly ContentWrapper: import("styled-components").StyledComponent<"span", import("../../common").PreciseTheme, {}, never>;
        readonly CloseButton: import("styled-components").StyledComponent<React.FunctionComponent<import("../IconLink").IconLinkProps> & {
            inner: {
                readonly StyledAnchor: import("styled-components").StyledComponent<typeof import("..").Anchor, import("../../common").PreciseTheme, import("../IconLink").StyledAnchorProps, never>;
                readonly StyledIcon: import("styled-components").StyledComponent<React.FunctionComponent<IconProps> & {
                    inner: {
                        readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../../common").PreciseTheme, {}, never>;
                    };
                }, import("../../common").PreciseTheme, import("../IconLink").StyledIconProps & IconProps, never>;
                readonly AnchorText: import("styled-components").StyledComponent<"span", import("../../common").PreciseTheme, {}, never>;
            };
        }, import("../../common").PreciseTheme, {}, never>;
    };
}
export {};
