var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as colors from '../../colors';
import styled, { themed, css } from '../../utils/styled';
import { distance } from '../../distance';
import { IconLink } from '../IconLink';
import { Icon } from '../Icon';
import { getFontStyle } from '../../textStyles';
function getNotificationColor(type = 'none', theme) {
    switch (type) {
        case 'success':
            return theme.notificationColorSuccess;
        case 'info':
            return theme.notificationColorInfo;
        case 'warning':
            return theme.notificationColorWarning;
        case 'error':
            return theme.notificationColorError;
        case 'none':
        default:
            return theme.notificationColorNone;
    }
}
function getNotificationIcon(type = 'none') {
    switch (type) {
        case 'success':
            return 'CheckCircle';
        case 'info':
            return 'Info';
        case 'warning':
            return 'Warning';
        case 'error':
            return 'Error';
        case 'none':
        default:
            return 'Notifications';
    }
}
const StyledNotification = styled.div(themed(({ closed, type, theme }) => `
  position: relative;
  display: ${closed ? 'none' : 'flex'};
  background: #fff;
  border-style: solid;
  border-color: ${getNotificationColor(type, theme)};
  margin-bottom: ${distance.small};
  padding: ${theme.notificationPadding};
  box-shadow: ${theme.notificationBoxShadow};
  border-width: ${theme.notificationBorderWidth};
`));
const StyledTitle = styled.div(themed(({ theme: { notificationTitleFontSize, notificationTitleLineHeight } }) => `
  font-family: inherit;
  font-size: ${notificationTitleFontSize};
  line-height: ${notificationTitleLineHeight};
  color: #404040;
  margin-right: ${distance.small};
`));
const ContentWrapper = styled.span `
  display: contents;
`;
const StyledContent = styled.div(themed(({ inline, theme: { notificationTextFontSize, notificationTextLineHeight } }) => `
  display: ${inline ? 'inline' : 'block'};
  font-family: inherit;
  font-size: ${notificationTextFontSize};
  line-height: ${notificationTextLineHeight};
  color: #404040;
  margin-right: ${distance.small};
`));
const ActionContainer = styled('div') `
  display: ${props => (props.inline ? 'inline' : 'block')};
`;
const CloseButton = styled(IconLink) `
  ${getFontStyle({ size: 'medium' })}

  position: absolute;
  right: ${distance.small};
  top: ${distance.small};
  background-color: ${colors.transparent};
  color: ${colors.black};
  padding: 0;
  border: none;
  outline: none;
`;
const LayoutVertical = css `
  display: flex;
  flex-direction: column;
`;
const LayoutInline = css `
  display: block;
`;
const ContentContainer = styled.div `
  ${props => (props.inline ? LayoutInline : LayoutVertical)};
  margin-right: ${distance.medium};
  width: 100%;
`;
const IconContainer = styled.div(themed(({ theme: { notificationIconMarginRight } }) => css `
      margin-right: ${notificationIconMarginRight};
    `));
const StyledIconInt = Object.assign(((_a) => {
    var { type: _0 } = _a, props = __rest(_a, ["type"]);
    return React.createElement(Icon, Object.assign({}, props));
}), { inner: {
        get Icon() { return Icon; }
    } });
const StyledIcon = styled(StyledIconInt) `
  color: ${themed(props => getNotificationColor(props.type, props.theme))};
`;
/**
 * The Notification component for rendering an inline notification message.
 */
export class Notification extends React.Component {
    constructor(props) {
        super(props);
        this.onCloseHandler = (e) => {
            const { onClose, closeable } = this.props;
            if (typeof onClose === 'function' && closeable) {
                const selfClose = onClose(e);
                if (selfClose === false) {
                    return;
                }
            }
            this.setState({ closed: true });
        };
        this.state = {
            closed: false,
        };
    }
    render() {
        const _a = this.props, { type = 'none', children, title, actionRenderer, theme, style, closeable } = _a, other = __rest(_a, ["type", "children", "title", "actionRenderer", "theme", "style", "closeable"]);
        const { closed } = this.state;
        const isInline = !title;
        return (React.createElement(StyledNotification, Object.assign({ theme: theme, closed: closed, type: type }, other),
            React.createElement(IconContainer, { theme: theme },
                React.createElement(StyledIcon, { type: type, name: getNotificationIcon(type), size: "22px", theme: theme })),
            React.createElement(ContentContainer, { inline: isInline },
                title && React.createElement(StyledTitle, { theme: theme }, title),
                React.createElement(StyledContent, { inline: isInline, theme: theme }, children),
                React.createElement(ActionContainer, { inline: isInline },
                    React.createElement(ContentWrapper, { onClick: this.onCloseHandler }, actionRenderer && actionRenderer()))),
            closeable && React.createElement(CloseButton, { onClick: this.onCloseHandler, icon: "Close" })));
    }
}
Notification.defaultProps = {
    closeable: true,
};
Notification.inner = {
    get StyledNotification() { return StyledNotification; },
    get IconContainer() { return IconContainer; },
    get StyledIcon() { return StyledIcon; },
    get ContentContainer() { return ContentContainer; },
    get StyledTitle() { return StyledTitle; },
    get StyledContent() { return StyledContent; },
    get ActionContainer() { return ActionContainer; },
    get ContentWrapper() { return ContentWrapper; },
    get CloseButton() { return CloseButton; }
};
//# sourceMappingURL=data:application/json;base64,