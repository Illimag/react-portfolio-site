var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed, css } from '../../utils/styled';
import { Icon } from '../Icon';
import { iconNames } from './helpers';
import { ActionIconContainer } from './ActionIconContainer.part';
import { ActionLink } from '../ActionLink';
import { ProgressBar } from '../ProgressBar';
import { StatusIcon } from './StatusIcon.part';
import { distance } from '../../distance';
import { getPropLabel } from '../../utils/labels';
const ProgressBarWrapper = styled.div(themed(({ theme }) => css `
      width: 100%;
      max-width: 600px;
      margin: 0 auto;
      box-shadow: 0 2px 6px 0 rgba(75, 78, 82, 0.2);
      border: solid 1px ${theme.ui4};
      background-color: ${theme.text4};
    `));
const StyledProgressBar = styled(ProgressBar) `
  border-radius: 0;
  height: ${distance.xsmall};
`;
const BarInfo = styled.div `
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  min-height: 54px;
`;
const StatusBarGroup = styled.div `
  padding: ${distance.small};
`;
const StyledStatusBar = styled.div `
  padding: ${distance.small};
  display: flex;
  align-items: center;
`;
const ActionGroup = styled.div `
  padding: ${distance.medium};
  display: flex;
  align-items: center;
`;
const StatusLabel = styled.span `
  padding-left: ${distance.medium};
`;
function StatusBar(_a) {
    var { status, count, iconName, title } = _a, props = __rest(_a, ["status", "count", "iconName", "title"]);
    return (React.createElement(StyledStatusBar, null,
        React.createElement(StatusIcon, { name: iconName, type: status }),
        `${count} ${count > 1 ? getPropLabel(props, 'itemPluralLabel') : getPropLabel(props, 'itemSingularLabel')}`,
        React.createElement(StatusLabel, null, title)));
}
export const UploaderProgressBar = Object.assign(((_a) => {
    var { total, onClose, onShow, progressValue, inProgress, scanning, errors } = _a, props = __rest(_a, ["total", "onClose", "onShow", "progressValue", "inProgress", "scanning", "errors"]);
    const completed = progressValue >= 100;
    return (React.createElement(ProgressBarWrapper, null,
        React.createElement(BarInfo, null,
            React.createElement(StatusBarGroup, null, !completed || scanning ? (inProgress > 0 && (React.createElement(StatusBar, Object.assign({}, props, { count: total, iconName: iconNames.progress, title: completed && scanning
                    ? getPropLabel(props, 'uploadScanningLabel')
                    : getPropLabel(props, 'uploadProgressLabel'), status: completed && scanning ? 'scanning' : 'progress' })))) : (React.createElement(React.Fragment, null,
                inProgress > 0 && (React.createElement(StatusBar, Object.assign({}, props, { count: inProgress, iconName: iconNames.success, title: getPropLabel(props, 'uploadSuccessLabel'), status: "success" }))),
                errors > 0 && (React.createElement(StatusBar, Object.assign({}, props, { count: errors, iconName: iconNames.error, title: getPropLabel(props, 'uploadErrorLabel'), status: "error" })))))),
            React.createElement(ActionGroup, null,
                React.createElement(ActionLink, { onClick: onShow }, getPropLabel(props, 'viewDetailsLabel')),
                completed && !scanning && (React.createElement(ActionIconContainer, { onClick: onClose },
                    React.createElement(Icon, { name: "Close" }))))),
        !completed && React.createElement(StyledProgressBar, { value: progressValue, animate: true })));
}), { inner: {
        get ProgressBarWrapper() { return ProgressBarWrapper; },
        get BarInfo() { return BarInfo; },
        get StatusBarGroup() { return StatusBarGroup; },
        get StatusBar() { return StatusBar; },
        get ActionGroup() { return ActionGroup; },
        get ActionLink() { return ActionLink; },
        get ActionIconContainer() { return ActionIconContainer; },
        get Icon() { return Icon; },
        get StyledProgressBar() { return StyledProgressBar; }
    } });
UploaderProgressBar.displayName = 'UploaderProgressBar';
//# sourceMappingURL=data:application/json;base64,