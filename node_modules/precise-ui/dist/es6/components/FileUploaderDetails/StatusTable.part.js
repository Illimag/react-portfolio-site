var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed, css } from '../../utils/styled';
import { getPropLabel } from '../../utils/labels';
import { Icon } from '../Icon';
import { ProgressBar } from '../ProgressBar';
import { Table } from '../Table';
import { ActionIconContainer } from './ActionIconContainer.part';
import { StatusIcon } from './StatusIcon.part';
import { getStatus, iconNames } from './helpers';
const TextWrapBox = styled.div `
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
const StyledTable = styled(Table) `
  table-layout: fixed;
`;
const ProgressTableRow = styled.tr(themed(({ theme }) => css `
      border-bottom: 1px solid ${theme.ui4};
      padding: 0;
      &:hover {
        background: ${theme.ui3};
      }
    `));
const ProgressTableCell = styled.td `
  padding: 0 !important;
  &:hover {
    background: ${themed(({ theme }) => theme.ui3)};
  }
`;
const StyledProgressBar = styled(ProgressBar) `
  border-radius: 0;
  height: 2px;
`;
export const StyledTableRow = styled.tr(themed(({ hasProgressBar, theme }) => css `
      border-bottom: ${hasProgressBar ? 0 : 1}px solid ${theme.ui4};
      &:hover {
        background: ${theme.ui4};
      }
    `));
export const StatusTable = Object.assign(((_a) => {
    var { theme, files, onCancel, onDelete } = _a, props = __rest(_a, ["theme", "files", "onCancel", "onDelete"]);
    const columns = {
        name: {
            header: getPropLabel(props, 'tableHeaderFileLabel'),
        },
        status: {
            header: getPropLabel(props, 'tableHeaderStatusLabel'),
            width: '40%',
        },
        action: {
            header: '',
            width: '30px',
        },
    };
    const data = files.map(item => (Object.assign({}, item, { status: getStatus(item) })));
    function rowRenderer({ cells, data }) {
        const hasProgressBar = !(data.canceled || data.error || data.progress >= 100);
        return (React.createElement(React.Fragment, { key: data.fileId },
            React.createElement(StyledTableRow, { hasProgressBar: hasProgressBar, theme: theme }, cells),
            hasProgressBar && (React.createElement(ProgressTableRow, { theme: theme },
                React.createElement(ProgressTableCell, { colSpan: 3 },
                    React.createElement(StyledProgressBar, { value: data.progress, animate: true }))))));
    }
    function cellRenderer(e) {
        const value = e.value;
        const fileData = e.data;
        if (e.key.toLowerCase() === 'action' && fileData) {
            const status = getStatus(fileData);
            return status === 'progress' || status === 'scanning' ? (React.createElement(ActionIconContainer, { onClick: () => onCancel({ files: [fileData] }) },
                React.createElement(Icon, { name: "Close" }))) : status === 'success' ? (React.createElement(ActionIconContainer, { onClick: () => onDelete({ files: [fileData] }) },
                React.createElement(Icon, { name: "Delete" }))) : (false);
        }
        if (e.key.toLowerCase() === 'status' && e.data) {
            const status = getStatus(e.data);
            const error = status === 'error' && e.data.error;
            return (React.createElement(TextWrapBox, null,
                React.createElement(StatusIcon, { condensed: true, type: status, name: iconNames[value] }),
                getPropLabel(props, `${status}TableUploadLabel`, error)));
        }
        return React.createElement(TextWrapBox, null, value);
    }
    return (React.createElement(StyledTable, { data: data, theme: theme, columns: columns, rowRenderer: rowRenderer, cellRenderer: cellRenderer, mode: "table", condensed: true }));
}), { inner: {
        get StyledTableRow() { return StyledTableRow; },
        get ProgressTableRow() { return ProgressTableRow; },
        get ProgressTableCell() { return ProgressTableCell; },
        get StyledProgressBar() { return StyledProgressBar; },
        get ActionIconContainer() { return ActionIconContainer; },
        get Icon() { return Icon; },
        get TextWrapBox() { return TextWrapBox; },
        get StatusIcon() { return StatusIcon; },
        get StyledTable() { return StyledTable; }
    } });
//# sourceMappingURL=data:application/json;base64,