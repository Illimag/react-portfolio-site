var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { getPropLabel } from '../../utils/labels';
import { Modal, ModalBody, ModalFooter, ModalHeader } from '../Modal';
import { StatusTable } from './StatusTable.part';
import { IconLink } from '../IconLink';
const StyledModalBody = styled(ModalBody) `
  max-height: 480px;
  overflow: auto;
`;
const StyledModal = styled(Modal) `
  max-width: 600px;
`;
export class UploaderProgressDetails extends React.Component {
    constructor() {
        super(...arguments);
        this.cancelAll = () => {
            const { files, onCancel } = this.props;
            onCancel({
                files,
            });
        };
    }
    render() {
        const _a = this.props, { open, files, onCancel, onDelete, onHide, progressValue } = _a, props = __rest(_a, ["open", "files", "onCancel", "onDelete", "onHide", "progressValue"]);
        const completed = progressValue >= 100;
        return (React.createElement(StyledModal, Object.assign({ open: open, onClose: onHide }, props),
            React.createElement(ModalHeader, { title: getPropLabel(props, 'uploadModalTitleLabel') }),
            React.createElement(StyledModalBody, null,
                React.createElement(StatusTable, Object.assign({}, props, { onCancel: onCancel, onDelete: onDelete, files: files }))),
            !completed && (React.createElement(ModalFooter, null,
                React.createElement(IconLink, { onClick: this.cancelAll, icon: "Close" }, getPropLabel(props, 'cancelAllLabel'))))));
    }
}
UploaderProgressDetails.inner = {
    get StyledModal() { return StyledModal; },
    get ModalHeader() { return ModalHeader; },
    get StyledModalBody() { return StyledModalBody; },
    get StatusTable() { return StatusTable; },
    get ModalFooter() { return ModalFooter; },
    get IconLink() { return IconLink; }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXBsb2FkZXJQcm9ncmVzc0RldGFpbHMucGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0ZpbGVVcGxvYWRlckRldGFpbHMvVXBsb2FkZXJQcm9ncmVzc0RldGFpbHMucGFydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxNQUFNLE1BQU0sb0JBQW9CLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBK0IsTUFBTSxvQkFBb0IsQ0FBQztBQUMvRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXRFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQzs7O0NBR3pDLENBQUM7QUFDRixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7O0NBRWpDLENBQUM7QUEyQkYsTUFBTSxPQUFPLHVCQUF3QixTQUFRLEtBQUssQ0FBQyxTQUF1QztJQUExRjs7UUFDWSxjQUFTLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUN2QyxRQUFRLENBQUM7Z0JBQ0wsS0FBSzthQUNSLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztJQXdCTixDQUFDO0lBdkJHLE1BQU07UUFDRixNQUFNLGVBQWlGLEVBQWpGLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxhQUFhLE9BQXlCLEVBQXZCLHdGQUF1QixDQUFDO1FBQ3hGLE1BQU0sU0FBUyxHQUFHLGFBQWEsSUFBSSxHQUFHLENBQUM7UUFDdkMsT0FBTyxDQUFDLG9CQUFDLFdBQVcsa0JBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxJQUFNLEtBQUs7WUFDM0Qsb0JBQUMsV0FBVyxJQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsS0FBSyxFQUFFLHVCQUF1QixDQUFDLEdBQUc7WUFDbkUsb0JBQUMsZUFBZTtnQkFDZCxvQkFBQyxXQUFXLG9CQUFLLEtBQUssSUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssSUFBRyxDQUMvRDtZQUNqQixDQUFDLFNBQVMsSUFBSSxDQUFDLG9CQUFDLFdBQVc7Z0JBQ3hCLG9CQUFDLFFBQVEsSUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsT0FBTyxJQUM1QyxZQUFZLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQzdCLENBQ0MsQ0FBQyxDQUNMLENBQUMsQ0FBQztJQUNsQixDQUFDOztBQUNNLDZCQUFLLEdBQUc7SUFDWCxJQUFJLFdBQVcsS0FBSyxPQUFPLFdBQWlDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELElBQUksV0FBVyxLQUFLLE9BQU8sV0FBaUMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsSUFBSSxlQUFlLEtBQUssT0FBTyxlQUF5QyxDQUFDLENBQUMsQ0FBQztJQUMzRSxJQUFJLFdBQVcsS0FBSyxPQUFPLFdBQWlDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELElBQUksV0FBVyxLQUFLLE9BQU8sV0FBaUMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsSUFBSSxRQUFRLEtBQUssT0FBTyxRQUEyQixDQUFDLENBQUMsQ0FBQztDQUN6RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0UHJvcExhYmVsLCBVcGxvYWRQcm9ncmVzc0RldGFpbHNMYWJlbHMgfSBmcm9tICcuLi8uLi91dGlscy9sYWJlbHMnO1xuaW1wb3J0IHsgTW9kYWwsIE1vZGFsQm9keSwgTW9kYWxGb290ZXIsIE1vZGFsSGVhZGVyIH0gZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IHsgRmlsZVByb2dyZXNzLCBGaWxlVXBsb2FkZXJEZXRhaWxzRXZlbnQgfSBmcm9tICcuL0ZpbGVVcGxvYWRlckRldGFpbHMudHlwZXMucGFydCc7XG5pbXBvcnQgeyBTdGF0dXNUYWJsZSB9IGZyb20gJy4vU3RhdHVzVGFibGUucGFydCc7XG5pbXBvcnQgeyBJY29uTGluayB9IGZyb20gJy4uL0ljb25MaW5rJztcbmNvbnN0IFN0eWxlZE1vZGFsQm9keSA9IHN0eWxlZChNb2RhbEJvZHkpIGBcbiAgbWF4LWhlaWdodDogNDgwcHg7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcbmNvbnN0IFN0eWxlZE1vZGFsID0gc3R5bGVkKE1vZGFsKSBgXG4gIG1heC13aWR0aDogNjAwcHg7XG5gO1xuZXhwb3J0IGludGVyZmFjZSBVcGxvYWRlclByb2dyZXNzRGV0YWlsc1Byb3BzIGV4dGVuZHMgVXBsb2FkUHJvZ3Jlc3NEZXRhaWxzTGFiZWxzIHtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBkZXRhaWxzIGFyZSBzaG93biBvciBub3QuXG4gICAgICovXG4gICAgb3Blbj86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVXBsb2FkaW5nIGZpbGVzIHdpdGggcHJvZ3Jlc3MgdmFsdWUuXG4gICAgICovXG4gICAgZmlsZXM6IEFycmF5PEZpbGVQcm9ncmVzcz47XG4gICAgLyoqXG4gICAgICogRXZlbnQgZW1pdHRlZCB3aGVuIHVwbG9hZCBjYW5jZWxlZCBmb3IgaW5kaXZpZHVhbCBvciBhbGwgZmlsZXMuXG4gICAgICovXG4gICAgb25DYW5jZWwoZTogRmlsZVVwbG9hZGVyRGV0YWlsc0V2ZW50PEZpbGVQcm9ncmVzcz4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGVtaXR0ZWQgd2hlbiB1cGxvYWQgZGVsZXRlZCBmb3IgaW5kaXZpZHVhbCBvciBhbGwgZmlsZXMuXG4gICAgICovXG4gICAgb25EZWxldGUoZTogRmlsZVVwbG9hZGVyRGV0YWlsc0V2ZW50PEZpbGVQcm9ncmVzcz4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBkZXRhaWxzIHNob3VsZCBiZSBoaWRkZW4uXG4gICAgICovXG4gICAgb25IaWRlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIHByb2dyZXNzIGZyb20gMCB0byAxMDAuXG4gICAgICovXG4gICAgcHJvZ3Jlc3NWYWx1ZTogbnVtYmVyO1xufVxuZXhwb3J0IGNsYXNzIFVwbG9hZGVyUHJvZ3Jlc3NEZXRhaWxzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFVwbG9hZGVyUHJvZ3Jlc3NEZXRhaWxzUHJvcHM+IHtcbiAgICBwcml2YXRlIGNhbmNlbEFsbCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBmaWxlcywgb25DYW5jZWwgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIG9uQ2FuY2VsKHtcbiAgICAgICAgICAgIGZpbGVzLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBvcGVuLCBmaWxlcywgb25DYW5jZWwsIG9uRGVsZXRlLCBvbkhpZGUsIHByb2dyZXNzVmFsdWUsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCBjb21wbGV0ZWQgPSBwcm9ncmVzc1ZhbHVlID49IDEwMDtcbiAgICAgICAgcmV0dXJuICg8U3R5bGVkTW9kYWwgb3Blbj17b3Blbn0gb25DbG9zZT17b25IaWRlfSB7Li4ucHJvcHN9PlxuICAgICAgICA8TW9kYWxIZWFkZXIgdGl0bGU9e2dldFByb3BMYWJlbChwcm9wcywgJ3VwbG9hZE1vZGFsVGl0bGVMYWJlbCcpfS8+XG4gICAgICAgIDxTdHlsZWRNb2RhbEJvZHk+XG4gICAgICAgICAgPFN0YXR1c1RhYmxlIHsuLi5wcm9wc30gb25DYW5jZWw9e29uQ2FuY2VsfSBvbkRlbGV0ZT17b25EZWxldGV9IGZpbGVzPXtmaWxlc30vPlxuICAgICAgICA8L1N0eWxlZE1vZGFsQm9keT5cbiAgICAgICAgeyFjb21wbGV0ZWQgJiYgKDxNb2RhbEZvb3Rlcj5cbiAgICAgICAgICAgIDxJY29uTGluayBvbkNsaWNrPXt0aGlzLmNhbmNlbEFsbH0gaWNvbj1cIkNsb3NlXCI+XG4gICAgICAgICAgICAgIHtnZXRQcm9wTGFiZWwocHJvcHMsICdjYW5jZWxBbGxMYWJlbCcpfVxuICAgICAgICAgICAgPC9JY29uTGluaz5cbiAgICAgICAgICA8L01vZGFsRm9vdGVyPil9XG4gICAgICA8L1N0eWxlZE1vZGFsPik7XG4gICAgfVxuICAgIHN0YXRpYyBpbm5lciA9IHtcbiAgICAgICAgZ2V0IFN0eWxlZE1vZGFsKCkgeyByZXR1cm4gU3R5bGVkTW9kYWwgYXMgdHlwZW9mIFN0eWxlZE1vZGFsOyB9LFxuICAgICAgICBnZXQgTW9kYWxIZWFkZXIoKSB7IHJldHVybiBNb2RhbEhlYWRlciBhcyB0eXBlb2YgTW9kYWxIZWFkZXI7IH0sXG4gICAgICAgIGdldCBTdHlsZWRNb2RhbEJvZHkoKSB7IHJldHVybiBTdHlsZWRNb2RhbEJvZHkgYXMgdHlwZW9mIFN0eWxlZE1vZGFsQm9keTsgfSxcbiAgICAgICAgZ2V0IFN0YXR1c1RhYmxlKCkgeyByZXR1cm4gU3RhdHVzVGFibGUgYXMgdHlwZW9mIFN0YXR1c1RhYmxlOyB9LFxuICAgICAgICBnZXQgTW9kYWxGb290ZXIoKSB7IHJldHVybiBNb2RhbEZvb3RlciBhcyB0eXBlb2YgTW9kYWxGb290ZXI7IH0sXG4gICAgICAgIGdldCBJY29uTGluaygpIHsgcmV0dXJuIEljb25MaW5rIGFzIHR5cGVvZiBJY29uTGluazsgfVxuICAgIH07XG59XG4iXX0=