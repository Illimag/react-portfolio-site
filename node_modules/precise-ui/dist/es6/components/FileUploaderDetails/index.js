var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { eventManagers } from '../../utils/eventManager';
import { FileUploadActions, } from './FileUploaderDetails.types.part';
import { UploaderProgressBar } from './UploaderProgressBar.part';
import { UploaderProgressDetails } from './UploaderProgressDetails.part';
import { mergeData } from './helpers';
import { distance } from '../../distance';
export { FileUploadActions };
const initialState = {
    files: [],
    showDetails: false,
    showUploader: false,
};
const StyledUploaderHost = styled.div `
  z-index: 10001;
  width: 100%;
  position: fixed;
  left: 0;
  bottom: ${distance.large};
  height: 0px;
  overflow: visible;
  display: flex;
  align-items: flex-end;
`;
const StyledDetailsHost = styled.div `
  // We override the 'z-index' of the styled component 'FixedContainer' of 'Blocker' (which is called by 'Modal').
  // This fixes the problem of showing 'UploadProgressDetails' behind modal in IE.
  & > div:first-child {
    z-index: 10001;
  }
`;
/**
 * The host element for global async file upload process. Use as a singleton only.
 */
export class FileUploaderDetails extends React.Component {
    constructor(props) {
        super(props);
        this.onStart = (e) => {
            this.props.onUpload(e);
            this.setState({
                showUploader: true,
            });
        };
        this.onChange = ({ files }) => {
            const { files: currentFiles } = this.state;
            this.setState({
                files: mergeData(files, currentFiles),
            });
        };
        this.onCancel = ({ files }) => {
            const { onCancel } = this.props;
            if (typeof onCancel === 'function') {
                onCancel({
                    files: files.filter(item => item.progress < 100 && !item.canceled && !item.error),
                });
            }
        };
        this.onDelete = ({ files }) => {
            const { onDelete } = this.props;
            if (typeof onDelete === 'function') {
                onDelete({
                    files: files.filter(item => item.progress >= 100 && !item.canceled && !item.error),
                });
            }
        };
        this.onClear = (uploaderId) => {
            const { files: currentFiles } = this.state;
            const newFiles = currentFiles.filter(item => item.uploaderId !== uploaderId);
            const oldFiles = currentFiles.filter(item => item.uploaderId === uploaderId);
            this.setState({
                files: newFiles,
            }, () => {
                this.onCancel({
                    files: oldFiles,
                });
            });
        };
        this.closeUploader = () => {
            const { onClose } = this.props;
            if (typeof onClose === 'function') {
                onClose();
            }
            this.setState(Object.assign({}, initialState));
        };
        this.hideDetails = () => {
            this.setState({
                showDetails: false,
            });
        };
        this.showDetails = () => {
            this.setState({
                showDetails: true,
            });
        };
        const { events } = props;
        this.eventManager = events || eventManagers[0];
        this.state = Object.assign({}, initialState);
    }
    componentDidMount() {
        const em = this.eventManager;
        em.on(FileUploadActions.startUpload, this.onStart);
        em.on(FileUploadActions.cancelUpload, this.onCancel);
        em.on(FileUploadActions.uploadProgress, this.onChange);
        em.on(FileUploadActions.uploadFailure, this.onChange);
        em.on(FileUploadActions.showUploads, this.showDetails);
        em.on(FileUploadActions.clearUploads, this.onClear);
        em.on(FileUploadActions.deleteUploads, this.onDelete);
        eventManagers.push(em);
    }
    componentWillUnmount() {
        const em = this.eventManager;
        em.off(FileUploadActions.startUpload, this.onStart);
        em.off(FileUploadActions.cancelUpload, this.onCancel);
        em.off(FileUploadActions.uploadProgress, this.onChange);
        em.off(FileUploadActions.uploadFailure, this.onChange);
        em.off(FileUploadActions.showUploads, this.showDetails);
        em.off(FileUploadActions.clearUploads, this.onClear);
        em.off(FileUploadActions.deleteUploads, this.onDelete);
        eventManagers.splice(eventManagers.lastIndexOf(em), 1);
    }
    render() {
        const _a = this.props, { events, onCancel, onClose, onDelete, onUpload } = _a, props = __rest(_a, ["events", "onCancel", "onClose", "onDelete", "onUpload"]);
        const { showDetails, showUploader, files } = this.state;
        const inprogressFiles = files.filter(item => !(item.canceled || item.error)).map(item => item.progress);
        const errorFiles = files.filter(item => item.canceled || item.error);
        const totalProgress = inprogressFiles.length > 0 ? inprogressFiles.reduce((acc, curr) => acc + curr, 0) / inprogressFiles.length : 100;
        const scanning = files.filter(item => item.scanning && !item.canceled).length > 0;
        const show = showUploader && files.length > 0;
        return (show && (React.createElement(React.Fragment, null,
            React.createElement(StyledDetailsHost, null,
                React.createElement(UploaderProgressDetails, Object.assign({}, props, { open: showDetails, files: files, onCancel: this.onCancel, onDelete: this.onDelete, onHide: this.hideDetails, progressValue: totalProgress }))),
            !showDetails && (React.createElement(StyledUploaderHost, null,
                React.createElement(UploaderProgressBar, Object.assign({}, props, { scanning: scanning, progressValue: totalProgress, inProgress: inprogressFiles.length, errors: errorFiles.length, total: files.length, onShow: this.showDetails, onClose: this.closeUploader })))))));
    }
}
FileUploaderDetails.inner = {
    get StyledDetailsHost() { return StyledDetailsHost; },
    get UploaderProgressDetails() { return UploaderProgressDetails; },
    get StyledUploaderHost() { return StyledUploaderHost; },
    get UploaderProgressBar() { return UploaderProgressBar; }
};
//# sourceMappingURL=data:application/json;base64,