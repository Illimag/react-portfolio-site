var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as colors from '../../colors';
import onClickOutside from 'react-onclickoutside';
import styled, { themed } from '../../utils/styled';
import { Icon } from '../Icon';
import { InteractiveList } from '../InteractiveList';
import { distance } from '../../distance';
import { Flyout } from '../Flyout';
import { getFontStyle } from '../../textStyles';
const RootContainer = styled.div `
  position: relative;
  margin-right: ${distance.xlarge};
  &:last-child {
    margin-right: 0;
  }
`;
const StyledInteractiveList = styled(InteractiveList) `
  position: static;
  white-space: nowrap;

  ul {
    background: ${themed(props => props.theme.ui1)};
  }
`;
const DropdownButton = styled.div `
  color: ${props => (props.open ? colors.cyan : colors.grey2)};
  ${({ menuSize }) => getFontStyle({ size: menuSize })};
  cursor: pointer;
  display: flex;
  align-items: center;
  span {
    margin-left: ${distance.small};
  }
  &:hover {
    color: ${colors.cyan};
  }
`;
class DropdownMenuInt extends React.PureComponent {
    constructor(props) {
        super(props);
        this.handleClickOutside = () => {
            this.container && this.state.open && this.toggleOpen();
        };
        this.setContainer = (el) => {
            this.container = el;
        };
        this.handleKeyDown = (e) => {
            switch (e.keyCode) {
                case 32 /* space */:
                case 13 /* enter */:
                case 40 /* down */:
                    this.toggleOpen();
                    break;
            }
        };
        this.handleButtonMouseDown = (e) => {
            this.toggleOpen();
            e.preventDefault();
        };
        this.handleBlur = () => {
            this.toggleOpen(false);
        };
        this.handleChange = (e) => {
            const { onChange, keepOpen } = this.props;
            if (typeof onChange === 'function') {
                onChange({
                    indices: e.value,
                });
            }
            if (!keepOpen) {
                this.toggleOpen(false);
            }
        };
        this.state = {
            open: false,
        };
    }
    toggleOpen(force) {
        const { open } = this.state;
        const { items, onToggle } = this.props;
        const newState = force ? force : !open;
        this.setState({
            open: newState && !!items.length,
        }, () => {
            if (typeof onToggle === 'function') {
                onToggle({
                    open: this.state.open,
                });
            }
        });
    }
    render() {
        const _a = this.props, { items = [], text = '', icon, onChange: _0, menuSize = 'normal', iconSize = 1 } = _a, rest = __rest(_a, ["items", "text", "icon", "onChange", "menuSize", "iconSize"]);
        const { open } = this.state;
        return (React.createElement(RootContainer, { ref: this.setContainer },
            React.createElement(Flyout, { open: open, noGutter: true, content: React.createElement(StyledInteractiveList, { borderless: true, open: open, data: items, autoFocus: true, onBlur: this.handleBlur, onChange: this.handleChange }) },
                React.createElement(DropdownButton, Object.assign({ tabIndex: 0, onKeyDown: this.handleKeyDown, onMouseDown: this.handleButtonMouseDown, open: open, menuSize: menuSize }, rest),
                    icon && React.createElement(Icon, { name: icon, size: iconSize }),
                    React.createElement("span", null, text)))));
    }
}
DropdownMenuInt.inner = {
    get RootContainer() { return RootContainer; },
    get Flyout() { return Flyout; },
    get DropdownButton() { return DropdownButton; },
    get Icon() { return Icon; }
};
/**
 * A dropdown menu for displaying menu items.
 */
export const DropdownMenu = onClickOutside(DropdownMenuInt);
DropdownMenu.displayName = 'DropdownMenu';
//# sourceMappingURL=data:application/json;base64,