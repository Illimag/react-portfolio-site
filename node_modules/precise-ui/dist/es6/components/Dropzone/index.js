var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed, css } from '../../utils/styled';
import { showInputInfo } from '../../utils/input';
import { StyledFileImagePreview, StyledFileItem, StyledFileList } from '../../quarks';
import { withFormContext } from '../../hoc/withFormContext';
import { Icon } from '../Icon';
import { IconLink } from '../IconLink';
import { Spinner } from '../Spinner';
import { distance } from '../../distance';
function getFiles(target, files = []) {
    target.push(...files);
    return target;
}
const StyledDropzone = styled.div(themed(({ disabled, active, theme }) => css `
      width: 100%;
      height: 100%;
      min-height: 150px;
      margin: 0 auto;
      padding: ${distance.medium};
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
      color: ${disabled ? theme.textDisabled : theme.text3};
      background-repeat: no-repeat;
      background-position: center;
      background-size: contain;
      background-color: ${disabled ? theme.ui3 : active ? theme.ui2 : theme.ui1};
      border: 1px ${disabled ? `solid ${theme.ui1}` : `dashed ${active ? theme.ui0 : theme.ui4}`};
      cursor: ${disabled ? 'no-drop' : 'pointer'};
      box-sizing: border-box;
    `));
const DropzoneLabel = styled.div `
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  flex: 1;
  pointer-events: none;
`;
const StyledLabel = styled.span `
  display: table-cell;
  vertical-align: middle;
  text-align: center;
`;
const StyledAction = styled.div `
  margin-top: ${distance.small};
  visibility: ${props => (props.active || props.disabled ? 'hidden' : 'visible')};
`;
const FileInput = styled.input `
  display: none;
`;
const Remove = styled.div `
  cursor: pointer;
  line-height: 1;
`;
class DropzoneInt extends React.Component {
    constructor(props) {
        super(props);
        this.addFileEntries = (files) => {
            const { multiple, form, name = '' } = this.props;
            if (!this.state.controlled) {
                if (form) {
                    form.change({
                        name,
                        value: multiple ? [...this.state.value, ...files] : files,
                    });
                }
                else {
                    this.setState(prevState => ({
                        value: multiple ? [...prevState.value, ...files] : files,
                        previews: [],
                    }), () => this.notifyChanges(this.state.value));
                }
            }
            else {
                this.notifyChanges(multiple ? [...this.state.value, ...files] : files);
            }
        };
        this.onDragOver = (e) => {
            e.preventDefault();
        };
        this.onDragEnter = () => {
            this.setState({ over: true });
        };
        this.onDragLeave = () => {
            this.setState({ over: false });
        };
        this.onOpenAction = () => {
            const { onOpen } = this.props;
            let open = true;
            if (typeof onOpen === 'function') {
                onOpen({
                    preventDefault() {
                        open = false;
                    },
                });
            }
            return open;
        };
        this.onDrop = (ev) => {
            ev.preventDefault();
            this.setState({ over: false });
            const acceptFiles = this.onOpenAction();
            if (!this.props.disabled && acceptFiles) {
                const droppedFiles = getFiles([], ev.dataTransfer.files);
                const files = this.props.multiple ? droppedFiles : [droppedFiles[0]];
                this.addFileEntries(files);
            }
        };
        this.onClick = (ev) => {
            const files = getFiles([], ev.target.files);
            if (files) {
                this.addFileEntries(files);
            }
            ev.preventDefault();
        };
        this.setInputRef = (el) => {
            this.fileInput = el;
        };
        this.openFilePicker = () => {
            const open = this.onOpenAction();
            if (open && this.fileInput) {
                this.fileInput.click();
            }
        };
        const value = props.value || props.defaultValue || [];
        this.state = {
            over: false,
            controlled: props.value !== undefined,
            value,
            previews: [],
            error: props.error,
        };
    }
    componentDidMount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.subscribe(this);
        }
    }
    componentWillUnmount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    }
    UNSAFE_componentWillReceiveProps(e) {
        const { controlled, value } = this.state;
        if (controlled && e.value && value !== e.value) {
            this.setState(() => ({
                value: e.value || [],
                previews: [],
                error: e.error,
            }));
        }
    }
    removeFileEntry(f) {
        const { form, name = '' } = this.props;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name,
                    value: this.state.value.filter(file => f !== file),
                });
            }
            else {
                this.setState(prevState => ({
                    value: prevState.value.filter(file => f !== file),
                    previews: prevState.previews.filter(preview => preview.file !== f),
                }), () => this.notifyChanges(this.state.value));
            }
        }
        else {
            const files = this.state.value.filter(file => f !== file);
            this.notifyChanges(files);
        }
    }
    notifyChanges(files) {
        const { onChange } = this.props;
        if (typeof onChange === 'function') {
            onChange({
                value: files,
            });
        }
    }
    renderItem(f) {
        return (React.createElement(StyledFileItem, { key: f.name, name: f.name },
            React.createElement(Remove, { onClick: () => this.removeFileEntry(f) },
                React.createElement(Icon, { name: "RemoveCircle", size: 1 }))));
    }
    renderPreview(f) {
        const preview = this.state.previews.filter(preview => preview.file === f)[0];
        if (f.size > 1000000 || !f.type.match(/image/)) {
            return this.renderItem(f);
        }
        if (preview) {
            return (React.createElement(StyledFileImagePreview, { key: f.name, src: preview.data },
                React.createElement(Remove, { onClick: () => this.removeFileEntry(f) },
                    React.createElement(Icon, { name: "RemoveCircle", size: 1 }))));
        }
        const reader = new FileReader();
        reader.onload = (file => () => {
            const result = reader.result;
            typeof result === 'string' &&
                this.setState(prevState => ({
                    previews: [
                        ...prevState.previews,
                        {
                            file,
                            data: result,
                        },
                    ],
                }));
        })(f);
        reader.readAsDataURL(f);
        return (React.createElement(StyledFileImagePreview, { key: f.name },
            React.createElement(Spinner, { size: "small" })));
    }
    render() {
        const { value, over, error } = this.state;
        const _a = this.props, { message = 'Drop files here to upload', multiple, info, icon = 'FileDownload', theme, value: _0, defaultValue: _1, disabled, onChange: _2, preview: _3, onInput: _5, children } = _a, props = __rest(_a, ["message", "multiple", "info", "icon", "theme", "value", "defaultValue", "disabled", "onChange", "preview", "onInput", "children"]);
        return (React.createElement("div", Object.assign({}, props),
            React.createElement(StyledDropzone, { active: over, disabled: disabled, onDrop: this.onDrop, onDragOver: this.onDragOver, onDragLeave: this.onDragLeave, onDragEnter: this.onDragEnter, onClick: this.openFilePicker },
                React.createElement(DropzoneLabel, null,
                    React.createElement(Icon, { name: icon, size: 2 }),
                    React.createElement(StyledLabel, null,
                        message,
                        React.createElement(FileInput, { disabled: disabled, ref: this.setInputRef, type: "file", multiple: multiple, value: "", onChange: this.onClick }),
                        React.createElement(StyledAction, { active: over, disabled: disabled },
                            React.createElement(IconLink, { icon: "Add" }, children))))),
            value && value.length > 0 && (React.createElement(StyledFileList, null, value.map(file => (this.props.preview ? this.renderPreview(file) : this.renderItem(file))))),
            showInputInfo(error, info)));
    }
}
DropzoneInt.inner = {
    get StyledFileItem() { return StyledFileItem; },
    get Remove() { return Remove; },
    get Icon() { return Icon; },
    get StyledFileImagePreview() { return StyledFileImagePreview; },
    get Spinner() { return Spinner; },
    get StyledDropzone() { return StyledDropzone; },
    get DropzoneLabel() { return DropzoneLabel; },
    get StyledLabel() { return StyledLabel; },
    get FileInput() { return FileInput; },
    get StyledAction() { return StyledAction; },
    get IconLink() { return IconLink; },
    get StyledFileList() { return StyledFileList; }
};
export const Dropzone = withFormContext(DropzoneInt);
Dropzone.displayName = 'Dropzone';
//# sourceMappingURL=data:application/json;base64,