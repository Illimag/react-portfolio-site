var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed } from '../../utils/styled';
import { Anchor } from '../Anchor';
import { dark } from '../../colors';
const StyledLink = styled(Anchor) `
  text-decoration: none;
  color: ${themed(props => props.theme.ui0)};
  display: inline-block;
  font-size: inherit;
  white-space: nowrap;

  &:hover {
    text-decoration: underline;
  }
`;
const StyledText = styled.span `
  display: inline-block;
  color: ${dark};
`;
/**
 * Represents a single Breadcrumb which is a special version of a link.
 */
export const Breadcrumb = Object.assign((props => {
    const { title, to, href, onClick } = props, rest = __rest(props, ["title", "to", "href", "onClick"]);
    if (!to && !href && !onClick) {
        return React.createElement(StyledText, Object.assign({}, rest), title);
    }
    return React.createElement(StyledLink, Object.assign({}, props), title);
}), { inner: {
        get StyledText() { return StyledText; },
        get StyledLink() { return StyledLink; }
    } });
Breadcrumb.displayName = 'Breadcrumb';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9CcmVhZGNydW1iL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxNQUFNLEVBQWUsTUFBTSxXQUFXLENBQUM7QUFDaEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQVdwQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7O1dBRXZCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOzs7Ozs7OztDQVExQyxDQUFDO0FBQ0YsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQzs7V0FFcEIsSUFBSTtDQUNkLENBQUM7QUFDRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLENBQUMsS0FBSyxDQUFDLEVBQUU7SUFDOUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sS0FBYyxLQUFLLEVBQWpCLHdEQUFpQixDQUFDO0lBQ3BELElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDMUIsT0FBTyxvQkFBQyxVQUFVLG9CQUFLLElBQUksR0FBRyxLQUFLLENBQWMsQ0FBQztLQUNyRDtJQUNELE9BQU8sb0JBQUMsVUFBVSxvQkFBSyxLQUFLLEdBQUcsS0FBSyxDQUFjLENBQUM7QUFDdkQsQ0FBQyxDQUFnQyxFQUFFLEVBQUUsS0FBSyxFQUFFO1FBQ3BDLElBQUksVUFBVSxLQUFLLE9BQU8sVUFBK0IsQ0FBQyxDQUFDLENBQUM7UUFDNUQsSUFBSSxVQUFVLEtBQUssT0FBTyxVQUErQixDQUFDLENBQUMsQ0FBQztLQUMvRCxFQUFFLENBQUMsQ0FBQztBQUNULFVBQVUsQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwgeyB0aGVtZWQgfSBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgQW5jaG9yLCBBbmNob3JQcm9wcyB9IGZyb20gJy4uL0FuY2hvcic7XG5pbXBvcnQgeyBkYXJrIH0gZnJvbSAnLi4vLi4vY29sb3JzJztcbmV4cG9ydCBpbnRlcmZhY2UgQnJlYWRjcnVtYlByb3BzIGV4dGVuZHMgQW5jaG9yUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFRoZSByZXF1aXJlZCB0aXRsZSBvZiB0aGUgYnJlYWRjcnVtYiBsaW5rLlxuICAgICAqL1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNoaWxkcmVuPzogdm9pZDtcbn1cbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQoQW5jaG9yKSBgXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgY29sb3I6ICR7dGhlbWVkKHByb3BzID0+IHByb3BzLnRoZW1lLnVpMCl9O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcblxuICAmOmhvdmVyIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgfVxuYDtcbmNvbnN0IFN0eWxlZFRleHQgPSBzdHlsZWQuc3BhbiBgXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgY29sb3I6ICR7ZGFya307XG5gO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgc2luZ2xlIEJyZWFkY3J1bWIgd2hpY2ggaXMgYSBzcGVjaWFsIHZlcnNpb24gb2YgYSBsaW5rLlxuICovXG5leHBvcnQgY29uc3QgQnJlYWRjcnVtYiA9IE9iamVjdC5hc3NpZ24oKChwcm9wcyA9PiB7XG4gICAgY29uc3QgeyB0aXRsZSwgdG8sIGhyZWYsIG9uQ2xpY2ssIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgIGlmICghdG8gJiYgIWhyZWYgJiYgIW9uQ2xpY2spIHtcbiAgICAgICAgcmV0dXJuIDxTdHlsZWRUZXh0IHsuLi5yZXN0fT57dGl0bGV9PC9TdHlsZWRUZXh0PjtcbiAgICB9XG4gICAgcmV0dXJuIDxTdHlsZWRMaW5rIHsuLi5wcm9wc30+e3RpdGxlfTwvU3R5bGVkTGluaz47XG59KSBhcyBSZWFjdC5TRkM8QnJlYWRjcnVtYlByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IFN0eWxlZFRleHQoKSB7IHJldHVybiBTdHlsZWRUZXh0IGFzIHR5cGVvZiBTdHlsZWRUZXh0OyB9LFxuICAgICAgICBnZXQgU3R5bGVkTGluaygpIHsgcmV0dXJuIFN0eWxlZExpbmsgYXMgdHlwZW9mIFN0eWxlZExpbms7IH1cbiAgICB9IH0pO1xuQnJlYWRjcnVtYi5kaXNwbGF5TmFtZSA9ICdCcmVhZGNydW1iJztcbiJdfQ==