import * as React from 'react';
import { Anchor } from '../Anchor';
export interface NavBarItem {
    content: React.ReactNode;
    display?: 'mobile' | 'pin' | 'lead';
    id: string;
}
export interface NavBarToggleEvent {
    shouldOpen: boolean;
}
export interface NavBarProps {
    /**
     * Sets component display mode. By default automatic mode is used,
     * which depends on the component's width.
     */
    mode?: 'hamburger' | 'full';
    /**
     * The optional logo to define. Either a string or a React element.
     * A string is interpreted as an image URL, which will displayed in
     * an 57x57 large image inside a link component.
     */
    logo?: React.ReactChild;
    /**
     * Determines if the menu is opened or closed. If the value is set the
     * control goes into controlled mode. Omitting this value will trigger
     * the managed mode.
     */
    open?: boolean;
    /**
     * Event emitted once the hamburger menu should be toggled.
     */
    onToggle?(e: NavBarToggleEvent): void;
    /**
     * Option to hide the standard menu and only display the logo, if available.
     * @default false
     */
    hidden?: boolean;
    /**
     * The menu items to show.
     */
    items: Array<NavBarItem>;
    /**
     * Optional additional content to place inside the nav bar container.
     */
    children?: React.ReactNode;
}
export interface NavBarState {
    controlledMode: boolean;
    controlledOpen: boolean;
    open: boolean;
    mode: 'hamburger' | 'full' | undefined;
}
interface DesktopHeaderProps {
    leads: Array<NavBarItem>;
    pins: Array<NavBarItem>;
}
interface MobileHeaderProps {
    entries: Array<NavBarItem>;
    onToggle(): void;
    open: boolean;
}
/**
 * A simple navigation bar that is responsive by nature.
 */
export declare class NavBar extends React.Component<NavBarProps, NavBarState> {
    constructor(props: NavBarProps);
    UNSAFE_componentWillReceiveProps(nextProps: NavBarProps): void;
    private toggle;
    render(): JSX.Element;
    static inner: {
        readonly StyledNavBar: import("styled-components").StyledComponent<React.FunctionComponent<import("../StackPanel").StackPanelProps> & {
            inner: {
                readonly StackLayout: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, import("../StackPanel").StackLayoutProps, never>;
            };
        }, import("../..").PreciseTheme, {}, never>;
        readonly StyledLogoLink: import("styled-components").StyledComponent<typeof Anchor, import("../..").PreciseTheme, {}, never>;
        readonly DesktopHeader: React.FunctionComponent<DesktopHeaderProps> & {
            inner: {
                readonly StyledLinks: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
                readonly StyledLead: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
                readonly HeaderStackPanel: import("styled-components").StyledComponent<React.FunctionComponent<import("../StackPanel").StackPanelProps> & {
                    inner: {
                        readonly StackLayout: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, import("../StackPanel").StackLayoutProps, never>;
                    };
                }, import("../..").PreciseTheme, {}, never>;
                readonly StyledPin: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
            };
        };
        readonly MobileHeader: React.FunctionComponent<MobileHeaderProps> & {
            inner: {
                readonly HeaderStackPanel: import("styled-components").StyledComponent<React.FunctionComponent<import("../StackPanel").StackPanelProps> & {
                    inner: {
                        readonly StackLayout: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, import("../StackPanel").StackLayoutProps, never>;
                    };
                }, import("../..").PreciseTheme, {}, never>;
                readonly StyledMenuLink: import("styled-components").StyledComponent<"a", import("../..").PreciseTheme, {}, never>;
                readonly Icon: React.FunctionComponent<import("../Icon").IconProps> & {
                    inner: {
                        readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../..").PreciseTheme, {}, never>;
                    };
                };
                readonly StyledMenu: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
                readonly StyledMenuItems: import("styled-components").StyledComponent<"ul", import("../..").PreciseTheme, {}, never>;
                readonly StyledMenuItem: import("styled-components").StyledComponent<"li", import("../..").PreciseTheme, {}, never>;
            };
        };
    };
}
export {};
