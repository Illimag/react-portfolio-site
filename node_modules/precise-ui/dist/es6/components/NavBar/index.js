var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { StackPanel } from '../StackPanel';
import { Anchor } from '../Anchor';
import { Icon } from '../Icon';
import { cyan, black, grey2 } from '../../colors';
import { distance } from '../../distance';
import { multiply } from '../../utils/multiply';
import { getFontStyle } from '../../textStyles';
const HeaderStackPanel = styled(StackPanel) `
  align-items: center;
  justify-content: space-between;
  flex-shrink: 0;
`;
const StyledNavBar = styled(HeaderStackPanel) `
  padding-top: ${distance.xlarge};
  margin-bottom: ${distance.xxxlarge};
  flex-wrap: wrap;
`;
const StyledMenuLink = styled.a `
  ${getFontStyle({ size: 'xxLarge' })}

  position: relative;

  cursor: pointer;
  color: ${black};
  text-decoration: none;
  display: flex;
  margin-left: ${distance.medium};
  align-items: center;
  i {
    vertical-align: text-bottom;
  }
  span {
    margin-left: ${distance.small};
  }
  &:hover {
    color: ${cyan};
  }
`;
const StyledMenu = styled.div `
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: right;
  max-height: 0;
  overflow: hidden;
  &.open {
    max-height: 500px;
  }
`;
const StyledMenuItems = styled.ul `
  padding: 0;
  margin: 0;
  list-style-type: none;
  width: 100%;
`;
const StyledMenuItem = styled.li `
  ${getFontStyle({ size: 'medium' })}

  margin: ${distance.small} 0;

  text-align: right;
  & a {
    text-decoration: none;
    color: ${grey2};
  }
  & a:hover {
    color: ${cyan};
  }
`;
const StyledLogoLink = styled(Anchor) `
  margin-left: ${distance.xlarge};
  margin-right: ${distance.medium};
  height: 57px;
`;
const StyledLinks = styled.div `
  margin-right: auto;
  margin-left: ${multiply(distance.xxxlarge, 2)};
`;
const StyledLead = styled.div `
  ${getFontStyle({ size: 'xxLarge' })}

  margin-right: ${distance.medium};
`;
const StyledPin = styled.div `
  ${getFontStyle({ size: 'xxLarge' })}
  
  margin-left: ${distance.medium};
`;
const breakPoint = 780;
function isFullMode(width) {
    return width > breakPoint;
}
const DesktopHeader = Object.assign((({ leads, pins }) => (React.createElement(React.Fragment, null,
    React.createElement(StyledLinks, null, leads.map(item => (React.createElement(StyledLead, { key: item.id }, item.content)))),
    React.createElement(HeaderStackPanel, null, pins.map(item => (React.createElement(StyledPin, { key: item.id }, item.content))))))), { inner: {
        get StyledLinks() { return StyledLinks; },
        get StyledLead() { return StyledLead; },
        get HeaderStackPanel() { return HeaderStackPanel; },
        get StyledPin() { return StyledPin; }
    } });
const MobileHeader = Object.assign((({ entries, onToggle, open }) => (React.createElement(React.Fragment, null,
    React.createElement(HeaderStackPanel, null,
        React.createElement(StyledMenuLink, { onClick: onToggle },
            React.createElement(Icon, { name: open ? 'Close' : 'Menu' }))),
    React.createElement(StyledMenu, { onClick: onToggle, className: open ? 'open' : '' },
        React.createElement(StyledMenuItems, null, entries.map(item => (React.createElement(StyledMenuItem, { key: item.id }, item.content)))))))), { inner: {
        get HeaderStackPanel() { return HeaderStackPanel; },
        get StyledMenuLink() { return StyledMenuLink; },
        get Icon() { return Icon; },
        get StyledMenu() { return StyledMenu; },
        get StyledMenuItems() { return StyledMenuItems; },
        get StyledMenuItem() { return StyledMenuItem; }
    } });
/**
 * A simple navigation bar that is responsive by nature.
 */
export class NavBar extends React.Component {
    constructor(props) {
        super(props);
        this.toggle = () => {
            const { onToggle } = this.props;
            const { open, controlledOpen } = this.state;
            if (!controlledOpen) {
                this.setState({
                    open: !open,
                });
            }
            if (typeof onToggle === 'function') {
                onToggle({
                    shouldOpen: !open,
                });
            }
        };
        this.state = {
            controlledMode: props.mode !== undefined,
            controlledOpen: props.open !== undefined,
            open: !!props.open,
            mode: props.mode,
        };
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.controlledMode) {
            this.setState({
                mode: nextProps.mode,
            });
        }
        if (this.state.controlledOpen) {
            this.setState({
                open: !!nextProps.open,
            });
        }
    }
    render() {
        const _a = this.props, { logo, hidden, items, mode: _0, children } = _a, rest = __rest(_a, ["logo", "hidden", "items", "mode", "children"]);
        const { mode, open } = this.state;
        return (React.createElement(StyledNavBar, Object.assign({}, rest),
            logo &&
                (typeof logo === 'string' ? (React.createElement(StyledLogoLink, { to: "/" },
                    React.createElement("img", { src: logo, width: 57, height: 57 }))) : (logo)),
            children,
            !hidden &&
                (mode === 'full' ? (React.createElement(DesktopHeader, { leads: items.filter(item => item.display === 'lead'), pins: items.filter(item => item.display === 'pin') })) : mode === 'hamburger' ? (React.createElement(MobileHeader, { entries: items.filter(item => !item.display || item.display === 'mobile'), open: open, onToggle: this.toggle })) : (false))));
    }
}
NavBar.inner = {
    get StyledNavBar() { return StyledNavBar; },
    get StyledLogoLink() { return StyledLogoLink; },
    get DesktopHeader() { return DesktopHeader; },
    get MobileHeader() { return MobileHeader; }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9OYXZCYXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sTUFBZSxNQUFNLG9CQUFvQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNsRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQXFEaEQsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7Q0FJM0MsQ0FBQztBQUNGLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2lCQUM3QixRQUFRLENBQUMsTUFBTTttQkFDYixRQUFRLENBQUMsUUFBUTs7Q0FFbkMsQ0FBQztBQUNGLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDNUIsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDOzs7OztXQUsxQixLQUFLOzs7aUJBR0MsUUFBUSxDQUFDLE1BQU07Ozs7OzttQkFNYixRQUFRLENBQUMsS0FBSzs7O2FBR3BCLElBQUk7O0NBRWhCLENBQUM7QUFDRixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDOzs7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Q0FBQztZQUMvQixRQUFRO1lBQ1IsQ0FBQyxNQUFNO2dCQUNKLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBQyxhQUFhLElBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQUMsWUFBWSxJQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDMVMsQ0FBQyxDQUFDO0lBQ25CLENBQUM7O0FBQ00sWUFBSyxHQUFHO0lBQ1gsSUFBSSxZQUFZLEtBQUssT0FBTyxZQUFtQyxDQUFDLENBQUMsQ0FBQztJQUNsRSxJQUFJLGNBQWMsS0FBSyxPQUFPLGNBQXVDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLElBQUksYUFBYSxLQUFLLE9BQU8sYUFBcUMsQ0FBQyxDQUFDLENBQUM7SUFDckUsSUFBSSxZQUFZLEtBQUssT0FBTyxZQUFtQyxDQUFDLENBQUMsQ0FBQztDQUNyRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgU3RhY2tQYW5lbCB9IGZyb20gJy4uL1N0YWNrUGFuZWwnO1xuaW1wb3J0IHsgQW5jaG9yIH0gZnJvbSAnLi4vQW5jaG9yJztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi9JY29uJztcbmltcG9ydCB7IGN5YW4sIGJsYWNrLCBncmV5MiB9IGZyb20gJy4uLy4uL2NvbG9ycyc7XG5pbXBvcnQgeyBkaXN0YW5jZSB9IGZyb20gJy4uLy4uL2Rpc3RhbmNlJztcbmltcG9ydCB7IG11bHRpcGx5IH0gZnJvbSAnLi4vLi4vdXRpbHMvbXVsdGlwbHknO1xuaW1wb3J0IHsgZ2V0Rm9udFN0eWxlIH0gZnJvbSAnLi4vLi4vdGV4dFN0eWxlcyc7XG5pbXBvcnQgeyBkaXNwbGF5VG8gfSBmcm9tICcuLi8uLi91dGlscy9kaXNwbGF5VG8nO1xuaW1wb3J0IHsgcmVtQ2FsYyB9IGZyb20gJy4uLy4uL3V0aWxzL3JlbUNhbGMnO1xuZXhwb3J0IGludGVyZmFjZSBOYXZCYXJJdGVtIHtcbiAgICBjb250ZW50OiBSZWFjdC5SZWFjdE5vZGU7XG4gICAgZGlzcGxheT86ICdtb2JpbGUnIHwgJ3BpbicgfCAnbGVhZCc7XG4gICAgaWQ6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTmF2QmFyVG9nZ2xlRXZlbnQge1xuICAgIHNob3VsZE9wZW46IGJvb2xlYW47XG59XG5leHBvcnQgaW50ZXJmYWNlIE5hdkJhclByb3BzIHtcbiAgICAvKipcbiAgICAgKiBTZXRzIGNvbXBvbmVudCBkaXNwbGF5IG1vZGUuIEJ5IGRlZmF1bHQgYXV0b21hdGljIG1vZGUgaXMgdXNlZCxcbiAgICAgKiB3aGljaCBkZXBlbmRzIG9uIHRoZSBjb21wb25lbnQncyB3aWR0aC5cbiAgICAgKi9cbiAgICBtb2RlPzogJ2hhbWJ1cmdlcicgfCAnZnVsbCc7XG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbmFsIGxvZ28gdG8gZGVmaW5lLiBFaXRoZXIgYSBzdHJpbmcgb3IgYSBSZWFjdCBlbGVtZW50LlxuICAgICAqIEEgc3RyaW5nIGlzIGludGVycHJldGVkIGFzIGFuIGltYWdlIFVSTCwgd2hpY2ggd2lsbCBkaXNwbGF5ZWQgaW5cbiAgICAgKiBhbiA1N3g1NyBsYXJnZSBpbWFnZSBpbnNpZGUgYSBsaW5rIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBsb2dvPzogUmVhY3QuUmVhY3RDaGlsZDtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBtZW51IGlzIG9wZW5lZCBvciBjbG9zZWQuIElmIHRoZSB2YWx1ZSBpcyBzZXQgdGhlXG4gICAgICogY29udHJvbCBnb2VzIGludG8gY29udHJvbGxlZCBtb2RlLiBPbWl0dGluZyB0aGlzIHZhbHVlIHdpbGwgdHJpZ2dlclxuICAgICAqIHRoZSBtYW5hZ2VkIG1vZGUuXG4gICAgICovXG4gICAgb3Blbj86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRXZlbnQgZW1pdHRlZCBvbmNlIHRoZSBoYW1idXJnZXIgbWVudSBzaG91bGQgYmUgdG9nZ2xlZC5cbiAgICAgKi9cbiAgICBvblRvZ2dsZT8oZTogTmF2QmFyVG9nZ2xlRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbiB0byBoaWRlIHRoZSBzdGFuZGFyZCBtZW51IGFuZCBvbmx5IGRpc3BsYXkgdGhlIGxvZ28sIGlmIGF2YWlsYWJsZS5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGhpZGRlbj86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIG1lbnUgaXRlbXMgdG8gc2hvdy5cbiAgICAgKi9cbiAgICBpdGVtczogQXJyYXk8TmF2QmFySXRlbT47XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWwgYWRkaXRpb25hbCBjb250ZW50IHRvIHBsYWNlIGluc2lkZSB0aGUgbmF2IGJhciBjb250YWluZXIuXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG59XG5leHBvcnQgaW50ZXJmYWNlIE5hdkJhclN0YXRlIHtcbiAgICBjb250cm9sbGVkTW9kZTogYm9vbGVhbjtcbiAgICBjb250cm9sbGVkT3BlbjogYm9vbGVhbjtcbiAgICBvcGVuOiBib29sZWFuO1xuICAgIG1vZGU6ICdoYW1idXJnZXInIHwgJ2Z1bGwnIHwgdW5kZWZpbmVkO1xufVxuY29uc3QgSGVhZGVyU3RhY2tQYW5lbCA9IHN0eWxlZChTdGFja1BhbmVsKSBgXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgZmxleC1zaHJpbms6IDA7XG5gO1xuY29uc3QgU3R5bGVkTmF2QmFyID0gc3R5bGVkKEhlYWRlclN0YWNrUGFuZWwpIGBcbiAgcGFkZGluZy10b3A6ICR7ZGlzdGFuY2UueGxhcmdlfTtcbiAgbWFyZ2luLWJvdHRvbTogJHtkaXN0YW5jZS54eHhsYXJnZX07XG4gIGZsZXgtd3JhcDogd3JhcDtcbmA7XG5jb25zdCBTdHlsZWRNZW51TGluayA9IHN0eWxlZC5hIGBcbiAgJHtnZXRGb250U3R5bGUoeyBzaXplOiAneHhMYXJnZScgfSl9XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgY29sb3I6ICR7YmxhY2t9O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbi1sZWZ0OiAke2Rpc3RhbmNlLm1lZGl1bX07XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGkge1xuICAgIHZlcnRpY2FsLWFsaWduOiB0ZXh0LWJvdHRvbTtcbiAgfVxuICBzcGFuIHtcbiAgICBtYXJnaW4tbGVmdDogJHtkaXN0YW5jZS5zbWFsbH07XG4gIH1cbiAgJjpob3ZlciB7XG4gICAgY29sb3I6ICR7Y3lhbn07XG4gIH1cbmA7XG5jb25zdCBTdHlsZWRNZW51ID0gc3R5bGVkLmRpdiBgXG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHJpZ2h0O1xuICBtYXgtaGVpZ2h0OiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICAmLm9wZW4ge1xuICAgIG1heC1oZWlnaHQ6IDUwMHB4O1xuICB9XG5gO1xuY29uc3QgU3R5bGVkTWVudUl0ZW1zID0gc3R5bGVkLnVsIGBcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIHdpZHRoOiAxMDAlO1xuYDtcbmNvbnN0IFN0eWxlZE1lbnVJdGVtID0gc3R5bGVkLmxpIGBcbiAgJHtnZXRGb250U3R5bGUoeyBzaXplOiAnbWVkaXVtJyB9KX1cblxuICBtYXJnaW46ICR7ZGlzdGFuY2Uuc21hbGx9IDA7XG5cbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICYgYSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGNvbG9yOiAke2dyZXkyfTtcbiAgfVxuICAmIGE6aG92ZXIge1xuICAgIGNvbG9yOiAke2N5YW59O1xuICB9XG5gO1xuY29uc3QgU3R5bGVkTG9nb0xpbmsgPSBzdHlsZWQoQW5jaG9yKSBgXG4gIG1hcmdpbi1sZWZ0OiAke2Rpc3RhbmNlLnhsYXJnZX07XG4gIG1hcmdpbi1yaWdodDogJHtkaXN0YW5jZS5tZWRpdW19O1xuICBoZWlnaHQ6IDU3cHg7XG5gO1xuY29uc3QgU3R5bGVkTGlua3MgPSBzdHlsZWQuZGl2IGBcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICBtYXJnaW4tbGVmdDogJHttdWx0aXBseShkaXN0YW5jZS54eHhsYXJnZSwgMil9O1xuYDtcbmNvbnN0IFN0eWxlZExlYWQgPSBzdHlsZWQuZGl2IGBcbiAgJHtnZXRGb250U3R5bGUoeyBzaXplOiAneHhMYXJnZScgfSl9XG5cbiAgbWFyZ2luLXJpZ2h0OiAke2Rpc3RhbmNlLm1lZGl1bX07XG5gO1xuY29uc3QgU3R5bGVkUGluID0gc3R5bGVkLmRpdiBgXG4gICR7Z2V0Rm9udFN0eWxlKHsgc2l6ZTogJ3h4TGFyZ2UnIH0pfVxuICBcbiAgbWFyZ2luLWxlZnQ6ICR7ZGlzdGFuY2UubWVkaXVtfTtcbmA7XG5jb25zdCBicmVha1BvaW50ID0gNzgwO1xuZnVuY3Rpb24gaXNGdWxsTW9kZSh3aWR0aDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHdpZHRoID4gYnJlYWtQb2ludDtcbn1cbmludGVyZmFjZSBEZXNrdG9wSGVhZGVyUHJvcHMge1xuICAgIGxlYWRzOiBBcnJheTxOYXZCYXJJdGVtPjtcbiAgICBwaW5zOiBBcnJheTxOYXZCYXJJdGVtPjtcbn1cbmNvbnN0IERlc2t0b3BIZWFkZXIgPSBPYmplY3QuYXNzaWduKCgoKHsgbGVhZHMsIHBpbnMgfSkgPT4gKDw+XG4gICAgPFN0eWxlZExpbmtzPlxuICAgICAge2xlYWRzLm1hcChpdGVtID0+ICg8U3R5bGVkTGVhZCBrZXk9e2l0ZW0uaWR9PntpdGVtLmNvbnRlbnR9PC9TdHlsZWRMZWFkPikpfVxuICAgIDwvU3R5bGVkTGlua3M+XG4gICAgPEhlYWRlclN0YWNrUGFuZWw+XG4gICAgICB7cGlucy5tYXAoaXRlbSA9PiAoPFN0eWxlZFBpbiBrZXk9e2l0ZW0uaWR9PntpdGVtLmNvbnRlbnR9PC9TdHlsZWRQaW4+KSl9XG4gICAgPC9IZWFkZXJTdGFja1BhbmVsPlxuICA8Lz4pKSBhcyBSZWFjdC5TRkM8RGVza3RvcEhlYWRlclByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IFN0eWxlZExpbmtzKCkgeyByZXR1cm4gU3R5bGVkTGlua3MgYXMgdHlwZW9mIFN0eWxlZExpbmtzOyB9LFxuICAgICAgICBnZXQgU3R5bGVkTGVhZCgpIHsgcmV0dXJuIFN0eWxlZExlYWQgYXMgdHlwZW9mIFN0eWxlZExlYWQ7IH0sXG4gICAgICAgIGdldCBIZWFkZXJTdGFja1BhbmVsKCkgeyByZXR1cm4gSGVhZGVyU3RhY2tQYW5lbCBhcyB0eXBlb2YgSGVhZGVyU3RhY2tQYW5lbDsgfSxcbiAgICAgICAgZ2V0IFN0eWxlZFBpbigpIHsgcmV0dXJuIFN0eWxlZFBpbiBhcyB0eXBlb2YgU3R5bGVkUGluOyB9XG4gICAgfSB9KTtcbmludGVyZmFjZSBNb2JpbGVIZWFkZXJQcm9wcyB7XG4gICAgZW50cmllczogQXJyYXk8TmF2QmFySXRlbT47XG4gICAgb25Ub2dnbGUoKTogdm9pZDtcbiAgICBvcGVuOiBib29sZWFuO1xufVxuY29uc3QgTW9iaWxlSGVhZGVyID0gT2JqZWN0LmFzc2lnbigoKCh7IGVudHJpZXMsIG9uVG9nZ2xlLCBvcGVuIH0pID0+ICg8PlxuICAgIDxIZWFkZXJTdGFja1BhbmVsPlxuICAgICAgPFN0eWxlZE1lbnVMaW5rIG9uQ2xpY2s9e29uVG9nZ2xlfT5cbiAgICAgICAgPEljb24gbmFtZT17b3BlbiA/ICdDbG9zZScgOiAnTWVudSd9Lz5cbiAgICAgIDwvU3R5bGVkTWVudUxpbms+XG4gICAgPC9IZWFkZXJTdGFja1BhbmVsPlxuICAgIDxTdHlsZWRNZW51IG9uQ2xpY2s9e29uVG9nZ2xlfSBjbGFzc05hbWU9e29wZW4gPyAnb3BlbicgOiAnJ30+XG4gICAgICA8U3R5bGVkTWVudUl0ZW1zPlxuICAgICAgICB7ZW50cmllcy5tYXAoaXRlbSA9PiAoPFN0eWxlZE1lbnVJdGVtIGtleT17aXRlbS5pZH0+e2l0ZW0uY29udGVudH08L1N0eWxlZE1lbnVJdGVtPikpfVxuICAgICAgPC9TdHlsZWRNZW51SXRlbXM+XG4gICAgPC9TdHlsZWRNZW51PlxuICA8Lz4pKSBhcyBSZWFjdC5TRkM8TW9iaWxlSGVhZGVyUHJvcHM+KSwgeyBpbm5lcjoge1xuICAgICAgICBnZXQgSGVhZGVyU3RhY2tQYW5lbCgpIHsgcmV0dXJuIEhlYWRlclN0YWNrUGFuZWwgYXMgdHlwZW9mIEhlYWRlclN0YWNrUGFuZWw7IH0sXG4gICAgICAgIGdldCBTdHlsZWRNZW51TGluaygpIHsgcmV0dXJuIFN0eWxlZE1lbnVMaW5rIGFzIHR5cGVvZiBTdHlsZWRNZW51TGluazsgfSxcbiAgICAgICAgZ2V0IEljb24oKSB7IHJldHVybiBJY29uIGFzIHR5cGVvZiBJY29uOyB9LFxuICAgICAgICBnZXQgU3R5bGVkTWVudSgpIHsgcmV0dXJuIFN0eWxlZE1lbnUgYXMgdHlwZW9mIFN0eWxlZE1lbnU7IH0sXG4gICAgICAgIGdldCBTdHlsZWRNZW51SXRlbXMoKSB7IHJldHVybiBTdHlsZWRNZW51SXRlbXMgYXMgdHlwZW9mIFN0eWxlZE1lbnVJdGVtczsgfSxcbiAgICAgICAgZ2V0IFN0eWxlZE1lbnVJdGVtKCkgeyByZXR1cm4gU3R5bGVkTWVudUl0ZW0gYXMgdHlwZW9mIFN0eWxlZE1lbnVJdGVtOyB9XG4gICAgfSB9KTtcbi8qKlxuICogQSBzaW1wbGUgbmF2aWdhdGlvbiBiYXIgdGhhdCBpcyByZXNwb25zaXZlIGJ5IG5hdHVyZS5cbiAqL1xuZXhwb3J0IGNsYXNzIE5hdkJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxOYXZCYXJQcm9wcywgTmF2QmFyU3RhdGU+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogTmF2QmFyUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29udHJvbGxlZE1vZGU6IHByb3BzLm1vZGUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbnRyb2xsZWRPcGVuOiBwcm9wcy5vcGVuICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvcGVuOiAhIXByb3BzLm9wZW4sXG4gICAgICAgICAgICBtb2RlOiBwcm9wcy5tb2RlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IE5hdkJhclByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmNvbnRyb2xsZWRNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBtb2RlOiBuZXh0UHJvcHMubW9kZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmNvbnRyb2xsZWRPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBvcGVuOiAhIW5leHRQcm9wcy5vcGVuLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSB0b2dnbGUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgb25Ub2dnbGUgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgb3BlbiwgY29udHJvbGxlZE9wZW4gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmICghY29udHJvbGxlZE9wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIG9wZW46ICFvcGVuLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvblRvZ2dsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25Ub2dnbGUoe1xuICAgICAgICAgICAgICAgIHNob3VsZE9wZW46ICFvcGVuLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBsb2dvLCBoaWRkZW4sIGl0ZW1zLCBtb2RlOiBfMCwgY2hpbGRyZW4sIC4uLnJlc3QgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgbW9kZSwgb3BlbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuICg8U3R5bGVkTmF2QmFyIHsuLi5yZXN0fT5cbiAgICAgICAge2xvZ28gJiZcbiAgICAgICAgICAgICh0eXBlb2YgbG9nbyA9PT0gJ3N0cmluZycgPyAoPFN0eWxlZExvZ29MaW5rIHRvPVwiL1wiPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17bG9nb30gd2lkdGg9ezU3fSBoZWlnaHQ9ezU3fS8+XG4gICAgICAgICAgICA8L1N0eWxlZExvZ29MaW5rPikgOiAobG9nbykpfVxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIHshaGlkZGVuICYmXG4gICAgICAgICAgICAobW9kZSA9PT0gJ2Z1bGwnID8gKDxEZXNrdG9wSGVhZGVyIGxlYWRzPXtpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLmRpc3BsYXkgPT09ICdsZWFkJyl9IHBpbnM9e2l0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uZGlzcGxheSA9PT0gJ3BpbicpfS8+KSA6IG1vZGUgPT09ICdoYW1idXJnZXInID8gKDxNb2JpbGVIZWFkZXIgZW50cmllcz17aXRlbXMuZmlsdGVyKGl0ZW0gPT4gIWl0ZW0uZGlzcGxheSB8fCBpdGVtLmRpc3BsYXkgPT09ICdtb2JpbGUnKX0gb3Blbj17b3Blbn0gb25Ub2dnbGU9e3RoaXMudG9nZ2xlfS8+KSA6IChmYWxzZSkpfVxuICAgICAgPC9TdHlsZWROYXZCYXI+KTtcbiAgICB9XG4gICAgc3RhdGljIGlubmVyID0ge1xuICAgICAgICBnZXQgU3R5bGVkTmF2QmFyKCkgeyByZXR1cm4gU3R5bGVkTmF2QmFyIGFzIHR5cGVvZiBTdHlsZWROYXZCYXI7IH0sXG4gICAgICAgIGdldCBTdHlsZWRMb2dvTGluaygpIHsgcmV0dXJuIFN0eWxlZExvZ29MaW5rIGFzIHR5cGVvZiBTdHlsZWRMb2dvTGluazsgfSxcbiAgICAgICAgZ2V0IERlc2t0b3BIZWFkZXIoKSB7IHJldHVybiBEZXNrdG9wSGVhZGVyIGFzIHR5cGVvZiBEZXNrdG9wSGVhZGVyOyB9LFxuICAgICAgICBnZXQgTW9iaWxlSGVhZGVyKCkgeyByZXR1cm4gTW9iaWxlSGVhZGVyIGFzIHR5cGVvZiBNb2JpbGVIZWFkZXI7IH1cbiAgICB9O1xufVxuIl19