var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { setLabels, getPropLabel } from '../../utils/labels';
import { ItemControls } from './ItemControlsView.part';
import { PageControls } from './PageControls.part';
setLabels({
    itemsPerPageLabel: 'Items per page:',
});
function defaultItemsInfo(start, end, total) {
    return `${start} - ${end} of ${total}`;
}
function defaultPagesInfo(start, end) {
    return `${start} of ${end} pages`;
}
function getPages(itemsPerPage, total) {
    const l = Math.ceil(total / itemsPerPage);
    const pages = [];
    for (let i = 1; i <= l; i++) {
        pages.push(i.toString());
    }
    return pages;
}
const ControlsContainer = styled.div `
  display: flex;
  justify-content: space-between;
  margin-left: auto;
  align-items: center;
  height: 40px;
`;
export class PaginationBar extends React.Component {
    constructor() {
        super(...arguments);
        this.sizeChanged = (e) => {
            const { onSizeChanged, availableSizes } = this.props;
            if (Array.isArray(availableSizes) && typeof onSizeChanged === 'function') {
                onSizeChanged({
                    size: availableSizes[e.index],
                });
            }
        };
        this.changeToPrevious = () => {
            const { selectedPage } = this.props;
            this.changeTo(selectedPage - 1);
        };
        this.changeToNext = () => {
            const { selectedPage } = this.props;
            this.changeTo(selectedPage + 1);
        };
        this.changeToSelect = ({ index }) => {
            this.changeTo(index);
        };
    }
    changeTo(page) {
        const { onPageChanged } = this.props;
        if (page < 0) {
            page = 0;
        }
        if (typeof onPageChanged === 'function') {
            onPageChanged({
                page,
            });
        }
    }
    render() {
        const _a = this.props, { availableSizes, size, selectedPage, pagesInfo = defaultPagesInfo, itemsInfo = defaultItemsInfo, items, onSizeChanged, onPageChanged } = _a, props = __rest(_a, ["availableSizes", "size", "selectedPage", "pagesInfo", "itemsInfo", "items", "onSizeChanged", "onPageChanged"]);
        const pages = getPages(size, items);
        const currentItem = selectedPage * size;
        const nextItem = currentItem + size;
        return (React.createElement(ControlsContainer, null,
            Array.isArray(availableSizes) && availableSizes.length > 0 && (React.createElement(ItemControls, { label: getPropLabel(props, 'itemsPerPageLabel'), data: availableSizes.map(size => size.toString()), value: `${size}`, onChange: this.sizeChanged }, itemsInfo(currentItem, Math.min(nextItem, items), items))),
            React.createElement(PageControls, { current: selectedPage, total: pages.length, changeToPrevious: this.changeToPrevious, changeToNext: this.changeToNext, changeToSelect: this.changeToSelect, pages: pages }, pagesInfo(selectedPage + 1, Math.max(pages.length, 1)))));
    }
}
PaginationBar.inner = {
    get ControlsContainer() { return ControlsContainer; },
    get ItemControls() { return ItemControls; },
    get PageControls() { return PageControls; }
};
//# sourceMappingURL=data:application/json;base64,