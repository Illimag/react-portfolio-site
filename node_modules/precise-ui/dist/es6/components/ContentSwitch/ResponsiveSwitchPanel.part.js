var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { withResponsive } from '../../hoc/withResponsive';
import { Container, Content, Header, Headers, OverflowItems } from './ContentSwitch.part';
import { OverflowMenu } from '../OverflowMenu';
import { Icon } from '../Icon';
const defaultOrientation = 'horizontal';
const overflowButtonWidth = 50;
const ContentSwitchInt = Object.assign(((_a) => {
    var { orientation = defaultOrientation, children, theme, headers, activeIndex, onSelect } = _a, rest = __rest(_a, ["orientation", "children", "theme", "headers", "activeIndex", "onSelect"]);
    const [overflowItems, setOverflowItems] = React.useState([]);
    const containerRef = React.createRef();
    const headerRef = React.createRef();
    React.useLayoutEffect(() => {
        if (headerRef.current && containerRef.current && orientation === 'horizontal') {
            const { offsetWidth: containerWidth } = containerRef.current;
            const headerNodesWidth = Array.from(headerRef.current.childNodes).map((node) => node.offsetWidth);
            const headersUlWidth = headerNodesWidth.reduce((acc, cur) => (acc += cur), 0);
            if (headersUlWidth > containerWidth) {
                const overflowItems = [];
                let visibleItemsWidth = overflowButtonWidth;
                headerNodesWidth.forEach((nodeWidth, index) => {
                    visibleItemsWidth += nodeWidth;
                    if (visibleItemsWidth > containerWidth) {
                        overflowItems.push(headers[index]);
                    }
                });
                setOverflowItems(overflowItems);
            }
        }
        return () => setOverflowItems([]);
    }, [headerRef.current, containerRef.current, orientation]);
    return (React.createElement(Container, Object.assign({ theme: theme }, rest, { ref: containerRef }),
        React.createElement(Headers, { theme: theme, orientation: orientation, ref: headerRef },
            headers.slice(0, headers.length - overflowItems.length).map((element, index) => (React.createElement(Header, { theme: theme, key: `head-${index}`, active: index === activeIndex, onClick: () => onSelect(index), orientation: orientation }, element))),
            overflowItems.length > 0 && (React.createElement(OverflowMenu, { key: "overflowButton", items: overflowItems.map((element, index, { length }) => (React.createElement(OverflowItems, { onClick: () => onSelect(headers.length - length + index) }, element))), button: React.createElement(Header, null,
                    React.createElement(Icon, { name: "MoreVert" })) }))),
        React.createElement(Content, { theme: theme }, children)));
}), { inner: {
        get Container() { return Container; },
        get Headers() { return Headers; },
        get Header() { return Header; },
        get OverflowMenu() { return OverflowMenu; },
        get Content() { return Content; }
    } });
export const ResponsiveSwitchPanel = withResponsive(ContentSwitchInt);
//# sourceMappingURL=data:application/json;base64,