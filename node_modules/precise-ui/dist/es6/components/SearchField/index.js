var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { Autocomplete } from '../Autocomplete';
import { debounce } from '../../utils/debounce';
import { Icon } from '../Icon';
import { light } from '../../themes';
import { Button } from '../Button';
import styled from '../../utils/styled';
const SearchContainer = styled.div `
  display: flex;
  flex-direction: row;
`;
const SearchButton = styled(Button) `
  height: 54px;
  width: 54px;
  margin: 0;
`;
const defaultDebounceDelay = 200;
/**
 * A search field for user search queries.
 */
export class SearchField extends React.Component {
    constructor(props) {
        super(props);
        this.handleKeyDown = (e) => {
            e.keyCode === 13 /* enter */ && this.fireSearch(this.state.query);
        };
        this.onSearchClick = () => {
            const { onSearch } = this.props;
            typeof onSearch === 'function' && onSearch({ query: this.state.query });
        };
        this.onClear = () => {
            const { onClear, triggerMode = 'auto' } = this.props;
            typeof onClear === 'function' && onClear();
            // In case, triggerMode is set to manual, clicking on clear should also trigger the search.
            triggerMode === 'manual' && this.fireSearch('');
        };
        this.onSuggestionSelected = (e) => {
            const { onSuggestionSelected, triggerMode = 'auto' } = this.props;
            typeof onSuggestionSelected === 'function' && onSuggestionSelected(e);
            // In case, triggerMode is set to manual, selecting a suggestion should also trigger the search.
            triggerMode === 'manual' && this.fireSearch(String(e.value));
        };
        this.change = (e) => {
            const { onChange, triggerMode = 'auto' } = this.props;
            this.setState({ query: e.value });
            typeof onChange === 'function' && onChange(e);
            triggerMode === 'auto' && this.fireSearch(e.value);
        };
        const { delay = defaultDebounceDelay } = props;
        this.state = { query: '' };
        this.fireSearch = debounce((query) => {
            const { onSearch } = this.props;
            typeof onSearch === 'function' && onSearch({ query });
        }, delay);
    }
    render() {
        const _a = this.props, { onSearch, delay, icon = 'Search', triggerMode = 'auto' } = _a, rest = __rest(_a, ["onSearch", "delay", "icon", "triggerMode"]);
        const autoTrigger = triggerMode === 'auto';
        const fieldIconColor = (rest.theme && rest.theme.text2) || light.text2;
        const buttonIconColor = (rest.theme && rest.theme.text4) || light.text4;
        const searchFieldIcon = React.createElement(Icon, { name: icon, color: fieldIconColor, size: "22px" });
        const searchButtonIcon = React.createElement(Icon, { name: icon, color: buttonIconColor, size: "22px" });
        return (React.createElement(SearchContainer, { onKeyDown: this.handleKeyDown },
            React.createElement(Autocomplete, Object.assign({}, rest, { onClear: this.onClear, onChange: this.change, onSuggestionSelected: this.onSuggestionSelected, icon: autoTrigger ? searchFieldIcon : React.createElement(React.Fragment, null) })),
            !autoTrigger && (React.createElement(SearchButton, { disabled: rest.disabled, onClick: this.onSearchClick }, searchButtonIcon))));
    }
}
SearchField.inner = {
    get Icon() { return Icon; },
    get SearchContainer() { return SearchContainer; },
    get Autocomplete() { return Autocomplete; },
    get SearchButton() { return SearchButton; }
};
//# sourceMappingURL=data:application/json;base64,