import * as React from 'react';
import { AutocompleteProps } from '../Autocomplete';
import { IconName } from '../Icon';
export interface SearchEvent {
    query: string;
}
export interface SearchFieldProps<T> extends AutocompleteProps<T> {
    /**
     * @ignore
     */
    children?: void;
    /**
     * The icon to be used for the search.
     * @default Search
     */
    icon?: IconName;
    /**
     * Defines whether the search triggers onSearch on every keystroke or
     * by manually clicking on a button or pressing enter.
     *
     * @default "auto"
     */
    triggerMode?: 'auto' | 'manual';
    /**
     * The debounce time in milliseconds.
     * @default 200
     */
    delay?: number;
    /**
     * The event fired when the search is triggered.
     */
    onSearch?(ev: SearchEvent): void;
    /**
     * Always `true` on Searchfield components.
     * @ignore
     */
    clearable?: boolean;
}
declare type SearchFieldState = SearchEvent;
/**
 * A search field for user search queries.
 */
export declare class SearchField<T> extends React.Component<SearchFieldProps<T>, SearchFieldState> {
    private fireSearch;
    constructor(props: SearchFieldProps<T>);
    private handleKeyDown;
    private onSearchClick;
    private onClear;
    private onSuggestionSelected;
    private change;
    render(): JSX.Element;
    static inner: {
        readonly Icon: React.FunctionComponent<import("../Icon").IconProps> & {
            inner: {
                readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../../common").PreciseTheme, {}, never>;
            };
        };
        readonly SearchContainer: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, {}, never>;
        readonly Autocomplete: React.FunctionComponent<Pick<AutocompleteProps<{}>, "label" | "style" | "children" | "error" | "theme" | "className" | "defaultValue" | "placeholder" | "prefix" | "onFocus" | "onBlur" | "onChange" | "onInput" | "name" | "icon" | "disabled" | "value" | "borderless" | "multiline" | "autoComplete" | "autoFocus" | "maxLength" | "type" | "onClear" | "info" | "resizable" | "inputRef" | "suffix" | "noSuggestionsMessage" | "suggestions" | "renderSuggestion" | "onSuggestionSelected" | "getSuggestionValue" | "inputRenderer">>;
        readonly SearchButton: import("styled-components").StyledComponent<React.FunctionComponent<import("../Button").ButtonProps> & {
            inner: {
                readonly StyledButton: import("styled-components").StyledComponent<React.FunctionComponent<import("../Button").StyledButtonProps> & {
                    inner: {
                        readonly Anchor: typeof import("..").Anchor;
                    };
                }, import("../../common").PreciseTheme, import("../Button").StyledButtonProps, never>;
                readonly StyledIcon: import("styled-components").StyledComponent<React.FunctionComponent<import("../Icon").IconProps> & {
                    inner: {
                        readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../../common").PreciseTheme, {}, never>;
                    };
                }, import("../../common").PreciseTheme, import("../Button").IconWrapperProps & import("../Icon").IconProps, never>;
            };
        }, import("../../common").PreciseTheme, {}, never>;
    };
}
export {};
