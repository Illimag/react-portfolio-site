var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { css } from '../../utils/styled';
const Bulleted = css `
  padding: 0;
`;
const StyledList = styled.ul `
  flex: 1 1 auto;
  flex-direction: column;
  margin: 0;
  position: relative;
  overflow-x: hidden;
  list-style: ${props => props.bullets || 'none'};
  ${props => (props.bullets && props.bullets !== 'none' ? '' : Bulleted)};
`;
/**
 * General purpose list component which can be used for rendering list items.
 */
export const List = Object.assign(((_a) => {
    var { disablePadding, borderless, children, activeItem } = _a, props = __rest(_a, ["disablePadding", "borderless", "children", "activeItem"]);
    const listItems = React.Children.map(children, (child, index) => React.isValidElement(child)
        ? React.cloneElement(child, Object.assign({}, (disablePadding !== undefined ? { disablePadding } : undefined), (borderless !== undefined ? { border: !borderless } : undefined), child.props, (activeItem !== undefined ? { active: index === activeItem } : {})))
        : child);
    return React.createElement(StyledList, Object.assign({}, props), listItems);
}), { inner: {
        get StyledList() { return StyledList; }
    } });
List.displayName = 'List';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9MaXN0L2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBMEJqRCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUM7O0NBRXBCLENBQUM7QUFDRixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFZOzs7Ozs7Z0JBTXhCLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxNQUFNO0lBQzVDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztDQUN2RSxDQUFDO0FBQ0Y7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUMsRUFBOEQsRUFBRSxFQUFFO1FBQWxFLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsVUFBVSxPQUFZLEVBQVYsOEVBQVE7SUFDN0YsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7UUFDeEYsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxvQkFDbkIsQ0FBQyxjQUFjLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFDL0QsQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFDaEUsS0FBSyxDQUFDLEtBQUssRUFDWCxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssS0FBSyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ3ZFO1FBQ0YsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2IsT0FBTyxvQkFBQyxVQUFVLG9CQUFLLEtBQUssR0FBRyxTQUFTLENBQWMsQ0FBQztBQUMzRCxDQUFDLENBQTBCLEVBQUUsRUFBRSxLQUFLLEVBQUU7UUFDOUIsSUFBSSxVQUFVLEtBQUssT0FBTyxVQUErQixDQUFDLENBQUMsQ0FBQztLQUMvRCxFQUFFLENBQUMsQ0FBQztBQUNULElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5leHBvcnQgaW50ZXJmYWNlIExpc3RQcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICAgIC8qKlxuICAgICAqIEluZGV4IG9mIHRoZSBhY3RpdmUgaXRlbS5cbiAgICAgKi9cbiAgICBhY3RpdmVJdGVtPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gICAgLyoqXG4gICAgICogU3dpdGNoZXMgdGhlIGRlZmF1bHQgdG8gcmVuZGVyIGEgYm9yZGVyIG9uIGVhY2ggbGlzdCBpdGVtLlxuICAgICAqL1xuICAgIGJvcmRlcmxlc3M/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgcGFkZGluZyB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgY2hpbGRyZW4gbGlzdC5cbiAgICAgKiBVc2VkIHRvIHJlbW92ZSBwYWRkaW5nIGZyb20gdGhlIGNoaWxkIGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgZGlzYWJsZVBhZGRpbmc/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBnaXZlbiBidWxsZXQgc3R5bGUuXG4gICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICovXG4gICAgYnVsbGV0cz86ICdub25lJyB8ICdkaXNjJyB8ICdzcXVhcmUnO1xufVxuY29uc3QgQnVsbGV0ZWQgPSBjc3MgYFxuICBwYWRkaW5nOiAwO1xuYDtcbmNvbnN0IFN0eWxlZExpc3QgPSBzdHlsZWQudWw8TGlzdFByb3BzPiBgXG4gIGZsZXg6IDEgMSBhdXRvO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW46IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICBsaXN0LXN0eWxlOiAke3Byb3BzID0+IHByb3BzLmJ1bGxldHMgfHwgJ25vbmUnfTtcbiAgJHtwcm9wcyA9PiAocHJvcHMuYnVsbGV0cyAmJiBwcm9wcy5idWxsZXRzICE9PSAnbm9uZScgPyAnJyA6IEJ1bGxldGVkKX07XG5gO1xuLyoqXG4gKiBHZW5lcmFsIHB1cnBvc2UgbGlzdCBjb21wb25lbnQgd2hpY2ggY2FuIGJlIHVzZWQgZm9yIHJlbmRlcmluZyBsaXN0IGl0ZW1zLlxuICovXG5leHBvcnQgY29uc3QgTGlzdCA9IE9iamVjdC5hc3NpZ24oKCgoeyBkaXNhYmxlUGFkZGluZywgYm9yZGVybGVzcywgY2hpbGRyZW4sIGFjdGl2ZUl0ZW0sIC4uLnByb3BzIH0pID0+IHtcbiAgICBjb25zdCBsaXN0SXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKVxuICAgICAgICA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgICAgLi4uKGRpc2FibGVQYWRkaW5nICE9PSB1bmRlZmluZWQgPyB7IGRpc2FibGVQYWRkaW5nIH0gOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgLi4uKGJvcmRlcmxlc3MgIT09IHVuZGVmaW5lZCA/IHsgYm9yZGVyOiAhYm9yZGVybGVzcyB9IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgIC4uLmNoaWxkLnByb3BzLFxuICAgICAgICAgICAgLi4uKGFjdGl2ZUl0ZW0gIT09IHVuZGVmaW5lZCA/IHsgYWN0aXZlOiBpbmRleCA9PT0gYWN0aXZlSXRlbSB9IDoge30pLFxuICAgICAgICB9KVxuICAgICAgICA6IGNoaWxkKTtcbiAgICByZXR1cm4gPFN0eWxlZExpc3Qgey4uLnByb3BzfT57bGlzdEl0ZW1zfTwvU3R5bGVkTGlzdD47XG59KSBhcyBSZWFjdC5TRkM8TGlzdFByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IFN0eWxlZExpc3QoKSB7IHJldHVybiBTdHlsZWRMaXN0IGFzIHR5cGVvZiBTdHlsZWRMaXN0OyB9XG4gICAgfSB9KTtcbkxpc3QuZGlzcGxheU5hbWUgPSAnTGlzdCc7XG4iXX0=