import * as React from 'react';
export interface InfiniteScrollProps {
    /**
     * @ignore
     */
    children?: void;
    /**
     * Method to load more items.
     */
    loadItems(offset: number): void;
    /**
     * Sets the button mode. If true the component will render the default
     * 'Show More' button. In case a string is supplied the default button
     * will be rendered with the given string. Otherwise, if a React component
     * is provided it will render the provided component.
     */
    button?: boolean | string | React.ComponentType<LoaderButtonProps>;
    /**
     * Pixels left to bottom of the page, at which loadItems() function will
     * be called. Used 'scroll' mode.
     * @default 0px
     */
    edgeOffset?: number;
    /**
     * The height of the scrolling container in pixels. This is a required
     * prop if useWindow is not set to true.
     * @default 0px
     */
    containerHeight?: number;
    /**
     * This option allows the window to be used as the scroll container, instead
     * of an arbitrary div created by this component, when it is set to true.
     * @default false
     */
    useWindow?: boolean;
    /**
     * The optional host element to be used.
     */
    host?: string | React.ComponentClass | React.StatelessComponent;
    /**
     * This prop receives data that is displayed in this component.
     */
    data: React.ReactNodeArray;
    /**
     * This prop let's component know if there is more data to load and call loadItems function on scroll or to display the button.
     */
    hasMore: boolean;
    /**
     * Custom loading indicator
     */
    loadingIndicator?: React.ReactNode;
}
export interface InfiniteScrollState {
    isButtonMode: boolean;
    isLoading: boolean;
}
interface StyledContainerProps {
    height?: number;
}
export interface LoaderButtonProps {
    onClick(): void;
}
export declare class InfiniteScroll extends React.Component<InfiniteScrollProps, InfiniteScrollState> {
    private node;
    constructor(props: InfiniteScrollProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: InfiniteScrollProps): void;
    private handleOnScroll;
    private reachedBottom;
    private loadItems;
    private renderButton;
    private setContainer;
    render(): JSX.Element;
    static inner: {
        readonly DefaultButton: import("styled-components").StyledComponent<React.FunctionComponent<import("../Button").ButtonProps> & {
            inner: {
                readonly StyledButton: import("styled-components").StyledComponent<React.FunctionComponent<import("../Button").StyledButtonProps> & {
                    inner: {
                        readonly Anchor: typeof import("..").Anchor;
                    };
                }, import("../..").PreciseTheme, import("../Button").StyledButtonProps, never>;
                readonly StyledIcon: import("styled-components").StyledComponent<React.FunctionComponent<import("..").IconProps> & {
                    inner: {
                        readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../..").PreciseTheme, {}, never>;
                    };
                }, import("../..").PreciseTheme, import("../Button").IconWrapperProps & import("..").IconProps, never>;
            };
        }, import("../..").PreciseTheme, {}, never>;
        readonly Container: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, StyledContainerProps, never>;
        readonly Footer: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
        readonly Spinner: React.FunctionComponent<import("../Spinner").SpinnerProps> & {
            inner: {
                readonly SpinningContainer: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {
                    hidden?: boolean | undefined;
                }, never>;
                readonly Cubes: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {
                    size?: string | undefined;
                }, never>;
                readonly Cube0: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
                readonly Cube1: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
                readonly SpinningLabel: import("styled-components").StyledComponent<"label", import("../..").PreciseTheme, import("../Spinner").SpinningLabelProps, never>;
            };
        };
    };
}
export {};
