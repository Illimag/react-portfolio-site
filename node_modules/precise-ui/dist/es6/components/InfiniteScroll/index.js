import * as React from 'react';
import styled from '../../utils/styled';
import { Button } from '../Button';
import { Spinner } from '../Spinner';
import { distance } from '../../distance';
const Container = styled.div `
  height: ${({ height }) => (height ? `${height}px` : 'auto')};
  overflow: ${({ height }) => (height ? 'auto' : 'visible')};
`;
const Footer = styled.div `
  margin-top: ${distance.small};
`;
const DefaultButton = styled(Button) `
  width: 100%;
  display: flex;
  justify-content: center;
`;
export class InfiniteScroll extends React.Component {
    constructor(props) {
        super(props);
        this.handleOnScroll = () => {
            const scrolledToBottom = this.reachedBottom();
            if (scrolledToBottom && this.props.hasMore) {
                this.loadItems();
            }
        };
        this.loadItems = () => {
            const { data } = this.props;
            this.setState({ isLoading: true });
            return this.props.loadItems(data.length);
        };
        this.setContainer = (node) => {
            this.node = node;
            if (this.node) {
                this.node.removeEventListener('scroll', this.handleOnScroll);
            }
            if (node && !this.props.useWindow) {
                node.addEventListener('scroll', this.handleOnScroll);
            }
            this.node = node;
        };
        this.state = {
            isButtonMode: !!this.props.button,
            isLoading: false,
        };
    }
    componentDidMount() {
        const { isButtonMode } = this.state;
        if (!isButtonMode) {
            const { useWindow } = this.props;
            if (useWindow) {
                window.addEventListener('scroll', this.handleOnScroll);
            }
        }
    }
    componentWillUnmount() {
        const { isButtonMode } = this.state;
        if (!isButtonMode) {
            const { useWindow } = this.props;
            if (useWindow) {
                window.removeEventListener('scroll', this.handleOnScroll);
            }
            else if (this.node && !useWindow) {
                this.node.removeEventListener('scroll', this.handleOnScroll);
            }
        }
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (nextProps.data.length !== this.props.data.length || nextProps.hasMore !== this.props.hasMore) {
            this.setState({
                isLoading: false,
            });
        }
    }
    reachedBottom() {
        const edgeOffset = this.props.edgeOffset || 0;
        const { documentElement, body } = document;
        const { useWindow } = this.props;
        const scrollTop = useWindow
            ? (documentElement && documentElement.scrollTop) || body.scrollTop
            : (this.node && this.node.scrollTop) || 0;
        const scrollHeight = useWindow
            ? (documentElement && documentElement.scrollHeight) || body.scrollHeight
            : (this.node && this.node.scrollHeight) || 0;
        const innerHeight = useWindow ? window.innerHeight : (this.node && this.node.clientHeight) || 0;
        const scrolledToBottom = Math.ceil(scrollTop + innerHeight + edgeOffset) >= scrollHeight;
        return scrolledToBottom;
    }
    renderButton() {
        const { data, button: CustomButton, hasMore } = this.props;
        const { isLoading } = this.state;
        if (!hasMore || data.length === 0 || isLoading) {
            return undefined;
        }
        if (CustomButton && typeof CustomButton !== 'boolean' && typeof CustomButton !== 'string') {
            return React.createElement(CustomButton, { onClick: this.loadItems });
        }
        return (React.createElement(DefaultButton, { buttonStyle: "secondary", onClick: this.loadItems, theme: { buttonIconPosition: 'left' }, icon: "Add" }, typeof CustomButton === 'string' ? CustomButton : 'Show more'));
    }
    render() {
        const { host: Host = 'div', data, containerHeight, loadingIndicator } = this.props;
        const { isButtonMode, isLoading } = this.state;
        return (React.createElement(Container, { ref: this.setContainer, height: containerHeight },
            React.createElement(Host, null, data),
            React.createElement(Footer, null,
                isLoading && (loadingIndicator || React.createElement(Spinner, { size: "x-small" })),
                isButtonMode && this.renderButton())));
    }
}
InfiniteScroll.inner = {
    get DefaultButton() { return DefaultButton; },
    get Container() { return Container; },
    get Footer() { return Footer; },
    get Spinner() { return Spinner; }
};
//# sourceMappingURL=data:application/json;base64,