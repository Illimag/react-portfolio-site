import * as React from 'react';
import { InteractiveListProps, InteractiveListState } from './InteractiveList.types.part';
interface ListItemProps {
    selected: boolean;
    hovered: boolean;
    disabled?: boolean;
    onClick?(e: React.MouseEvent): void;
    onMouseMove?(e: React.MouseEvent): void;
}
interface ListItemIconProps {
    condensed: boolean;
}
export declare class InteractiveListInt extends React.PureComponent<InteractiveListProps, InteractiveListState> {
    private readonly selects;
    private readonly elements;
    private interactiveList;
    constructor(props: InteractiveListProps);
    private defaultHandleClickOutside;
    handleClickOutside: () => void;
    UNSAFE_componentWillReceiveProps(nextProps: InteractiveListProps): void;
    componentDidUpdate(): void;
    private getNext;
    private jumpTo;
    private control;
    private getItemDetails;
    private createSingleItem;
    private createMultipleItem;
    private done;
    private createItem;
    private select;
    private setNode;
    render(): JSX.Element;
    static inner: {
        readonly StyledCheckbox: import("styled-components").StyledComponent<React.FunctionComponent<import("../Checkbox").CheckboxProps>, import("../..").PreciseTheme, {}, never>;
        readonly ListItem: import("styled-components").StyledComponent<"li", import("../..").PreciseTheme, ListItemProps, never>;
        readonly ListItemInnerContainer: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
        readonly ListItemContent: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
        readonly ListItemIconPadding: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, ListItemIconProps, never>;
        readonly Icon: React.FunctionComponent<import("../Icon").IconProps> & {
            inner: {
                readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../..").PreciseTheme, {}, never>;
            };
        };
        readonly InteractiveListContainer: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
        readonly ListDivider: import("styled-components").StyledComponent<"hr", import("../..").PreciseTheme, {}, never>;
        readonly ListHeader: import("styled-components").StyledComponent<"span", import("../..").PreciseTheme, {}, never>;
    };
}
export {};
