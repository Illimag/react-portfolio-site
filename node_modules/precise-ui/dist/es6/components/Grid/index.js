var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from '../../utils/styled';
import { calcLayout } from '../../utils/gridLayout';
import { isIE } from '../../utils/browser';
const StyledGridWrapper = styled.div `
  position: relative;
`;
function addPx(original, space) {
    if (original.endsWith('px')) {
        const dim = +original.replace('px', '');
        return `${dim + space}px`;
    }
    return original;
}
function computeIeRows(rows, spacing) {
    if (isIE === 'IE11') {
        const [, rowSpace] = spacing;
        if (rowSpace && rowSpace.endsWith('px')) {
            const space = +rowSpace.replace('px', '');
            if (space) {
                const end = rows.length - 1;
                return rows.map((row, i) => (i !== end ? addPx(row, space) : row)).join(' ');
            }
        }
    }
    return rows.join(' ');
}
const BasicGridLayout = styled.div `
  height: 100%;
  width: 100%;
  display: -ms-grid;
  display: grid;
  -ms-grid-columns: ${props => props.columns.join(' ')};
  grid-template-columns: ${props => props.columns.join(' ')};
  -ms-grid-rows: ${props => computeIeRows(props.rows, props.spacing)};
  grid-template-rows: ${props => props.rows.join(' ')};
  grid-gap: ${props => props.spacing.join(' ')};
`;
const GridLayout = styled(BasicGridLayout) `
  opacity: 0.9999;
`;
const ShadowGrid = styled(BasicGridLayout) `
  position: absolute;
`;
const DefaultUnusedCell = styled.div `
  width: 100%;
  height: 100%;
  background: #f1f1f1;
`;
// Remark:
// At PR #258 a fix for "complex content that overflows" was introduced
// which caused some problem. If this fix should be required in the future
// again we should bring in something like the following:
//
// ```css
// overflow: auto;
// margin: -1em;
// padding: 1em;
// ```
const GridCell = styled.div `
  -ms-grid-row: ${props => props.ri + 1};
  -ms-grid-row-span: ${props => props.rf - props.ri};
  grid-row: ${props => props.ri + 1} / span ${props => props.rf - props.ri};
  -ms-grid-column: ${props => props.ci + 1};
  -ms-grid-column-span: ${props => props.cf - props.ci};
  grid-column: ${props => props.ci + 1} / span ${props => props.cf - props.ci};
  max-width: 100%;
`;
const HiddenGridCell = styled.div `
  width: 0;
  height: 0;
  overflow: hidden;
`;
function repeat(n, dim = '1fr') {
    if (typeof n === 'number') {
        const arr = [];
        for (let i = 0; i < n; i++) {
            arr.push(dim);
        }
        return arr;
    }
    else if (!n) {
        return [dim];
    }
    return n;
}
function period(unit) {
    if (typeof unit === 'string') {
        return [unit, unit];
    }
    else if (!unit) {
        return ['0', '0'];
    }
    return unit;
}
function getEmptyComponent(showEmptyCells) {
    if (showEmptyCells === true) {
        return (row, col) => React.createElement(DefaultUnusedCell, { key: `uc-${row}-${col}` });
    }
    else if (typeof showEmptyCells === 'object') {
        return (row, col) => React.cloneElement(showEmptyCells, { key: `uc-${row}-${col}` });
    }
    else {
        return showEmptyCells;
    }
}
function computeAllocations(props) {
    const { children, rows, columns } = props;
    const allocation = [];
    const layout = calcLayout(children, {
        rows: typeof rows !== 'string' ? rows : undefined,
        columns: typeof columns !== 'string' ? columns : undefined,
    });
    const cells = React.Children.map(children, (child, index) => {
        const position = layout.cells[index];
        if (child && position) {
            allocation.push(position);
            const { colSpan, column, row, rowSpan } = position;
            if (!colSpan || !rowSpan) {
                return React.createElement(HiddenGridCell, null, child);
            }
            return (React.createElement(GridCell, { ci: column, cf: column + colSpan, ri: row, rf: row + rowSpan, key: index }, child));
        }
        return undefined;
    }) || [];
    return {
        allocation,
        cells,
        rows: typeof rows === 'string' ? repeat(layout.rows, rows) : repeat(rows || layout.rows),
        columns: typeof columns === 'string' ? repeat(layout.columns, columns) : repeat(columns || layout.columns),
    };
}
function computeUnused(props, layout) {
    const { showEmptyCells } = props;
    const { rows, columns } = layout;
    const unusedCells = [];
    if (showEmptyCells) {
        const renderer = getEmptyComponent(showEmptyCells);
        const rowCount = rows.length;
        const colCount = columns.length;
        for (let i = 0; i < rowCount; i++) {
            for (let j = 0; j < colCount; j++) {
                const cell = renderer(i, j);
                unusedCells.push(cell);
            }
        }
    }
    return unusedCells;
}
/**
 * The `Grid` component represents a uniform grid, i.e., a grid that does not change its column layout from row to row.
 */
export class Grid extends React.PureComponent {
    constructor(props) {
        super(props);
        const layout = computeAllocations(props);
        this.state = {
            layout,
            unused: computeUnused(props, layout),
        };
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        const currLayout = this.state.layout;
        const nextLayout = computeAllocations(nextProps);
        this.setState({
            layout: nextLayout,
        });
        if (nextProps.showEmptyCells !== this.props.showEmptyCells ||
            nextLayout.rows !== currLayout.rows ||
            nextLayout.columns !== currLayout.columns) {
            this.setState({
                unused: computeUnused(nextProps, nextLayout),
            });
        }
    }
    render() {
        const _a = this.props, { rows: _0, columns: _1, spacing = 0, showEmptyCells: _2, onLayout, innerRef } = _a, props = __rest(_a, ["rows", "columns", "spacing", "showEmptyCells", "onLayout", "innerRef"]);
        const { layout, unused } = this.state;
        const space = typeof spacing === 'number' ? `${spacing}px` : spacing;
        const selectedSpacing = period(space);
        if (typeof onLayout === 'function') {
            onLayout({
                layout,
            });
        }
        return (React.createElement(StyledGridWrapper, { ref: innerRef },
            !!unused.length && (React.createElement(ShadowGrid, { rows: layout.rows, columns: layout.columns, spacing: selectedSpacing }, unused)),
            React.createElement(GridLayout, Object.assign({ rows: layout.rows, columns: layout.columns, spacing: selectedSpacing }, props), layout.cells)));
    }
}
Grid.inner = {
    get StyledGridWrapper() { return StyledGridWrapper; },
    get ShadowGrid() { return ShadowGrid; },
    get GridLayout() { return GridLayout; }
};
//# sourceMappingURL=data:application/json;base64,