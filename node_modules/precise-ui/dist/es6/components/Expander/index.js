import * as React from 'react';
import styled from '../../utils/styled';
function getExpandingContainerHeight(status, expandedHeight, collapsedHeight) {
    if (!expandedHeight) {
        return '0';
    }
    switch (status) {
        case 'entering':
            return `${expandedHeight}px`;
        case 'entered':
            return 'auto';
        case 'exitingStart':
            return `${expandedHeight}px`;
        case 'exiting':
        default:
            return `${collapsedHeight || '0'}`;
    }
}
const ExpandingContainer = styled('div')(({ status, expandedHeight, collapsedHeight, timeout }) => `
    overflow: hidden;
    transition-duration: ${timeout}ms;
    height: ${getExpandingContainerHeight(status, expandedHeight, collapsedHeight)}
  `);
/**
 * A functional expander component for expanding / collapsing content.
 */
export class Expander extends React.Component {
    constructor(props) {
        super(props);
        this.wrapperRef = React.createRef();
        this.setContainer = (ref) => {
            this.rootContainer = ref;
        };
        this.state = {
            status: 'unmounted',
        };
    }
    componentDidMount() {
        this.handleChange();
    }
    componentDidUpdate(prevProps, prevState) {
        const { expand } = this.props;
        const { status } = this.state;
        if (prevProps.expand !== expand || prevState.status !== status) {
            this.handleChange();
        }
    }
    componentWillUnmount() {
        this.clearTimer();
    }
    handleChange() {
        const { expand } = this.props;
        const { status } = this.state;
        if (expand) {
            if (status === 'unmounted') {
                this.setState({
                    status: 'mounted',
                });
            }
            else if (status !== 'entering' && status !== 'entered') {
                this.performEnter();
            }
        }
        else {
            if (status === 'entering' || status === 'entered') {
                this.performExit();
            }
        }
    }
    performEnter() {
        this.setState({
            status: 'entering',
        }, () => this.setDelayedStatus('entered'));
    }
    performExit() {
        const { unmountOnExit } = this.props;
        this.setState({ status: 'exitingStart' }, () => this.setState({ status: 'exiting' }, () => this.setDelayedStatus(unmountOnExit ? 'unmounted' : 'exited')));
    }
    clearTimer() {
        if (this.timer) {
            clearTimeout(this.timer);
        }
    }
    setDelayedStatus(status) {
        const { timeout = 0 } = this.props;
        this.clearTimer();
        this.timer = setTimeout(() => {
            this.setState({
                status,
            });
        }, timeout);
    }
    render() {
        const { status } = this.state;
        const { children, collapsedHeight, timeout = 0 } = this.props;
        const contentRef = this.wrapperRef.current;
        if (status !== 'unmounted') {
            return (React.createElement(ExpandingContainer, { ref: this.setContainer, expandedHeight: contentRef ? contentRef.clientHeight : undefined, collapsedHeight: collapsedHeight, status: status, timeout: timeout, style: { minHeight: collapsedHeight } },
                React.createElement("div", { ref: this.wrapperRef }, children)));
        }
        return false;
    }
}
Expander.inner = {
    get ExpandingContainer() { return ExpandingContainer; }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9FeHBhbmRlci9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxNQUFNLE1BQU0sb0JBQW9CLENBQUM7QUFpQ3hDLFNBQVMsMkJBQTJCLENBQUMsTUFBeUIsRUFBRSxjQUF1QixFQUFFLGVBQXdCO0lBQzdHLElBQUksQ0FBQyxjQUFjLEVBQUU7UUFDakIsT0FBTyxHQUFHLENBQUM7S0FDZDtJQUNELFFBQVEsTUFBTSxFQUFFO1FBQ1osS0FBSyxVQUFVO1lBQ1gsT0FBTyxHQUFHLGNBQWMsSUFBSSxDQUFDO1FBQ2pDLEtBQUssU0FBUztZQUNWLE9BQU8sTUFBTSxDQUFDO1FBQ2xCLEtBQUssY0FBYztZQUNmLE9BQU8sR0FBRyxjQUFjLElBQUksQ0FBQztRQUNqQyxLQUFLLFNBQVMsQ0FBQztRQUNmO1lBQ0ksT0FBTyxHQUFHLGVBQWUsSUFBSSxHQUFHLEVBQUUsQ0FBQztLQUMxQztBQUNMLENBQUM7QUFDRCxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBMEIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQzs7MkJBRWpHLE9BQU87Y0FDcEIsMkJBQTJCLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxlQUFlLENBQUM7R0FDL0UsQ0FBQyxDQUFDO0FBQ0w7O0dBRUc7QUFDSCxNQUFNLE9BQU8sUUFBUyxTQUFRLEtBQUssQ0FBQyxTQUF1QztJQUl2RSxZQUFZLEtBQW9CO1FBQzVCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUpULGVBQVUsR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFrQixDQUFDO1FBdUQvQyxpQkFBWSxHQUFHLENBQUMsR0FBMEIsRUFBRSxFQUFF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LENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDOUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7UUFDM0MsSUFBSSxNQUFNLEtBQUssV0FBVyxFQUFFO1lBQ3hCLE9BQU8sQ0FBQyxvQkFBQyxrQkFBa0IsSUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRTtnQkFDak8sNkJBQUssR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLElBQUcsUUFBUSxDQUFPLENBQ3hCLENBQUMsQ0FBQztTQUN0QjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7O0FBQ00sY0FBSyxHQUFHO0lBQ1gsSUFBSSxrQkFBa0IsS0FBSyxPQUFPLGtCQUErQyxDQUFDLENBQUMsQ0FBQztDQUN2RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuZXhwb3J0IGludGVyZmFjZSBFeHBhbmRlclByb3BzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGltZW91dCB0byBiZSB1c2VkIGZvciB0cmFuc2l0aW9uaW5nLlxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aW1lb3V0PzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBleHBhbmQ/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBoZWlnaHQgb2YgdGhlIGNvbnRhaW5lciB3aGVuIGNvbGxhcHNlZC5cbiAgICAgKiBAZGVmYXVsdCBgMHB4YFxuICAgICAqL1xuICAgIGNvbGxhcHNlZEhlaWdodD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbGx5IHVubW91bnQgdGhlIGV4cGFuZGFibGUgY29udGFpbmVyXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICB1bm1vdW50T25FeGl0PzogYm9vbGVhbjtcbn1cbmV4cG9ydCB0eXBlIFRyYW5zaXRpb25TdGF0dXMgPSAndW5tb3VudGVkJyB8ICdtb3VudGVkJyB8ICdleGl0ZWQnIHwgJ2VudGVyaW5nJyB8ICdlbnRlcmVkJyB8ICdleGl0aW5nJyB8ICdleGl0aW5nU3RhcnQnO1xuZXhwb3J0IGludGVyZmFjZSBFeHBhbmRlclN0YXRlIHtcbiAgICBzdGF0dXM/OiBUcmFuc2l0aW9uU3RhdHVzO1xufVxuZXhwb3J0IGludGVyZmFjZSBFeHBhbmRpbmdDb250YWluZXJQcm9wcyB7XG4gICAgZXhwYW5kZWRIZWlnaHQ/OiBudW1iZXI7XG4gICAgY29sbGFwc2VkSGVpZ2h0Pzogc3RyaW5nO1xuICAgIHN0YXR1cz86IFRyYW5zaXRpb25TdGF0dXM7XG4gICAgdGltZW91dDogbnVtYmVyO1xufVxuZnVuY3Rpb24gZ2V0RXhwYW5kaW5nQ29udGFpbmVySGVpZ2h0KHN0YXR1cz86IFRyYW5zaXRpb25TdGF0dXMsIGV4cGFuZGVkSGVpZ2h0PzogbnVtYmVyLCBjb2xsYXBzZWRIZWlnaHQ/OiBzdHJpbmcpIHtcbiAgICBpZiAoIWV4cGFuZGVkSGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiAnMCc7XG4gICAgfVxuICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgJ2VudGVyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiBgJHtleHBhbmRlZEhlaWdodH1weGA7XG4gICAgICAgIGNhc2UgJ2VudGVyZWQnOlxuICAgICAgICAgICAgcmV0dXJuICdhdXRvJztcbiAgICAgICAgY2FzZSAnZXhpdGluZ1N0YXJ0JzpcbiAgICAgICAgICAgIHJldHVybiBgJHtleHBhbmRlZEhlaWdodH1weGA7XG4gICAgICAgIGNhc2UgJ2V4aXRpbmcnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGAke2NvbGxhcHNlZEhlaWdodCB8fCAnMCd9YDtcbiAgICB9XG59XG5jb25zdCBFeHBhbmRpbmdDb250YWluZXIgPSBzdHlsZWQoJ2RpdicpPEV4cGFuZGluZ0NvbnRhaW5lclByb3BzPigoeyBzdGF0dXMsIGV4cGFuZGVkSGVpZ2h0LCBjb2xsYXBzZWRIZWlnaHQsIHRpbWVvdXQgfSkgPT4gYFxuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogJHt0aW1lb3V0fW1zO1xuICAgIGhlaWdodDogJHtnZXRFeHBhbmRpbmdDb250YWluZXJIZWlnaHQoc3RhdHVzLCBleHBhbmRlZEhlaWdodCwgY29sbGFwc2VkSGVpZ2h0KX1cbiAgYCk7XG4vKipcbiAqIEEgZnVuY3Rpb25hbCBleHBhbmRlciBjb21wb25lbnQgZm9yIGV4cGFuZGluZyAvIGNvbGxhcHNpbmcgY29udGVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIEV4cGFuZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEV4cGFuZGVyUHJvcHMsIEV4cGFuZGVyU3RhdGU+IHtcbiAgICBwcml2YXRlIHdyYXBwZXJSZWYgPSBSZWFjdC5jcmVhdGVSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG4gICAgcHJpdmF0ZSByb290Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCB8IG51bGw7XG4gICAgcHJpdmF0ZSB0aW1lcjogYW55O1xuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBFeHBhbmRlclByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHN0YXR1czogJ3VubW91bnRlZCcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZSgpO1xuICAgIH1cbiAgICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBFeHBhbmRlclByb3BzLCBwcmV2U3RhdGU6IEV4cGFuZGVyU3RhdGUpIHtcbiAgICAgICAgY29uc3QgeyBleHBhbmQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBpZiAocHJldlByb3BzLmV4cGFuZCAhPT0gZXhwYW5kIHx8IHByZXZTdGF0ZS5zdGF0dXMgIT09IHN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG4gICAgfVxuICAgIHByaXZhdGUgaGFuZGxlQ2hhbmdlKCkge1xuICAgICAgICBjb25zdCB7IGV4cGFuZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmIChleHBhbmQpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICd1bm1vdW50ZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ21vdW50ZWQnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzICE9PSAnZW50ZXJpbmcnICYmIHN0YXR1cyAhPT0gJ2VudGVyZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdlbnRlcmluZycgfHwgc3RhdHVzID09PSAnZW50ZXJlZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1FeGl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBwZXJmb3JtRW50ZXIoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc3RhdHVzOiAnZW50ZXJpbmcnLFxuICAgICAgICB9LCAoKSA9PiB0aGlzLnNldERlbGF5ZWRTdGF0dXMoJ2VudGVyZWQnKSk7XG4gICAgfVxuICAgIHByaXZhdGUgcGVyZm9ybUV4aXQoKSB7XG4gICAgICAgIGNvbnN0IHsgdW5tb3VudE9uRXhpdCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0YXR1czogJ2V4aXRpbmdTdGFydCcgfSwgKCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHN0YXR1czogJ2V4aXRpbmcnIH0sICgpID0+IHRoaXMuc2V0RGVsYXllZFN0YXR1cyh1bm1vdW50T25FeGl0ID8gJ3VubW91bnRlZCcgOiAnZXhpdGVkJykpKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBjbGVhclRpbWVyKCkge1xuICAgICAgICBpZiAodGhpcy50aW1lcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByaXZhdGUgc2V0Q29udGFpbmVyID0gKHJlZjogSFRNTERpdkVsZW1lbnQgfCBudWxsKSA9PiB7XG4gICAgICAgIHRoaXMucm9vdENvbnRhaW5lciA9IHJlZjtcbiAgICB9O1xuICAgIHByaXZhdGUgc2V0RGVsYXllZFN0YXR1cyhzdGF0dXM6IFRyYW5zaXRpb25TdGF0dXMpIHtcbiAgICAgICAgY29uc3QgeyB0aW1lb3V0ID0gMCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG4gICAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbiwgY29sbGFwc2VkSGVpZ2h0LCB0aW1lb3V0ID0gMCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgY29udGVudFJlZiA9IHRoaXMud3JhcHBlclJlZi5jdXJyZW50O1xuICAgICAgICBpZiAoc3RhdHVzICE9PSAndW5tb3VudGVkJykge1xuICAgICAgICAgICAgcmV0dXJuICg8RXhwYW5kaW5nQ29udGFpbmVyIHJlZj17dGhpcy5zZXRDb250YWluZXJ9IGV4cGFuZGVkSGVpZ2h0PXtjb250ZW50UmVmID8gY29udGVudFJlZi5jbGllbnRIZWlnaHQgOiB1bmRlZmluZWR9IGNvbGxhcHNlZEhlaWdodD17Y29sbGFwc2VkSGVpZ2h0fSBzdGF0dXM9e3N0YXR1c30gdGltZW91dD17dGltZW91dH0gc3R5bGU9e3sgbWluSGVpZ2h0OiBjb2xsYXBzZWRIZWlnaHQgfX0+XG4gICAgICAgICAgPGRpdiByZWY9e3RoaXMud3JhcHBlclJlZn0+e2NoaWxkcmVufTwvZGl2PlxuICAgICAgICA8L0V4cGFuZGluZ0NvbnRhaW5lcj4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc3RhdGljIGlubmVyID0ge1xuICAgICAgICBnZXQgRXhwYW5kaW5nQ29udGFpbmVyKCkgeyByZXR1cm4gRXhwYW5kaW5nQ29udGFpbmVyIGFzIHR5cGVvZiBFeHBhbmRpbmdDb250YWluZXI7IH1cbiAgICB9O1xufVxuIl19