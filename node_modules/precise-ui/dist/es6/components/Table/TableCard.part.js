var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled, { themed, css } from '../../utils/styled';
import { List } from '../List';
import { ListItem } from '../ListItem';
import { defaultCellRenderer, handleDataClickedEvent } from './TableShared.part';
import { distance } from '../../distance';
import { getFontStyle } from '../../textStyles';
const Container = styled.div(themed(({ theme: { ui4, text1 } }) => css `
      ${getFontStyle({ size: 'medium' })}

      position: relative;
      border: 1px solid ${ui4};
      color: ${text1};
    `));
const ContentContainer = styled.div `
  padding: ${distance.medium} ${distance.medium} ${distance.large};
`;
const PropContainer = styled.div `
  margin-bottom: ${distance.medium};

  &:last-child {
    margin-bottom: 0;
  }
`;
PropContainer.displayName = 'PropContainer';
const PropName = styled.div `
  ${getFontStyle({ size: 'xSmall' })}
`;
const PropValue = styled.div `
  ${getFontStyle({ weight: 'medium' })}
`;
const PlaceholderContainer = styled.div `
  text-align: center;
`;
const StyledListItem = styled(ListItem) `
  padding: 0;
  margin-bottom: ${distance.xlarge};
  border: none;

  &:last-child {
    margin-bottom: 0;
  }
`;
export function defaultBodyRenderer(e) {
    const CardBody = e.table;
    return React.createElement(CardBody, null, e.rows);
}
const TableCardHost = Object.assign((props => React.createElement(List, Object.assign({}, props))), { inner: {
        get List() { return List; }
    } });
export class TableCard extends React.Component {
    constructor(props) {
        super(props);
        this.renderItem = ({ item, index, keys }) => {
            const { theme } = this.props;
            return (React.createElement(StyledListItem, { theme: theme, key: index },
                React.createElement(Container, { theme: theme },
                    React.createElement(ContentContainer, { theme: theme }, this.renderItemProps(item, index, keys)))));
        };
    }
    getHeader(key) {
        const { columns } = this.props;
        if (columns) {
            const column = columns[key];
            return typeof column === 'string' ? column : column.header;
        }
        return key;
    }
    renderItemProps(item, rowIndex, keys) {
        const { columns, cellRenderer = defaultCellRenderer, data, onDataClick } = this.props;
        return keys
            .map((key, colIndex) => {
            const column = columns ? columns[key] : key;
            if (typeof column === 'string' || !column.hidden) {
                const propKey = this.getHeader(key);
                const value = cellRenderer({
                    column: colIndex,
                    row: rowIndex,
                    key,
                    value: item[key],
                    data: item,
                    render: defaultCellRenderer,
                });
                return (React.createElement(PropContainer, { key: colIndex, onClick: handleDataClickedEvent({ row: rowIndex, column: colIndex, key, data: data[rowIndex] }, onDataClick) },
                    React.createElement(PropName, null, propKey),
                    React.createElement(PropValue, null, value)));
            }
            return undefined;
        })
            .filter(m => !!m);
    }
    render() {
        const _a = this.props, { data = [], columns, placeholder, theme, cardRenderer = this.renderItem, bodyRenderer = defaultBodyRenderer } = _a, props = __rest(_a, ["data", "columns", "placeholder", "theme", "cardRenderer", "bodyRenderer"]);
        const keys = Object.keys(columns || data[0] || {});
        const rows = data.length === 0
            ? placeholder
                ? [
                    React.createElement(StyledListItem, { theme: theme, key: 0 },
                        React.createElement(PlaceholderContainer, { theme: theme }, placeholder)),
                ]
                : []
            : data.map((item, index) => cardRenderer({ item, index, keys }));
        return bodyRenderer({
            table: TableCardHost,
            props: Object.assign({ theme, borderless: true }, props),
            rows,
            mode: 'card',
        });
    }
}
TableCard.inner = {
    get StyledListItem() { return StyledListItem; },
    get Container() { return Container; },
    get ContentContainer() { return ContentContainer; },
    get PropContainer() { return PropContainer; },
    get PropName() { return PropName; },
    get PropValue() { return PropValue; },
    get PlaceholderContainer() { return PlaceholderContainer; }
};
//# sourceMappingURL=data:application/json;base64,