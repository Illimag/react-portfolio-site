var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import memoize from 'memoize-one';
import styled, { themed, css } from '../../utils/styled';
import { sortObjectList } from '../../utils/sort';
import { distance } from '../../distance';
import { defaultCellRenderer, StyledTableHead, StyledTableHeaderRow, StyledTableHeader, StyledTableRow, StyledTableFoot, defaultBodyRenderer, getColumns, getDefaultHeaderCellRenderer, handleDataClickedEvent, } from './TableShared.part';
import { getFontStyle } from '../../textStyles';
const StyledTable = styled.table(themed(({ theme, borderless, condensed }) => css `
    ${getFontStyle({ size: 'small', lineHeight: 'xSmall' })}

    table-layout: ${theme.tableLayout};
    border-collapse: collapse;
    width: 100%;
    color: ${theme.text6};
    border: ${borderless ? 'none' : theme.tableBorder};

    > thead > tr > th,
    > tbody > tr > td {
      padding: ${condensed ? `${distance.small} ${distance.large}` : theme.tableHeadPadding};

      &:not(:last-child) {
        padding-right: 0;
      }
    }
    `));
const StyledTableBody = styled.tbody ``;
const TableHost = Object.assign(((_a) => {
    var { head, foot, theme, children } = _a, props = __rest(_a, ["head", "foot", "theme", "children"]);
    return (React.createElement(StyledTable, Object.assign({ theme: theme }, props),
        head,
        React.createElement(StyledTableBody, { theme: theme }, children),
        foot));
}), { inner: {
        get StyledTable() { return StyledTable; },
        get StyledTableBody() { return StyledTableBody; }
    } });
const HiddenCell = styled.td `
  display: none;
`;
const StyledTableCell = styled.td `
  text-align: left;
`;
const StyledPlaceholderCell = styled(StyledTableCell) `
  text-align: center;
`;
function defaultRowKeyGetter({ key }) {
    return key;
}
function normalizeSortBy(sortBy) {
    if (!sortBy) {
        return undefined;
    }
    if (typeof sortBy === 'string') {
        if (sortBy[0] === '-') {
            return {
                columnKey: sortBy.substr(1),
                order: 'descending',
            };
        }
        else {
            return {
                columnKey: sortBy,
                order: 'ascending',
            };
        }
    }
    return {
        columnKey: sortBy.columnKey,
        order: sortBy.order || 'ascending',
    };
}
export class TableBasic extends React.Component {
    constructor(props) {
        super(props);
        this.getIndices = memoize((data, grouping, sorting) => sorting
            ? sortObjectList(data, sorting.columnKey, sorting.order, grouping)
            : sortObjectList(data, undefined, undefined, grouping));
        this.defaultHeadRenderer = ({ columns, sortBy, keys }) => {
            const { onSort } = this.props;
            const defaultHeaderCellRenderer = getDefaultHeaderCellRenderer((columnKey, order) => {
                this.setState({
                    sorting: {
                        columnKey,
                        order,
                    },
                }, () => {
                    if (typeof onSort === 'function') {
                        onSort({
                            column: keys.indexOf(columnKey),
                            key: columnKey,
                            order,
                        });
                    }
                });
            });
            const { indexed, theme, headerCellRenderer = defaultHeaderCellRenderer } = this.props;
            return (React.createElement(StyledTableHead, { theme: theme },
                React.createElement(StyledTableHeaderRow, { theme: theme },
                    indexed && (React.createElement(StyledTableHeader, { onClick: e => this.headerClicked(e, -1, '#'), theme: theme }, headerCellRenderer({
                        column: -1,
                        key: '',
                        row: -1,
                        value: '#',
                        render: defaultHeaderCellRenderer,
                    }))),
                    keys.map((key, cell) => {
                        const column = columns[key];
                        const hidden = typeof column !== 'string' && column.hidden;
                        if (!hidden) {
                            const name = typeof column === 'string' ? column : column.header;
                            const width = typeof column === 'string' ? undefined : column.width;
                            const sortable = this.isSortable(key, columns);
                            const direction = sortable && sortBy && (sortBy.columnKey !== key ? undefined : sortBy.order);
                            return (React.createElement(StyledTableHeader, { sortable: sortable, width: width, key: key, onClick: e => this.headerClicked(e, cell, key), theme: theme }, headerCellRenderer({
                                column: cell,
                                key,
                                row: -1,
                                sorting: direction,
                                value: name,
                                render: defaultHeaderCellRenderer,
                            })));
                        }
                        return React.createElement(HiddenCell, { key: key });
                    }))));
        };
        this.defaultFootRenderer = ({ columns, keys, sortBy }) => {
            const { indexed, theme, footerCellRenderer = defaultCellRenderer } = this.props;
            return (React.createElement(StyledTableFoot, { theme: theme },
                React.createElement(StyledTableRow, { theme: theme },
                    indexed && (React.createElement(StyledTableCell, { onClick: e => this.footerClicked(e, -1, '#'), theme: theme }, footerCellRenderer({
                        column: -1,
                        key: '',
                        row: -1,
                        value: '',
                        render: defaultCellRenderer,
                    }))),
                    keys.map((key, i) => {
                        const column = columns[key];
                        const sortable = this.isSortable(key, columns);
                        const direction = sortable && sortBy && (sortBy.columnKey !== key ? undefined : sortBy.order);
                        const hidden = typeof column !== 'string' && column.hidden;
                        if (!hidden) {
                            const name = typeof column === 'string' ? undefined : column.footer;
                            return (React.createElement(StyledTableCell, { key: key, theme: theme, onClick: e => this.footerClicked(e, i, key) }, footerCellRenderer({
                                column: i,
                                key,
                                row: -1,
                                value: name,
                                sorting: direction,
                                render: defaultCellRenderer,
                            })));
                        }
                        return React.createElement(HiddenCell, { key: key });
                    }))));
        };
        this.defaultRowRenderer = ({ cells, index }) => {
            const { theme } = this.props;
            return (React.createElement(StyledTableRow, { key: index, theme: theme }, cells));
        };
        this.state = {
            controlledSorting: false,
        };
    }
    static getDerivedStateFromProps(props, state) {
        const controlledSorting = props.sortBy !== undefined || state.controlledSorting;
        if (controlledSorting) {
            return {
                sorting: normalizeSortBy(props.sortBy),
                controlledSorting,
            };
        }
        return state;
    }
    isSortable(key, cols) {
        const { sortBy } = this.props;
        const col = cols[key];
        return !sortBy && (!col || (typeof col !== 'string' && col.sortable));
    }
    headerClicked(e, column, key) {
        const { onHeaderClick, onSort, data = [], columns } = this.props;
        e.preventDefault();
        if (typeof onHeaderClick === 'function') {
            onHeaderClick({
                column,
                key,
                row: -1,
            });
        }
        else if (this.isSortable(key, getColumns(data, columns))) {
            this.setState(({ sorting }) => {
                const isAscending = sorting && sorting.order === 'descending' && sorting.columnKey === key;
                const order = sorting && sorting.columnKey === key ? 'descending' : 'ascending';
                let newSortingValue = undefined;
                if (!isAscending && column !== -1) {
                    newSortingValue = {
                        columnKey: key,
                        order,
                    };
                }
                return { sorting: newSortingValue };
            }, () => {
                if (typeof onSort === 'function') {
                    onSort({
                        column,
                        key,
                        order: this.state.sorting && this.state.sorting.order,
                    });
                }
            });
        }
    }
    footerClicked(e, column, key) {
        e.preventDefault();
        const { onFooterClick } = this.props;
        if (typeof onFooterClick === 'function') {
            onFooterClick({
                column,
                key,
                row: -1,
            });
        }
    }
    renderCells(keys, rowIndex) {
        const { data = [], cellRenderer = defaultCellRenderer, indexed, theme, columns, onDataClick } = this.props;
        const cols = getColumns(data, columns);
        const row = data[rowIndex];
        const cells = keys.map((key, cell) => {
            const column = cols[key];
            const hidden = typeof column !== 'string' && column.hidden;
            if (!hidden) {
                return (React.createElement(StyledTableCell, { key: key, onClick: handleDataClickedEvent({ row: rowIndex, column: cell, key, data: row }, onDataClick), theme: theme }, cellRenderer({
                    column: cell,
                    key,
                    data: row,
                    row: rowIndex,
                    value: row[key],
                    render: defaultCellRenderer,
                })));
            }
            return React.createElement(HiddenCell, { key: key });
        });
        if (indexed) {
            cells.unshift(React.createElement(StyledTableCell, { key: "index#", onClick: handleDataClickedEvent({ row: rowIndex, column: -1, key: '__indexed', data: row }, onDataClick), theme: theme }, rowIndex + 1));
        }
        return cells;
    }
    renderRows(keys) {
        const { data, groupBy, indexed, placeholder, rowRenderer = this.defaultRowRenderer, getRowKey = defaultRowKeyGetter, theme, } = this.props;
        const indices = this.getIndices(data, groupBy, this.state.sorting);
        const cols = keys.length + (indexed ? 1 : 0);
        const state = {};
        if (indices.length === 0) {
            return placeholder
                ? [
                    React.createElement(StyledTableRow, { theme: theme, key: "placeholder" },
                        React.createElement(StyledPlaceholderCell, { colSpan: cols, theme: theme }, placeholder)),
                ]
                : [];
        }
        else {
            return indices.map(index => {
                const cells = this.renderCells(keys, index);
                const renderData = { theme, index, cells, data: data[index], key: index.toString(), state };
                renderData.key = getRowKey(renderData);
                return rowRenderer(renderData);
            });
        }
    }
    renderHead(keys) {
        const { headRenderer = this.defaultHeadRenderer, groupBy, data = [], columns } = this.props;
        const { sorting } = this.state;
        return headRenderer({
            columns: getColumns(data, columns),
            sortBy: sorting,
            groupBy,
            data,
            keys,
        });
    }
    renderFoot(keys) {
        const { footRenderer = this.defaultFootRenderer, groupBy, data = [], columns } = this.props;
        const { sorting } = this.state;
        return footRenderer({
            columns: getColumns(data, columns),
            sortBy: sorting,
            groupBy,
            data,
            keys,
        });
    }
    render() {
        const _a = this.props, { data = [], columns, noHeader, theme, bodyRenderer = defaultBodyRenderer, cellRenderer: _1, indexed: _2, sortBy: _3, onDataClick: _4, onFooterClick: _5, onHeaderClick: _6, placeholder: _7, columns: _8, groupBy: _9, headRenderer: _10, footRenderer: _11, headerCellRenderer: _12, footerCellRenderer: _13, onSort: _14 } = _a, props = __rest(_a, ["data", "columns", "noHeader", "theme", "bodyRenderer", "cellRenderer", "indexed", "sortBy", "onDataClick", "onFooterClick", "onHeaderClick", "placeholder", "columns", "groupBy", "headRenderer", "footRenderer", "headerCellRenderer", "footerCellRenderer", "onSort"]);
        const cols = getColumns(data, columns);
        const keys = Object.keys(cols);
        const showFooter = keys.filter(key => {
            const col = cols[key];
            return typeof col === 'object' && !!col.footer && !col.hidden;
        }).length > 0;
        const rows = this.renderRows(keys);
        return bodyRenderer({
            table: TableHost,
            props: Object.assign({ theme, head: !noHeader && this.renderHead(keys), foot: showFooter && this.renderFoot(keys) }, props),
            rows,
            mode: 'table',
        });
    }
}
TableBasic.inner = {
    get StyledTableHead() { return StyledTableHead; },
    get StyledTableHeaderRow() { return StyledTableHeaderRow; },
    get StyledTableHeader() { return StyledTableHeader; },
    get HiddenCell() { return HiddenCell; },
    get StyledTableFoot() { return StyledTableFoot; },
    get StyledTableRow() { return StyledTableRow; },
    get StyledTableCell() { return StyledTableCell; },
    get StyledPlaceholderCell() { return StyledPlaceholderCell; }
};
//# sourceMappingURL=data:application/json;base64,