import * as React from 'react';
import styled, { themed, css } from '../../utils/styled';
import { getFontStyle } from '../../textStyles';
import { IncreaseDecrease } from '../IncreaseDecrease';
import { distance } from '../../distance';
const StyledIncreaseDecrease = styled(IncreaseDecrease) `
  margin-left: ${distance.xsmall};
`;
const HeaderLabel = styled.div `
  font-size: 0;
  white-space: nowrap;

  > span {
    ${getFontStyle({ size: 'small' })}

    display: inline-block;
    vertical-align: middle;
  }
`;
export const StyledTableHead = styled.thead `
  ${getFontStyle({ weight: 'bold' })}
  
  color: ${themed(({ theme }) => theme.text6 || theme.text1)};
`;
export const StyledTableFoot = styled.tfoot `
  ${getFontStyle({ size: 'xSmall' })}
`;
export const StyledTableHeaderRow = styled.tr ``;
export const StyledTableRow = styled.tr(themed(({ theme: { ui3, ui4, text1 } }) => css `
      border-bottom: 1px solid ${ui4};
      color: ${text1};

      &:hover {
        background: ${ui3};
      }
    `));
export const StyledTableHeader = styled('th') `
  text-align: left;
  border-bottom: 1px solid ${themed(({ theme }) => theme.ui5)};
  cursor: ${({ sortable }) => (sortable ? 'pointer' : 'default')};
  box-sizing: border-box;
  ${({ width }) => (width && `width: ${width}`) || ''};
`;
export const getDefaultHeaderCellRenderer = (sort) => ({ value, sorting, column, key, }) => {
    if (column !== -1) {
        return (React.createElement(HeaderLabel, null,
            React.createElement("span", null, value),
            sorting !== false && (React.createElement(StyledIncreaseDecrease, { value: sorting ? (sorting === 'descending' ? 'decrease' : 'increase') : undefined, onIncrease: e => {
                    e.stopPropagation();
                    sort(key, 'ascending');
                }, onDecrease: e => {
                    e.stopPropagation();
                    sort(key, 'descending');
                } }))));
    }
    return value;
};
export function defaultCellRenderer({ value }) {
    switch (typeof value) {
        case 'boolean':
        case 'number':
        case 'string':
            return value.toString();
        case 'object':
            if (value) {
                return value.toString();
            }
            break;
    }
    return '';
}
export function defaultBodyRenderer(e) {
    const TableBody = e.table;
    return React.createElement(TableBody, Object.assign({}, e.props), e.rows);
}
export function getColumns(data, columns) {
    return (columns ||
        Object.keys(data[0] || {}).reduce((columns, key) => {
            columns[key] = {
                header: key,
                sortable: true,
            };
            return columns;
        }, {}));
}
export function handleDataClickedEvent(tableCellEvent, handler) {
    return (e) => {
        e.preventDefault();
        const { row, column, key, data } = tableCellEvent;
        if (typeof handler === 'function') {
            handler(Object.assign({}, tableCellEvent, { value: data && (column === -1 ? row + 1 : data[key]) }));
        }
    };
}
//# sourceMappingURL=data:application/json;base64,