import { useEffect, useState, useCallback } from 'react';
let unblock;
export function usePrompt(onRequestToLeavePage, onRequestToLeaveApp, history, isEnabled = false) {
    const [location, setLocation] = useState();
    const [currentLocation, setCurrentLocation] = useState();
    const enable = useCallback(() => {
        if (history) {
            if (unblock) {
                unblock();
            }
            unblock = history.block(loc => {
                setLocation(loc);
                setCurrentLocation(history.location);
                return onRequestToLeavePage();
            });
        }
    }, [onRequestToLeavePage, history]);
    const disable = useCallback(() => {
        if (unblock) {
            unblock();
        }
    }, []);
    useEffect(() => {
        if (isEnabled) {
            enable();
            window.addEventListener('beforeunload', handleBeforeUnload);
        }
        else {
            disable();
            window.removeEventListener('beforeunload', handleBeforeUnload);
        }
        return () => {
            disable();
            window.removeEventListener('beforeunload', handleBeforeUnload);
        };
    }, [isEnabled, enable, disable]);
    const handleBeforeUnload = useCallback((ev) => {
        if (isEnabled && onRequestToLeaveApp) {
            ev.preventDefault();
            const msg = onRequestToLeaveApp();
            ev.returnValue = msg;
            return msg;
        }
        return undefined;
    }, [isEnabled, onRequestToLeaveApp]);
    const handleContinue = () => {
        disable();
        if (location && currentLocation && history) {
            history.push(formUrl(location));
            if (currentLocation.pathname === location.pathname && isEnabled) {
                enable();
            }
        }
    };
    return [handleContinue, disable];
}
const formUrl = ({ pathname, search, hash }) => `${pathname}${search}${hash}`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlUHJvbXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvUHJvbXB0L3VzZVByb21wdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFHekQsSUFBSSxPQUFZLENBQUM7QUFFakIsTUFBTSxVQUFVLFNBQVMsQ0FDdkIsb0JBQW9DLEVBQ3BDLG1CQUFvQyxFQUNwQyxPQUF1QixFQUN2QixZQUFxQixLQUFLO0lBRTFCLE1BQU0sQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEdBQUcsUUFBUSxFQUFrQixDQUFDO0lBQzNELE1BQU0sQ0FBQyxlQUFlLEVBQUUsa0JBQWtCLENBQUMsR0FBRyxRQUFRLEVBQWtCLENBQUM7SUFFekUsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRTtRQUM5QixJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksT0FBTyxFQUFFO2dCQUNYLE9BQU8sRUFBRSxDQUFDO2FBQ1g7WUFDRCxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDNUIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQixrQkFBa0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3JDLE9BQU8sb0JBQW9CLEVBQUUsQ0FBQztZQUNoQyxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUVwQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFO1FBQy9CLElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxFQUFFLENBQUM7U0FDWDtJQUNILENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixJQUFJLFNBQVMsRUFBRTtZQUNiLE1BQU0sRUFBRSxDQUFDO1lBQ1QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1NBQzdEO2FBQU07WUFDTCxPQUFPLEVBQUUsQ0FBQztZQUNWLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztTQUNoRTtRQUNELE9BQU8sR0FBRyxFQUFFO1lBQ1YsT0FBTyxFQUFFLENBQUM7WUFDVixNQUFNLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDakUsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRWpDLE1BQU0sa0JBQWtCLEdBQUcsV0FBVyxDQUNwQyxDQUFDLEVBQXFCLEVBQUUsRUFBRTtRQUN4QixJQUFJLFNBQVMsSUFBSSxtQkFBbUIsRUFBRTtZQUNwQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDcEIsTUFBTSxHQUFHLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQztZQUNsQyxFQUFFLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztZQUNyQixPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQyxFQUNELENBQUMsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQ2pDLENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxHQUFHLEVBQUU7UUFDMUIsT0FBTyxFQUFFLENBQUM7UUFDVixJQUFJLFFBQVEsSUFBSSxlQUFlLElBQUksT0FBTyxFQUFFO1lBQzFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDaEMsSUFBSSxlQUFlLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxRQUFRLElBQUksU0FBUyxFQUFFO2dCQUMvRCxNQUFNLEVBQUUsQ0FBQzthQUNWO1NBQ0Y7SUFDSCxDQUFDLENBQUM7SUFFRixPQUFPLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFFRCxNQUFNLE9BQU8sR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQWtCLEVBQUUsRUFBRSxDQUFDLEdBQUcsUUFBUSxHQUFHLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJvbXB0SGlzdG9yeSwgUHJvbXB0TG9jYXRpb24sIFByb21wdENhbGxiYWNrIH0gZnJvbSAnLi9Qcm9tcHQudHlwZXMnO1xuXG5sZXQgdW5ibG9jazogYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUHJvbXB0KFxuICBvblJlcXVlc3RUb0xlYXZlUGFnZTogUHJvbXB0Q2FsbGJhY2ssXG4gIG9uUmVxdWVzdFRvTGVhdmVBcHA/OiBQcm9tcHRDYWxsYmFjayxcbiAgaGlzdG9yeT86IFByb21wdEhpc3RvcnksXG4gIGlzRW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlLFxuKSB7XG4gIGNvbnN0IFtsb2NhdGlvbiwgc2V0TG9jYXRpb25dID0gdXNlU3RhdGU8UHJvbXB0TG9jYXRpb24+KCk7XG4gIGNvbnN0IFtjdXJyZW50TG9jYXRpb24sIHNldEN1cnJlbnRMb2NhdGlvbl0gPSB1c2VTdGF0ZTxQcm9tcHRMb2NhdGlvbj4oKTtcblxuICBjb25zdCBlbmFibGUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGhpc3RvcnkpIHtcbiAgICAgIGlmICh1bmJsb2NrKSB7XG4gICAgICAgIHVuYmxvY2soKTtcbiAgICAgIH1cbiAgICAgIHVuYmxvY2sgPSBoaXN0b3J5LmJsb2NrKGxvYyA9PiB7XG4gICAgICAgIHNldExvY2F0aW9uKGxvYyk7XG4gICAgICAgIHNldEN1cnJlbnRMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICAgICAgcmV0dXJuIG9uUmVxdWVzdFRvTGVhdmVQYWdlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtvblJlcXVlc3RUb0xlYXZlUGFnZSwgaGlzdG9yeV0pO1xuXG4gIGNvbnN0IGRpc2FibGUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHVuYmxvY2spIHtcbiAgICAgIHVuYmxvY2soKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0VuYWJsZWQpIHtcbiAgICAgIGVuYWJsZSgpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGhhbmRsZUJlZm9yZVVubG9hZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2FibGUoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBoYW5kbGVCZWZvcmVVbmxvYWQpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGlzYWJsZSgpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGhhbmRsZUJlZm9yZVVubG9hZCk7XG4gICAgfTtcbiAgfSwgW2lzRW5hYmxlZCwgZW5hYmxlLCBkaXNhYmxlXSk7XG5cbiAgY29uc3QgaGFuZGxlQmVmb3JlVW5sb2FkID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2OiBCZWZvcmVVbmxvYWRFdmVudCkgPT4ge1xuICAgICAgaWYgKGlzRW5hYmxlZCAmJiBvblJlcXVlc3RUb0xlYXZlQXBwKSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IG1zZyA9IG9uUmVxdWVzdFRvTGVhdmVBcHAoKTtcbiAgICAgICAgZXYucmV0dXJuVmFsdWUgPSBtc2c7XG4gICAgICAgIHJldHVybiBtc2c7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgW2lzRW5hYmxlZCwgb25SZXF1ZXN0VG9MZWF2ZUFwcF0sXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQ29udGludWUgPSAoKSA9PiB7XG4gICAgZGlzYWJsZSgpO1xuICAgIGlmIChsb2NhdGlvbiAmJiBjdXJyZW50TG9jYXRpb24gJiYgaGlzdG9yeSkge1xuICAgICAgaGlzdG9yeS5wdXNoKGZvcm1VcmwobG9jYXRpb24pKTtcbiAgICAgIGlmIChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUgPT09IGxvY2F0aW9uLnBhdGhuYW1lICYmIGlzRW5hYmxlZCkge1xuICAgICAgICBlbmFibGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFtoYW5kbGVDb250aW51ZSwgZGlzYWJsZV07XG59XG5cbmNvbnN0IGZvcm1VcmwgPSAoeyBwYXRobmFtZSwgc2VhcmNoLCBoYXNoIH06IFByb21wdExvY2F0aW9uKSA9PiBgJHtwYXRobmFtZX0ke3NlYXJjaH0ke2hhc2h9YDtcbiJdfQ==