import * as React from 'react';
import { usePrompt } from './usePrompt';
import { Modal, ModalBody, ModalFooter, ModalHeader } from '../Modal';
import { Button } from '../Button';
import { getMessage } from './PromptBasic.part';
import { ActionLink } from '../ActionLink';
import { styled } from '../../utils';
import { distance } from '../../distance';
export const PromptModal = Object.assign((({ history, when, message, modalOptions }) => {
    const [showModal, setShowModal] = React.useState(false);
    const [handleContinue] = usePrompt(() => {
        setShowModal(true);
        return false;
    }, () => getMessage(message), history, when);
    return (React.createElement(DefaultModal, Object.assign({}, modalOptions, { message: getMessage(message), open: when && showModal, onConfirm: () => {
            setShowModal(false);
            handleContinue();
            modalOptions.onConfirm && modalOptions.onConfirm();
        }, onCancel: () => {
            setShowModal(false);
            modalOptions.onConfirm && modalOptions.onCancel();
        } })));
}), { inner: {
        get DefaultModal() { return DefaultModal; }
    } });
const StyledActionLink = styled(ActionLink) `
  padding: 0 ${distance.large};
`;
const DefaultModal = Object.assign((({ title, message, confirmText = 'Ok', cancelText = 'Cancel', onConfirm, onCancel, open, }) => {
    return (React.createElement(Modal, { open: open },
        React.createElement(ModalHeader, { title: title }),
        typeof message === 'string' && React.createElement(ModalBody, null, message),
        React.createElement(ModalFooter, null,
            React.createElement(StyledActionLink, { onClick: onCancel }, cancelText),
            React.createElement(Button, { onClick: onConfirm }, confirmText))));
}), { inner: {
        get Modal() { return Modal; },
        get ModalHeader() { return ModalHeader; },
        get ModalBody() { return ModalBody; },
        get ModalFooter() { return ModalFooter; },
        get StyledActionLink() { return StyledActionLink; },
        get Button() { return Button; }
    } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvbXB0TW9kYWwucGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Byb21wdC9Qcm9tcHRNb2RhbC5wYXJ0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhDLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFO0lBQ3BGLE1BQU0sQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNwQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkIsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0MsT0FBTyxDQUFDLG9CQUFDLFlBQVksb0JBQUssWUFBWSxJQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRTtZQUMzRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEIsY0FBYyxFQUFFLENBQUM7WUFDakIsWUFBWSxDQUFDLFNBQVMsSUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDdkQsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7WUFDZCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEIsWUFBWSxDQUFDLFNBQVMsSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdEQsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUNWLENBQUMsQ0FBZ0MsRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNwQyxJQUFJLFlBQVksS0FBSyxPQUFPLFlBQW1DLENBQUMsQ0FBQyxDQUFDO0tBQ3JFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7ZUFDN0IsUUFBUSxDQUFDLEtBQUs7Q0FDNUIsQ0FBQztBQUNGLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxXQUFXLEdBQUcsSUFBSSxFQUFFLFVBQVUsR0FBRyxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxJQUFJLEdBQUcsRUFBRSxFQUFFO0lBQy9ILE9BQU8sQ0FBQyxvQkFBQyxLQUFLLElBQUMsSUFBSSxFQUFFLElBQUk7UUFDdkIsb0JBQUMsV0FBVyxJQUFDLEtBQUssRUFBRSxLQUFLLEdBQUc7UUFDM0IsT0FBTyxPQUFPLEtBQUssUUFBUSxJQUFJLG9CQUFDLFNBQVMsUUFBRSxPQUFPLENBQWE7UUFDaEUsb0JBQUMsV0FBVztZQUNWLG9CQUFDLGdCQUFnQixJQUFDLE9BQU8sRUFBRSxRQUFRLElBQUcsVUFBVSxDQUFvQjtZQUNwRSxvQkFBQyxNQUFNLElBQUMsT0FBTyxFQUFFLFNBQVMsSUFBRyxXQUFXLENBQVUsQ0FDdEMsQ0FDUixDQUFDLENBQUM7QUFDZCxDQUFDLENBQXVDLEVBQUUsRUFBRSxLQUFLLEVBQUU7UUFDM0MsSUFBSSxLQUFLLEtBQUssT0FBTyxLQUFxQixDQUFDLENBQUMsQ0FBQztRQUM3QyxJQUFJLFdBQVcsS0FBSyxPQUFPLFdBQWlDLENBQUMsQ0FBQyxDQUFDO1FBQy9ELElBQUksU0FBUyxLQUFLLE9BQU8sU0FBNkIsQ0FBQyxDQUFDLENBQUM7UUFDekQsSUFBSSxXQUFXLEtBQUssT0FBTyxXQUFpQyxDQUFDLENBQUMsQ0FBQztRQUMvRCxJQUFJLGdCQUFnQixLQUFLLE9BQU8sZ0JBQTJDLENBQUMsQ0FBQyxDQUFDO1FBQzlFLElBQUksTUFBTSxLQUFLLE9BQU8sTUFBdUIsQ0FBQyxDQUFDLENBQUM7S0FDbkQsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VQcm9tcHQgfSBmcm9tICcuL3VzZVByb21wdCc7XG5pbXBvcnQgeyBQcm9tcHREZWZhdWx0TW9kYWxQcm9wcywgUHJvbXB0TW9kYWxQcm9wcyB9IGZyb20gJy4vUHJvbXB0LnR5cGVzJztcbmltcG9ydCB7IE1vZGFsLCBNb2RhbEJvZHksIE1vZGFsRm9vdGVyLCBNb2RhbEhlYWRlciB9IGZyb20gJy4uL01vZGFsJztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgeyBnZXRNZXNzYWdlIH0gZnJvbSAnLi9Qcm9tcHRCYXNpYy5wYXJ0JztcbmltcG9ydCB7IEFjdGlvbkxpbmsgfSBmcm9tICcuLi9BY3Rpb25MaW5rJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IGRpc3RhbmNlIH0gZnJvbSAnLi4vLi4vZGlzdGFuY2UnO1xuZXhwb3J0IGNvbnN0IFByb21wdE1vZGFsID0gT2JqZWN0LmFzc2lnbigoKCh7IGhpc3RvcnksIHdoZW4sIG1lc3NhZ2UsIG1vZGFsT3B0aW9ucyB9KSA9PiB7XG4gICAgY29uc3QgW3Nob3dNb2RhbCwgc2V0U2hvd01vZGFsXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbaGFuZGxlQ29udGludWVdID0gdXNlUHJvbXB0KCgpID0+IHtcbiAgICAgICAgc2V0U2hvd01vZGFsKHRydWUpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwgKCkgPT4gZ2V0TWVzc2FnZShtZXNzYWdlKSwgaGlzdG9yeSwgd2hlbik7XG4gICAgcmV0dXJuICg8RGVmYXVsdE1vZGFsIHsuLi5tb2RhbE9wdGlvbnN9IG1lc3NhZ2U9e2dldE1lc3NhZ2UobWVzc2FnZSl9IG9wZW49e3doZW4gJiYgc2hvd01vZGFsfSBvbkNvbmZpcm09eygpID0+IHtcbiAgICAgICAgc2V0U2hvd01vZGFsKGZhbHNlKTtcbiAgICAgICAgaGFuZGxlQ29udGludWUoKTtcbiAgICAgICAgbW9kYWxPcHRpb25zLm9uQ29uZmlybSAmJiBtb2RhbE9wdGlvbnMub25Db25maXJtKCk7XG4gICAgfX0gb25DYW5jZWw9eygpID0+IHtcbiAgICAgICAgc2V0U2hvd01vZGFsKGZhbHNlKTtcbiAgICAgICAgbW9kYWxPcHRpb25zLm9uQ29uZmlybSAmJiBtb2RhbE9wdGlvbnMub25DYW5jZWwoKTtcbiAgICB9fS8+KTtcbn0pIGFzIFJlYWN0LkZDPFByb21wdE1vZGFsUHJvcHM+KSwgeyBpbm5lcjoge1xuICAgICAgICBnZXQgRGVmYXVsdE1vZGFsKCkgeyByZXR1cm4gRGVmYXVsdE1vZGFsIGFzIHR5cGVvZiBEZWZhdWx0TW9kYWw7IH1cbiAgICB9IH0pO1xuY29uc3QgU3R5bGVkQWN0aW9uTGluayA9IHN0eWxlZChBY3Rpb25MaW5rKSBgXG4gIHBhZGRpbmc6IDAgJHtkaXN0YW5jZS5sYXJnZX07XG5gO1xuY29uc3QgRGVmYXVsdE1vZGFsID0gT2JqZWN0LmFzc2lnbigoKCh7IHRpdGxlLCBtZXNzYWdlLCBjb25maXJtVGV4dCA9ICdPaycsIGNhbmNlbFRleHQgPSAnQ2FuY2VsJywgb25Db25maXJtLCBvbkNhbmNlbCwgb3BlbiwgfSkgPT4ge1xuICAgIHJldHVybiAoPE1vZGFsIG9wZW49e29wZW59PlxuICAgICAgPE1vZGFsSGVhZGVyIHRpdGxlPXt0aXRsZX0vPlxuICAgICAge3R5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJyAmJiA8TW9kYWxCb2R5PnttZXNzYWdlfTwvTW9kYWxCb2R5Pn1cbiAgICAgIDxNb2RhbEZvb3Rlcj5cbiAgICAgICAgPFN0eWxlZEFjdGlvbkxpbmsgb25DbGljaz17b25DYW5jZWx9PntjYW5jZWxUZXh0fTwvU3R5bGVkQWN0aW9uTGluaz5cbiAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtvbkNvbmZpcm19Pntjb25maXJtVGV4dH08L0J1dHRvbj5cbiAgICAgIDwvTW9kYWxGb290ZXI+XG4gICAgPC9Nb2RhbD4pO1xufSkgYXMgUmVhY3QuRkM8UHJvbXB0RGVmYXVsdE1vZGFsUHJvcHM+KSwgeyBpbm5lcjoge1xuICAgICAgICBnZXQgTW9kYWwoKSB7IHJldHVybiBNb2RhbCBhcyB0eXBlb2YgTW9kYWw7IH0sXG4gICAgICAgIGdldCBNb2RhbEhlYWRlcigpIHsgcmV0dXJuIE1vZGFsSGVhZGVyIGFzIHR5cGVvZiBNb2RhbEhlYWRlcjsgfSxcbiAgICAgICAgZ2V0IE1vZGFsQm9keSgpIHsgcmV0dXJuIE1vZGFsQm9keSBhcyB0eXBlb2YgTW9kYWxCb2R5OyB9LFxuICAgICAgICBnZXQgTW9kYWxGb290ZXIoKSB7IHJldHVybiBNb2RhbEZvb3RlciBhcyB0eXBlb2YgTW9kYWxGb290ZXI7IH0sXG4gICAgICAgIGdldCBTdHlsZWRBY3Rpb25MaW5rKCkgeyByZXR1cm4gU3R5bGVkQWN0aW9uTGluayBhcyB0eXBlb2YgU3R5bGVkQWN0aW9uTGluazsgfSxcbiAgICAgICAgZ2V0IEJ1dHRvbigpIHsgcmV0dXJuIEJ1dHRvbiBhcyB0eXBlb2YgQnV0dG9uOyB9XG4gICAgfSB9KTtcbiJdfQ==