var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import onClickOutside from 'react-onclickoutside';
import { InteractiveList, } from '../InteractiveList';
import { Flyout } from '../Flyout';
const CustomWrapper = (_a) => {
    var { open: _0, border: _1, direction: _2 } = _a, props = __rest(_a, ["open", "border", "direction"]);
    return (React.createElement("div", Object.assign({}, props)));
};
CustomWrapper.displayName = 'CustomWrapper';
function getItems(group) {
    return group.map((item, index) => ({
        content: item,
        key: index.toString(),
    }));
}
class OverflowMenuInt extends React.Component {
    constructor(props) {
        super(props);
        this.handleClickOutside = () => {
            this.state.open &&
                this.setState({
                    open: false,
                });
        };
        this.toggleGroup = (e) => {
            const { open } = this.state;
            this.setState({
                open: !open,
            });
            e.preventDefault();
        };
        this.closeList = () => {
            this.setState({
                open: false,
            });
        };
        this.state = {
            open: false,
            items: getItems(props.items),
        };
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState({
            items: getItems(nextProps.items),
        });
    }
    render() {
        const { open, items } = this.state;
        const { button: toggleButton, flyoutProps, listProps: interactiveListProps } = this.props;
        return (React.createElement(Flyout, Object.assign({ noGutter: true, content: React.createElement(InteractiveList, Object.assign({ open: open, autoFocus: true, data: items, onBlur: this.closeList, onChange: this.closeList, customWrapper: CustomWrapper }, interactiveListProps)) }, flyoutProps, { open: open }),
            React.createElement("div", { onClick: this.toggleGroup }, toggleButton || '...')));
    }
}
OverflowMenuInt.inner = {
    get Flyout() { return Flyout; }
};
export const OverflowMenu = onClickOutside(OverflowMenuInt);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9PdmVyZmxvd01lbnUvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sY0FBbUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN2RSxPQUFPLEVBQW9ELGVBQWUsR0FBeUIsTUFBTSxvQkFBb0IsQ0FBQztBQUM5SCxPQUFPLEVBQUUsTUFBTSxFQUFlLE1BQU0sV0FBVyxDQUFDO0FBdUJoRCxNQUFNLGFBQWEsR0FBMkMsQ0FBQyxFQUFpRCxFQUFFLEVBQUU7UUFBckQsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsT0FBWSxFQUFWLG1EQUFRO0lBQU8sT0FBQSxDQUFDLDZDQUFTLEtBQUssRUFBRyxDQUFDLENBQUE7Q0FBQSxDQUFDO0FBQ3pJLGFBQWEsQ0FBQyxXQUFXLEdBQUcsZUFBZSxDQUFDO0FBQzVDLFNBQVMsUUFBUSxDQUFDLEtBQThCO0lBQzVDLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0IsT0FBTyxFQUFFLElBQUk7UUFDYixHQUFHLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRTtLQUN4QixDQUFDLENBQUMsQ0FBQztBQUNSLENBQUM7QUFDRCxNQUFNLGVBQWdCLFNBQVEsS0FBSyxDQUFDLFNBQStDO0lBQy9FLFlBQVksS0FBd0I7UUFDaEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBTWpCLHVCQUFrQixHQUFHLEdBQUcsRUFBRTtZQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7Z0JBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQztvQkFDVixJQUFJLEVBQUUsS0FBSztpQkFDZCxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUM7UUFNTSxnQkFBVyxHQUFHLENBQUMsQ0FBbUIsRUFBRSxFQUFFO1lBQzFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzVCLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ1YsSUFBSSxFQUFFLENBQUMsSUFBSTthQUNkLENBQUMsQ0FBQztZQUNILENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUM7UUFDTSxjQUFTLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ1YsSUFBSSxFQUFFLEtBQUs7YUFDZCxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7UUEzQkUsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNULElBQUksRUFBRSxLQUFLO1lBQ1gsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1NBQy9CLENBQUM7SUFDTixDQUFDO0lBT0QsZ0NBQWdDLENBQUMsU0FBNEI7UUFDekQsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNWLEtBQUssRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztTQUNuQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBYUQsTUFBTTtRQUNGLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNuQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMxRixPQUFPLENBQUMsb0JBQUMsTUFBTSxrQkFBQyxRQUFRLFFBQUMsT0FBTyxFQUFFLG9CQUFDLGVBQWUsa0JBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxTQUFTLFFBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUUsYUFBYSxJQUFNLG9CQUFvQixFQUFHLElBQU0sV0FBVyxJQUFFLElBQUksRUFBRSxJQUFJO1lBQzlOLDZCQUFLLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxJQUFHLFlBQVksSUFBSSxLQUFLLENBQU8sQ0FDdEQsQ0FBQyxDQUFDO0lBQ2IsQ0FBQzs7QUFDTSxxQkFBSyxHQUFHO0lBQ1gsSUFBSSxNQUFNLEtBQUssT0FBTyxNQUF1QixDQUFDLENBQUMsQ0FBQztDQUNuRCxDQUFDO0FBRU4sTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUE4RCxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgb25DbGlja091dHNpZGUsIHsgQWRkaXRpb25hbFByb3BzIH0gZnJvbSAncmVhY3Qtb25jbGlja291dHNpZGUnO1xuaW1wb3J0IHsgSW50ZXJhY3RpdmVMaXN0V3JhcHBlclByb3BzLCBJbnRlcmFjdGl2ZUxpc3RJdGVtLCBJbnRlcmFjdGl2ZUxpc3QsIEludGVyYWN0aXZlTGlzdFByb3BzLCB9IGZyb20gJy4uL0ludGVyYWN0aXZlTGlzdCc7XG5pbXBvcnQgeyBGbHlvdXQsIEZseW91dFByb3BzIH0gZnJvbSAnLi4vRmx5b3V0JztcbmV4cG9ydCBpbnRlcmZhY2UgT3ZlcmZsb3dNZW51UHJvcHMge1xuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtcyB0byBkaXNwbGF5IGluIHRoZSBtZW51LlxuICAgICAqL1xuICAgIGl0ZW1zOiBBcnJheTxSZWFjdC5SZWFjdENoaWxkPjtcbiAgICAvKipcbiAgICAgKiBUaGUgYnV0dG9uIHRvIGRpc3BsYXkgZm9yIG9wZW5pbmcgdGhlIG1lbnUuXG4gICAgICovXG4gICAgYnV0dG9uPzogUmVhY3QuUmVhY3ROb2RlO1xuICAgIC8qKlxuICAgICAqIFRoZSBwcm9wZXJ0aWVzIHRvIHBhc3Mgb24gdG8gdGhlIGZseW91dC5cbiAgICAgKi9cbiAgICBmbHlvdXRQcm9wcz86IFBhcnRpYWw8Rmx5b3V0UHJvcHM+O1xuICAgIC8qKlxuICAgICAqIFRoZSBwcm9wZXJ0aWVzIHRvIHBhc3Mgb24gdGhlIGludGVyYWN0aXZlIGxpc3QuXG4gICAgICovXG4gICAgbGlzdFByb3BzPzogUGFydGlhbDxJbnRlcmFjdGl2ZUxpc3RQcm9wcz47XG59XG5leHBvcnQgaW50ZXJmYWNlIE92ZXJmbG93TWVudVN0YXRlIHtcbiAgICBvcGVuOiBib29sZWFuO1xuICAgIGl0ZW1zOiBBcnJheTxJbnRlcmFjdGl2ZUxpc3RJdGVtPjtcbn1cbmNvbnN0IEN1c3RvbVdyYXBwZXI6IFJlYWN0LlNGQzxJbnRlcmFjdGl2ZUxpc3RXcmFwcGVyUHJvcHM+ID0gKHsgb3BlbjogXzAsIGJvcmRlcjogXzEsIGRpcmVjdGlvbjogXzIsIC4uLnByb3BzIH0pID0+ICg8ZGl2IHsuLi5wcm9wc30vPik7XG5DdXN0b21XcmFwcGVyLmRpc3BsYXlOYW1lID0gJ0N1c3RvbVdyYXBwZXInO1xuZnVuY3Rpb24gZ2V0SXRlbXMoZ3JvdXA6IEFycmF5PFJlYWN0LlJlYWN0Q2hpbGQ+KTogQXJyYXk8SW50ZXJhY3RpdmVMaXN0SXRlbT4ge1xuICAgIHJldHVybiBncm91cC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoe1xuICAgICAgICBjb250ZW50OiBpdGVtLFxuICAgICAgICBrZXk6IGluZGV4LnRvU3RyaW5nKCksXG4gICAgfSkpO1xufVxuY2xhc3MgT3ZlcmZsb3dNZW51SW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PE92ZXJmbG93TWVudVByb3BzLCBPdmVyZmxvd01lbnVTdGF0ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBPdmVyZmxvd01lbnVQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIGl0ZW1zOiBnZXRJdGVtcyhwcm9wcy5pdGVtcyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGhhbmRsZUNsaWNrT3V0c2lkZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zdGF0ZS5vcGVuICYmXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzOiBPdmVyZmxvd01lbnVQcm9wcykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGl0ZW1zOiBnZXRJdGVtcyhuZXh0UHJvcHMuaXRlbXMpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHJpdmF0ZSB0b2dnbGVHcm91cCA9IChlOiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgb3BlbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBvcGVuOiAhb3BlbixcbiAgICAgICAgfSk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuICAgIHByaXZhdGUgY2xvc2VMaXN0ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBvcGVuLCBpdGVtcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgeyBidXR0b246IHRvZ2dsZUJ1dHRvbiwgZmx5b3V0UHJvcHMsIGxpc3RQcm9wczogaW50ZXJhY3RpdmVMaXN0UHJvcHMgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiAoPEZseW91dCBub0d1dHRlciBjb250ZW50PXs8SW50ZXJhY3RpdmVMaXN0IG9wZW49e29wZW59IGF1dG9Gb2N1cyBkYXRhPXtpdGVtc30gb25CbHVyPXt0aGlzLmNsb3NlTGlzdH0gb25DaGFuZ2U9e3RoaXMuY2xvc2VMaXN0fSBjdXN0b21XcmFwcGVyPXtDdXN0b21XcmFwcGVyfSB7Li4uaW50ZXJhY3RpdmVMaXN0UHJvcHN9Lz59IHsuLi5mbHlvdXRQcm9wc30gb3Blbj17b3Blbn0+XG4gICAgICAgIDxkaXYgb25DbGljaz17dGhpcy50b2dnbGVHcm91cH0+e3RvZ2dsZUJ1dHRvbiB8fCAnLi4uJ308L2Rpdj5cbiAgICAgIDwvRmx5b3V0Pik7XG4gICAgfVxuICAgIHN0YXRpYyBpbm5lciA9IHtcbiAgICAgICAgZ2V0IEZseW91dCgpIHsgcmV0dXJuIEZseW91dCBhcyB0eXBlb2YgRmx5b3V0OyB9XG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBPdmVyZmxvd01lbnU6IFJlYWN0LkNvbXBvbmVudENsYXNzPEFkZGl0aW9uYWxQcm9wcyAmIE92ZXJmbG93TWVudVByb3BzPiA9IG9uQ2xpY2tPdXRzaWRlKE92ZXJmbG93TWVudUludCk7XG4iXX0=