var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as icons from '../Icon/icons';
import styled, { keyframes, css } from '../../utils/styled';
import { withFormContext } from '../../hoc/withFormContext';
import { ocean } from '../../colors';
import { distance } from '../../distance';
const RatingContainer = styled.div `
  display: inline-block;
`;
const SetAnimation = keyframes `
  0% {
    transform: scale(1);
  }
  25% {
    transform: scale(1.5);
  }
  50% {
    transform: scale(0.9);
  }
  75% {
    transform: scale(1.2);
  }
  100% {
    transform: scale(1);
  }
`;
const RatingElement = styled.span `
  display: inline-block;
  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};

  & + & {
    padding-left: ${props => (props.size === 'medium' ? distance.small : distance.xsmall)};
  }
`;
function getColor(theme, disabled, i, value, hover) {
    if (!disabled) {
        if (hover !== -1) {
            if (i < hover) {
                return theme.ui0;
            }
            else if (i === hover) {
                return ocean;
            }
        }
        else if (i < value) {
            return theme.ui5;
        }
        return theme.ui4;
    }
    else if (i < value) {
        return theme.ui4;
    }
    return theme.ui3;
}
function getAnimation(i, value) {
    if (i + 1 === value) {
        return css `
      ${SetAnimation} 0.5s ease-in-out
    `;
    }
    return 'none';
}
const RatingIconInt = (_a) => {
    var { disabled, index, value, hover, size } = _a, props = __rest(_a, ["disabled", "index", "value", "hover", "size"]);
    return (React.createElement(icons.Star, Object.assign({}, props)));
};
const RatingIcon = styled(RatingIconInt)(({ theme, disabled, index, value, hover, size }) => css `
    fill: ${getColor(theme, disabled, index, value, hover)};
    animation: ${getAnimation(index, value)};
    width: ${size};
    height: ${size};
  `);
class RatingInt extends React.Component {
    constructor(props) {
        super(props);
        this.hoverVoid = () => {
            this.setState({
                hover: -1,
            });
        };
        const { value, defaultValue, levels = 5 } = props;
        const changers = [];
        const hovers = [];
        for (let i = 0; i < levels; i++) {
            changers.push(() => this.updateValue(i + 1));
            hovers.push(() => this.hoverValue(i));
        }
        this.state = {
            controlled: value !== undefined,
            value: value || defaultValue || 0,
            error: props.error,
            hover: -1,
            changers,
            hovers,
        };
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.controlled) {
            this.setState({
                value: nextProps.value || 0,
                error: nextProps.error,
            });
        }
    }
    componentDidMount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.subscribe(this);
        }
    }
    componentWillUnmount() {
        const { form } = this.props;
        const { controlled } = this.state;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    }
    updateValue(value) {
        const { onChange, name = '', form } = this.props;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name,
                    value,
                });
            }
            else {
                this.setState({
                    value,
                });
            }
        }
        if (typeof onChange === 'function') {
            onChange({
                value,
            });
        }
    }
    hoverValue(value) {
        this.setState({
            hover: value,
        });
    }
    render() {
        const _a = this.props, { levels: _0, name: _1, value: _2, defaultValue: _3, onChange: _4, onInput: _5, disabled, size = 'medium', icon = 'Star' } = _a, props = __rest(_a, ["levels", "name", "value", "defaultValue", "onChange", "onInput", "disabled", "size", "icon"]);
        const { value, changers, hover, hovers } = this.state;
        const dim = size === 'medium' ? '32px' : '22px';
        return (React.createElement(RatingContainer, Object.assign({}, props), changers.map((changer, i) => (React.createElement(RatingElement, { key: i, size: size, onClick: changer, disabled: disabled, onMouseEnter: hovers[i], onMouseLeave: this.hoverVoid },
            React.createElement(RatingIcon, { index: i, disabled: disabled, value: value, hover: hover, size: dim, as: icons[icon] }))))));
    }
}
RatingInt.inner = {
    get RatingContainer() { return RatingContainer; },
    get RatingElement() { return RatingElement; },
    get RatingIcon() { return RatingIcon; }
};
/**
 * An input control for providing user ratings.
 */
export const Rating = withFormContext(RatingInt);
Rating.displayName = 'Rating';
//# sourceMappingURL=data:application/json;base64,