import * as React from 'react';
import styled, { themed, css } from '../../utils/styled';
import { distance } from '../../distance';
import { List } from '../List';
import { ListItem } from '../ListItem';
import { normalizeIndex, toggleIndex, hasIndex } from '../AccordionTable/helpers/indexHelper';
import { getFontStyle } from '../../textStyles';
const animationDuration = '0.3s';
const animationFunction = 'cubic-bezier(0, 0, 0.25, 1)';
const StyledList = styled(List) `
  overflow: visible;
`;
const StyledListItem = styled(ListItem) `
  padding: 0;
  margin-bottom: ${distance.xlarge};
  border: none;

  &:last-child {
    margin-bottom: 0;
  }
`;
const Container = styled.div `
  ${getFontStyle({ size: 'medium' })}

  position: relative;
  color: ${themed(({ theme }) => theme.text1)};
`;
const ContentContainer = styled.div(themed(({ open, theme: { ui1, ui2, ui4, ui5 } }) => css `
      ${getFontStyle({ size: 'small' })}

      padding: ${distance.medium};
      background: ${open ? ui2 : ui1};
      border: 1px solid ${open ? ui5 : ui4};
      border-bottom: ${open ? `1px solid ${ui4}` : 'none'};
    `));
const DetailsContainerAnimator = styled('div') `
  transition: all ${animationDuration} ${animationFunction};
  max-height: ${({ open }) => (open ? '10000px' : '0')};
  opacity: ${({ open }) => (open ? '1' : '0')};
  overflow: hidden;
`;
const DetailsContainer = styled.div(themed(({ open, theme: { ui4, ui5 } }) => css `
      border-right: 1px solid ${open ? ui5 : ui4};
      border-left: 1px solid ${open ? ui5 : ui4};
    `));
const ActionContainer = styled.div(themed(({ open, theme: { ui0, ui1 } }) => css `
      text-align: center;
      padding: ${distance.small} ${distance.medium};
      cursor: pointer;
      background: ${open ? ui1 : ui0};
      border: ${open ? `1px solid ${ui0}` : 'none'};
      color: ${open ? ui0 : ui1};
    `));
export class AccordionCard extends React.Component {
    constructor(props) {
        super(props);
        this.selects = [];
        this.state = {
            selectedIndexes: props.selectedIndex !== undefined
                ? normalizeIndex(props.selectedIndex)
                : normalizeIndex(props.defaultSelectedIndex),
            controlled: props.selectedIndex !== undefined,
        };
    }
    static getDerivedStateFromProps(props, state) {
        const { selectedIndex, defaultSelectedIndex } = props;
        if (state.controlled && selectedIndex !== undefined) {
            return {
                selectedIndexes: normalizeIndex(selectedIndex),
            };
        }
        else if (defaultSelectedIndex !== undefined) {
            return {
                selectedIndexes: normalizeIndex(defaultSelectedIndex),
            };
        }
        return state;
    }
    changeIndex(target) {
        const { onChange, multiple } = this.props;
        const { controlled, selectedIndexes } = this.state;
        const nextIndexes = toggleIndex(selectedIndexes, target, multiple);
        if (typeof onChange === 'function') {
            onChange({
                selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,
                previousIndex: multiple ? selectedIndexes : selectedIndexes[0] !== undefined ? selectedIndexes[0] : -1,
            });
        }
        if (!controlled) {
            this.setState({
                selectedIndexes: nextIndexes,
            });
        }
    }
    render() {
        const { selectedIndexes } = this.state;
        const { children, theme, onChange: _0, selectedIndex: _1, openLabel, closeLabel } = this.props;
        const items = [];
        const selects = this.selects;
        React.Children.forEach(children, (element, index) => {
            if (element && React.isValidElement(element)) {
                const { header } = element.props;
                const open = hasIndex(selectedIndexes, index);
                if (selects[index] === undefined) {
                    selects[index] = () => this.changeIndex(index);
                }
                items.push(React.createElement(StyledListItem, { theme: theme, key: `item-${index}` },
                    React.createElement(Container, { theme: theme },
                        React.createElement(ContentContainer, { theme: theme, open: open }, header),
                        React.createElement(DetailsContainerAnimator, { open: open },
                            React.createElement(DetailsContainer, { open: open }, element)),
                        React.createElement(ActionContainer, { theme: theme, onClick: selects[index], open: open }, open ? closeLabel || 'Close Details' : openLabel || 'Open Details'))));
            }
        });
        return React.createElement(StyledList, { borderless: true }, items);
    }
}
AccordionCard.inner = {
    get StyledListItem() { return StyledListItem; },
    get Container() { return Container; },
    get ContentContainer() { return ContentContainer; },
    get DetailsContainerAnimator() { return DetailsContainerAnimator; },
    get DetailsContainer() { return DetailsContainer; },
    get ActionContainer() { return ActionContainer; },
    get StyledList() { return StyledList; }
};
//# sourceMappingURL=data:application/json;base64,