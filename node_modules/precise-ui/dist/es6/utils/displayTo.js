import { css } from './styled';
import { ScreenSizeList } from '../common';
import { breakpoints } from '../themes';
export function getMediaQueries(breakpoints) {
    return ScreenSizeList.map(x => ({ screen: x, breakpoints: getScreenSizeBreakpoints(x, breakpoints) })).reduce((acc, next) => (next.breakpoints ? Object.assign({}, acc, { [next.screen]: getWidthBreakpointsQuery(next.breakpoints) }) : acc), {});
}
// create max-width media query including screen size
export function displayUpTo(screen) {
    const screenBreakpoints = getScreenSizeBreakpoints(screen, breakpoints);
    if (!screenBreakpoints) {
        throw new Error('Invalid screen size');
    }
    const query = getWidthBreakpointsQuery({ max: screenBreakpoints.max });
    return getMediaQuery(query);
}
// create min-width media query including screen size
export function displayFrom(screen) {
    const screenBreakpoints = getScreenSizeBreakpoints(screen, breakpoints);
    if (!screenBreakpoints) {
        throw new Error('Invalid screen size');
    }
    const query = getWidthBreakpointsQuery({ min: screenBreakpoints.min });
    return getMediaQuery(query);
}
export function displayTo(screen) {
    const screenBreakpoints = getScreenSizeBreakpoints(screen, breakpoints);
    const query = screenBreakpoints ? getWidthBreakpointsQuery(screenBreakpoints) : screen;
    return getMediaQuery(query);
}
// create media query based on previous and next breakpoints
export function getWidthBreakpointsQuery({ max, min }) {
    if (min === undefined && max === undefined) {
        throw new Error('Both breakpoints cannot be `undefined`');
    }
    if (min !== undefined && max != undefined && max < min) {
        throw new Error(`The min(${min}) breakpoint must be less than max(${max})`);
    }
    const queries = [];
    if (min !== undefined) {
        queries.push(`(min-width: ${min}px)`);
    }
    if (max !== undefined) {
        queries.push(`(max-width: ${max - 1}px)`);
    }
    return `${queries.join(' and ')}`;
}
export function getScreenSizeBreakpoints(screen, breakpoints) {
    switch (screen) {
        case 'small':
            return { max: breakpoints.medium };
        case 'medium':
            return { min: breakpoints.medium, max: breakpoints.large };
        case 'large':
            return { min: breakpoints.large, max: breakpoints.xLarge };
        case 'xLarge':
            return { min: breakpoints.xLarge, max: breakpoints.max };
        case 'max':
            return { min: breakpoints.max };
        default:
            return undefined;
    }
}
function getMediaQuery(query) {
    return (strings, ...interpolations) => css `
      @media ${query} {
        ${css(strings, ...interpolations)};
      }
    `;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheVRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2Rpc3BsYXlUby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFxQixNQUFNLFVBQVUsQ0FBQztBQUNsRCxPQUFPLEVBQTJCLGNBQWMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBSXhDLE1BQU0sVUFBVSxlQUFlLENBQUMsV0FBd0I7SUFDdEQsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLHdCQUF3QixDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQzNHLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsbUJBQU0sR0FBRyxJQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLHdCQUF3QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQy9HLEVBQUUsQ0FDSCxDQUFDO0FBQ0osQ0FBQztBQUVELHFEQUFxRDtBQUNyRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQWtCO0lBQzVDLE1BQU0saUJBQWlCLEdBQUcsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3hFLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtRQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7S0FDeEM7SUFDRCxNQUFNLEtBQUssR0FBRyx3QkFBd0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZFLE9BQU8s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QUFPLEVBQUUsR0FBRyxjQUFjLENBQUM7O0tBRXBDLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzLCBUaGVtZWRDc3NGdW5jdGlvbiB9IGZyb20gJy4vc3R5bGVkJztcbmltcG9ydCB7IFNjcmVlblNpemUsIEJyZWFrcG9pbnRzLCBTY3JlZW5TaXplTGlzdCB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBicmVha3BvaW50cyB9IGZyb20gJy4uL3RoZW1lcyc7XG5cbmV4cG9ydCB0eXBlIFdpZHRoQnJlYWtwb2ludHMgPSB7IG1pbj86IG51bWJlcjsgbWF4PzogbnVtYmVyIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZWRpYVF1ZXJpZXMoYnJlYWtwb2ludHM6IEJyZWFrcG9pbnRzKSB7XG4gIHJldHVybiBTY3JlZW5TaXplTGlzdC5tYXAoeCA9PiAoeyBzY3JlZW46IHgsIGJyZWFrcG9pbnRzOiBnZXRTY3JlZW5TaXplQnJlYWtwb2ludHMoeCwgYnJlYWtwb2ludHMpIH0pKS5yZWR1Y2UoXG4gICAgKGFjYywgbmV4dCkgPT4gKG5leHQuYnJlYWtwb2ludHMgPyB7IC4uLmFjYywgW25leHQuc2NyZWVuXTogZ2V0V2lkdGhCcmVha3BvaW50c1F1ZXJ5KG5leHQuYnJlYWtwb2ludHMpIH0gOiBhY2MpLFxuICAgIHt9LFxuICApO1xufVxuXG4vLyBjcmVhdGUgbWF4LXdpZHRoIG1lZGlhIHF1ZXJ5IGluY2x1ZGluZyBzY3JlZW4gc2l6ZVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlVcFRvKHNjcmVlbjogU2NyZWVuU2l6ZSkge1xuICBjb25zdCBzY3JlZW5CcmVha3BvaW50cyA9IGdldFNjcmVlblNpemVCcmVha3BvaW50cyhzY3JlZW4sIGJyZWFrcG9pbnRzKTtcbiAgaWYgKCFzY3JlZW5CcmVha3BvaW50cykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzY3JlZW4gc2l6ZScpO1xuICB9XG4gIGNvbnN0IHF1ZXJ5ID0gZ2V0V2lkdGhCcmVha3BvaW50c1F1ZXJ5KHsgbWF4OiBzY3JlZW5CcmVha3BvaW50cy5tYXggfSk7XG4gIHJldHVybiBnZXRNZWRpYVF1ZXJ5KHF1ZXJ5KTtcbn1cblxuLy8gY3JlYXRlIG1pbi13aWR0aCBtZWRpYSBxdWVyeSBpbmNsdWRpbmcgc2NyZWVuIHNpemVcbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5RnJvbShzY3JlZW46IFNjcmVlblNpemUpIHtcbiAgY29uc3Qgc2NyZWVuQnJlYWtwb2ludHMgPSBnZXRTY3JlZW5TaXplQnJlYWtwb2ludHMoc2NyZWVuLCBicmVha3BvaW50cyk7XG4gIGlmICghc2NyZWVuQnJlYWtwb2ludHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2NyZWVuIHNpemUnKTtcbiAgfVxuICBjb25zdCBxdWVyeSA9IGdldFdpZHRoQnJlYWtwb2ludHNRdWVyeSh7IG1pbjogc2NyZWVuQnJlYWtwb2ludHMubWluIH0pO1xuICByZXR1cm4gZ2V0TWVkaWFRdWVyeShxdWVyeSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5VG8oc2NyZWVuOiBTY3JlZW5TaXplIHwgc3RyaW5nKTogVGhlbWVkQ3NzRnVuY3Rpb248YW55PiB7XG4gIGNvbnN0IHNjcmVlbkJyZWFrcG9pbnRzID0gZ2V0U2NyZWVuU2l6ZUJyZWFrcG9pbnRzKHNjcmVlbiBhcyBTY3JlZW5TaXplLCBicmVha3BvaW50cyk7XG4gIGNvbnN0IHF1ZXJ5ID0gc2NyZWVuQnJlYWtwb2ludHMgPyBnZXRXaWR0aEJyZWFrcG9pbnRzUXVlcnkoc2NyZWVuQnJlYWtwb2ludHMpIDogc2NyZWVuO1xuICByZXR1cm4gZ2V0TWVkaWFRdWVyeShxdWVyeSk7XG59XG5cbi8vIGNyZWF0ZSBtZWRpYSBxdWVyeSBiYXNlZCBvbiBwcmV2aW91cyBhbmQgbmV4dCBicmVha3BvaW50c1xuZXhwb3J0IGZ1bmN0aW9uIGdldFdpZHRoQnJlYWtwb2ludHNRdWVyeSh7IG1heCwgbWluIH06IFdpZHRoQnJlYWtwb2ludHMpIHtcbiAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkICYmIG1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCb3RoIGJyZWFrcG9pbnRzIGNhbm5vdCBiZSBgdW5kZWZpbmVkYCcpO1xuICB9XG4gIGlmIChtaW4gIT09IHVuZGVmaW5lZCAmJiBtYXggIT0gdW5kZWZpbmVkICYmIG1heCA8IG1pbikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIG1pbigke21pbn0pIGJyZWFrcG9pbnQgbXVzdCBiZSBsZXNzIHRoYW4gbWF4KCR7bWF4fSlgKTtcbiAgfVxuXG4gIGNvbnN0IHF1ZXJpZXMgPSBbXTtcbiAgaWYgKG1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcXVlcmllcy5wdXNoKGAobWluLXdpZHRoOiAke21pbn1weClgKTtcbiAgfVxuICBpZiAobWF4ICE9PSB1bmRlZmluZWQpIHtcbiAgICBxdWVyaWVzLnB1c2goYChtYXgtd2lkdGg6ICR7bWF4IC0gMX1weClgKTtcbiAgfVxuICByZXR1cm4gYCR7cXVlcmllcy5qb2luKCcgYW5kICcpfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JlZW5TaXplQnJlYWtwb2ludHMoc2NyZWVuOiBTY3JlZW5TaXplLCBicmVha3BvaW50czogQnJlYWtwb2ludHMpOiBXaWR0aEJyZWFrcG9pbnRzIHwgdW5kZWZpbmVkIHtcbiAgc3dpdGNoIChzY3JlZW4pIHtcbiAgICBjYXNlICdzbWFsbCc6XG4gICAgICByZXR1cm4geyBtYXg6IGJyZWFrcG9pbnRzLm1lZGl1bSB9O1xuICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICByZXR1cm4geyBtaW46IGJyZWFrcG9pbnRzLm1lZGl1bSwgbWF4OiBicmVha3BvaW50cy5sYXJnZSB9O1xuICAgIGNhc2UgJ2xhcmdlJzpcbiAgICAgIHJldHVybiB7IG1pbjogYnJlYWtwb2ludHMubGFyZ2UsIG1heDogYnJlYWtwb2ludHMueExhcmdlIH07XG4gICAgY2FzZSAneExhcmdlJzpcbiAgICAgIHJldHVybiB7IG1pbjogYnJlYWtwb2ludHMueExhcmdlLCBtYXg6IGJyZWFrcG9pbnRzLm1heCB9O1xuICAgIGNhc2UgJ21heCc6XG4gICAgICByZXR1cm4geyBtaW46IGJyZWFrcG9pbnRzLm1heCB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE1lZGlhUXVlcnkocXVlcnk6IHN0cmluZyk6IFRoZW1lZENzc0Z1bmN0aW9uPGFueT4ge1xuICByZXR1cm4gKHN0cmluZ3M6IGFueSwgLi4uaW50ZXJwb2xhdGlvbnM6IEFycmF5PGFueT4pID0+XG4gICAgY3NzYFxuICAgICAgQG1lZGlhICR7cXVlcnl9IHtcbiAgICAgICAgJHtjc3Moc3RyaW5ncywgLi4uaW50ZXJwb2xhdGlvbnMpfTtcbiAgICAgIH1cbiAgICBgO1xufVxuIl19