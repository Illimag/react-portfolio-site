var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as styledComponents from 'styled-components';
import { light } from './../themes';
const { default: styled, css, keyframes, createGlobalStyle, withTheme, ThemeProvider, ThemeConsumer, ThemeContext, isStyledComponent, ServerStyleSheet, StyleSheetManager, } = styledComponents;
/*
  Helper function which insures that theme is always available in the interpolation callback.
*/
export const themed = (interpolation) => (props) => {
    const _a = props, { theme } = _a, rest = __rest(_a, ["theme"]);
    const hasNestedProps = (prop) => typeof prop === 'object' && !Array.isArray(prop) && Object.keys(prop).length > 0;
    const mergedTheme = Object.keys(theme).reduce((acc, prop) => (hasNestedProps(theme[prop]) ? (acc[prop] = Object.assign({}, acc[prop], theme[prop])) : (acc[prop] = theme[prop]), acc), Object.assign({}, light));
    return interpolation(Object.assign({ theme: mergedTheme }, rest));
};
export { css, keyframes, createGlobalStyle, withTheme, ThemeProvider, ThemeConsumer, ThemeContext, isStyledComponent, ServerStyleSheet, StyleSheetManager, };
export default styled;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL3N0eWxlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQSxPQUFPLEtBQUssZ0JBQWdCLE1BQU0sbUJBQW1CLENBQUM7QUFRdEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUdwQyxNQUFNLEVBQ0osT0FBTyxFQUFFLE1BQU0sRUFDZixHQUFHLEVBQ0gsU0FBUyxFQUNULGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsYUFBYSxFQUNiLGFBQWEsRUFDYixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLGdCQUFnQixFQUNoQixpQkFBaUIsR0FDbEIsR0FBRyxnQkFBOEQsQ0FBQztBQVFuRTs7RUFFRTtBQUNGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFRLGFBQWdFLEVBQUUsRUFBRSxDQUFDLENBQ2pHLEtBQTZDLEVBQzdDLEVBQUU7SUFDRixNQUFNLFVBQWtFLEVBQWxFLEVBQUUsS0FBSyxPQUEyRCxFQUF6RCw0QkFBeUQsQ0FBQztJQUV6RSxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFLENBQ3RDLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRW5GLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUMzQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQ2IsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMscUJBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FDOUcsb0JBQ0ksS0FBSyxFQUNYLENBQUM7SUFDRixPQUFPLGFBQWEsaUJBQUcsS0FBSyxFQUFFLFdBQVcsSUFBSyxJQUFJLEVBQUcsQ0FBQztBQUN4RCxDQUFDLENBQUM7QUFFRixPQUFPLEVBQ0wsR0FBRyxFQUNILFNBQVMsRUFDVCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULGFBQWEsRUFDYixhQUFhLEVBQ2IsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsaUJBQWlCLEdBRWxCLENBQUM7QUFFRixlQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOmltcG9ydC1ibGFja2xpc3QgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIHN0eWxlZENvbXBvbmVudHMgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgVGhlbWVkU3R5bGVkQ29tcG9uZW50c01vZHVsZSxcbiAgVGhlbWVkQ3NzRnVuY3Rpb24sXG4gIFN0eWxlZEZ1bmN0aW9uLFxuICBUaGVtZWRTdHlsZWRQcm9wcyxcbiAgSW50ZXJwb2xhdGlvbkZ1bmN0aW9uLFxufSBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBsaWdodCB9IGZyb20gJy4vLi4vdGhlbWVzJztcbmltcG9ydCB7IFByZWNpc2VUaGVtZSwgUHJlY2lzZUZ1bGxUaGVtZSwgT21pdCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNvbnN0IHtcbiAgZGVmYXVsdDogc3R5bGVkLFxuICBjc3MsXG4gIGtleWZyYW1lcyxcbiAgY3JlYXRlR2xvYmFsU3R5bGUsXG4gIHdpdGhUaGVtZSxcbiAgVGhlbWVQcm92aWRlcixcbiAgVGhlbWVDb25zdW1lcixcbiAgVGhlbWVDb250ZXh0LFxuICBpc1N0eWxlZENvbXBvbmVudCxcbiAgU2VydmVyU3R5bGVTaGVldCxcbiAgU3R5bGVTaGVldE1hbmFnZXIsXG59ID0gc3R5bGVkQ29tcG9uZW50cyBhcyBUaGVtZWRTdHlsZWRDb21wb25lbnRzTW9kdWxlPFByZWNpc2VUaGVtZT47XG5cbmV4cG9ydCB0eXBlIFdpdGhPcHRpb25hbFRoZW1lPFAgZXh0ZW5kcyB7IHRoZW1lPzogVCB9LCBUPiA9IE9taXQ8UCwgJ3RoZW1lJz4gJiB7IHRoZW1lPzogVCB9O1xuXG5leHBvcnQgdHlwZSBQcmVjaXNlSW50ZXJwb2xhdGlvbkZ1bmM8UHJvcHMsIFRoZW1lPiA9IEludGVycG9sYXRpb25GdW5jdGlvbjxcbiAgVGhlbWVkU3R5bGVkUHJvcHM8V2l0aE9wdGlvbmFsVGhlbWU8UHJvcHMsIFRoZW1lPiwgVGhlbWU+XG4+O1xuXG4vKlxuICBIZWxwZXIgZnVuY3Rpb24gd2hpY2ggaW5zdXJlcyB0aGF0IHRoZW1lIGlzIGFsd2F5cyBhdmFpbGFibGUgaW4gdGhlIGludGVycG9sYXRpb24gY2FsbGJhY2suXG4qL1xuZXhwb3J0IGNvbnN0IHRoZW1lZCA9IDxQcm9wcz4oaW50ZXJwb2xhdGlvbjogUHJlY2lzZUludGVycG9sYXRpb25GdW5jPFByb3BzLCBQcmVjaXNlRnVsbFRoZW1lPikgPT4gKFxuICBwcm9wczogVGhlbWVkU3R5bGVkUHJvcHM8UHJvcHMsIFByZWNpc2VUaGVtZT4sXG4pID0+IHtcbiAgY29uc3QgeyB0aGVtZSwgLi4ucmVzdCB9ID0gcHJvcHMgYXMgVGhlbWVkU3R5bGVkUHJvcHM8YW55LCBQcmVjaXNlVGhlbWU+O1xuXG4gIGNvbnN0IGhhc05lc3RlZFByb3BzID0gKHByb3A6IG9iamVjdCkgPT5cbiAgICB0eXBlb2YgcHJvcCA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocHJvcCkgJiYgT2JqZWN0LmtleXMocHJvcCkubGVuZ3RoID4gMDtcblxuICBjb25zdCBtZXJnZWRUaGVtZSA9IE9iamVjdC5rZXlzKHRoZW1lKS5yZWR1Y2UoXG4gICAgKGFjYywgcHJvcCkgPT4gKFxuICAgICAgaGFzTmVzdGVkUHJvcHModGhlbWVbcHJvcF0pID8gKGFjY1twcm9wXSA9IHsgLi4uYWNjW3Byb3BdLCAuLi50aGVtZVtwcm9wXSB9KSA6IChhY2NbcHJvcF0gPSB0aGVtZVtwcm9wXSksIGFjY1xuICAgICksXG4gICAgeyAuLi5saWdodCB9LFxuICApO1xuICByZXR1cm4gaW50ZXJwb2xhdGlvbih7IHRoZW1lOiBtZXJnZWRUaGVtZSwgLi4ucmVzdCB9KTtcbn07XG5cbmV4cG9ydCB7XG4gIGNzcyxcbiAga2V5ZnJhbWVzLFxuICBjcmVhdGVHbG9iYWxTdHlsZSxcbiAgd2l0aFRoZW1lLFxuICBUaGVtZVByb3ZpZGVyLFxuICBUaGVtZUNvbnN1bWVyLFxuICBUaGVtZUNvbnRleHQsXG4gIGlzU3R5bGVkQ29tcG9uZW50LFxuICBTZXJ2ZXJTdHlsZVNoZWV0LFxuICBTdHlsZVNoZWV0TWFuYWdlcixcbiAgVGhlbWVkQ3NzRnVuY3Rpb24sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7XG4iXX0=