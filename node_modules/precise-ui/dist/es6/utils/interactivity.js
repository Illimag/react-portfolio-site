function clamp(n) {
    return n > 1 ? 1 : n < 0 ? 0 : n;
}
export function trackTouch(e, changed, context = window) {
    if (e.touches.length === 1) {
        const f = e.currentTarget.getBoundingClientRect();
        const updatePosition = (e, active, moved) => {
            const t = e.touches[0] || e.changedTouches[0];
            const x = t.clientX - f.left;
            const y = t.clientY - f.top;
            const h = clamp(x / f.width);
            const v = clamp(y / f.height);
            changed(h, v, active, f, moved);
        };
        const updateHandler = (e) => updatePosition(e, true, true);
        const removeHandler = (e) => {
            context.removeEventListener('touchmove', updateHandler, true);
            context.removeEventListener('touchend', removeHandler, true);
            updatePosition(e, false, false);
        };
        context.addEventListener('touchmove', updateHandler, true);
        context.addEventListener('touchend', removeHandler, true);
        updatePosition(e, true, false);
    }
}
export function trackMouse(e, changed, context = window) {
    if (e.button === 0 && e.buttons === 1) {
        const f = e.currentTarget.getBoundingClientRect();
        const updatePosition = (e, active, moved) => {
            const x = e.clientX - f.left;
            const y = e.clientY - f.top;
            const h = clamp(x / f.width);
            const v = clamp(y / f.height);
            if (changed(h, v, active, f, moved)) {
                e.preventDefault();
            }
        };
        const updateHandler = (e) => updatePosition(e, true, true);
        const removeHandler = (e) => {
            context.removeEventListener('mousemove', updateHandler, true);
            context.removeEventListener('mouseup', removeHandler, true);
            updatePosition(e, false, false);
        };
        context.addEventListener('mousemove', updateHandler, true);
        context.addEventListener('mouseup', removeHandler, true);
        updatePosition(e, true, false);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3Rpdml0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9pbnRlcmFjdGl2aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsS0FBSyxDQUFDLENBQVM7SUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFpQkQsTUFBTSxVQUFVLFVBQVUsQ0FDeEIsQ0FBc0IsRUFDdEIsT0FBOEIsRUFDOUIsT0FBTyxHQUFHLE1BQU07SUFFaEIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQ2xELE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBeUMsRUFBRSxNQUFlLEVBQUUsS0FBYyxFQUFFLEVBQUU7WUFDcEcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDNUIsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUIsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUM7UUFDRixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQWEsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkUsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFhLEVBQUUsRUFBRTtZQUN0QyxPQUFPLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM5RCxPQUFPLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM3RCxjQUFjLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUM7UUFDRixPQUFPLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxRCxjQUFjLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNoQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUN4QixDQUFzQixFQUN0QixPQUE4QixFQUM5QixPQUFPLEdBQUcsTUFBTTtJQUVoQixJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFO1FBQ3JDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNsRCxNQUFNLGNBQWMsR0FBRyxDQUFDLENBQW1CLEVBQUUsTUFBZSxFQUFFLEtBQWMsRUFBRSxFQUFFO1lBQzlFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDNUIsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFOUIsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUNuQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDcEI7UUFDSCxDQUFDLENBQUM7UUFDRixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQWEsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkUsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFhLEVBQUUsRUFBRTtZQUN0QyxPQUFPLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM5RCxPQUFPLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM1RCxjQUFjLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUM7UUFDRixPQUFPLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6RCxjQUFjLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNoQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjbGFtcChuOiBudW1iZXIpIHtcbiAgcmV0dXJuIG4gPiAxID8gMSA6IG4gPCAwID8gMCA6IG47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlUG9zaXRpb25IYW5kbGVyIHtcbiAgKGg6IG51bWJlciwgdjogbnVtYmVyLCBhY3RpdmU6IGJvb2xlYW4sIHJlY3Q6IENsaWVudFJlY3QsIG1vdmVkOiBib29sZWFuKTogQm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIFNpbXBsZVRvdWNoRXZlbnQge1xuICB0b3VjaGVzOiBUb3VjaExpc3Q7XG4gIGNoYW5nZWRUb3VjaGVzOiBUb3VjaExpc3Q7XG59XG5cbmludGVyZmFjZSBTaW1wbGVNb3VzZUV2ZW50IHtcbiAgY2xpZW50WDogbnVtYmVyO1xuICBjbGllbnRZOiBudW1iZXI7XG4gIHByZXZlbnREZWZhdWx0KCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFja1RvdWNoPFQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oXG4gIGU6IFJlYWN0LlRvdWNoRXZlbnQ8VD4sXG4gIGNoYW5nZWQ6IFVwZGF0ZVBvc2l0aW9uSGFuZGxlcixcbiAgY29udGV4dCA9IHdpbmRvdyxcbikge1xuICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGYgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgdXBkYXRlUG9zaXRpb24gPSAoZTogU2ltcGxlVG91Y2hFdmVudCB8IFJlYWN0LlRvdWNoRXZlbnQ8VD4sIGFjdGl2ZTogYm9vbGVhbiwgbW92ZWQ6IGJvb2xlYW4pID0+IHtcbiAgICAgIGNvbnN0IHQgPSBlLnRvdWNoZXNbMF0gfHwgZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICAgIGNvbnN0IHggPSB0LmNsaWVudFggLSBmLmxlZnQ7XG4gICAgICBjb25zdCB5ID0gdC5jbGllbnRZIC0gZi50b3A7XG4gICAgICBjb25zdCBoID0gY2xhbXAoeCAvIGYud2lkdGgpO1xuICAgICAgY29uc3QgdiA9IGNsYW1wKHkgLyBmLmhlaWdodCk7XG4gICAgICBjaGFuZ2VkKGgsIHYsIGFjdGl2ZSwgZiwgbW92ZWQpO1xuICAgIH07XG4gICAgY29uc3QgdXBkYXRlSGFuZGxlciA9IChlOiBUb3VjaEV2ZW50KSA9PiB1cGRhdGVQb3NpdGlvbihlLCB0cnVlLCB0cnVlKTtcbiAgICBjb25zdCByZW1vdmVIYW5kbGVyID0gKGU6IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGNvbnRleHQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdXBkYXRlSGFuZGxlciwgdHJ1ZSk7XG4gICAgICBjb250ZXh0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgcmVtb3ZlSGFuZGxlciwgdHJ1ZSk7XG4gICAgICB1cGRhdGVQb3NpdGlvbihlLCBmYWxzZSwgZmFsc2UpO1xuICAgIH07XG4gICAgY29udGV4dC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB1cGRhdGVIYW5kbGVyLCB0cnVlKTtcbiAgICBjb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgcmVtb3ZlSGFuZGxlciwgdHJ1ZSk7XG4gICAgdXBkYXRlUG9zaXRpb24oZSwgdHJ1ZSwgZmFsc2UpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFja01vdXNlPFQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oXG4gIGU6IFJlYWN0Lk1vdXNlRXZlbnQ8VD4sXG4gIGNoYW5nZWQ6IFVwZGF0ZVBvc2l0aW9uSGFuZGxlcixcbiAgY29udGV4dCA9IHdpbmRvdyxcbikge1xuICBpZiAoZS5idXR0b24gPT09IDAgJiYgZS5idXR0b25zID09PSAxKSB7XG4gICAgY29uc3QgZiA9IGUuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCB1cGRhdGVQb3NpdGlvbiA9IChlOiBTaW1wbGVNb3VzZUV2ZW50LCBhY3RpdmU6IGJvb2xlYW4sIG1vdmVkOiBib29sZWFuKSA9PiB7XG4gICAgICBjb25zdCB4ID0gZS5jbGllbnRYIC0gZi5sZWZ0O1xuICAgICAgY29uc3QgeSA9IGUuY2xpZW50WSAtIGYudG9wO1xuICAgICAgY29uc3QgaCA9IGNsYW1wKHggLyBmLndpZHRoKTtcbiAgICAgIGNvbnN0IHYgPSBjbGFtcCh5IC8gZi5oZWlnaHQpO1xuXG4gICAgICBpZiAoY2hhbmdlZChoLCB2LCBhY3RpdmUsIGYsIG1vdmVkKSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVIYW5kbGVyID0gKGU6IE1vdXNlRXZlbnQpID0+IHVwZGF0ZVBvc2l0aW9uKGUsIHRydWUsIHRydWUpO1xuICAgIGNvbnN0IHJlbW92ZUhhbmRsZXIgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgY29udGV4dC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB1cGRhdGVIYW5kbGVyLCB0cnVlKTtcbiAgICAgIGNvbnRleHQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHJlbW92ZUhhbmRsZXIsIHRydWUpO1xuICAgICAgdXBkYXRlUG9zaXRpb24oZSwgZmFsc2UsIGZhbHNlKTtcbiAgICB9O1xuICAgIGNvbnRleHQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdXBkYXRlSGFuZGxlciwgdHJ1ZSk7XG4gICAgY29udGV4dC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgcmVtb3ZlSGFuZGxlciwgdHJ1ZSk7XG4gICAgdXBkYXRlUG9zaXRpb24oZSwgdHJ1ZSwgZmFsc2UpO1xuICB9XG59XG4iXX0=