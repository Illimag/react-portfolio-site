import * as React from 'react';
import * as styledComponents from 'styled-components';
import { ThemedCssFunction, ThemedStyledProps, InterpolationFunction } from 'styled-components';
import { PreciseTheme, PreciseFullTheme, Omit } from '../common';
declare const styled: styledComponents.ThemedBaseStyledInterface<PreciseTheme>, css: styledComponents.BaseThemedCssFunction<PreciseTheme>, keyframes: (strings: TemplateStringsArray | styledComponents.CSSKeyframes, ...interpolations: styledComponents.SimpleInterpolation[]) => styledComponents.Keyframes, createGlobalStyle: <P extends object = {}>(first: styledComponents.CSSObject | TemplateStringsArray | styledComponents.InterpolationFunction<styledComponents.ThemedStyledProps<P, PreciseTheme>>, ...interpolations: styledComponents.Interpolation<styledComponents.ThemedStyledProps<P, PreciseTheme>>[]) => styledComponents.GlobalStyleComponent<P, PreciseTheme>, withTheme: styledComponents.BaseWithThemeFnInterface<PreciseTheme>, ThemeProvider: React.ComponentClass<styledComponents.ThemeProviderProps<PreciseTheme, PreciseTheme>, any>, ThemeConsumer: React.ExoticComponent<React.ConsumerProps<PreciseTheme>>, ThemeContext: React.Context<PreciseTheme>, isStyledComponent: typeof styledComponents.isStyledComponent, ServerStyleSheet: typeof styledComponents.ServerStyleSheet, StyleSheetManager: typeof styledComponents.StyleSheetManager;
export declare type WithOptionalTheme<P extends {
    theme?: T;
}, T> = Omit<P, 'theme'> & {
    theme?: T;
};
export declare type PreciseInterpolationFunc<Props, Theme> = InterpolationFunction<ThemedStyledProps<WithOptionalTheme<Props, Theme>, Theme>>;
export declare const themed: <Props>(interpolation: styledComponents.InterpolationFunction<styledComponents.ThemedStyledProps<WithOptionalTheme<Props, PreciseFullTheme>, PreciseFullTheme>>) => (props: styledComponents.ThemedStyledProps<Props, PreciseTheme>) => styledComponents.Interpolation<styledComponents.ThemedStyledProps<WithOptionalTheme<Props, PreciseFullTheme>, PreciseFullTheme>>;
export { css, keyframes, createGlobalStyle, withTheme, ThemeProvider, ThemeConsumer, ThemeContext, isStyledComponent, ServerStyleSheet, StyleSheetManager, ThemedCssFunction, };
export default styled;
