export interface Callback {
    (arg: any): void;
}
export interface EventListeners {
    [event: string]: Array<Callback>;
}
export interface EventManager {
    on(type: string, callback: Callback): void;
    off(type: string, callback: Callback): void;
    emit<T>(type: string, arg: T): void;
}
export declare class SimpleEventManager implements EventManager {
    private readonly eventListeners;
    on<T>(type: string, callback: (arg: T) => void): void;
    off<T>(type: string, callback: (arg: T) => void): void;
    emit<T>(type: string, arg: T): void;
}
export declare const eventManagers: Array<EventManager>;
export declare function setDefaultEventManager(events: EventManager): void;
