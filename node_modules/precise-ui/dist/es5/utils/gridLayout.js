"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
function checkAllocation(layout, row, col, rowSpan, colSpan) {
    var allocations = layout.allocations, flexCols = layout.flexCols, flexRows = layout.flexRows;
    for (var r = row, l = row + rowSpan; r < l; r++) {
        if (r >= allocations.length && !flexRows) {
            return false;
        }
        var allocation = allocations[r];
        for (var c = col, l_1 = col + colSpan; c < l_1; c++) {
            if (allocation) {
                if ((c >= allocation.length && !flexCols) || allocation[c]) {
                    return false;
                }
            }
        }
    }
    return true;
}
exports.checkAllocation = checkAllocation;
function findAllocation(layout, proposedAllocation) {
    if (proposedAllocation === void 0) { proposedAllocation = {}; }
    var _a = proposedAllocation.colSpan, colSpan = _a === void 0 ? 1 : _a, _b = proposedAllocation.rowSpan, rowSpan = _b === void 0 ? 1 : _b, row = proposedAllocation.row, col = proposedAllocation.column;
    if (row === undefined || col === undefined) {
        var allocations = layout.allocations, flexCols = layout.flexCols, flexRows = layout.flexRows;
        var infty = Number.POSITIVE_INFINITY;
        var maxRows = flexRows ? infty : allocations.length - 1;
        var maxCols = flexCols ? infty : allocations[0].length - 1;
        for (var r = row || 0; r <= (row || maxRows); r++) {
            for (var c = col || 0; c <= (col || maxCols); c++) {
                if (checkAllocation(layout, r, c, rowSpan, colSpan)) {
                    return {
                        ci: c,
                        cf: c + colSpan,
                        ri: r,
                        rf: r + rowSpan,
                    };
                }
            }
        }
    }
    else {
        return {
            ci: col,
            cf: col + colSpan,
            ri: row,
            rf: row + rowSpan,
        };
    }
    return undefined;
}
exports.findAllocation = findAllocation;
function updateAllocation(allocations, allocation) {
    while (allocations.length < allocation.ri) {
        appendRow(allocations);
    }
    while (allocations[0].length < allocation.ci) {
        appendColumn(allocations);
    }
    for (var row = allocation.ri; row < allocation.rf; row++) {
        if (row === allocations.length) {
            appendRow(allocations);
        }
        for (var col = allocation.ci; col < allocation.cf; col++) {
            if (col === allocations[0].length) {
                appendColumn(allocations);
            }
            allocations[row][col] = true;
        }
    }
}
exports.updateAllocation = updateAllocation;
function createAllocations(dim) {
    var allocations = [];
    var rows = Array.isArray(dim.rows) ? dim.rows.length : dim.rows || 1;
    var cols = Array.isArray(dim.columns) ? dim.columns.length : dim.columns || 1;
    for (var row = 0; row < rows; ++row) {
        var allocation = createRow(cols);
        allocations.push(allocation);
    }
    return {
        allocations: allocations,
        flexRows: dim.rows === undefined && dim.columns !== undefined,
        flexCols: dim.columns === undefined,
    };
}
exports.createAllocations = createAllocations;
function appendColumn(allocations) {
    for (var _i = 0, allocations_1 = allocations; _i < allocations_1.length; _i++) {
        var row = allocations_1[_i];
        row.push(false);
    }
}
function appendRow(allocations) {
    var newRow = createRow(allocations[0].length);
    allocations.push(newRow);
}
function createRow(cols) {
    var allocation = [];
    for (var col = 0; col < cols; ++col) {
        allocation.push(false);
    }
    return allocation;
}
function createCell(layout, proposed) {
    if (!proposed.hidden) {
        var foundAllocation = findAllocation(layout, proposed);
        if (foundAllocation) {
            updateAllocation(layout.allocations, foundAllocation);
            return {
                column: foundAllocation.ci,
                row: foundAllocation.ri,
                colSpan: foundAllocation.cf - foundAllocation.ci,
                rowSpan: foundAllocation.rf - foundAllocation.ri,
            };
        }
        return undefined;
    }
    return {
        column: 0,
        row: 0,
        colSpan: 0,
        rowSpan: 0,
    };
}
function calcLayout(children, dim) {
    var layout = createAllocations(dim);
    var cells = [];
    React.Children.forEach(children, function (child, index) {
        if (typeof child === 'object' && child) {
            var _a = child.props, row = _a.row, column = _a.column;
            if (row !== undefined && column !== undefined) {
                cells[index] = createCell(layout, child.props);
            }
        }
    });
    React.Children.forEach(children, function (child, index) {
        if (typeof child === 'object' && child && !cells[index]) {
            cells[index] = createCell(layout, child.props);
        }
    });
    return {
        cells: cells,
        rows: layout.allocations.length,
        columns: layout.allocations[0].length,
    };
}
exports.calcLayout = calcLayout;
//# sourceMappingURL=data:application/json;base64,