"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var styled_1 = require("./styled");
var common_1 = require("../common");
var themes_1 = require("../themes");
function getMediaQueries(breakpoints) {
    return common_1.ScreenSizeList.map(function (x) { return ({ screen: x, breakpoints: getScreenSizeBreakpoints(x, breakpoints) }); }).reduce(function (acc, next) {
        var _a;
        return (next.breakpoints ? __assign({}, acc, (_a = {}, _a[next.screen] = getWidthBreakpointsQuery(next.breakpoints), _a)) : acc);
    }, {});
}
exports.getMediaQueries = getMediaQueries;
// create max-width media query including screen size
function displayUpTo(screen) {
    var screenBreakpoints = getScreenSizeBreakpoints(screen, themes_1.breakpoints);
    if (!screenBreakpoints) {
        throw new Error('Invalid screen size');
    }
    var query = getWidthBreakpointsQuery({ max: screenBreakpoints.max });
    return getMediaQuery(query);
}
exports.displayUpTo = displayUpTo;
// create min-width media query including screen size
function displayFrom(screen) {
    var screenBreakpoints = getScreenSizeBreakpoints(screen, themes_1.breakpoints);
    if (!screenBreakpoints) {
        throw new Error('Invalid screen size');
    }
    var query = getWidthBreakpointsQuery({ min: screenBreakpoints.min });
    return getMediaQuery(query);
}
exports.displayFrom = displayFrom;
function displayTo(screen) {
    var screenBreakpoints = getScreenSizeBreakpoints(screen, themes_1.breakpoints);
    var query = screenBreakpoints ? getWidthBreakpointsQuery(screenBreakpoints) : screen;
    return getMediaQuery(query);
}
exports.displayTo = displayTo;
// create media query based on previous and next breakpoints
function getWidthBreakpointsQuery(_a) {
    var max = _a.max, min = _a.min;
    if (min === undefined && max === undefined) {
        throw new Error('Both breakpoints cannot be `undefined`');
    }
    if (min !== undefined && max != undefined && max < min) {
        throw new Error("The min(" + min + ") breakpoint must be less than max(" + max + ")");
    }
    var queries = [];
    if (min !== undefined) {
        queries.push("(min-width: " + min + "px)");
    }
    if (max !== undefined) {
        queries.push("(max-width: " + (max - 1) + "px)");
    }
    return "" + queries.join(' and ');
}
exports.getWidthBreakpointsQuery = getWidthBreakpointsQuery;
function getScreenSizeBreakpoints(screen, breakpoints) {
    switch (screen) {
        case 'small':
            return { max: breakpoints.medium };
        case 'medium':
            return { min: breakpoints.medium, max: breakpoints.large };
        case 'large':
            return { min: breakpoints.large, max: breakpoints.xLarge };
        case 'xLarge':
            return { min: breakpoints.xLarge, max: breakpoints.max };
        case 'max':
            return { min: breakpoints.max };
        default:
            return undefined;
    }
}
exports.getScreenSizeBreakpoints = getScreenSizeBreakpoints;
function getMediaQuery(query) {
    return function (strings) {
        var interpolations = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            interpolations[_i - 1] = arguments[_i];
        }
        return styled_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      @media ", " {\n        ", ";\n      }\n    "], ["\n      @media ", " {\n        ", ";\n      }\n    "])), query, styled_1.css.apply(void 0, [strings].concat(interpolations)));
    };
}
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheVRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2Rpc3BsYXlUby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1DQUFrRDtBQUNsRCxvQ0FBb0U7QUFDcEUsb0NBQXdDO0FBSXhDLFNBQWdCLGVBQWUsQ0FBQyxXQUF3QjtJQUN0RCxPQUFPLHVCQUFjLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLHdCQUF3QixDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQXRFLENBQXNFLENBQUMsQ0FBQyxNQUFNLENBQzNHLFVBQUMsR0FBRyxFQUFFLElBQUk7O1FBQUssT0FBQSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFNLEdBQUcsZUFBRyxJQUFJLENBQUMsTUFBTSxJQUFHLHdCQUF3QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQWhHLENBQWdHLEVBQy9HLEVBQUUsQ0FDSCxDQUFDO0FBQ0osQ0FBQztBQUxELDBDQUtDO0FBRUQscURBQXFEO0FBQ3JELFNBQWdCLFdBQVcsQ0FBQyxNQUFrQjtJQUM1QyxJQUFNLGlCQUFpQixHQUFHLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxvQkFBVyxDQUFDLENBQUM7SUFDeEUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1FBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztLQUN4QztJQUNELElBQU0sS0FBSyxHQUFHLHdCQUF3QixDQUFDLEVBQUUsR0FBRyxFQUFFLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDdkUsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQVBELGtDQU9DO0FBRUQscURB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QUEsaUJBQ1EsRUFBSyxjQUNWLEVBQStCLGtCQUVwQyxLQUhVLEtBQUssRUFDVixZQUFHLGdCQUFDLE9BQU8sU0FBSyxjQUFjO0lBRnBDLENBSUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjc3MsIFRoZW1lZENzc0Z1bmN0aW9uIH0gZnJvbSAnLi9zdHlsZWQnO1xuaW1wb3J0IHsgU2NyZWVuU2l6ZSwgQnJlYWtwb2ludHMsIFNjcmVlblNpemVMaXN0IH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IGJyZWFrcG9pbnRzIH0gZnJvbSAnLi4vdGhlbWVzJztcblxuZXhwb3J0IHR5cGUgV2lkdGhCcmVha3BvaW50cyA9IHsgbWluPzogbnVtYmVyOyBtYXg/OiBudW1iZXIgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1lZGlhUXVlcmllcyhicmVha3BvaW50czogQnJlYWtwb2ludHMpIHtcbiAgcmV0dXJuIFNjcmVlblNpemVMaXN0Lm1hcCh4ID0+ICh7IHNjcmVlbjogeCwgYnJlYWtwb2ludHM6IGdldFNjcmVlblNpemVCcmVha3BvaW50cyh4LCBicmVha3BvaW50cykgfSkpLnJlZHVjZShcbiAgICAoYWNjLCBuZXh0KSA9PiAobmV4dC5icmVha3BvaW50cyA/IHsgLi4uYWNjLCBbbmV4dC5zY3JlZW5dOiBnZXRXaWR0aEJyZWFrcG9pbnRzUXVlcnkobmV4dC5icmVha3BvaW50cykgfSA6IGFjYyksXG4gICAge30sXG4gICk7XG59XG5cbi8vIGNyZWF0ZSBtYXgtd2lkdGggbWVkaWEgcXVlcnkgaW5jbHVkaW5nIHNjcmVlbiBzaXplXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheVVwVG8oc2NyZWVuOiBTY3JlZW5TaXplKSB7XG4gIGNvbnN0IHNjcmVlbkJyZWFrcG9pbnRzID0gZ2V0U2NyZWVuU2l6ZUJyZWFrcG9pbnRzKHNjcmVlbiwgYnJlYWtwb2ludHMpO1xuICBpZiAoIXNjcmVlbkJyZWFrcG9pbnRzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNjcmVlbiBzaXplJyk7XG4gIH1cbiAgY29uc3QgcXVlcnkgPSBnZXRXaWR0aEJyZWFrcG9pbnRzUXVlcnkoeyBtYXg6IHNjcmVlbkJyZWFrcG9pbnRzLm1heCB9KTtcbiAgcmV0dXJuIGdldE1lZGlhUXVlcnkocXVlcnkpO1xufVxuXG4vLyBjcmVhdGUgbWluLXdpZHRoIG1lZGlhIHF1ZXJ5IGluY2x1ZGluZyBzY3JlZW4gc2l6ZVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlGcm9tKHNjcmVlbjogU2NyZWVuU2l6ZSkge1xuICBjb25zdCBzY3JlZW5CcmVha3BvaW50cyA9IGdldFNjcmVlblNpemVCcmVha3BvaW50cyhzY3JlZW4sIGJyZWFrcG9pbnRzKTtcbiAgaWYgKCFzY3JlZW5CcmVha3BvaW50cykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzY3JlZW4gc2l6ZScpO1xuICB9XG4gIGNvbnN0IHF1ZXJ5ID0gZ2V0V2lkdGhCcmVha3BvaW50c1F1ZXJ5KHsgbWluOiBzY3JlZW5CcmVha3BvaW50cy5taW4gfSk7XG4gIHJldHVybiBnZXRNZWRpYVF1ZXJ5KHF1ZXJ5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlUbyhzY3JlZW46IFNjcmVlblNpemUgfCBzdHJpbmcpOiBUaGVtZWRDc3NGdW5jdGlvbjxhbnk+IHtcbiAgY29uc3Qgc2NyZWVuQnJlYWtwb2ludHMgPSBnZXRTY3JlZW5TaXplQnJlYWtwb2ludHMoc2NyZWVuIGFzIFNjcmVlblNpemUsIGJyZWFrcG9pbnRzKTtcbiAgY29uc3QgcXVlcnkgPSBzY3JlZW5CcmVha3BvaW50cyA/IGdldFdpZHRoQnJlYWtwb2ludHNRdWVyeShzY3JlZW5CcmVha3BvaW50cykgOiBzY3JlZW47XG4gIHJldHVybiBnZXRNZWRpYVF1ZXJ5KHF1ZXJ5KTtcbn1cblxuLy8gY3JlYXRlIG1lZGlhIHF1ZXJ5IGJhc2VkIG9uIHByZXZpb3VzIGFuZCBuZXh0IGJyZWFrcG9pbnRzXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2lkdGhCcmVha3BvaW50c1F1ZXJ5KHsgbWF4LCBtaW4gfTogV2lkdGhCcmVha3BvaW50cykge1xuICBpZiAobWluID09PSB1bmRlZmluZWQgJiYgbWF4ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JvdGggYnJlYWtwb2ludHMgY2Fubm90IGJlIGB1bmRlZmluZWRgJyk7XG4gIH1cbiAgaWYgKG1pbiAhPT0gdW5kZWZpbmVkICYmIG1heCAhPSB1bmRlZmluZWQgJiYgbWF4IDwgbWluKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgbWluKCR7bWlufSkgYnJlYWtwb2ludCBtdXN0IGJlIGxlc3MgdGhhbiBtYXgoJHttYXh9KWApO1xuICB9XG5cbiAgY29uc3QgcXVlcmllcyA9IFtdO1xuICBpZiAobWluICE9PSB1bmRlZmluZWQpIHtcbiAgICBxdWVyaWVzLnB1c2goYChtaW4td2lkdGg6ICR7bWlufXB4KWApO1xuICB9XG4gIGlmIChtYXggIT09IHVuZGVmaW5lZCkge1xuICAgIHF1ZXJpZXMucHVzaChgKG1heC13aWR0aDogJHttYXggLSAxfXB4KWApO1xuICB9XG4gIHJldHVybiBgJHtxdWVyaWVzLmpvaW4oJyBhbmQgJyl9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcmVlblNpemVCcmVha3BvaW50cyhzY3JlZW46IFNjcmVlblNpemUsIGJyZWFrcG9pbnRzOiBCcmVha3BvaW50cyk6IFdpZHRoQnJlYWtwb2ludHMgfCB1bmRlZmluZWQge1xuICBzd2l0Y2ggKHNjcmVlbikge1xuICAgIGNhc2UgJ3NtYWxsJzpcbiAgICAgIHJldHVybiB7IG1heDogYnJlYWtwb2ludHMubWVkaXVtIH07XG4gICAgY2FzZSAnbWVkaXVtJzpcbiAgICAgIHJldHVybiB7IG1pbjogYnJlYWtwb2ludHMubWVkaXVtLCBtYXg6IGJyZWFrcG9pbnRzLmxhcmdlIH07XG4gICAgY2FzZSAnbGFyZ2UnOlxuICAgICAgcmV0dXJuIHsgbWluOiBicmVha3BvaW50cy5sYXJnZSwgbWF4OiBicmVha3BvaW50cy54TGFyZ2UgfTtcbiAgICBjYXNlICd4TGFyZ2UnOlxuICAgICAgcmV0dXJuIHsgbWluOiBicmVha3BvaW50cy54TGFyZ2UsIG1heDogYnJlYWtwb2ludHMubWF4IH07XG4gICAgY2FzZSAnbWF4JzpcbiAgICAgIHJldHVybiB7IG1pbjogYnJlYWtwb2ludHMubWF4IH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TWVkaWFRdWVyeShxdWVyeTogc3RyaW5nKTogVGhlbWVkQ3NzRnVuY3Rpb248YW55PiB7XG4gIHJldHVybiAoc3RyaW5nczogYW55LCAuLi5pbnRlcnBvbGF0aW9uczogQXJyYXk8YW55PikgPT5cbiAgICBjc3NgXG4gICAgICBAbWVkaWEgJHtxdWVyeX0ge1xuICAgICAgICAke2NzcyhzdHJpbmdzLCAuLi5pbnRlcnBvbGF0aW9ucyl9O1xuICAgICAgfVxuICAgIGA7XG59XG4iXX0=