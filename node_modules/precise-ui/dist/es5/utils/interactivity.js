"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function clamp(n) {
    return n > 1 ? 1 : n < 0 ? 0 : n;
}
function trackTouch(e, changed, context) {
    if (context === void 0) { context = window; }
    if (e.touches.length === 1) {
        var f_1 = e.currentTarget.getBoundingClientRect();
        var updatePosition_1 = function (e, active, moved) {
            var t = e.touches[0] || e.changedTouches[0];
            var x = t.clientX - f_1.left;
            var y = t.clientY - f_1.top;
            var h = clamp(x / f_1.width);
            var v = clamp(y / f_1.height);
            changed(h, v, active, f_1, moved);
        };
        var updateHandler_1 = function (e) { return updatePosition_1(e, true, true); };
        var removeHandler_1 = function (e) {
            context.removeEventListener('touchmove', updateHandler_1, true);
            context.removeEventListener('touchend', removeHandler_1, true);
            updatePosition_1(e, false, false);
        };
        context.addEventListener('touchmove', updateHandler_1, true);
        context.addEventListener('touchend', removeHandler_1, true);
        updatePosition_1(e, true, false);
    }
}
exports.trackTouch = trackTouch;
function trackMouse(e, changed, context) {
    if (context === void 0) { context = window; }
    if (e.button === 0 && e.buttons === 1) {
        var f_2 = e.currentTarget.getBoundingClientRect();
        var updatePosition_2 = function (e, active, moved) {
            var x = e.clientX - f_2.left;
            var y = e.clientY - f_2.top;
            var h = clamp(x / f_2.width);
            var v = clamp(y / f_2.height);
            if (changed(h, v, active, f_2, moved)) {
                e.preventDefault();
            }
        };
        var updateHandler_2 = function (e) { return updatePosition_2(e, true, true); };
        var removeHandler_2 = function (e) {
            context.removeEventListener('mousemove', updateHandler_2, true);
            context.removeEventListener('mouseup', removeHandler_2, true);
            updatePosition_2(e, false, false);
        };
        context.addEventListener('mousemove', updateHandler_2, true);
        context.addEventListener('mouseup', removeHandler_2, true);
        updatePosition_2(e, true, false);
    }
}
exports.trackMouse = trackMouse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3Rpdml0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9pbnRlcmFjdGl2aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBUyxLQUFLLENBQUMsQ0FBUztJQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQWlCRCxTQUFnQixVQUFVLENBQ3hCLENBQXNCLEVBQ3RCLE9BQThCLEVBQzlCLE9BQWdCO0lBQWhCLHdCQUFBLEVBQUEsZ0JBQWdCO0lBRWhCLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzFCLElBQU0sR0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNsRCxJQUFNLGdCQUFjLEdBQUcsVUFBQyxDQUF5QyxFQUFFLE1BQWUsRUFBRSxLQUFjO1lBQ2hHLElBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QyxJQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUMsQ0FBQyxJQUFJLENBQUM7WUFDN0IsSUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBRyxHQUFDLENBQUMsR0FBRyxDQUFDO1lBQzVCLElBQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdCLElBQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzlCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FB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cikge1xuICByZXR1cm4gbiA+IDEgPyAxIDogbiA8IDAgPyAwIDogbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVQb3NpdGlvbkhhbmRsZXIge1xuICAoaDogbnVtYmVyLCB2OiBudW1iZXIsIGFjdGl2ZTogYm9vbGVhbiwgcmVjdDogQ2xpZW50UmVjdCwgbW92ZWQ6IGJvb2xlYW4pOiBCb29sZWFuO1xufVxuXG5pbnRlcmZhY2UgU2ltcGxlVG91Y2hFdmVudCB7XG4gIHRvdWNoZXM6IFRvdWNoTGlzdDtcbiAgY2hhbmdlZFRvdWNoZXM6IFRvdWNoTGlzdDtcbn1cblxuaW50ZXJmYWNlIFNpbXBsZU1vdXNlRXZlbnQge1xuICBjbGllbnRYOiBudW1iZXI7XG4gIGNsaWVudFk6IG51bWJlcjtcbiAgcHJldmVudERlZmF1bHQoKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYWNrVG91Y2g8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgZTogUmVhY3QuVG91Y2hFdmVudDxUPixcbiAgY2hhbmdlZDogVXBkYXRlUG9zaXRpb25IYW5kbGVyLFxuICBjb250ZXh0ID0gd2luZG93LFxuKSB7XG4gIGlmIChlLnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgZiA9IGUuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCB1cGRhdGVQb3NpdGlvbiA9IChlOiBTaW1wbGVUb3VjaEV2ZW50IHwgUmVhY3QuVG91Y2hFdmVudDxUPiwgYWN0aXZlOiBib29sZWFuLCBtb3ZlZDogYm9vbGVhbikgPT4ge1xuICAgICAgY29uc3QgdCA9IGUudG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgY29uc3QgeCA9IHQuY2xpZW50WCAtIGYubGVmdDtcbiAgICAgIGNvbnN0IHkgPSB0LmNsaWVudFkgLSBmLnRvcDtcbiAgICAgIGNvbnN0IGggPSBjbGFtcCh4IC8gZi53aWR0aCk7XG4gICAgICBjb25zdCB2ID0gY2xhbXAoeSAvIGYuaGVpZ2h0KTtcbiAgICAgIGNoYW5nZWQoaCwgdiwgYWN0aXZlLCBmLCBtb3ZlZCk7XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVIYW5kbGVyID0gKGU6IFRvdWNoRXZlbnQpID0+IHVwZGF0ZVBvc2l0aW9uKGUsIHRydWUsIHRydWUpO1xuICAgIGNvbnN0IHJlbW92ZUhhbmRsZXIgPSAoZTogVG91Y2hFdmVudCkgPT4ge1xuICAgICAgY29udGV4dC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB1cGRhdGVIYW5kbGVyLCB0cnVlKTtcbiAgICAgIGNvbnRleHQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCByZW1vdmVIYW5kbGVyLCB0cnVlKTtcbiAgICAgIHVwZGF0ZVBvc2l0aW9uKGUsIGZhbHNlLCBmYWxzZSk7XG4gICAgfTtcbiAgICBjb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHVwZGF0ZUhhbmRsZXIsIHRydWUpO1xuICAgIGNvbnRleHQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCByZW1vdmVIYW5kbGVyLCB0cnVlKTtcbiAgICB1cGRhdGVQb3NpdGlvbihlLCB0cnVlLCBmYWxzZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYWNrTW91c2U8VCBleHRlbmRzIEhUTUxFbGVtZW50PihcbiAgZTogUmVhY3QuTW91c2VFdmVudDxUPixcbiAgY2hhbmdlZDogVXBkYXRlUG9zaXRpb25IYW5kbGVyLFxuICBjb250ZXh0ID0gd2luZG93LFxuKSB7XG4gIGlmIChlLmJ1dHRvbiA9PT0gMCAmJiBlLmJ1dHRvbnMgPT09IDEpIHtcbiAgICBjb25zdCBmID0gZS5jdXJyZW50VGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHVwZGF0ZVBvc2l0aW9uID0gKGU6IFNpbXBsZU1vdXNlRXZlbnQsIGFjdGl2ZTogYm9vbGVhbiwgbW92ZWQ6IGJvb2xlYW4pID0+IHtcbiAgICAgIGNvbnN0IHggPSBlLmNsaWVudFggLSBmLmxlZnQ7XG4gICAgICBjb25zdCB5ID0gZS5jbGllbnRZIC0gZi50b3A7XG4gICAgICBjb25zdCBoID0gY2xhbXAoeCAvIGYud2lkdGgpO1xuICAgICAgY29uc3QgdiA9IGNsYW1wKHkgLyBmLmhlaWdodCk7XG5cbiAgICAgIGlmIChjaGFuZ2VkKGgsIHYsIGFjdGl2ZSwgZiwgbW92ZWQpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZUhhbmRsZXIgPSAoZTogTW91c2VFdmVudCkgPT4gdXBkYXRlUG9zaXRpb24oZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgY29uc3QgcmVtb3ZlSGFuZGxlciA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICBjb250ZXh0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHVwZGF0ZUhhbmRsZXIsIHRydWUpO1xuICAgICAgY29udGV4dC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgcmVtb3ZlSGFuZGxlciwgdHJ1ZSk7XG4gICAgICB1cGRhdGVQb3NpdGlvbihlLCBmYWxzZSwgZmFsc2UpO1xuICAgIH07XG4gICAgY29udGV4dC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB1cGRhdGVIYW5kbGVyLCB0cnVlKTtcbiAgICBjb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCByZW1vdmVIYW5kbGVyLCB0cnVlKTtcbiAgICB1cGRhdGVQb3NpdGlvbihlLCB0cnVlLCBmYWxzZSk7XG4gIH1cbn1cbiJdfQ==