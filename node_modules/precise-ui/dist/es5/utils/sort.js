"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function compareGeneralNormal(a, b) {
    return a < b;
}
function compareGeneralReverse(a, b) {
    return b < a;
}
function compareArrayNormal(a, b) {
    // treat empty array like undefined
    var aIsUndefined = !a || a.length === 0;
    var bIsUndefined = !b || b.length === 0;
    if (aIsUndefined && bIsUndefined) {
        return false;
    }
    else {
        if (aIsUndefined) {
            return false;
        }
        else if (bIsUndefined) {
            return true;
        }
        else {
            return !!a && !!b && a < b; // double checking for not undefined is needed to satisfy typescript
        }
    }
}
exports.compareArrayNormal = compareArrayNormal;
function compareArrayReverse(a, b) {
    return compareArrayNormal(b, a);
}
function compareStringNormal(a, b) {
    if (!a && !b) {
        return false;
    }
    else {
        if (!a) {
            return false;
        }
        else if (!b) {
            return true;
        }
        else {
            return a.localeCompare(b) === -1;
        }
    }
}
function compareStringReverse(a, b) {
    if (!a && !b) {
        return false;
    }
    else {
        if (!b) {
            return true;
        }
        else if (!a) {
            return false;
        }
        else {
            return b.localeCompare(a) === -1;
        }
    }
}
function compareNumberNormal(a, b) {
    if (a === b) {
        return false;
    }
    if (a === 0) {
        return !b || a < b;
    }
    if (!a) {
        return false;
    }
    if (!b && b !== 0) {
        return true;
    }
    return a < b;
}
exports.compareNumberNormal = compareNumberNormal;
function compareNumberReverse(a, b) {
    return compareNumberNormal(b, a);
}
function getComparer(exampleValue, reverse) {
    if (typeof exampleValue === 'string') {
        return reverse ? compareStringReverse : compareStringNormal;
    }
    if (typeof exampleValue === 'number') {
        return reverse ? compareNumberReverse : compareNumberNormal;
    }
    if (Array.isArray(exampleValue)) {
        return reverse ? compareArrayReverse : compareArrayNormal;
    }
    return reverse ? compareGeneralReverse : compareGeneralNormal;
}
function getCombinedComparer(keyValues, groupValues, reverse) {
    var hasGroups = groupValues && groupValues.length;
    var keycomparer = getComparer(keyValues.find(function (item) { return !!item; }), reverse);
    if (hasGroups) {
        var groupcomparer_1 = getComparer(groupValues.find(function (item) { return !!item; }), false); // Group order is always ascending
        return function (a, b) {
            return groupcomparer_1(groupValues[a], groupValues[b]) ||
                (groupValues[a] === groupValues[b] && keycomparer(keyValues[a], keyValues[b]));
        };
    }
    else {
        return function (a, b) { return keycomparer(keyValues[a], keyValues[b]); };
    }
}
function sorter(indices, items, key, groupBy, reverse) {
    if (reverse === void 0) { reverse = false; }
    var keyValues = items.map(function (item) { return item[key]; });
    var n = keyValues.length;
    if (n > 1) {
        var groupValues = groupBy ? items.map(function (item) { return item[groupBy]; }) : [];
        var comparer = getCombinedComparer(keyValues, groupValues, reverse);
        for (var i = 1; i < n; i++) {
            for (var j = 0; j < i; j++) {
                var ij = indices[j];
                var ii = indices[i];
                if (comparer(ii, ij)) {
                    indices[i] = ij;
                    indices[j] = ii;
                }
            }
        }
    }
}
function sortObjectList(items, sortBy, order, groupBy) {
    if (order === void 0) { order = 'ascending'; }
    var result = items.map(function (_, index) { return index; });
    if (sortBy) {
        sorter(result, items, sortBy, groupBy, order === 'descending');
    }
    else if (groupBy) {
        sorter(result, items, groupBy, undefined, order === 'descending');
    }
    return result;
}
exports.sortObjectList = sortObjectList;
//# sourceMappingURL=data:application/json;base64,