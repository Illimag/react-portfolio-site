"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_1 = require("./unit");
var stripUnit_1 = require("./stripUnit");
function calcBasis(myBase) {
    var myUnit = unit_1.unit(myBase);
    var num = stripUnit_1.stripUnit(myBase);
    // If the base font size is a %, then multiply it by 16px
    // This is because 100% font size = 16px in most all browsers
    if (myUnit === '%') {
        return (num / 100) * 16;
    }
    // Using rem as base allows correct scaling
    if (myUnit === 'rem') {
        return num * 16;
    }
    return num;
}
function convertArray(input, baseNum) {
    var output = [];
    for (var _i = 0, input_1 = input; _i < input_1.length; _i++) {
        var value = input_1[_i];
        output.push(stripUnit_1.stripUnit(value) / baseNum + "rem");
    }
    return output.join(' ');
}
/**
 * Converts one or more pixel values into matching rem values.
 * @param values One or more values to convert.
 * @param base The base value to use when calculating the `rem`.
 */
function remCalc(input, base) {
    // If no base is defined, defer to the global font size
    var myBase = base || '16px';
    var baseNum = calcBasis(myBase);
    if (typeof input === 'string') {
        return stripUnit_1.stripUnit(input) / baseNum + "rem";
    }
    return convertArray(input, baseNum);
}
exports.remCalc = remCalc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtQ2FsYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9yZW1DYWxjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBQzlCLHlDQUF3QztBQUV4QyxTQUFTLFNBQVMsQ0FBQyxNQUFjO0lBQy9CLElBQU0sTUFBTSxHQUFHLFdBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixJQUFNLEdBQUcsR0FBRyxxQkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTlCLHlEQUF5RDtJQUN6RCw2REFBNkQ7SUFDN0QsSUFBSSxNQUFNLEtBQUssR0FBRyxFQUFFO1FBQ2xCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ3pCO0lBRUQsMkNBQTJDO0lBQzNDLElBQUksTUFBTSxLQUFLLEtBQUssRUFBRTtRQUNwQixPQUFPLEdBQUcsR0FBRyxFQUFFLENBQUM7S0FDakI7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxLQUFvQixFQUFFLE9BQWU7SUFDekQsSUFBTSxNQUFNLEdBQWtCLEVBQUUsQ0FBQztJQUVqQyxLQUFvQixVQUFLLEVBQUwsZUFBSyxFQUFMLG1CQUFLLEVBQUwsSUFBSyxFQUFFO1FBQXRCLElBQU0sS0FBSyxjQUFBO1FBQ2QsTUFBTSxDQUFDLElBQUksQ0FBSSxxQkFBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sUUFBSyxDQUFDLENBQUM7S0FDakQ7SUFFRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixPQUFPLENBQUMsS0FBNkIsRUFBRSxJQUFhO0lBQ2xFLHVEQUF1RDtJQUN2RCxJQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksTUFBTSxDQUFDO0lBQzlCLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVsQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixPQUFVLHFCQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxRQUFLLENBQUM7S0FDM0M7SUFFRCxPQUFPLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQVZELDBCQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5pdCB9IGZyb20gJy4vdW5pdCc7XG5pbXBvcnQgeyBzdHJpcFVuaXQgfSBmcm9tICcuL3N0cmlwVW5pdCc7XG5cbmZ1bmN0aW9uIGNhbGNCYXNpcyhteUJhc2U6IHN0cmluZykge1xuICBjb25zdCBteVVuaXQgPSB1bml0KG15QmFzZSk7XG4gIGNvbnN0IG51bSA9IHN0cmlwVW5pdChteUJhc2UpO1xuXG4gIC8vIElmIHRoZSBiYXNlIGZvbnQgc2l6ZSBpcyBhICUsIHRoZW4gbXVsdGlwbHkgaXQgYnkgMTZweFxuICAvLyBUaGlzIGlzIGJlY2F1c2UgMTAwJSBmb250IHNpemUgPSAxNnB4IGluIG1vc3QgYWxsIGJyb3dzZXJzXG4gIGlmIChteVVuaXQgPT09ICclJykge1xuICAgIHJldHVybiAobnVtIC8gMTAwKSAqIDE2O1xuICB9XG5cbiAgLy8gVXNpbmcgcmVtIGFzIGJhc2UgYWxsb3dzIGNvcnJlY3Qgc2NhbGluZ1xuICBpZiAobXlVbml0ID09PSAncmVtJykge1xuICAgIHJldHVybiBudW0gKiAxNjtcbiAgfVxuXG4gIHJldHVybiBudW07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRBcnJheShpbnB1dDogQXJyYXk8c3RyaW5nPiwgYmFzZU51bTogbnVtYmVyKSB7XG4gIGNvbnN0IG91dHB1dDogQXJyYXk8c3RyaW5nPiA9IFtdO1xuXG4gIGZvciAoY29uc3QgdmFsdWUgb2YgaW5wdXQpIHtcbiAgICBvdXRwdXQucHVzaChgJHtzdHJpcFVuaXQodmFsdWUpIC8gYmFzZU51bX1yZW1gKTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQuam9pbignICcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIG9uZSBvciBtb3JlIHBpeGVsIHZhbHVlcyBpbnRvIG1hdGNoaW5nIHJlbSB2YWx1ZXMuXG4gKiBAcGFyYW0gdmFsdWVzIE9uZSBvciBtb3JlIHZhbHVlcyB0byBjb252ZXJ0LlxuICogQHBhcmFtIGJhc2UgVGhlIGJhc2UgdmFsdWUgdG8gdXNlIHdoZW4gY2FsY3VsYXRpbmcgdGhlIGByZW1gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtQ2FsYyhpbnB1dDogQXJyYXk8c3RyaW5nPiB8IHN0cmluZywgYmFzZT86IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIElmIG5vIGJhc2UgaXMgZGVmaW5lZCwgZGVmZXIgdG8gdGhlIGdsb2JhbCBmb250IHNpemVcbiAgY29uc3QgbXlCYXNlID0gYmFzZSB8fCAnMTZweCc7XG4gIGNvbnN0IGJhc2VOdW0gPSBjYWxjQmFzaXMobXlCYXNlKTtcblxuICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBgJHtzdHJpcFVuaXQoaW5wdXQpIC8gYmFzZU51bX1yZW1gO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRBcnJheShpbnB1dCwgYmFzZU51bSk7XG59XG4iXX0=