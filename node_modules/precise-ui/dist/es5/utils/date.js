"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var format_1 = require("date-fns/esm/format");
var isAfter_1 = require("date-fns/esm/isAfter");
var isValid_1 = require("date-fns/esm/isValid");
var parse_1 = require("date-fns/esm/parse");
var longFormatters = require('date-fns/_lib/format/longFormatters');
// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
/**
 * Date parsing
 * @param value
 * @param dateFormat
 * @param locale
 * @param strictParsing
 */
function parseDate(value, dateFormat, locale, strictParsing) {
    // tslint:disable-next-line
    var parsedDate = null;
    var localeObject = getLocaleObject(locale || '') || getDefaultLocale();
    var strictParsingValueMatch = true;
    if (Array.isArray(dateFormat)) {
        dateFormat.forEach(function (df) {
            var tryParseDate = parse_1.default(value, df, new Date(), { locale: localeObject });
            if (strictParsing) {
                strictParsingValueMatch = isValid(tryParseDate) && value === format_1.default(tryParseDate, df);
            }
            if (isValid(tryParseDate) && strictParsingValueMatch) {
                parsedDate = tryParseDate;
            }
        });
        return parsedDate;
    }
    parsedDate = parse_1.default(value, dateFormat, new Date(), { locale: localeObject });
    if (strictParsing) {
        strictParsingValueMatch = isValid(parsedDate) && value === format_1.default(parsedDate, dateFormat);
    }
    else if (!isValid(parsedDate)) {
        var match = dateFormat.match(longFormattingTokensRegExp);
        var updatedDateFormat = match
            ? match
                .map(function (substring) {
                var firstCharacter = substring[0];
                if (firstCharacter === 'p' || firstCharacter === 'P') {
                    var longFormatter = longFormatters[firstCharacter];
                    return localeObject ? longFormatter(substring, localeObject.formatLong) : firstCharacter;
                }
                return substring;
            })
                .join('')
            : dateFormat;
        if (value.length > 0) {
            parsedDate = parse_1.default(value, updatedDateFormat.slice(0, value.length), new Date());
        }
        if (!isValid(parsedDate)) {
            parsedDate = new Date(value);
        }
    }
    // tslint:disable-next-line
    return isValid(parsedDate) && strictParsingValueMatch ? parsedDate : null;
}
exports.parseDate = parseDate;
function getIsoDateFormat() {
    return 'yyyy-MM-dd';
}
exports.getIsoDateFormat = getIsoDateFormat;
function getLocaleObject(localeSpec) {
    if (typeof localeSpec === 'string') {
        // Treat it as a locale name registered by registerLocale
        // tslint:disable-next-line
        return window.__localeData__ ? window.__localeData__[localeSpec] : null;
    }
    else {
        // Treat it as a raw date-fns locale object
        return localeSpec;
    }
}
function getDefaultLocale() {
    return window.__localeId__;
}
function isValid(date) {
    return isValid_1.default(date) && isAfter_1.default(date, new Date('1/1/1000'));
}
/**
 * Date Formatting
 * @param date Date
 * @param formatStr string
 * @param locale string
 */
function formatDate(date, formatStr, locale) {
    if (locale === void 0) { locale = ''; }
    if (locale === 'en') {
        return format_1.default(date, formatStr);
    }
    var localeObj = getLocaleObject(locale);
    if (locale && !localeObj) {
        console.warn("A locale object was not found for the provided string [\"" + locale + "\"].");
    }
    if (!localeObj && !!getDefaultLocale() && !!getLocaleObject(getDefaultLocale())) {
        localeObj = getLocaleObject(getDefaultLocale());
    }
    return format_1.default(date, formatStr, {
        // tslint:disable-next-line
        locale: localeObj ? localeObj : null,
    });
}
function safeDateFormat(date, _a) {
    var dateFormat = _a.dateFormat, locale = _a.locale;
    return (date && formatDate(date, Array.isArray(dateFormat) ? dateFormat[0] : dateFormat, locale)) || '';
}
exports.safeDateFormat = safeDateFormat;
//# sourceMappingURL=data:application/json;base64,