"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var withResponsive_1 = require("./withResponsive");
var withInner_1 = require("typescript-plugin-inner-jsx/withInner");
/**
 * Provides `mode` prop (if it's not passed manually) to the component depending on
 * the container width. When mode switches, HOC calls `onModeChange` prop if it is
 * defined.
 * @param getMode The function to determine the mode from the given width.
 * @returns A constructor function to wrap a component with the `mode` prop determined
 * by the getMode function.
 */
function withResponsiveMode(getMode) {
    return function (Component) {
        return withInner_1.withInner(withResponsive_1.withResponsive(/** @class */ (function (_super) {
            __extends(ModeProvider, _super);
            function ModeProvider(props) {
                var _this = _super.call(this, props) || this;
                _this.state = {
                    controlled: props.mode !== undefined,
                    mode: props.mode || getMode(props.dimensions && props.dimensions.width),
                };
                return _this;
            }
            ModeProvider.getDerivedStateFromProps = function (props, state) {
                var change = props.onModeChange;
                if (state.controlled) {
                    var mode = props.mode || getMode();
                    if (state.mode !== mode) {
                        if (typeof change === 'function') {
                            change({ mode: mode });
                        }
                        return {
                            mode: mode,
                        };
                    }
                }
                else {
                    var dimensions = props.dimensions;
                    var mode = state.mode;
                    var nextMode = getMode(dimensions && dimensions.width);
                    if (mode !== nextMode) {
                        if (typeof change === 'function') {
                            change({ mode: nextMode });
                        }
                        return {
                            mode: nextMode,
                        };
                    }
                }
                return {};
            };
            ModeProvider.prototype.componentDidMount = function () {
                var mode = this.state.mode;
                var onModeChange = this.props.onModeChange;
                if (mode && typeof onModeChange === 'function') {
                    onModeChange({ mode: mode });
                }
            };
            ModeProvider.prototype.render = function () {
                var mode = this.state.mode;
                var props = __assign({}, this.props, { mode: mode });
                return React.createElement(Component, __assign({}, props));
            };
            return ModeProvider;
        }(React.Component))), { Component: Component });
    };
}
exports.withResponsiveMode = withResponsiveMode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aFJlc3BvbnNpdmVNb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hvYy93aXRoUmVzcG9uc2l2ZU1vZGUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkJBQStCO0FBQy9CLG1EQUE0RTtBQUM1RSxtRUFBa0U7QUFlbEU7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLGtCQUFrQixDQUFTLE9BQTRCO0lBQ25FLE9BQU8sVUFBMkMsU0FBc0M7UUFDcEYsT0FBTyxxQkFBUyxDQUFDLCtCQUFjO1lBQTRCLGdDQUFrRDtZQUN6RyxzQkFBWSxLQUFhO2dCQUF6QixZQUNJLGtCQUFNLEtBQUssQ0FBQyxTQUtmO2dCQUpHLEtBQUksQ0FBQyxLQUFLLEdBQUc7b0JBQ1QsVUFBVSxFQUFFLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUztvQkFDcEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7aUJBQzFFLENBQUM7O1lBQ04sQ0FBQztZQUNNLHFDQUF3QixHQUEvQixVQUFnQyxLQUFhLEVBQUUsS0FBZ0M7Z0JBQzNFLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7Z0JBQ2xDLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtvQkFDbEIsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxPQUFPLEVBQUUsQ0FBQztvQkFDckMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTt3QkFDckIsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7NEJBQzlCLE1BQU0sQ0FBQyxFQUFFLElBQUksTUFBQSxFQUFFLENBQUMsQ0FBQzt5QkFDcEI7d0JBQ0QsT0FBTzs0QkFDSCxJQUFJLE1BQUE7eUJBQ1AsQ0FBQztxQkFDTDtpQkFDSjtxQkFDSTtvQkFDTyxJQUFBLDZCQUFVLENBQVc7b0JBQ3JCLElBQUEsaUJBQUksQ0FBVztvQkFDdkIsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3pELElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTt3QkFDbkIsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7NEJBQzlCLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO3lCQUM5Qjt3QkFDRCxPQUFPOzRCQUNILElBQUksRUFBRSxRQUFRO3lCQUNqQixDQUFDO3FCQUNMO2lCQUNKO2dCQUNELE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQztZQUNELHdDQUFpQixHQUFqQjtnQkFDWSxJQUFBLHNCQUFJLENBQWdCO2dCQUNwQixJQUFBLHNDQUFZLENBQWdCO2dCQUNwQyxJQUFJLElBQUksSUFBSSxPQUFPLFlBQVksS0FBSyxVQUFVLEVBQUU7b0JBQzVDLFlBQVksQ0FBQyxFQUFFLElBQUksTUFBQSxFQUFFLENBQUMsQ0FBQztpQkFDMUI7WUFDTCxDQUFDO1lBQ0QsNkJBQU0sR0FBTjtnQkFDWSxJQUFBLHNCQUFJLENBQWdCO2dCQUM1QixJQUFNLEtBQUssZ0JBQ0osSUFBSSxDQUFDLEtBQUssSUFDYixJQUFJLE1BQUEsR0FDUCxDQUFDO2dCQUNGLE9BQU8sb0JBQUMsU0FBUyxlQUFLLEtBQUssRUFBRyxDQUFDO1lBQ25DLENBQUM7WUFDTCxtQkFBQztRQUFELENBQUMsQUFuRCtCLENBQTJCLEtBQUssQ0FBQyxTQUFTLEdBbUR4RSxFQUFFLEVBQUUsU0FBUyxXQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztBQUNOLENBQUM7QUF2REQsZ0RBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgd2l0aFJlc3BvbnNpdmUsIFJlc3BvbnNpdmVDb21wb25lbnRQcm9wcyB9IGZyb20gJy4vd2l0aFJlc3BvbnNpdmUnO1xuaW1wb3J0IHsgd2l0aElubmVyIH0gZnJvbSAndHlwZXNjcmlwdC1wbHVnaW4taW5uZXItanN4L3dpdGhJbm5lcic7XG5leHBvcnQgaW50ZXJmYWNlIEdldE1vZGVUeXBlPFRNb2Rlcz4ge1xuICAgICh3aWR0aD86IG51bWJlcik6IFRNb2Rlcztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZUNoYW5nZWRFdmVudDxUTW9kZXM+IHtcbiAgICBtb2RlOiBUTW9kZXM7XG59XG5leHBvcnQgaW50ZXJmYWNlIE1vZGVQcm92aWRlclByb3BzPFRNb2Rlcz4gZXh0ZW5kcyBSZXNwb25zaXZlQ29tcG9uZW50UHJvcHMge1xuICAgIG1vZGU/OiBUTW9kZXM7XG4gICAgb25Nb2RlQ2hhbmdlPyhlOiBNb2RlQ2hhbmdlZEV2ZW50PFRNb2Rlcz4pOiB2b2lkO1xufVxuZXhwb3J0IGludGVyZmFjZSBNb2RlUHJvdmlkZXJTdGF0ZTxUTW9kZXM+IHtcbiAgICBjb250cm9sbGVkOiBib29sZWFuO1xuICAgIG1vZGU6IFRNb2Rlcztcbn1cbi8qKlxuICogUHJvdmlkZXMgYG1vZGVgIHByb3AgKGlmIGl0J3Mgbm90IHBhc3NlZCBtYW51YWxseSkgdG8gdGhlIGNvbXBvbmVudCBkZXBlbmRpbmcgb25cbiAqIHRoZSBjb250YWluZXIgd2lkdGguIFdoZW4gbW9kZSBzd2l0Y2hlcywgSE9DIGNhbGxzIGBvbk1vZGVDaGFuZ2VgIHByb3AgaWYgaXQgaXNcbiAqIGRlZmluZWQuXG4gKiBAcGFyYW0gZ2V0TW9kZSBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHRoZSBtb2RlIGZyb20gdGhlIGdpdmVuIHdpZHRoLlxuICogQHJldHVybnMgQSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0byB3cmFwIGEgY29tcG9uZW50IHdpdGggdGhlIGBtb2RlYCBwcm9wIGRldGVybWluZWRcbiAqIGJ5IHRoZSBnZXRNb2RlIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aFJlc3BvbnNpdmVNb2RlPFRNb2Rlcz4oZ2V0TW9kZTogR2V0TW9kZVR5cGU8VE1vZGVzPikge1xuICAgIHJldHVybiA8VFByb3BzIGV4dGVuZHMgTW9kZVByb3ZpZGVyUHJvcHM8VE1vZGVzPj4oQ29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPFRQcm9wcz4pID0+IHtcbiAgICAgICAgcmV0dXJuIHdpdGhJbm5lcih3aXRoUmVzcG9uc2l2ZShjbGFzcyBNb2RlUHJvdmlkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VFByb3BzLCBNb2RlUHJvdmlkZXJTdGF0ZTxUTW9kZXM+PiB7XG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcihwcm9wczogVFByb3BzKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZWQ6IHByb3BzLm1vZGUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogcHJvcHMubW9kZSB8fCBnZXRNb2RlKHByb3BzLmRpbWVuc2lvbnMgJiYgcHJvcHMuZGltZW5zaW9ucy53aWR0aCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHM6IFRQcm9wcywgc3RhdGU6IE1vZGVQcm92aWRlclN0YXRlPFRNb2Rlcz4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBwcm9wcy5vbk1vZGVDaGFuZ2U7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmNvbnRyb2xsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kZSA9IHByb3BzLm1vZGUgfHwgZ2V0TW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUubW9kZSAhPT0gbW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UoeyBtb2RlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkaW1lbnNpb25zIH0gPSBwcm9wcztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBtb2RlIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dE1vZGUgPSBnZXRNb2RlKGRpbWVuc2lvbnMgJiYgZGltZW5zaW9ucy53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RlICE9PSBuZXh0TW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UoeyBtb2RlOiBuZXh0TW9kZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogbmV4dE1vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbW9kZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9uTW9kZUNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgICAgICBpZiAobW9kZSAmJiB0eXBlb2Ygb25Nb2RlQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uTW9kZUNoYW5nZSh7IG1vZGUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbW9kZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30vPjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHsgQ29tcG9uZW50IH0pO1xuICAgIH07XG59XG4iXX0=