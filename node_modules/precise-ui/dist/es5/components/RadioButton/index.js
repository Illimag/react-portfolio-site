"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var Label_1 = require("../Label");
var InputError_1 = require("../InputError");
var contexts_1 = require("../../contexts");
var distance_1 = require("../../distance");
var PaddedContainer_1 = require("../PaddedContainer");
var RadioButtonContainer = styled_1.default('div')(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  position: relative;\n  display: inline-block;\n  opacity: ", ";\n  cursor: ", ";\n\n  + div {\n    margin-left: ", ";\n  }\n"], ["\n  position: relative;\n  display: inline-block;\n  opacity: ", ";\n  cursor: ", ";\n\n  + div {\n    margin-left: ", ";\n  }\n"])), function (props) { return (props.disabled ? '0.5' : '1.0'); }, function (props) { return (props.disabled ? 'not-allowed' : 'pointer'); }, distance_1.distance.large);
var RadioButtonCircle = styled_1.default.div(function (_a) {
    var _b = _a.theme, ui0 = _b.ui0, ui5 = _b.ui5;
    return "\n  outline: 0;\n  display: inline-block;\n  vertical-align: middle;\n  position: relative;\n  overflow: hidden;\n  flex: 0 0 auto;\n  padding: 0.1875em;\n  border: 2px solid " + ui5 + ";\n  border-radius: 100%;\n\n  &:focus {\n    box-shadow: 0px 0px 0px 2px " + ui0 + ";\n  }\n\n  + label {\n    vertical-align: middle;\n  }\n";
});
var SelectMark = styled_1.default('div')(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  width: 0.5em;\n  height: 0.5em;\n  border-radius: 50%;\n  outline: 0;\n  background: ", ";\n  transition: all 0.2s;\n  opacity: ", ";\n  transform: ", ";\n"], ["\n  width: 0.5em;\n  height: 0.5em;\n  border-radius: 50%;\n  outline: 0;\n  background: ", ";\n  transition: all 0.2s;\n  opacity: ", ";\n  transform: ", ";\n"])), styled_1.themed(function (_a) {
    var theme = _a.theme;
    return theme.ui5;
}), function (props) { return (props.selected ? '1' : '0'); }, function (props) { return (props.selected ? 'scale(1)' : 'scale(0)'); });
var FlexContainer = styled_1.default.div(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  display: flex;\n  align-items: ", ";\n"], ["\n  display: flex;\n  align-items: ", ";\n"])), function (_a) {
    var withError = _a.withError;
    return (withError ? 'start' : 'center');
});
/**
 * The RadioButton input.
 */
var RadioButton = /** @class */ (function (_super) {
    __extends(RadioButton, _super);
    function RadioButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RadioButton.prototype.render = function () {
        var _a = this.props, children = _a.children, props = __rest(_a, ["children"]);
        return (React.createElement(contexts_1.FormContext.Consumer, null, function (form) { return (React.createElement(contexts_1.RadioButtonGroupContext.Consumer, null, function (ctx) { return (React.createElement(RadioButtonInt, __assign({ group: ctx, form: form }, props), children)); })); }));
    };
    RadioButton.inner = {
        get RadioButtonInt() { return RadioButtonInt; }
    };
    return RadioButton;
}(React.PureComponent));
exports.RadioButton = RadioButton;
var RadioButtonInt = /** @class */ (function (_super) {
    __extends(RadioButtonInt, _super);
    function RadioButtonInt(props) {
        var _this = _super.call(this, props) || this;
        _this.setValue = function (value) {
            var onChange = _this.props.onChange;
            _this.setState({
                value: value,
            });
            if (typeof onChange === 'function') {
                onChange({
                    value: value,
                });
            }
        };
        _this.select = function () {
            var _a = _this.props, onChange = _a.onChange, disabled = _a.disabled, group = _a.group, form = _a.form, _b = _a.name, name = _b === void 0 ? '' : _b;
            var _c = _this.state, controlled = _c.controlled, value = _c.value;
            if (!disabled && !value) {
                if (!controlled) {
                    if (group) {
                        group.select(_this);
                    }
                    else if (form) {
                        form.change({
                            name: name,
                            value: value,
                        });
                    }
                    else {
                        _this.setState({
                            value: true,
                        });
                    }
                }
                if (typeof onChange === 'function') {
                    onChange({
                        value: true,
                    });
                }
            }
        };
        _this.onSelected = function (e) {
            _this.select();
            e.preventDefault();
        };
        _this.control = function (e) {
            switch (e.keyCode) {
                case 13 /* enter */:
                case 32 /* space */:
                    _this.select();
                    break;
                default:
                    return;
            }
            e.stopPropagation();
            e.preventDefault();
        };
        _this.name = props.name;
        _this.state = {
            controlled: props.value !== undefined,
            value: props.value || props.defaultValue || false,
            error: props.error,
        };
        return _this;
    }
    RadioButtonInt.prototype.UNSAFE_componentWillReceiveProps = function (_a) {
        var _b = _a.value, value = _b === void 0 ? false : _b, error = _a.error;
        if (this.state.controlled) {
            this.setState({ value: value });
        }
        this.setState({ error: error });
    };
    RadioButtonInt.prototype.componentDidMount = function () {
        var _a = this.props, group = _a.group, form = _a.form;
        var controlled = this.state.controlled;
        if (!controlled) {
            if (group) {
                group.subscribe(this);
            }
            else if (form) {
                form.subscribe(this);
            }
        }
    };
    RadioButtonInt.prototype.componentWillUnmount = function () {
        var _a = this.props, group = _a.group, form = _a.form;
        var controlled = this.state.controlled;
        if (!controlled) {
            if (group) {
                group.unsubscribe(this);
            }
            else if (form) {
                form.unsubscribe(this);
            }
        }
    };
    RadioButtonInt.prototype.render = function () {
        var _a = this.props, children = _a.children, disabled = _a.disabled, theme = _a.theme, _0 = _a.value, _1 = _a.defaultValue, _2 = _a.onChange, _3 = _a.group, _4 = _a.form, _5 = _a.name, props = __rest(_a, ["children", "disabled", "theme", "value", "defaultValue", "onChange", "group", "form", "name"]);
        var _b = this.state, value = _b.value, error = _b.error;
        var containerProps = __assign({}, props, { theme: theme, onClick: this.onSelected, disabled: disabled });
        var circleProps = {
            selected: value,
            disabled: !!disabled,
            onKeyDown: this.control,
            theme: theme,
            tabIndex: disabled ? undefined : 0,
        };
        var Error = error && (React.createElement(PaddedContainer_1.PaddedContainer, { top: "xsmall", bottom: "xsmall" },
            React.createElement(InputError_1.InputError, null, error)));
        return (React.createElement(RadioButtonContainer, __assign({}, containerProps),
            React.createElement(FlexContainer, { withError: !!error },
                React.createElement(RadioButtonCircle, __assign({}, circleProps),
                    React.createElement(SelectMark, __assign({}, circleProps))),
                children && (React.createElement(Label_1.Label, { attached: true, theme: theme },
                    children,
                    Error))),
            !children && Error));
    };
    RadioButtonInt.inner = {
        get PaddedContainer() { return PaddedContainer_1.PaddedContainer; },
        get InputError() { return InputError_1.InputError; },
        get RadioButtonContainer() { return RadioButtonContainer; },
        get FlexContainer() { return FlexContainer; },
        get RadioButtonCircle() { return RadioButtonCircle; },
        get SelectMark() { return SelectMark; },
        get Label() { return Label_1.Label; }
    };
    return RadioButtonInt;
}(React.PureComponent));
exports.RadioButtonInt = RadioButtonInt;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=data:application/json;base64,