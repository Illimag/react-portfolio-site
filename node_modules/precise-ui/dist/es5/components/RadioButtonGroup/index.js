"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var withFormContext_1 = require("../../hoc/withFormContext");
var RadioButtonGroupContext_1 = require("../../contexts/RadioButtonGroupContext");
var RadioButtonGroupInt = /** @class */ (function (_super) {
    __extends(RadioButtonGroupInt, _super);
    function RadioButtonGroupInt(props) {
        var _this = _super.call(this, props) || this;
        _this.buttons = [];
        _this.ctx = _this.createContext();
        _this.getNextValue = function (groupItemName) {
            var multiple = _this.props.multiple;
            var value = _this.state.value;
            if (value && Array.isArray(value) && groupItemName) {
                if (value.indexOf(groupItemName) !== -1) {
                    return value.filter(function (f) { return f !== groupItemName; });
                }
                return value.concat([groupItemName]);
            }
            return multiple && groupItemName ? [groupItemName] : groupItemName;
        };
        var controlled = props.value !== undefined;
        var propValue = props.value, defaultValue = props.defaultValue;
        var value = controlled ? propValue : defaultValue;
        _this.state = {
            controlled: controlled,
            value: value,
        };
        return _this;
    }
    RadioButtonGroupInt.prototype.setState = function (state) {
        var value = state.value;
        if (value) {
            for (var _i = 0, _a = this.buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                var selected = Array.isArray(value) && button.name ? value.indexOf(button.name) !== -1 : button.name === value;
                button.setValue(selected);
            }
            _super.prototype.setState.call(this, __assign({}, state, { value: value }));
        }
        _super.prototype.setState.call(this, state);
    };
    RadioButtonGroupInt.prototype.componentDidMount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.subscribe(this);
        }
    };
    RadioButtonGroupInt.prototype.componentWillUnmount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    };
    RadioButtonGroupInt.prototype.UNSAFE_componentWillReceiveProps = function (_a) {
        var value = _a.value;
        var controlled = this.state.controlled;
        if (controlled) {
            this.setState({
                value: value,
            });
        }
    };
    RadioButtonGroupInt.prototype.createContext = function () {
        var _this = this;
        return {
            select: function (rb) {
                var _a = _this.props, onChange = _a.onChange, form = _a.form, _b = _a.name, name = _b === void 0 ? '' : _b;
                var controlled = _this.state.controlled;
                var value = _this.getNextValue(rb.name);
                if (!controlled) {
                    if (form) {
                        form.change({
                            name: name,
                            value: value,
                        });
                    }
                    else if (value) {
                        _this.setState({
                            value: value,
                        });
                    }
                    else {
                        for (var _i = 0, _c = _this.buttons; _i < _c.length; _i++) {
                            var button = _c[_i];
                            button.setValue(button === rb);
                        }
                        _super.prototype.setState.call(_this, {
                            value: undefined,
                        });
                    }
                }
                if (typeof onChange === 'function' && value) {
                    onChange({
                        value: value,
                    });
                }
            },
            subscribe: function (rb) {
                var value = _this.state.value;
                _this.buttons.push(rb);
                if (value !== undefined) {
                    var selected = Array.isArray(value) && rb.name ? value.indexOf(rb.name) !== -1 : rb.name === value;
                    rb.setValue(selected);
                }
            },
            unsubscribe: function (rb) {
                var index = _this.buttons.indexOf(rb);
                index >= 0 && _this.buttons.splice(index, 1);
            },
        };
    };
    RadioButtonGroupInt.prototype.render = function () {
        return React.createElement(RadioButtonGroupContext_1.RadioButtonGroupContext.Provider, { value: this.ctx }, this.props.children);
    };
    return RadioButtonGroupInt;
}(React.PureComponent));
/**
 * The radio button group manages a group of radio buttons.
 */
exports.RadioButtonGroup = withFormContext_1.withFormContext(RadioButtonGroupInt);
exports.RadioButtonGroup.displayName = 'RadioButtonGroup';
//# sourceMappingURL=data:application/json;base64,