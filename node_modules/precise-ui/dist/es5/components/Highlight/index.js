"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var Highlighted = styled_1.default.span(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  background-color: ", ";\n"], ["\n  background-color: ", ";\n"])), styled_1.themed(function (props) { return props.theme.highlightColor; }));
/**
 * Validates that the matches provided are valid, if not it will throw an error
 *
 * @param matches
 */
function validateMatches(matches) {
    var lastMatch = -1;
    if (!Array.isArray(matches)) {
        throw Error("match must be an Array of [start, end], but provided " + JSON.stringify(matches));
    }
    matches.forEach(function (match) {
        if (!Array.isArray(match) || match.length !== 2) {
            throw Error('match must be an Array of [start, end]');
        }
        if (!Number.isInteger(match[0]) || !Number.isInteger(match[1]) || match[0] < 0 || match[1] < 0) {
            throw Error('match [start] and [end] must be a positive integers.');
        }
        if (match[0] >= match[1]) {
            throw Error('[start] must be lower than [end].');
        }
        if (match[0] <= lastMatch) {
            throw Error('match indices cannot overlap.');
        }
        lastMatch = match[1];
    });
}
/**
 * Highlight component is meant to be a simple component to display text with highlighted search.
 * Component will render a SPAN or series of SPAN with the content and highlights
 */
exports.Highlight = Object.assign((function (_a) {
    var text = _a.text, matches = _a.matches, highlight = _a.highlight, _b = _a.ignoreCase, ignoreCase = _b === void 0 ? true : _b, theme = _a.theme;
    if (!matches && undefined === highlight) {
        throw new Error('You must set either indices or highlight');
    }
    if (matches) {
        validateMatches(matches);
        var lastMatch_1 = 0;
        return (React.createElement(React.Fragment, null,
            matches.map(function (match, i) {
                var r = (React.createElement(React.Fragment, { key: i },
                    React.createElement("span", null, text.substring(lastMatch_1, match[0])),
                    React.createElement(Highlighted, { theme: theme }, text.substring(match[0], match[1]))));
                lastMatch_1 = match[1];
                return r;
            }),
            React.createElement("span", null, text.substring(lastMatch_1, text.length))));
    }
    if (highlight === '') {
        return React.createElement(React.Fragment, null, text);
    }
    // Sanitized the user input to prevent them from using RegEx patterns
    var sanitized = highlight && highlight.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    var parts = text.split(new RegExp("(" + sanitized + ")", ignoreCase ? 'gi' : 'g')).filter(Boolean);
    return (React.createElement(React.Fragment, null, parts.map(function (part, i) { return part.toLowerCase() === (highlight && highlight.toLowerCase()) ? (React.createElement(Highlighted, { theme: theme, key: i }, part)) : (React.createElement("span", { key: i }, part)); })));
}), { inner: {
        get Highlighted() { return Highlighted; }
    } });
exports.Highlight.displayName = 'Highlight';
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,