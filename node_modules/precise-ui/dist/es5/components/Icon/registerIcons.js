"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var icon_types_1 = require("./icon.types");
exports.registeredIcons = {};
/**
 * Registers subset of SVG icons.
 * @param icons  Map of icons with SVG definition.
 *
 * To be able to register icons and extend type definitions in Typescript,
 * interface `AdditionalIconNames `with registered icon names should be provided
 * in global scope for interface augmentation. Example shown below
 *
 * @example
 *
 * ```
 * declare global {
 *   interface AdditionalIconNames {
 *     Foo: string;
 *     Bar: string;
 *   }
 * }
 *
 * registerIcons({
 *   Foo: *some svg value*,
 *   Bar: *some svg value*,
 * })
 * ```
 */
function registerIcons(icons) {
    for (var name_1 in icons) {
        if (process.env.NODE_ENV === 'development' && (exports.registeredIcons[name_1] || icon_types_1.IconNames[name_1])) {
            console.error("An icon with the name " + name_1 + " is already registered");
        }
        exports.registeredIcons[name_1] = icons[name_1];
    }
}
exports.registerIcons = registerIcons;
function getIcon(name) {
    if (exports.registeredIcons[name]) {
        return function (props) { return React.cloneElement(exports.registeredIcons[name], props); };
    }
    return undefined;
}
exports.getIcon = getIcon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXJJY29ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0ljb24vcmVnaXN0ZXJJY29ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUErQjtBQUUvQiwyQ0FBeUM7QUFNNUIsUUFBQSxlQUFlLEdBQW9CLEVBQUUsQ0FBQztBQUVuRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Qkc7QUFFSCxTQUFnQixhQUFhLENBQUMsS0FBc0I7SUFDbEQsS0FBSyxJQUFNLE1BQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxhQUFhLElBQUksQ0FBQyx1QkFBZSxDQUFDLE1BQUksQ0FBQyxJQUFJLHNCQUFTLENBQUMsTUFBSSxDQUFDLENBQUMsRUFBRTtZQUN4RixPQUFPLENBQUMsS0FBSyxDQUFDLDJCQUF5QixNQUFJLDJCQUF3QixDQUFDLENBQUM7U0FDdEU7UUFFRCx1QkFBZSxDQUFDLE1BQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFJLENBQUMsQ0FBQztLQUNyQztBQUNILENBQUM7QUFSRCxzQ0FRQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxJQUFZO0lBQ2xDLElBQUksdUJBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN6QixPQUFPLFVBQUMsS0FBbUIsSUFBSyxPQUFBLEtBQUssQ0FBQyxZQUFZLENBQUMsdUJBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBaEQsQ0FBZ0QsQ0FBQztLQUNsRjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFMRCwwQkFLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN2Z0ljb25Qcm9wcyB9IGZyb20gJy4vaWNvbnMnO1xuaW1wb3J0IHsgSWNvbk5hbWVzIH0gZnJvbSAnLi9pY29uLnR5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBJY29uRGVmaW5pdGlvbnMge1xuICBba2V5OiBzdHJpbmddOiBKU1guRWxlbWVudDtcbn1cblxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyZWRJY29uczogSWNvbkRlZmluaXRpb25zID0ge307XG5cbi8qKlxuICogUmVnaXN0ZXJzIHN1YnNldCBvZiBTVkcgaWNvbnMuXG4gKiBAcGFyYW0gaWNvbnMgIE1hcCBvZiBpY29ucyB3aXRoIFNWRyBkZWZpbml0aW9uLlxuICpcbiAqIFRvIGJlIGFibGUgdG8gcmVnaXN0ZXIgaWNvbnMgYW5kIGV4dGVuZCB0eXBlIGRlZmluaXRpb25zIGluIFR5cGVzY3JpcHQsXG4gKiBpbnRlcmZhY2UgYEFkZGl0aW9uYWxJY29uTmFtZXMgYHdpdGggcmVnaXN0ZXJlZCBpY29uIG5hbWVzIHNob3VsZCBiZSBwcm92aWRlZFxuICogaW4gZ2xvYmFsIHNjb3BlIGZvciBpbnRlcmZhY2UgYXVnbWVudGF0aW9uLiBFeGFtcGxlIHNob3duIGJlbG93XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqIGRlY2xhcmUgZ2xvYmFsIHtcbiAqICAgaW50ZXJmYWNlIEFkZGl0aW9uYWxJY29uTmFtZXMge1xuICogICAgIEZvbzogc3RyaW5nO1xuICogICAgIEJhcjogc3RyaW5nO1xuICogICB9XG4gKiB9XG4gKlxuICogcmVnaXN0ZXJJY29ucyh7XG4gKiAgIEZvbzogKnNvbWUgc3ZnIHZhbHVlKixcbiAqICAgQmFyOiAqc29tZSBzdmcgdmFsdWUqLFxuICogfSlcbiAqIGBgYFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckljb25zKGljb25zOiBJY29uRGVmaW5pdGlvbnMpIHtcbiAgZm9yIChjb25zdCBuYW1lIGluIGljb25zKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnICYmIChyZWdpc3RlcmVkSWNvbnNbbmFtZV0gfHwgSWNvbk5hbWVzW25hbWVdKSkge1xuICAgICAgY29uc29sZS5lcnJvcihgQW4gaWNvbiB3aXRoIHRoZSBuYW1lICR7bmFtZX0gaXMgYWxyZWFkeSByZWdpc3RlcmVkYCk7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJlZEljb25zW25hbWVdID0gaWNvbnNbbmFtZV07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEljb24obmFtZTogc3RyaW5nKTogUmVhY3QuU0ZDPFN2Z0ljb25Qcm9wcz4gfCB1bmRlZmluZWQge1xuICBpZiAocmVnaXN0ZXJlZEljb25zW25hbWVdKSB7XG4gICAgcmV0dXJuIChwcm9wczogU3ZnSWNvblByb3BzKSA9PiBSZWFjdC5jbG9uZUVsZW1lbnQocmVnaXN0ZXJlZEljb25zW25hbWVdLCBwcm9wcyk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiJdfQ==