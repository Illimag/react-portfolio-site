"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var InputError_1 = require("../InputError");
var InputInfo_1 = require("../InputInfo");
/**
 * Input notification component.
 * Shows InputError and InputInfo either error or info provided.
 */
exports.InputNotification = Object.assign((function (_a) {
    var error = _a.error, info = _a.info, rest = __rest(_a, ["error", "info"]);
    if (error) {
        if (typeof error === 'string') {
            return React.createElement(InputError_1.InputError, __assign({}, rest), error);
        }
        return React.createElement(React.Fragment, null, error);
    }
    else if (info) {
        if (typeof info === 'string') {
            return React.createElement(InputInfo_1.InputInfo, __assign({}, rest), info);
        }
        return React.createElement(React.Fragment, null, info);
    }
    // tslint:disable-next-line
    return null;
}), { inner: {
        get InputError() { return InputError_1.InputError; },
        get InputInfo() { return InputInfo_1.InputInfo; }
    } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9JbnB1dE5vdGlmaWNhdGlvbi9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZCQUErQjtBQUMvQiw0Q0FBNEQ7QUFDNUQsMENBQXlEO0FBS3pEOzs7R0FHRztBQUNVLFFBQUEsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLFVBQUMsRUFBd0I7SUFBdEIsSUFBQSxnQkFBSyxFQUFFLGNBQUksRUFBRSxvQ0FBTztJQUNwRSxJQUFJLEtBQUssRUFBRTtRQUNQLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzNCLE9BQU8sb0JBQUMsdUJBQVUsZUFBSyxJQUFJLEdBQUcsS0FBSyxDQUFjLENBQUM7U0FDckQ7UUFDRCxPQUFPLDBDQUFHLEtBQUssQ0FBSSxDQUFDO0tBQ3ZCO1NBQ0ksSUFBSSxJQUFJLEVBQUU7UUFDWCxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUMxQixPQUFPLG9CQUFDLHFCQUFTLGVBQUssSUFBSSxHQUFHLElBQUksQ0FBYSxDQUFDO1NBQ2xEO1FBQ0QsT0FBTywwQ0FBRyxJQUFJLENBQUksQ0FBQztLQUN0QjtJQUNELDJCQUEyQjtJQUMzQixPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDLENBQXNDLEVBQUUsRUFBRSxLQUFLLEVBQUU7UUFDMUMsSUFBSSxVQUFVLEtBQUssT0FBTyx1QkFBK0IsQ0FBQyxDQUFDLENBQUM7UUFDNUQsSUFBSSxTQUFTLEtBQUssT0FBTyxxQkFBNkIsQ0FBQyxDQUFDLENBQUM7S0FDNUQsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJbnB1dEVycm9yLCBJbnB1dEVycm9yUHJvcHMgfSBmcm9tICcuLi9JbnB1dEVycm9yJztcbmltcG9ydCB7IElucHV0SW5mbywgSW5wdXRJbmZvUHJvcHMgfSBmcm9tICcuLi9JbnB1dEluZm8nO1xuZXhwb3J0IGludGVyZmFjZSBJbnB1dE5vdGlmaWNhdGlvblByb3BzIGV4dGVuZHMgSW5wdXRFcnJvclByb3BzLCBJbnB1dEluZm9Qcm9wcyB7XG4gICAgZXJyb3I/OiBSZWFjdC5SZWFjdE5vZGU7XG4gICAgaW5mbz86IFJlYWN0LlJlYWN0Tm9kZTtcbn1cbi8qKlxuICogSW5wdXQgbm90aWZpY2F0aW9uIGNvbXBvbmVudC5cbiAqIFNob3dzIElucHV0RXJyb3IgYW5kIElucHV0SW5mbyBlaXRoZXIgZXJyb3Igb3IgaW5mbyBwcm92aWRlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IElucHV0Tm90aWZpY2F0aW9uID0gT2JqZWN0LmFzc2lnbigoKCh7IGVycm9yLCBpbmZvLCAuLi5yZXN0IH0pID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiA8SW5wdXRFcnJvciB7Li4ucmVzdH0+e2Vycm9yfTwvSW5wdXRFcnJvcj47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDw+e2Vycm9yfTwvPjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaW5mbykge1xuICAgICAgICBpZiAodHlwZW9mIGluZm8gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gPElucHV0SW5mbyB7Li4ucmVzdH0+e2luZm99PC9JbnB1dEluZm8+O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiA8PntpbmZvfTwvPjtcbiAgICB9XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgcmV0dXJuIG51bGw7XG59KSBhcyBSZWFjdC5GQzxJbnB1dE5vdGlmaWNhdGlvblByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IElucHV0RXJyb3IoKSB7IHJldHVybiBJbnB1dEVycm9yIGFzIHR5cGVvZiBJbnB1dEVycm9yOyB9LFxuICAgICAgICBnZXQgSW5wdXRJbmZvKCkgeyByZXR1cm4gSW5wdXRJbmZvIGFzIHR5cGVvZiBJbnB1dEluZm87IH1cbiAgICB9IH0pO1xuIl19