"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var hoc_1 = require("../../hoc");
var CustomReactDatepicker_part_1 = require("./CustomReactDatepicker.part");
var DateFieldTextField_part_1 = require("./DateFieldTextField.part");
var utils_1 = require("../../utils");
var reactDatepickerProps = {
    adjustDateOnChange: 1,
    allowSameDay: 1,
    autoComplete: 1,
    autoFocus: 1,
    calendarClassName: 1,
    calendarContainer: 1,
    children: 1,
    className: 1,
    clearButtonTitle: 1,
    customInput: 1,
    customInputRef: 1,
    dateFormat: 1,
    dateFormatCalendar: 1,
    dayClassName: 1,
    disabled: 1,
    disabledKeyboardNavigation: 1,
    dropdownMode: 1,
    endDate: 1,
    excludeDates: 1,
    excludeTimes: 1,
    filterDate: 1,
    fixedHeight: 1,
    forceShowMonthNavigation: 1,
    formatWeekDay: 1,
    formatWeekNumber: 1,
    highlightDates: 1,
    id: 1,
    includeDates: 1,
    includeTimes: 1,
    injectTimes: 1,
    inline: 1,
    isClearable: 1,
    locale: 1,
    maxDate: 1,
    maxTime: 1,
    minDate: 1,
    minTime: 1,
    monthsShown: 1,
    name: 1,
    nextMonthButtonLabel: 1,
    onBlur: 1,
    onChange: 1,
    onChangeRaw: 1,
    onClickOutside: 1,
    onFocus: 1,
    onInputClick: 1,
    onInputError: 1,
    onKeyDown: 1,
    onMonthChange: 1,
    onSelect: 1,
    onWeekSelect: 1,
    onYearChange: 1,
    open: 1,
    openToDate: 1,
    peekNextMonth: 1,
    placeholderText: 1,
    popperClassName: 1,
    popperContainer: 1,
    popperModifiers: 1,
    popperPlacement: 1,
    popperProps: 1,
    preventOpenOnFocus: 1,
    previousMonthButtonLabel: 1,
    readOnly: 1,
    renderCustomHeader: 1,
    renderDayContents: 1,
    required: 1,
    scrollableMonthYearDropdown: 1,
    scrollableYearDropdown: 1,
    selected: 1,
    selectsEnd: 1,
    selectsStart: 1,
    shouldCloseOnSelect: 1,
    showDisabledMonthNavigation: 1,
    showMonthDropdown: 1,
    showMonthYearDropdown: 1,
    showMonthYearPicker: 1,
    showTimeSelect: 1,
    showTimeSelectOnly: 1,
    showWeekNumbers: 1,
    showYearDropdown: 1,
    startDate: 1,
    startOpen: 1,
    strictParsing: 1,
    tabIndex: 1,
    timeCaption: 1,
    timeFormat: 1,
    timeIntervals: 1,
    title: 1,
    todayButton: 1,
    useShortMonthInDropdown: 1,
    useWeekdaysShort: 1,
    value: 1,
    weekLabel: 1,
    withPortal: 1,
    yearDropdownItemNumber: 1,
    timeInputLabel: 1,
    inlineFocusSelectedMonth: 1,
    onDayMouseEnter: 1,
    onMonthMouseLeave: 1,
};
var excludedReactDatePickerProps = {
    autoComplete: 1,
    onBlur: 1,
    onChange: 1,
    onFocus: 1,
    children: 1,
    todayButton: 1,
    placeholderText: 1,
    isClearable: 1,
    withPortal: 1,
    showYearDropdown: 1,
    showMonthDropdown: 1,
    useShortMonthInDropdown: 1,
    showMonthYearDropdown: 1,
    dropdownMode: 1,
    monthsShown: 1,
    showTimeInput: 1,
    showMonthYearPicker: 1,
};
var DefaultDateFormat = utils_1.getIsoDateFormat();
var DateFieldInt = /** @class */ (function (_super) {
    __extends(DateFieldInt, _super);
    function DateFieldInt(props) {
        var _this = _super.call(this, props) || this;
        _this.changeValue = function (inputDate) {
            var _a = _this.props, _b = _a.dateFormat, dateFormat = _b === void 0 ? DefaultDateFormat : _b, locale = _a.locale;
            var date = inputDate || undefined;
            var value = utils_1.safeDateFormat(date, {
                dateFormat: dateFormat,
                locale: locale,
            });
            _this.change(date, value);
        };
        _this.changeInput = function (e) {
            var onChangeRaw = _this.props.onChangeRaw;
            var value = e.target.value;
            _this.change(_this.parseDate(value), value);
            if (typeof onChangeRaw === 'function') {
                onChangeRaw(e);
            }
        };
        _this.parseDate = function (value) {
            var _a = _this.props, locale = _a.locale, _b = _a.dateFormat, dateFormat = _b === void 0 ? DefaultDateFormat : _b, strictParsing = _a.strictParsing;
            return utils_1.parseDate(value, dateFormat, locale, strictParsing) || undefined;
        };
        _this.change = function (date, value) {
            var _a = _this.props, onChange = _a.onChange, _b = _a.name, name = _b === void 0 ? '' : _b, form = _a.form;
            if (!_this.valueControlled) {
                _this.setState({ value: value, date: date }, function () {
                    form &&
                        form.change({
                            name: name,
                            value: value,
                        });
                    _this.onOpenChange(true);
                });
            }
            if (typeof onChange === 'function') {
                onChange({
                    value: value,
                    date: date,
                });
            }
        };
        _this.onClickOutside = function (event) {
            var onClickOutside = _this.props.onClickOutside;
            _this.onOpenChange(false);
            if (typeof onClickOutside === 'function') {
                onClickOutside(event);
            }
        };
        _this.onFocus = function () {
            var onFocus = _this.props.onFocus;
            _this.onOpenChange(true);
            if (typeof onFocus === 'function') {
                onFocus();
            }
        };
        _this.onBlur = function () {
            var onBlur = _this.props.onBlur;
            _this.onOpenChange(false);
            if (typeof onBlur === 'function') {
                onBlur();
            }
        };
        var value = props.value || props.defaultValue || '';
        var date = value ? _this.parseDate(value) : new Date();
        _this.valueControlled = props.value !== undefined;
        _this.state = {
            error: props.error,
            date: date,
            value: value,
        };
        return _this;
    }
    DateFieldInt.prototype.UNSAFE_componentWillReceiveProps = function (_a) {
        var _b = _a.value, value = _b === void 0 ? '' : _b, error = _a.error;
        if (this.valueControlled) {
            this.setState({ value: value, date: this.parseDate(value) });
        }
        this.setState({ error: error });
    };
    DateFieldInt.prototype.componentDidMount = function () {
        var form = this.props.form;
        if (!this.valueControlled && form) {
            form.subscribe(this);
        }
    };
    DateFieldInt.prototype.componentWillUnmount = function () {
        var form = this.props.form;
        if (!this.valueControlled && form) {
            form.unsubscribe(this);
        }
    };
    DateFieldInt.prototype.onOpenChange = function (open) {
        var onOpenChange = this.props.onOpenChange;
        if (typeof onOpenChange === 'function') {
            onOpenChange({
                open: open,
            });
        }
    };
    DateFieldInt.prototype.render = function () {
        var _a = this.props, autoComplete = _a.autoComplete, months = _a.months, weekDays = _a.weekDays, open = _a.open, placeholder = _a.placeholder, _0 = _a.name, _1 = _a.value, _2 = _a.defaultValue, _3 = _a.onChange, _4 = _a.onOpenChange, _5 = _a.onClickOutside, _6 = _a.onFocus, _7 = _a.onBlur, rest = __rest(_a, ["autoComplete", "months", "weekDays", "open", "placeholder", "name", "value", "defaultValue", "onChange", "onOpenChange", "onClickOutside", "onFocus", "onBlur"]);
        var datePickerProps = {};
        var customInputProps = {};
        Object.keys(rest).forEach(function (propName) {
            if (excludedReactDatePickerProps[propName]) {
                return;
            }
            if (reactDatepickerProps[propName]) {
                datePickerProps[propName] = rest[propName];
            }
            else {
                customInputProps[propName] = rest[propName];
            }
        });
        var _b = this.state, value = _b.value, error = _b.error, date = _b.date;
        return (React.createElement(CustomReactDatepicker_part_1.CustomReactDatepicker, __assign({ customInput: React.createElement(DateFieldTextField_part_1.DatePickerTextField, __assign({}, customInputProps, { error: error, autoComplete: autoComplete })), placeholderText: placeholder, customInputRef: "inputRef", months: months, weekDays: weekDays, value: value, selected: date }, datePickerProps, { open: open, onChange: this.changeValue, onChangeRaw: this.changeInput, onClickOutside: this.onClickOutside, onFocus: this.onFocus, onBlur: this.onBlur })));
    };
    DateFieldInt.inner = {
        get CustomReactDatepicker() { return CustomReactDatepicker_part_1.CustomReactDatepicker; }
    };
    return DateFieldInt;
}(React.Component));
exports.DateField = hoc_1.withFormContext(DateFieldInt);
exports.DateField.displayName = 'DateField';
//# sourceMappingURL=data:application/json;base64,