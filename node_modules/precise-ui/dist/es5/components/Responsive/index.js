"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var displayTo_1 = require("../../utils/displayTo");
var themes_1 = require("../../themes");
var Responsive = /** @class */ (function (_super) {
    __extends(Responsive, _super);
    function Responsive(props) {
        var _this = _super.call(this, props) || this;
        _this.mediaQueriesToListen = {};
        _this.updateMatches = function () {
            _this.setState({
                matchesTo: _this.currentlyMatches(),
            });
        };
        var _a = _this.props, _b = _a.theme, theme = _b === void 0 ? themes_1.light : _b, screenSize = _a.screenSize, _c = _a.screenSizeCondition, screenSizeCondition = _c === void 0 ? 'equal' : _c, render = _a.render;
        var themedBreakpoints = __assign({}, themes_1.breakpoints, theme.breakpoints);
        if (screenSize) {
            var screenSizeBreakpoints = _this.getBreakpoints(themedBreakpoints, screenSize, screenSizeCondition);
            if (screenSizeBreakpoints) {
                _this.mediaQueriesToListen[screenSize] = window.matchMedia(displayTo_1.getWidthBreakpointsQuery(screenSizeBreakpoints));
            }
        }
        else {
            var allMediaQueries = displayTo_1.getMediaQueries(themedBreakpoints);
            for (var screenSize_1 in allMediaQueries) {
                _this.mediaQueriesToListen[screenSize_1] = window.matchMedia(allMediaQueries[screenSize_1]);
            }
        }
        if (typeof render !== 'function' && !Object.keys(_this.mediaQueriesToListen).length) {
            console.error('`render` callback method or valid `screenSize` and `screenSizeCondition` should be defined');
        }
        _this.state = {
            matchesTo: undefined,
        };
        return _this;
    }
    Responsive.prototype.getBreakpoints = function (breakpoints, screenSize, screenSizeCondition) {
        var screenSizeBreakpoints = displayTo_1.getScreenSizeBreakpoints(screenSize, breakpoints);
        if (!screenSizeBreakpoints) {
            console.error("Invalid screen size " + screenSize);
            return;
        }
        switch (screenSizeCondition) {
            case 'equal':
                return __assign({}, screenSizeBreakpoints);
            case 'from':
                return __assign({}, screenSizeBreakpoints, { max: undefined });
            case 'upTo':
                return __assign({}, screenSizeBreakpoints, { min: undefined });
            default:
                console.error("Invalid screen size condition " + screenSizeCondition);
                return;
        }
    };
    Responsive.prototype.currentlyMatches = function () {
        var mediaQueries = this.mediaQueriesToListen;
        for (var _i = 0, _a = Object.keys(mediaQueries); _i < _a.length; _i++) {
            var screenSize = _a[_i];
            if (mediaQueries[screenSize].matches) {
                return screenSize;
            }
        }
        return undefined;
    };
    Responsive.prototype.componentDidMount = function () {
        for (var screenSizeListenTo in this.mediaQueriesToListen) {
            this.mediaQueriesToListen[screenSizeListenTo].addListener(this.updateMatches);
        }
        this.updateMatches();
    };
    Responsive.prototype.componentWillUnmount = function () {
        for (var _i = 0, _a = Object.keys(this.mediaQueriesToListen); _i < _a.length; _i++) {
            var sceenSize = _a[_i];
            this.mediaQueriesToListen[sceenSize].removeListener(this.updateMatches);
        }
    };
    Responsive.prototype.render = function () {
        var _a = this.props, children = _a.children, render = _a.render;
        var matchesTo = this.state.matchesTo;
        if (render) {
            return render(matchesTo);
        }
        else {
            return children && matchesTo ? React.createElement(React.Fragment, null, children) : false;
        }
    };
    return Responsive;
}(React.Component));
exports.Responsive = Responsive;
//# sourceMappingURL=data:application/json;base64,