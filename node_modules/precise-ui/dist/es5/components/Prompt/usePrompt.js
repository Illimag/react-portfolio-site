"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var unblock;
function usePrompt(onRequestToLeavePage, onRequestToLeaveApp, history, isEnabled) {
    if (isEnabled === void 0) { isEnabled = false; }
    var _a = react_1.useState(), location = _a[0], setLocation = _a[1];
    var _b = react_1.useState(), currentLocation = _b[0], setCurrentLocation = _b[1];
    var enable = react_1.useCallback(function () {
        if (history) {
            if (unblock) {
                unblock();
            }
            unblock = history.block(function (loc) {
                setLocation(loc);
                setCurrentLocation(history.location);
                return onRequestToLeavePage();
            });
        }
    }, [onRequestToLeavePage, history]);
    var disable = react_1.useCallback(function () {
        if (unblock) {
            unblock();
        }
    }, []);
    react_1.useEffect(function () {
        if (isEnabled) {
            enable();
            window.addEventListener('beforeunload', handleBeforeUnload);
        }
        else {
            disable();
            window.removeEventListener('beforeunload', handleBeforeUnload);
        }
        return function () {
            disable();
            window.removeEventListener('beforeunload', handleBeforeUnload);
        };
    }, [isEnabled, enable, disable]);
    var handleBeforeUnload = react_1.useCallback(function (ev) {
        if (isEnabled && onRequestToLeaveApp) {
            ev.preventDefault();
            var msg = onRequestToLeaveApp();
            ev.returnValue = msg;
            return msg;
        }
        return undefined;
    }, [isEnabled, onRequestToLeaveApp]);
    var handleContinue = function () {
        disable();
        if (location && currentLocation && history) {
            history.push(formUrl(location));
            if (currentLocation.pathname === location.pathname && isEnabled) {
                enable();
            }
        }
    };
    return [handleContinue, disable];
}
exports.usePrompt = usePrompt;
var formUrl = function (_a) {
    var pathname = _a.pathname, search = _a.search, hash = _a.hash;
    return "" + pathname + search + hash;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlUHJvbXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvUHJvbXB0L3VzZVByb21wdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUF5RDtBQUd6RCxJQUFJLE9BQVksQ0FBQztBQUVqQixTQUFnQixTQUFTLENBQ3ZCLG9CQUFvQyxFQUNwQyxtQkFBb0MsRUFDcEMsT0FBdUIsRUFDdkIsU0FBMEI7SUFBMUIsMEJBQUEsRUFBQSxpQkFBMEI7SUFFcEIsSUFBQSx1QkFBb0QsRUFBbkQsZ0JBQVEsRUFBRSxtQkFBeUMsQ0FBQztJQUNyRCxJQUFBLHVCQUFrRSxFQUFqRSx1QkFBZSxFQUFFLDBCQUFnRCxDQUFDO0lBRXpFLElBQU0sTUFBTSxHQUFHLG1CQUFXLENBQUM7UUFDekIsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLE9BQU8sRUFBRTtnQkFDWCxPQUFPLEVBQUUsQ0FBQzthQUNYO1lBQ0QsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBQSxHQUFHO2dCQUN6QixXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2pCLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDckMsT0FBTyxvQkFBb0IsRUFBRSxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRXBDLElBQU0sT0FBTyxHQUFHLG1CQUFXLENBQUM7UUFDMUIsSUFBSSxPQUFPLEVBQUU7WUFDWCxPQUFPLEVBQUUsQ0FBQztTQUNYO0lBQ0gsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsaUJBQVMsQ0FBQztRQUNSLElBQUksU0FBUyxFQUFFO1lBQ2IsTUFBTSxFQUFFLENBQUM7WUFDVCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7U0FDN0Q7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDO1lBQ1YsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1NBQ2hFO1FBQ0QsT0FBTztZQUNMLE9BQU8sRUFBRSxDQUFDO1lBQ1YsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsQ0FBQztJQUNKLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUVqQyxJQUFNLGtCQUFrQixHQUFHLG1CQUFXLENBQ3BDLFVBQUMsRUFBcUI7UUFDcEIsSUFBSSxTQUFTLElBQUksbUJBQW1CLEVBQUU7WUFDcEMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3BCLElBQU0sR0FBRyxHQUFHLG1CQUFtQixFQUFFLENBQUM7WUFDbEMsRUFBRSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7WUFDckIsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUMsRUFDRCxDQUFDLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQyxDQUNqQyxDQUFDO0lBRUYsSUFBTSxjQUFjLEdBQUc7UUFDckIsT0FBTyxFQUFFLENBQUM7UUFDVixJQUFJLFFBQVEsSUFBSSxlQUFlLElBQUksT0FBTyxFQUFFO1lBQzFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDaEMsSUFBSSxlQUFlLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxRQUFRLElBQUksU0FBUyxFQUFFO2dCQUMvRCxNQUFNLEVBQUUsQ0FBQzthQUNWO1NBQ0Y7SUFDSCxDQUFDLENBQUM7SUFFRixPQUFPLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFsRUQsOEJBa0VDO0FBRUQsSUFBTSxPQUFPLEdBQUcsVUFBQyxFQUEwQztRQUF4QyxzQkFBUSxFQUFFLGtCQUFNLEVBQUUsY0FBSTtJQUF1QixPQUFBLEtBQUcsUUFBUSxHQUFHLE1BQU0sR0FBRyxJQUFNO0FBQTdCLENBQTZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFByb21wdEhpc3RvcnksIFByb21wdExvY2F0aW9uLCBQcm9tcHRDYWxsYmFjayB9IGZyb20gJy4vUHJvbXB0LnR5cGVzJztcblxubGV0IHVuYmxvY2s6IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVByb21wdChcbiAgb25SZXF1ZXN0VG9MZWF2ZVBhZ2U6IFByb21wdENhbGxiYWNrLFxuICBvblJlcXVlc3RUb0xlYXZlQXBwPzogUHJvbXB0Q2FsbGJhY2ssXG4gIGhpc3Rvcnk/OiBQcm9tcHRIaXN0b3J5LFxuICBpc0VuYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZSxcbikge1xuICBjb25zdCBbbG9jYXRpb24sIHNldExvY2F0aW9uXSA9IHVzZVN0YXRlPFByb21wdExvY2F0aW9uPigpO1xuICBjb25zdCBbY3VycmVudExvY2F0aW9uLCBzZXRDdXJyZW50TG9jYXRpb25dID0gdXNlU3RhdGU8UHJvbXB0TG9jYXRpb24+KCk7XG5cbiAgY29uc3QgZW5hYmxlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChoaXN0b3J5KSB7XG4gICAgICBpZiAodW5ibG9jaykge1xuICAgICAgICB1bmJsb2NrKCk7XG4gICAgICB9XG4gICAgICB1bmJsb2NrID0gaGlzdG9yeS5ibG9jayhsb2MgPT4ge1xuICAgICAgICBzZXRMb2NhdGlvbihsb2MpO1xuICAgICAgICBzZXRDdXJyZW50TG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgICAgIHJldHVybiBvblJlcXVlc3RUb0xlYXZlUGFnZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbb25SZXF1ZXN0VG9MZWF2ZVBhZ2UsIGhpc3RvcnldKTtcblxuICBjb25zdCBkaXNhYmxlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICh1bmJsb2NrKSB7XG4gICAgICB1bmJsb2NrKCk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNFbmFibGVkKSB7XG4gICAgICBlbmFibGUoKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBoYW5kbGVCZWZvcmVVbmxvYWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXNhYmxlKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgaGFuZGxlQmVmb3JlVW5sb2FkKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRpc2FibGUoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBoYW5kbGVCZWZvcmVVbmxvYWQpO1xuICAgIH07XG4gIH0sIFtpc0VuYWJsZWQsIGVuYWJsZSwgZGlzYWJsZV0pO1xuXG4gIGNvbnN0IGhhbmRsZUJlZm9yZVVubG9hZCA9IHVzZUNhbGxiYWNrKFxuICAgIChldjogQmVmb3JlVW5sb2FkRXZlbnQpID0+IHtcbiAgICAgIGlmIChpc0VuYWJsZWQgJiYgb25SZXF1ZXN0VG9MZWF2ZUFwcCkge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBtc2cgPSBvblJlcXVlc3RUb0xlYXZlQXBwKCk7XG4gICAgICAgIGV2LnJldHVyblZhbHVlID0gbXNnO1xuICAgICAgICByZXR1cm4gbXNnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIFtpc0VuYWJsZWQsIG9uUmVxdWVzdFRvTGVhdmVBcHBdLFxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUNvbnRpbnVlID0gKCkgPT4ge1xuICAgIGRpc2FibGUoKTtcbiAgICBpZiAobG9jYXRpb24gJiYgY3VycmVudExvY2F0aW9uICYmIGhpc3RvcnkpIHtcbiAgICAgIGhpc3RvcnkucHVzaChmb3JtVXJsKGxvY2F0aW9uKSk7XG4gICAgICBpZiAoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lID09PSBsb2NhdGlvbi5wYXRobmFtZSAmJiBpc0VuYWJsZWQpIHtcbiAgICAgICAgZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBbaGFuZGxlQ29udGludWUsIGRpc2FibGVdO1xufVxuXG5jb25zdCBmb3JtVXJsID0gKHsgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCB9OiBQcm9tcHRMb2NhdGlvbikgPT4gYCR7cGF0aG5hbWV9JHtzZWFyY2h9JHtoYXNofWA7XG4iXX0=