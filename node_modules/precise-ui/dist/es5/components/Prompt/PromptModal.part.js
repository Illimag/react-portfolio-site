"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var usePrompt_1 = require("./usePrompt");
var Modal_1 = require("../Modal");
var Button_1 = require("../Button");
var PromptBasic_part_1 = require("./PromptBasic.part");
var ActionLink_1 = require("../ActionLink");
var utils_1 = require("../../utils");
var distance_1 = require("../../distance");
exports.PromptModal = Object.assign((function (_a) {
    var history = _a.history, when = _a.when, message = _a.message, modalOptions = _a.modalOptions;
    var _b = React.useState(false), showModal = _b[0], setShowModal = _b[1];
    var handleContinue = usePrompt_1.usePrompt(function () {
        setShowModal(true);
        return false;
    }, function () { return PromptBasic_part_1.getMessage(message); }, history, when)[0];
    return (React.createElement(DefaultModal, __assign({}, modalOptions, { message: PromptBasic_part_1.getMessage(message), open: when && showModal, onConfirm: function () {
            setShowModal(false);
            handleContinue();
            modalOptions.onConfirm && modalOptions.onConfirm();
        }, onCancel: function () {
            setShowModal(false);
            modalOptions.onConfirm && modalOptions.onCancel();
        } })));
}), { inner: {
        get DefaultModal() { return DefaultModal; }
    } });
var StyledActionLink = utils_1.styled(ActionLink_1.ActionLink)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  padding: 0 ", ";\n"], ["\n  padding: 0 ", ";\n"])), distance_1.distance.large);
var DefaultModal = Object.assign((function (_a) {
    var title = _a.title, message = _a.message, _b = _a.confirmText, confirmText = _b === void 0 ? 'Ok' : _b, _c = _a.cancelText, cancelText = _c === void 0 ? 'Cancel' : _c, onConfirm = _a.onConfirm, onCancel = _a.onCancel, open = _a.open;
    return (React.createElement(Modal_1.Modal, { open: open },
        React.createElement(Modal_1.ModalHeader, { title: title }),
        typeof message === 'string' && React.createElement(Modal_1.ModalBody, null, message),
        React.createElement(Modal_1.ModalFooter, null,
            React.createElement(StyledActionLink, { onClick: onCancel }, cancelText),
            React.createElement(Button_1.Button, { onClick: onConfirm }, confirmText))));
}), { inner: {
        get Modal() { return Modal_1.Modal; },
        get ModalHeader() { return Modal_1.ModalHeader; },
        get ModalBody() { return Modal_1.ModalBody; },
        get ModalFooter() { return Modal_1.ModalFooter; },
        get StyledActionLink() { return StyledActionLink; },
        get Button() { return Button_1.Button; }
    } });
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvbXB0TW9kYWwucGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Byb21wdC9Qcm9tcHRNb2RhbC5wYXJ0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZCQUErQjtBQUMvQix5Q0FBd0M7QUFFeEMsa0NBQXNFO0FBQ3RFLG9DQUFtQztBQUNuQyx1REFBZ0Q7QUFDaEQsNENBQTJDO0FBQzNDLHFDQUFxQztBQUNyQywyQ0FBMEM7QUFDN0IsUUFBQSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLFVBQUMsRUFBd0M7UUFBdEMsb0JBQU8sRUFBRSxjQUFJLEVBQUUsb0JBQU8sRUFBRSw4QkFBWTtJQUN4RSxJQUFBLDBCQUFpRCxFQUFoRCxpQkFBUyxFQUFFLG9CQUFxQyxDQUFDO0lBQ2pELElBQUE7Ozt3RkFBYyxDQUd3QjtJQUM3QyxPQUFPLENBQUMsb0JBQUMsWUFBWSxlQUFLLFlBQVksSUFBRSxPQUFPLEVBQUUsNkJBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxJQUFJLFNBQVMsRUFBRSxTQUFTLEVBQUU7WUFDdEcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLGNBQWMsRUFBRSxDQUFDO1lBQ2pCLFlBQVksQ0FBQyxTQUFTLElBQUksWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3ZELENBQUMsRUFBRSxRQUFRLEVBQUU7WUFDVCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEIsWUFBWSxDQUFDLFNBQVMsSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdEQsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUNWLENBQUMsQ0FBZ0MsRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNwQyxJQUFJLFlBQVksS0FBSyxPQUFPLFlBQW1DLENBQUMsQ0FBQyxDQUFDO0tBQ3JFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsSUFBTSxnQkFBZ0IsR0FBRyxjQUFNLENBQUMsdUJBQVUsQ0FBQywyRkFBQyxpQkFDN0IsRUFBYyxLQUM1QixLQURjLG1CQUFRLENBQUMsS0FBSyxDQUM1QixDQUFDO0FBQ0YsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLFVBQUMsRUFBeUY7UUFBdkYsZ0JBQUssRUFBRSxvQkFBTyxFQUFFLG1CQUFrQixFQUFsQix1Q0FBa0IsRUFBRSxrQkFBcUIsRUFBckIsMENBQXFCLEVBQUUsd0JBQVMsRUFBRSxzQkFBUSxFQUFFLGNBQUk7SUFDeEgsT0FBTyxDQUFDLG9CQUFDLGFBQUssSUFBQyxJQUFJLEVBQUUsSUFBSTtRQUN2QixvQkFBQyxtQkFBVyxJQUFDLEtBQUssRUFBRSxLQUFLLEdBQUc7UUFDM0IsT0FBTyxPQUFPLEtBQUssUUFBUSxJQUFJLG9CQUFDLGlCQUFTLFFBQUUsT0FBTyxDQUFhO1FBQ2hFLG9CQUFDLG1CQUFXO1lBQ1Ysb0JBQUMsZ0JBQWdCLElBQUMsT0FBTyxFQUFFLFFBQVEsSUFBRyxVQUFVLENBQW9CO1lBQ3BFLG9CQUFDLGVBQU0sSUFBQyxPQUFPLEVBQUUsU0FBUyxJQUFHLFdBQVcsQ0FBVSxDQUN0QyxDQUNSLENBQUMsQ0FBQztBQUNkLENBQUMsQ0FBdUMsRUFBRSxFQUFFLEtBQUssRUFBRTtRQUMzQyxJQUFJLEtBQUssS0FBSyxPQUFPLGFBQXFCLENBQUMsQ0FBQyxDQUFDO1FBQzdDLElBQUksV0FBVyxLQUFLLE9BQU8sbUJBQWlDLENBQUMsQ0FBQyxDQUFDO1FBQy9ELElBQUksU0FBUyxLQUFLLE9BQU8saUJBQTZCLENBQUMsQ0FBQyxDQUFDO1FBQ3pELElBQUksV0FBVyxLQUFLLE9BQU8sbUJBQWlDLENBQUMsQ0FBQyxDQUFDO1FBQy9ELElBQUksZ0JBQWdCLEtBQUssT0FBTyxnQkFBMkMsQ0FBQyxDQUFDLENBQUM7UUFDOUUsSUFBSSxNQUFNLEtBQUssT0FBTyxlQUF1QixDQUFDLENBQUMsQ0FBQztLQUNuRCxFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVByb21wdCB9IGZyb20gJy4vdXNlUHJvbXB0JztcbmltcG9ydCB7IFByb21wdERlZmF1bHRNb2RhbFByb3BzLCBQcm9tcHRNb2RhbFByb3BzIH0gZnJvbSAnLi9Qcm9tcHQudHlwZXMnO1xuaW1wb3J0IHsgTW9kYWwsIE1vZGFsQm9keSwgTW9kYWxGb290ZXIsIE1vZGFsSGVhZGVyIH0gZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vQnV0dG9uJztcbmltcG9ydCB7IGdldE1lc3NhZ2UgfSBmcm9tICcuL1Byb21wdEJhc2ljLnBhcnQnO1xuaW1wb3J0IHsgQWN0aW9uTGluayB9IGZyb20gJy4uL0FjdGlvbkxpbmsnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgZGlzdGFuY2UgfSBmcm9tICcuLi8uLi9kaXN0YW5jZSc7XG5leHBvcnQgY29uc3QgUHJvbXB0TW9kYWwgPSBPYmplY3QuYXNzaWduKCgoKHsgaGlzdG9yeSwgd2hlbiwgbWVzc2FnZSwgbW9kYWxPcHRpb25zIH0pID0+IHtcbiAgICBjb25zdCBbc2hvd01vZGFsLCBzZXRTaG93TW9kYWxdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtoYW5kbGVDb250aW51ZV0gPSB1c2VQcm9tcHQoKCkgPT4ge1xuICAgICAgICBzZXRTaG93TW9kYWwodHJ1ZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCAoKSA9PiBnZXRNZXNzYWdlKG1lc3NhZ2UpLCBoaXN0b3J5LCB3aGVuKTtcbiAgICByZXR1cm4gKDxEZWZhdWx0TW9kYWwgey4uLm1vZGFsT3B0aW9uc30gbWVzc2FnZT17Z2V0TWVzc2FnZShtZXNzYWdlKX0gb3Blbj17d2hlbiAmJiBzaG93TW9kYWx9IG9uQ29uZmlybT17KCkgPT4ge1xuICAgICAgICBzZXRTaG93TW9kYWwoZmFsc2UpO1xuICAgICAgICBoYW5kbGVDb250aW51ZSgpO1xuICAgICAgICBtb2RhbE9wdGlvbnMub25Db25maXJtICYmIG1vZGFsT3B0aW9ucy5vbkNvbmZpcm0oKTtcbiAgICB9fSBvbkNhbmNlbD17KCkgPT4ge1xuICAgICAgICBzZXRTaG93TW9kYWwoZmFsc2UpO1xuICAgICAgICBtb2RhbE9wdGlvbnMub25Db25maXJtICYmIG1vZGFsT3B0aW9ucy5vbkNhbmNlbCgpO1xuICAgIH19Lz4pO1xufSkgYXMgUmVhY3QuRkM8UHJvbXB0TW9kYWxQcm9wcz4pLCB7IGlubmVyOiB7XG4gICAgICAgIGdldCBEZWZhdWx0TW9kYWwoKSB7IHJldHVybiBEZWZhdWx0TW9kYWwgYXMgdHlwZW9mIERlZmF1bHRNb2RhbDsgfVxuICAgIH0gfSk7XG5jb25zdCBTdHlsZWRBY3Rpb25MaW5rID0gc3R5bGVkKEFjdGlvbkxpbmspIGBcbiAgcGFkZGluZzogMCAke2Rpc3RhbmNlLmxhcmdlfTtcbmA7XG5jb25zdCBEZWZhdWx0TW9kYWwgPSBPYmplY3QuYXNzaWduKCgoKHsgdGl0bGUsIG1lc3NhZ2UsIGNvbmZpcm1UZXh0ID0gJ09rJywgY2FuY2VsVGV4dCA9ICdDYW5jZWwnLCBvbkNvbmZpcm0sIG9uQ2FuY2VsLCBvcGVuLCB9KSA9PiB7XG4gICAgcmV0dXJuICg8TW9kYWwgb3Blbj17b3Blbn0+XG4gICAgICA8TW9kYWxIZWFkZXIgdGl0bGU9e3RpdGxlfS8+XG4gICAgICB7dHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIDxNb2RhbEJvZHk+e21lc3NhZ2V9PC9Nb2RhbEJvZHk+fVxuICAgICAgPE1vZGFsRm9vdGVyPlxuICAgICAgICA8U3R5bGVkQWN0aW9uTGluayBvbkNsaWNrPXtvbkNhbmNlbH0+e2NhbmNlbFRleHR9PC9TdHlsZWRBY3Rpb25MaW5rPlxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e29uQ29uZmlybX0+e2NvbmZpcm1UZXh0fTwvQnV0dG9uPlxuICAgICAgPC9Nb2RhbEZvb3Rlcj5cbiAgICA8L01vZGFsPik7XG59KSBhcyBSZWFjdC5GQzxQcm9tcHREZWZhdWx0TW9kYWxQcm9wcz4pLCB7IGlubmVyOiB7XG4gICAgICAgIGdldCBNb2RhbCgpIHsgcmV0dXJuIE1vZGFsIGFzIHR5cGVvZiBNb2RhbDsgfSxcbiAgICAgICAgZ2V0IE1vZGFsSGVhZGVyKCkgeyByZXR1cm4gTW9kYWxIZWFkZXIgYXMgdHlwZW9mIE1vZGFsSGVhZGVyOyB9LFxuICAgICAgICBnZXQgTW9kYWxCb2R5KCkgeyByZXR1cm4gTW9kYWxCb2R5IGFzIHR5cGVvZiBNb2RhbEJvZHk7IH0sXG4gICAgICAgIGdldCBNb2RhbEZvb3RlcigpIHsgcmV0dXJuIE1vZGFsRm9vdGVyIGFzIHR5cGVvZiBNb2RhbEZvb3RlcjsgfSxcbiAgICAgICAgZ2V0IFN0eWxlZEFjdGlvbkxpbmsoKSB7IHJldHVybiBTdHlsZWRBY3Rpb25MaW5rIGFzIHR5cGVvZiBTdHlsZWRBY3Rpb25MaW5rOyB9LFxuICAgICAgICBnZXQgQnV0dG9uKCkgeyByZXR1cm4gQnV0dG9uIGFzIHR5cGVvZiBCdXR0b247IH1cbiAgICB9IH0pO1xuIl19