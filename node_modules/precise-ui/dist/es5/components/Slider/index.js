"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var colors_1 = require("../../colors");
var IndicatorKnob_1 = require("../IndicatorKnob");
var InteractiveSurface_1 = require("../InteractiveSurface");
var hoc_1 = require("../../hoc");
var input_1 = require("../../utils/input");
var distance_1 = require("../../distance");
var utils_1 = require("../../utils");
var Tooltip_1 = require("../Tooltip");
function percent(value) {
    return typeof value === 'number' ? value * 100 + "%" : '50%';
}
var transitionDuration = '0.3s';
var transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';
var SliderContainer = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  position: relative;\n  outline: 0;\n  height: 100%;\n"], ["\n  position: relative;\n  outline: 0;\n  height: 100%;\n"])));
var SliderBar = styled_1.default(InteractiveSurface_1.InteractiveSurface)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  position: relative;\n  padding: ", ";\n  height: ", ";\n  width: ", ";\n  box-sizing: content-box;\n\n  &:after {\n    content: '';\n    display: block;\n    border-radius: ", ";\n    height: 100%;\n    width: 100%;\n    background: ", ";\n    transition: background ", " ", ";\n  }\n\n  &:hover {\n    cursor: pointer;\n\n    &:after {\n      background: ", ";\n    }\n  }\n"], ["\n  position: relative;\n  padding: ", ";\n  height: ", ";\n  width: ", ";\n  box-sizing: content-box;\n\n  &:after {\n    content: '';\n    display: block;\n    border-radius: ", ";\n    height: 100%;\n    width: 100%;\n    background: ",
    ";\n    transition: background ", " ", ";\n  }\n\n  &:hover {\n    cursor: pointer;\n\n    &:after {\n      background: ", ";\n    }\n  }\n"])), function (props) { return (props.orientation === 'vertical' ? "0 " + distance_1.distance.small : distance_1.distance.small + " 0"); }, function (props) { return (props.orientation === 'vertical' ? '100%' : distance_1.distance.xsmall); }, function (props) { return (props.orientation === 'vertical' ? distance_1.distance.xsmall : '100%'); }, distance_1.distance.small, styled_1.themed(function (props) { return props.disabled
    ? props.theme.ui3
    : props.active
        ? utils_1.transparentize(colors_1.ocean, 0.25)
        : utils_1.transparentize(props.theme.ui4, 0.25); }), transitionDuration, transitionEase, utils_1.transparentize(colors_1.ocean, 0.25));
var IndicatorBar = styled_1.default('div')(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  border-radius: ", ";\n  background: ", ";\n  transition: background ", " ", ";\n  height: ", ";\n  width: ", ";\n  position: absolute;\n  margin: auto;\n"], ["\n  border-radius: ", ";\n  background: ", ";\n  transition: background ", " ", ";\n  height: ", ";\n  width: ", ";\n  position: absolute;\n  margin: auto;\n"])), distance_1.distance.small, styled_1.themed(function (props) { return props.disabled ? props.theme.ui4 : props.active ? colors_1.ocean : utils_1.transparentize(props.theme.ui5, 0.75); }), transitionDuration, transitionEase, function (props) { return (props.vertical ? '100%' : distance_1.distance.xsmall); }, function (props) { return (props.vertical ? distance_1.distance.xsmall : 'auto'); });
var TooltipContainer = styled_1.default('div')(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  position: absolute;\n  ", ";\n  ", ";\n  width: 0;\n  height: 0;\n\n  > div {\n    display: ", ";\n  }\n"], ["\n  position: absolute;\n  ", ";\n  ", ";\n  width: 0;\n  height: 0;\n\n  > div {\n    display: ", ";\n  }\n"])), function (props) { return (props.vertical ? "top: " + props.value : "left: " + props.value); }, function (props) { return (props.vertical ? "left: " + distance_1.distance.large : "top: -" + distance_1.distance.large); }, function (props) { return (props.vertical ? "block" : "inline-block"); });
var SliderInt = /** @class */ (function (_super) {
    __extends(SliderInt, _super);
    function SliderInt(props) {
        var _this = _super.call(this, props) || this;
        _this.updateValue = function (e) {
            var _a = _this.props, _b = _a.maximum, maximum = _b === void 0 ? 1 : _b, _c = _a.minimum, minimum = _c === void 0 ? 0 : _c;
            var v = _this.state.vertical ? 1 - e.y : e.x;
            var position = minimum + v * (maximum - minimum);
            var value = _this.state.value;
            var length = Array.isArray(value) ? value.length : 1;
            var multi = length > 1;
            var knob = _this.state.active || (multi ? _this.getClosestKnob(position) : 1);
            _this.setValue(position, e.active ? knob : 0);
        };
        _this.control = function (e) {
            var _a = _this.props, _b = _a.minimum, minimum = _b === void 0 ? 0 : _b, _c = _a.maximum, maximum = _c === void 0 ? 1 : _c, onInput = _a.onInput;
            var _d = _this.props.step, step = _d === void 0 ? Math.min(1, (maximum - minimum) / 10) : _d;
            var _e = _this.state, active = _e.active, vertical = _e.vertical;
            var knob = active || 1;
            switch (e.keyCode) {
                case 38 /* up */:
                case 40 /* down */:
                    _this.controlKnob(vertical, 39 - e.keyCode, step);
                    break;
                case 37 /* left */:
                case 39 /* right */:
                    _this.controlKnob(!vertical, e.keyCode - 38, step);
                    break;
                case 36 /* home */:
                    _this.setValue(minimum, knob);
                    break;
                case 35 /* end */:
                    _this.setValue(maximum, knob);
                    break;
                case 27 /* escape */:
                    _this.setState({
                        active: 0,
                    });
                case 13 /* enter */:
                case 32 /* space */:
                default:
                    if (typeof onInput === 'function') {
                        onInput();
                    }
                    return;
            }
            e.preventDefault();
        };
        _this.handleMouseEnter = function () {
            _this.setState({ hovered: true });
        };
        _this.handleMouseLeave = function () {
            _this.setState({ hovered: false });
        };
        _this.updateTooltipValue = function (val) {
            var _a = _this.props, _b = _a.maximum, maximum = _b === void 0 ? 1 : _b, step = _a.step;
            var decimalPlaces = step && step < 1 ? _this.countDecimals(step) : 0;
            return !step && maximum <= 1 ? "" + val.toFixed(1) : "" + val.toFixed(decimalPlaces);
        };
        var value = props.value || props.defaultValue;
        _this.state = {
            value: Array.isArray(value) ? value : [value || 0],
            vertical: props.orientation === 'vertical',
            active: 0,
            controlled: typeof props.value !== 'undefined',
            hovered: false,
            error: props.error,
        };
        return _this;
    }
    SliderInt.prototype.componentDidMount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.subscribe(this);
        }
    };
    SliderInt.prototype.componentWillUnmount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    };
    SliderInt.prototype.UNSAFE_componentWillReceiveProps = function (_a) {
        var _b = _a.value, value = _b === void 0 ? this.state.value : _b, error = _a.error, orientation = _a.orientation;
        if (this.state.controlled) {
            this.setState({ value: value });
        }
        this.setState({
            vertical: orientation === 'vertical',
            error: error,
        });
    };
    SliderInt.prototype.getClosestKnob = function (current) {
        var values = this.state.value;
        if (Array.isArray(values)) {
            var dists = values.map(function (val) { return Math.abs(val - current); });
            var length_1 = dists.length;
            var minIndex = 0;
            for (var i = 0; i < length_1; i++) {
                var curValue = dists[i];
                var minValue = dists[minIndex];
                if (curValue < minValue || (curValue === minValue && current > values[i])) {
                    minIndex = i;
                }
            }
            return minIndex + 1;
        }
        return 1;
    };
    SliderInt.prototype.selectValue = function (selected, knob) {
        var _a = this.props.margin, margin = _a === void 0 ? 0 : _a;
        var current = this.state.value;
        if (Array.isArray(current)) {
            var value = current.slice();
            var upper = value[knob];
            var lower = value[knob - 2];
            if (lower + margin > selected) {
                value[knob - 1] = lower + margin;
            }
            else if (upper - margin < selected) {
                value[knob - 1] = upper - margin;
            }
            else {
                value[knob - 1] = selected;
            }
            return value;
        }
        return selected;
    };
    SliderInt.prototype.setValue = function (position, knob) {
        var _a = this.props, onChange = _a.onChange, onChangeDone = _a.onChangeDone, _b = _a.maximum, maximum = _b === void 0 ? 1 : _b, _c = _a.minimum, minimum = _c === void 0 ? 0 : _c, _d = _a.step, step = _d === void 0 ? 0 : _d, disabled = _a.disabled, form = _a.form, _e = _a.name, name = _e === void 0 ? '' : _e;
        if (!disabled) {
            var current = this.state.value;
            var length_2 = Array.isArray(current) ? current.length : 1;
            var multi = length_2 > 1;
            var previous = Array.isArray(current) ? current[knob - 1] : current;
            var valid = Math.abs(position - previous) >= step && position >= minimum && position <= maximum;
            var selected = position - (step && (position - previous) % step);
            if (!this.state.controlled && valid) {
                var value = this.selectValue(selected, knob);
                if (form) {
                    form.change({
                        name: name,
                        value: value,
                    });
                }
                else {
                    this.setState({
                        value: value,
                    });
                }
            }
            var event_1 = {
                value: selected,
                index: knob - 1,
                type: multi ? 'multi' : 'single',
            };
            if (valid && typeof onChange === 'function') {
                onChange(event_1);
            }
            if (knob !== this.state.active) {
                this.setState({
                    active: knob,
                });
                if (!knob && valid && typeof onChangeDone === 'function') {
                    onChangeDone(event_1);
                }
            }
        }
    };
    SliderInt.prototype.controlKnob = function (change, dir, step) {
        var _a = this.state, active = _a.active, value = _a.value;
        var length = Array.isArray(value) ? value.length : 1;
        var multi = length > 1;
        var knob = active || 1;
        if (change) {
            this.setValue(value[knob - 1] + dir * step, knob);
        }
        else if (multi) {
            var newActive = knob + dir;
            if (newActive <= length && newActive > 0) {
                this.setState({
                    active: newActive,
                });
            }
        }
    };
    SliderInt.prototype.countDecimals = function (val) {
        if (Math.floor(val) === val) {
            return 0;
        }
        return val.toString().split('.')[1].length || 0;
    };
    SliderInt.prototype.render = function () {
        var _this = this;
        var _a;
        var _b = this.props, _0 = _b.children, _1 = _b.value, _2 = _b.defaultValue, disabled = _b.disabled, _3 = _b.onChange, _4 = _b.onChangeDone, _5 = _b.margin, step = _b.step, _c = _b.minimum, minimum = _c === void 0 ? 0 : _c, _d = _b.maximum, maximum = _d === void 0 ? 1 : _d, color = _b.color, theme = _b.theme, info = _b.info, onBlur = _b.onBlur, onFocus = _b.onFocus, showTooltip = _b.showTooltip, props = __rest(_b, ["children", "value", "defaultValue", "disabled", "onChange", "onChangeDone", "margin", "step", "minimum", "maximum", "color", "theme", "info", "onBlur", "onFocus", "showTooltip"]);
        var _e = this.state, value = _e.value, active = _e.active, vertical = _e.vertical, hovered = _e.hovered, error = _e.error;
        var values = Array.isArray(value) ? value : [value];
        var ind = values.length === 1 ? (100 * (values[0] - minimum)) / (maximum - minimum) : 0;
        return (React.createElement(SliderContainer, { theme: theme, tabIndex: 0, onKeyDown: this.control, onBlur: onBlur, onFocus: onFocus, onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave },
            React.createElement(SliderBar, __assign({}, props, { theme: theme, onChange: this.updateValue, active: active !== 0, disabled: disabled }),
                ind > 0 && (React.createElement(IndicatorBar, { style: (_a = {}, _a[vertical ? 'height' : 'width'] = ind + "%", _a), vertical: vertical, active: active !== 0 || hovered, disabled: disabled })),
                values.map(function (val, index) { return (React.createElement("div", { key: index },
                    showTooltip && (React.createElement(TooltipContainer, { vertical: vertical, value: percent(vertical ? 1.0 - (val - minimum) / (maximum - minimum) : (val - minimum) / (maximum - minimum)) },
                        React.createElement(Tooltip_1.Tooltip, { content: _this.updateTooltipValue(val), position: vertical ? 'right' : 'top', open: active === index + 1 }))),
                    React.createElement(IndicatorKnob_1.IndicatorKnob, { x: vertical ? 0.5 : (val - minimum) / (maximum - minimum), y: vertical ? 1.0 - (val - minimum) / (maximum - minimum) : 0.5, key: index, color: color, active: active === index + 1 || hovered, theme: theme, disabled: disabled }))); })),
            input_1.showInputInfo(error, info)));
    };
    SliderInt.inner = {
        get SliderContainer() { return SliderContainer; },
        get SliderBar() { return SliderBar; },
        get IndicatorBar() { return IndicatorBar; },
        get TooltipContainer() { return TooltipContainer; },
        get Tooltip() { return Tooltip_1.Tooltip; },
        get IndicatorKnob() { return IndicatorKnob_1.IndicatorKnob; }
    };
    return SliderInt;
}(React.PureComponent));
/**
 * The slider component displays a data value picker in form of a sliding bar.
 */
exports.Slider = hoc_1.withFormContext(SliderInt);
exports.Slider.displayName = 'Slider';
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=data:application/json;base64,