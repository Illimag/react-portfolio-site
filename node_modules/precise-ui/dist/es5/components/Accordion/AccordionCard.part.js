"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var distance_1 = require("../../distance");
var List_1 = require("../List");
var ListItem_1 = require("../ListItem");
var indexHelper_1 = require("../AccordionTable/helpers/indexHelper");
var textStyles_1 = require("../../textStyles");
var animationDuration = '0.3s';
var animationFunction = 'cubic-bezier(0, 0, 0.25, 1)';
var StyledList = styled_1.default(List_1.List)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  overflow: visible;\n"], ["\n  overflow: visible;\n"])));
var StyledListItem = styled_1.default(ListItem_1.ListItem)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  padding: 0;\n  margin-bottom: ", ";\n  border: none;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n"], ["\n  padding: 0;\n  margin-bottom: ", ";\n  border: none;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n"])), distance_1.distance.xlarge);
var Container = styled_1.default.div(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  ", "\n\n  position: relative;\n  color: ", ";\n"], ["\n  ", "\n\n  position: relative;\n  color: ", ";\n"])), textStyles_1.getFontStyle({ size: 'medium' }), styled_1.themed(function (_a) {
    var theme = _a.theme;
    return theme.text1;
}));
var ContentContainer = styled_1.default.div(styled_1.themed(function (_a) {
    var open = _a.open, _b = _a.theme, ui1 = _b.ui1, ui2 = _b.ui2, ui4 = _b.ui4, ui5 = _b.ui5;
    return styled_1.css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n      ", "\n\n      padding: ", ";\n      background: ", ";\n      border: 1px solid ", ";\n      border-bottom: ", ";\n    "], ["\n      ", "\n\n      padding: ", ";\n      background: ", ";\n      border: 1px solid ", ";\n      border-bottom: ", ";\n    "])), textStyles_1.getFontStyle({ size: 'small' }), distance_1.distance.medium, open ? ui2 : ui1, open ? ui5 : ui4, open ? "1px solid " + ui4 : 'none');
}));
var DetailsContainerAnimator = styled_1.default('div')(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  transition: all ", " ", ";\n  max-height: ", ";\n  opacity: ", ";\n  overflow: hidden;\n"], ["\n  transition: all ", " ", ";\n  max-height: ", ";\n  opacity: ", ";\n  overflow: hidden;\n"])), animationDuration, animationFunction, function (_a) {
    var open = _a.open;
    return (open ? '10000px' : '0');
}, function (_a) {
    var open = _a.open;
    return (open ? '1' : '0');
});
var DetailsContainer = styled_1.default.div(styled_1.themed(function (_a) {
    var open = _a.open, _b = _a.theme, ui4 = _b.ui4, ui5 = _b.ui5;
    return styled_1.css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n      border-right: 1px solid ", ";\n      border-left: 1px solid ", ";\n    "], ["\n      border-right: 1px solid ", ";\n      border-left: 1px solid ", ";\n    "])), open ? ui5 : ui4, open ? ui5 : ui4);
}));
var ActionContainer = styled_1.default.div(styled_1.themed(function (_a) {
    var open = _a.open, _b = _a.theme, ui0 = _b.ui0, ui1 = _b.ui1;
    return styled_1.css(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n      text-align: center;\n      padding: ", " ", ";\n      cursor: pointer;\n      background: ", ";\n      border: ", ";\n      color: ", ";\n    "], ["\n      text-align: center;\n      padding: ", " ", ";\n      cursor: pointer;\n      background: ", ";\n      border: ", ";\n      color: ", ";\n    "])), distance_1.distance.small, distance_1.distance.medium, open ? ui1 : ui0, open ? "1px solid " + ui0 : 'none', open ? ui0 : ui1);
}));
var AccordionCard = /** @class */ (function (_super) {
    __extends(AccordionCard, _super);
    function AccordionCard(props) {
        var _this = _super.call(this, props) || this;
        _this.selects = [];
        _this.state = {
            selectedIndexes: props.selectedIndex !== undefined
                ? indexHelper_1.normalizeIndex(props.selectedIndex)
                : indexHelper_1.normalizeIndex(props.defaultSelectedIndex),
            controlled: props.selectedIndex !== undefined,
        };
        return _this;
    }
    AccordionCard.getDerivedStateFromProps = function (props, state) {
        var selectedIndex = props.selectedIndex, defaultSelectedIndex = props.defaultSelectedIndex;
        if (state.controlled && selectedIndex !== undefined) {
            return {
                selectedIndexes: indexHelper_1.normalizeIndex(selectedIndex),
            };
        }
        else if (defaultSelectedIndex !== undefined) {
            return {
                selectedIndexes: indexHelper_1.normalizeIndex(defaultSelectedIndex),
            };
        }
        return state;
    };
    AccordionCard.prototype.changeIndex = function (target) {
        var _a = this.props, onChange = _a.onChange, multiple = _a.multiple;
        var _b = this.state, controlled = _b.controlled, selectedIndexes = _b.selectedIndexes;
        var nextIndexes = indexHelper_1.toggleIndex(selectedIndexes, target, multiple);
        if (typeof onChange === 'function') {
            onChange({
                selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,
                previousIndex: multiple ? selectedIndexes : selectedIndexes[0] !== undefined ? selectedIndexes[0] : -1,
            });
        }
        if (!controlled) {
            this.setState({
                selectedIndexes: nextIndexes,
            });
        }
    };
    AccordionCard.prototype.render = function () {
        var _this = this;
        var selectedIndexes = this.state.selectedIndexes;
        var _a = this.props, children = _a.children, theme = _a.theme, _0 = _a.onChange, _1 = _a.selectedIndex, openLabel = _a.openLabel, closeLabel = _a.closeLabel;
        var items = [];
        var selects = this.selects;
        React.Children.forEach(children, function (element, index) {
            if (element && React.isValidElement(element)) {
                var header = element.props.header;
                var open_1 = indexHelper_1.hasIndex(selectedIndexes, index);
                if (selects[index] === undefined) {
                    selects[index] = function () { return _this.changeIndex(index); };
                }
                items.push(React.createElement(StyledListItem, { theme: theme, key: "item-" + index },
                    React.createElement(Container, { theme: theme },
                        React.createElement(ContentContainer, { theme: theme, open: open_1 }, header),
                        React.createElement(DetailsContainerAnimator, { open: open_1 },
                            React.createElement(DetailsContainer, { open: open_1 }, element)),
                        React.createElement(ActionContainer, { theme: theme, onClick: selects[index], open: open_1 }, open_1 ? closeLabel || 'Close Details' : openLabel || 'Open Details'))));
            }
        });
        return React.createElement(StyledList, { borderless: true }, items);
    };
    AccordionCard.inner = {
        get StyledListItem() { return StyledListItem; },
        get Container() { return Container; },
        get ContentContainer() { return ContentContainer; },
        get DetailsContainerAnimator() { return DetailsContainerAnimator; },
        get DetailsContainer() { return DetailsContainer; },
        get ActionContainer() { return ActionContainer; },
        get StyledList() { return StyledList; }
    };
    return AccordionCard;
}(React.Component));
exports.AccordionCard = AccordionCard;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7;
//# sourceMappingURL=data:application/json;base64,