import * as React from 'react';
import { PaginationBarLabels } from '../../utils/labels';
export interface PaginationBarSizeChangedEvent {
    size: number;
}
export interface PaginationBarPageChangedEvent {
    page: number;
}
export interface PaginationBarProps extends PaginationBarLabels {
    /**
     * The available maximum numbers of entries per page to choose from, if any.
     */
    availableSizes?: Array<number>;
    /**
     * The currently active page.
     */
    selectedPage: number;
    /**
     * The maximum number of entries per page.
     */
    size: number;
    /**
     * The total number of entries.
     */
    items: number;
    /**
     * Pages info label generator.
     * @default '{start} of {end} pages'
     */
    pagesInfo?(start: number, end: number): React.ReactChild;
    /**
     * Items info label generator.
     * @default '{start} - {end} of {total}'
     */
    itemsInfo?(start: number, end: number, total: number): React.ReactChild;
    /**
     * Event fired when the size per page has been changed.
     */
    onSizeChanged?(e: PaginationBarSizeChangedEvent): void;
    /**
     * Event fired when the selected page has been changed.
     */
    onPageChanged?(e: PaginationBarPageChangedEvent): void;
}
export declare class PaginationBar extends React.Component<PaginationBarProps> {
    private sizeChanged;
    private changeToPrevious;
    private changeToNext;
    private changeToSelect;
    private changeTo;
    render(): JSX.Element;
    static inner: {
        readonly ControlsContainer: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
        readonly ItemControls: React.FunctionComponent<import("./ItemControlsView.part").ItemControlsProps> & {
            inner: {
                readonly StyledItemControls: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
                readonly SelectButton: React.ComponentClass<import("react-onclickoutside").OnClickOutProps<import("../SelectButton").SelectButtonProps>, any>;
                readonly StyledItemsInfo: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
            };
        };
        readonly PageControls: React.FunctionComponent<import("./PageControls.part").PageControlsProps> & {
            inner: {
                readonly PageControlsStyled: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
                readonly StyledContainer: import("styled-components").StyledComponent<React.FunctionComponent<import("..").ContainerProps> & {
                    inner: {
                        readonly StyledContainer: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {
                            maxWidth?: number | undefined;
                            align: import("..").ContainerAlignment;
                        }, never>;
                    };
                }, import("../..").PreciseTheme, {}, never>;
                readonly ChangePage: import("styled-components").StyledComponent<"button", import("../..").PreciseTheme, import("./PageControls.part").ChangePageProps, never>;
                readonly Icon: React.FunctionComponent<import("..").IconProps> & {
                    inner: {
                        readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../..").PreciseTheme, {}, never>;
                    };
                };
                readonly SelectButton: React.ComponentClass<import("react-onclickoutside").OnClickOutProps<import("../SelectButton").SelectButtonProps>, any>;
            };
        };
    };
}
