import * as React from 'react';
declare type PositionType = 'top' | 'left' | 'bottom' | 'right';
export interface SidebarProps {
    /**
     * Element which triggers sidebar showing by click.
     */
    activator: React.ReactChild;
    /**
     * Determines where to show a sidebar. Valid positions are: left, right, top, bottom.
     * @default right
     */
    position?: PositionType;
    /**
     * Size in valid css units.
     * @default 275px
     */
    size?: string;
    /**
     * Determines if sidebar is opened or closed. Puts sidebar in controlled mode.
     */
    open?: boolean;
    /**
     * Fires this event after trigger element was clicked.
     */
    onShow?(): void;
    /**
     * Fires this event when sidebar should be closed.
     */
    onClose?(): void;
}
interface SidebarState {
    open: boolean;
}
export declare class Sidebar extends React.Component<SidebarProps, SidebarState> {
    private controlled;
    constructor(props: SidebarProps);
    UNSAFE_componentWillReceiveProps(props: SidebarProps): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private show;
    private hide;
    private onKeyPress;
    render(): JSX.Element;
    static inner: {
        readonly SidebarActivatorContainer: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
        readonly SidebarPopup: React.FunctionComponent<import("./SidebarPopup.part").SidebarPopupProps> & {
            inner: {
                readonly SidebarContainer: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, import("./SidebarContainer.part").SidebarContainer, never>;
                readonly CloseButton: React.FunctionComponent<React.HTMLAttributes<HTMLAnchorElement>> & {
                    inner: {
                        readonly StyledCloseButton: import("styled-components").StyledComponent<"a", import("../..").PreciseTheme, {}, never>;
                        readonly Icon: React.FunctionComponent<import("..").IconProps> & {
                            inner: {
                                readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../..").PreciseTheme, {}, never>;
                            };
                        };
                    };
                };
                readonly SidebarBlocker: React.FunctionComponent<import("./SidebarBlocker.part").SidebarBlockerProps> & {
                    inner: {
                        readonly StyledSidebarBlocker: import("styled-components").StyledComponent<typeof import("..").Blocker, import("../..").PreciseTheme, {
                            closing: boolean;
                        }, never>;
                    };
                };
            };
        };
    };
}
export {};
