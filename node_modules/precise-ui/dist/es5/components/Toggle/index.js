"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var hoc_1 = require("../../hoc");
var distance_1 = require("../../distance");
var IndicatorKnob_1 = require("../IndicatorKnob");
var textStyles_1 = require("../../textStyles");
var InputNotification_1 = require("../InputNotification");
var PaddedContainer_1 = require("../PaddedContainer");
var transitionDuration = '0.3s';
var transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';
var ToggleContainer = styled_1.default('div')(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", ";\n  position: relative;\n  display: inline-block;\n  cursor: ", ";\n  color: ", ";\n"], ["\n  ", ";\n  position: relative;\n  display: inline-block;\n  cursor: ", ";\n  color: ", ";\n"])), textStyles_1.getFontStyle({ size: 'medium' }), function (props) { return (props.disabled ? 'not-allowed' : 'pointer'); }, styled_1.themed(function (props) { return props.theme.text1; }));
var ToggleBoxWrapper = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: inline-block;\n  vertical-align: middle;\n  padding: ", " 0;\n"], ["\n  display: inline-block;\n  vertical-align: middle;\n  padding: ", " 0;\n"])), distance_1.distance.xsmall);
var StyledInput = styled_1.default.input(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n"], ["\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n"])));
var ToggleBox = styled_1.default('div')(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  outline: 0;\n  display: block;\n  width: ", ";\n  height: ", ";\n  border-radius: ", ";\n  position: relative;\n  background: ", ";\n  transition: all ", " ", ";\n"], ["\n  outline: 0;\n  display: block;\n  width: ", ";\n  height: ", ";\n  border-radius: ", ";\n  position: relative;\n  background: ", ";\n  transition: all ", " ", ";\n"])), distance_1.distance.xxlarge, distance_1.distance.medium, distance_1.distance.small, styled_1.themed(function (props) { return props.theme.ui4; }), transitionDuration, transitionEase);
var StyledLabel = styled_1.default.label(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  display: block;\n  margin-bottom: ", ";\n"], ["\n  display: block;\n  margin-bottom: ", ";\n"])), distance_1.distance.small);
var StyledDesc = styled_1.default.span(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  display: inline-block;\n  margin-left: ", ";\n  vertical-align: middle;\n"], ["\n  display: inline-block;\n  margin-left: ", ";\n  vertical-align: middle;\n"])), distance_1.distance.small);
var IndicatorKnobStyle = {
    transform: 'translate(0, -50%)',
};
var ToggleInt = /** @class */ (function (_super) {
    __extends(ToggleInt, _super);
    function ToggleInt(props) {
        var _this = _super.call(this, props) || this;
        _this.handleOnClick = function (e) {
            _this.changeValue();
            e.preventDefault();
        };
        _this.handleCheckboxChange = function () {
            _this.changeValue();
        };
        _this.handleCheckboxFocus = function () {
            _this.setState({
                focused: true,
            });
        };
        _this.handleCheckboxBlur = function () {
            _this.setState({
                focused: false,
            });
        };
        _this.state = {
            controlled: typeof props.value !== 'undefined',
            value: props.value || props.defaultValue || false,
            focused: false,
            error: props.error,
        };
        return _this;
    }
    ToggleInt.prototype.componentDidMount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.subscribe(this);
        }
    };
    ToggleInt.prototype.componentWillUnmount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    };
    ToggleInt.prototype.UNSAFE_componentWillReceiveProps = function (_a) {
        var _b = _a.value, value = _b === void 0 ? false : _b, error = _a.error;
        if (this.state.controlled) {
            this.setState({ value: value });
        }
        this.setState({ error: error });
    };
    ToggleInt.prototype.changeValue = function () {
        var _a = this.props, onChange = _a.onChange, disabled = _a.disabled, form = _a.form, _b = _a.name, name = _b === void 0 ? '' : _b;
        if (!disabled) {
            var _c = this.state, controlled = _c.controlled, value = _c.value;
            var status_1 = !value;
            if (!controlled) {
                if (form) {
                    form.change({
                        name: name,
                        value: status_1,
                    });
                }
                else {
                    this.setState({
                        value: status_1,
                    });
                }
            }
            if (typeof onChange === 'function') {
                onChange({
                    value: status_1,
                });
            }
        }
    };
    ToggleInt.prototype.render = function () {
        var _a = this.props, children = _a.children, disabled = _a.disabled, theme = _a.theme, _0 = _a.value, _1 = _a.defaultValue, _2 = _a.onChange, _3 = _a.onInput, info = _a.info, label = _a.label, props = __rest(_a, ["children", "disabled", "theme", "value", "defaultValue", "onChange", "onInput", "info", "label"]);
        var _b = this.state, value = _b.value, focused = _b.focused, error = _b.error;
        var containerProps = __assign({}, props, { theme: theme, onClick: this.handleOnClick, disabled: disabled });
        var boxProps = {
            checked: value,
            theme: theme,
        };
        return (React.createElement(ToggleContainer, __assign({}, containerProps),
            label && React.createElement(StyledLabel, { theme: theme }, label),
            React.createElement(ToggleBoxWrapper, null,
                React.createElement(StyledInput, { checked: value, onChange: this.handleCheckboxChange, onFocus: this.handleCheckboxFocus, onBlur: this.handleCheckboxBlur }),
                React.createElement(ToggleBox, __assign({}, boxProps),
                    React.createElement(IndicatorKnob_1.IndicatorKnob, { style: IndicatorKnobStyle, x: value ? 0.5 : 0, active: value, focus: focused, disabled: containerProps.disabled, animate: true }))),
            children && React.createElement(StyledDesc, null, children),
            (error || info) && (React.createElement(PaddedContainer_1.PaddedContainer, { top: "xsmall", bottom: "xsmall" },
                React.createElement(InputNotification_1.InputNotification, { error: error, info: info })))));
    };
    ToggleInt.inner = {
        get ToggleContainer() { return ToggleContainer; },
        get StyledLabel() { return StyledLabel; },
        get ToggleBoxWrapper() { return ToggleBoxWrapper; },
        get StyledInput() { return StyledInput; },
        get ToggleBox() { return ToggleBox; },
        get IndicatorKnob() { return IndicatorKnob_1.IndicatorKnob; },
        get StyledDesc() { return StyledDesc; },
        get PaddedContainer() { return PaddedContainer_1.PaddedContainer; },
        get InputNotification() { return InputNotification_1.InputNotification; }
    };
    return ToggleInt;
}(React.PureComponent));
/**
 * The toggle component displays a button to toggle a checked state.
 */
exports.Toggle = hoc_1.withFormContext(ToggleInt);
exports.Toggle.displayName = 'Toggle';
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=data:application/json;base64,