"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var interactivity_1 = require("../../utils/interactivity");
var Container = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  position: relative;\n  touch-action: ", ";\n  user-select: ", ";\n"], ["\n  position: relative;\n  touch-action: ", ";\n  user-select: ", ";\n"])), function (props) { return (props.disabled ? 'auto' : 'none'); }, function (props) { return (props.disabled ? 'auto' : 'none'); });
/**
 * The interactive surface provides a component that reacts on touch (or click) interactivity.
 */
var InteractiveSurface = /** @class */ (function (_super) {
    __extends(InteractiveSurface, _super);
    function InteractiveSurface() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mounted = false;
        _this.moved = false;
        _this.updateValue = function (x, y, active, rect, moved) {
            var canceled = true;
            if (_this.mounted) {
                var onChange = _this.props.onChange;
                _this.moved = _this.moved || moved;
                if (typeof onChange === 'function') {
                    onChange({
                        x: x,
                        y: y,
                        moved: _this.moved,
                        active: active,
                        rect: rect,
                        release: function () {
                            canceled = false;
                        },
                    });
                }
            }
            return canceled;
        };
        _this.changeValue = function (e) {
            var disabled = _this.props.disabled;
            _this.moved = false;
            if (!disabled) {
                interactivity_1.trackMouse(e, _this.updateValue);
            }
        };
        _this.preventValue = function (e) {
            var _a = _this.props, disabled = _a.disabled, opaque = _a.opaque;
            if (!disabled && !opaque && _this.moved) {
                e.preventDefault();
                e.stopPropagation();
            }
        };
        _this.changeTouchValue = function (e) {
            var disabled = _this.props.disabled;
            _this.moved = false;
            if (!disabled) {
                interactivity_1.trackTouch(e, _this.updateValue);
            }
        };
        return _this;
    }
    InteractiveSurface.prototype.UNSAFE_componentWillMount = function () {
        this.mounted = true;
    };
    InteractiveSurface.prototype.componentWillUnmount = function () {
        this.mounted = false;
    };
    InteractiveSurface.prototype.render = function () {
        var _a = this.props, children = _a.children, disabled = _a.disabled, _0 = _a.onChange, _1 = _a.opaque, props = __rest(_a, ["children", "disabled", "onChange", "opaque"]);
        return (React.createElement(Container, __assign({}, props, { onMouseDownCapture: this.changeValue, onClickCapture: this.preventValue, onTouchStartCapture: this.changeTouchValue }), children));
    };
    InteractiveSurface.inner = {
        get Container() { return Container; }
    };
    return InteractiveSurface;
}(React.Component));
exports.InteractiveSurface = InteractiveSurface;
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9JbnRlcmFjdGl2ZVN1cmZhY2UvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZCQUErQjtBQUMvQiw2Q0FBd0M7QUFFeEMsMkRBQW1FO0FBNkNuRSxJQUFNLFNBQVMsR0FBRyxnQkFBTSxDQUFDLEdBQUcsMklBQTBCLDJDQUVwQyxFQUEyQyxvQkFDNUMsRUFBMkMsS0FDM0QsS0FGaUIsVUFBQSxLQUFLLElBQUksT0FBQSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQWxDLENBQWtDLEVBQzVDLFVBQUEsS0FBSyxJQUFJLE9BQUEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFsQyxDQUFrQyxDQUMzRCxDQUFDO0FBQ0Y7O0dBRUc7QUFDSDtJQUF3QyxzQ0FBd0M7SUFBaEY7UUFBQSxxRUEyREM7UUExRFcsYUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixXQUFLLEdBQUcsS0FBSyxDQUFDO1FBT2QsaUJBQVcsR0FBRyxVQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsTUFBZSxFQUFFLElBQWdCLEVBQUUsS0FBYztZQUMxRixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDcEIsSUFBSSxLQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNOLElBQUEsK0JBQVEsQ0FBZ0I7Z0JBQ2hDLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUM7Z0JBQ2pDLElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFO29CQUNoQyxRQUFRLENBQUM7d0JBQ0wsQ0FBQyxHQUFBO3dCQUNELENBQUMsR0FBQTt3QkFDRCxLQUFLLEVBQUUsS0FBSSxDQUFDLEtBQUs7d0JBQ2pCLE1BQU0sUUFBQTt3QkFDTixJQUFJLE1BQUE7d0JBQ0osT0FBTzs0QkFDSCxRQUFRLEdBQUcsS0FBSyxDQUFDO3dCQUNyQixDQUFDO3FCQUNKLENBQUMsQ0FBQztpQkFDTjthQUNKO1lBQ0QsT0FBTyxRQUFRLENBQUM7UUFDcEIsQ0FBQyxDQUFDO1FBQ00saUJBQVcsR0FBRyxVQUFDLENBQW1DO1lBQzlDLElBQUEsK0JBQVEsQ0FBZ0I7WUFDaEMsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbkIsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDWCwwQkFBVSxDQUFDLENBQUMsRUFBRSxLQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbkM7UUFDTCxDQUFDLENBQUM7UUFDTSxrQkFBWSxHQUFHLFVBQUMsQ0FBbUM7WUFDakQsSUFBQSxnQkFBaUMsRUFBL0Isc0JBQVEsRUFBRSxrQkFBcUIsQ0FBQztZQUN4QyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ3BDLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDbkIsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO2FBQ3ZCO1FBQ0wsQ0FBQyxDQUFDO1FBQ00sc0JBQWdCLEdBQUcsVUFBQyxDQUFtQztZQUNuRCxJQUFBLCtCQUFRLENBQWdCO1lBQ2hDLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ1gsMEJBQVUsQ0FBQyxDQUFDLEVBQUUsS0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ25DO1FBQ0wsQ0FBQyxDQUFDOztJQVVOLENBQUM7SUF4REcsc0RBQXlCLEdBQXpCO1FBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQztJQUNELGlEQUFvQixHQUFwQjtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUEwQ0QsbUNBQU0sR0FBTjtRQUNJLElBQU0sZUFBdUUsRUFBckUsc0JBQVEsRUFBRSxzQkFBUSxFQUFFLGdCQUFZLEVBQUUsY0FBVSxFQUFFLGtFQUF1QixDQUFDO1FBQzlFLE9BQU8sQ0FBQyxvQkFBQyxTQUFTLGVBQUssS0FBSyxJQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixLQUNoSixRQUFRLENBQ0MsQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFDTSx3QkFBSyxHQUFHO1FBQ1gsSUFBSSxTQUFTLEtBQUssT0FBTyxTQUE2QixDQUFDLENBQUMsQ0FBQztLQUM1RCxDQUFDO0lBQ04seUJBQUM7Q0FBQSxBQTNERCxDQUF3QyxLQUFLLENBQUMsU0FBUyxHQTJEdEQ7QUEzRFksZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyB0cmFja01vdXNlLCB0cmFja1RvdWNoIH0gZnJvbSAnLi4vLi4vdXRpbHMvaW50ZXJhY3Rpdml0eSc7XG5leHBvcnQgaW50ZXJmYWNlIEludGVyYWN0aXZlU3VyZmFjZUNoYW5nZUV2ZW50IHtcbiAgICAvKipcbiAgICAgKiBSZWxhdGl2ZSBob3Jpem9udGFsIGNvb3JkaW5hdGUgKDAgdG8gMSkuXG4gICAgICovXG4gICAgeDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFJlbGF0aXZlIHZlcnRpY2FsIGNvb3JkaW5hdGUgKDAgdG8gMSkuXG4gICAgICovXG4gICAgeTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEdldHMgaWYgdGhlIGRyYWdnaW5nIGlzIGN1cnJlbnRseSBhY3RpdmUuXG4gICAgICovXG4gICAgYWN0aXZlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEdldHMgaWYgYW55IG1vdmUgd2FzIGRldGVjdGVkIHVwIHVudGlsIG5vdy5cbiAgICAgKi9cbiAgICBtb3ZlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhc3NvY2lhdGVkIGFic29sdXRlIGRpbWVuc2lvbnMuXG4gICAgICovXG4gICAgcmVjdDogQ2xpZW50UmVjdDtcbiAgICAvKipcbiAgICAgKiBSZWxlYXNlcyB0aGUgZHJhZyBoYW5kbGVyIGZyb20gdGhlIHN1cmZhY2UuXG4gICAgICovXG4gICAgcmVsZWFzZSgpOiB2b2lkO1xufVxuZXhwb3J0IGludGVyZmFjZSBJbnRlcmFjdGl2ZVN1cmZhY2VQcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICAgIC8qKlxuICAgICAqIEV2ZW50IHRoYXQgaXMgZmlyZWQgb25jZSBpbnRlcmFjdGlvbiB3aXRoIHRoZSBjb21wb25lbnQgaXMgaGFwcGVuaW5nLlxuICAgICAqL1xuICAgIG9uQ2hhbmdlPyhlOiBJbnRlcmFjdGl2ZVN1cmZhY2VDaGFuZ2VFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBpbnRlcmFjdGl2aXR5IGlzIGRpc2FibGVkLCBpLmUuLCB0b3VjaCBldGMuIGJlaGF2ZXMgYXMgYSBzY3JvbGwuXG4gICAgICovXG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFBhc3NlcyB0aGUgZXZlbnQgY2FwdHVyaW5nIG9uIHRvIGNoaWxkcmVuLCBzdWNoIHRoYXQgbGlua3MgZXRjLiBjYW4gYmUgY2xpY2tlZC5cbiAgICAgKi9cbiAgICBvcGFxdWU/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb250YWluZXIuXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG59XG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2PEludGVyYWN0aXZlU3VyZmFjZVByb3BzPiBgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG91Y2gtYWN0aW9uOiAke3Byb3BzID0+IChwcm9wcy5kaXNhYmxlZCA/ICdhdXRvJyA6ICdub25lJyl9O1xuICB1c2VyLXNlbGVjdDogJHtwcm9wcyA9PiAocHJvcHMuZGlzYWJsZWQgPyAnYXV0bycgOiAnbm9uZScpfTtcbmA7XG4vKipcbiAqIFRoZSBpbnRlcmFjdGl2ZSBzdXJmYWNlIHByb3ZpZGVzIGEgY29tcG9uZW50IHRoYXQgcmVhY3RzIG9uIHRvdWNoIChvciBjbGljaykgaW50ZXJhY3Rpdml0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludGVyYWN0aXZlU3VyZmFjZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJbnRlcmFjdGl2ZVN1cmZhY2VQcm9wcz4ge1xuICAgIHByaXZhdGUgbW91bnRlZCA9IGZhbHNlO1xuICAgIHByaXZhdGUgbW92ZWQgPSBmYWxzZTtcbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHByaXZhdGUgdXBkYXRlVmFsdWUgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIGFjdGl2ZTogYm9vbGVhbiwgcmVjdDogQ2xpZW50UmVjdCwgbW92ZWQ6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgbGV0IGNhbmNlbGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgICAgICAgY29uc3QgeyBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIHRoaXMubW92ZWQgPSB0aGlzLm1vdmVkIHx8IG1vdmVkO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgeSxcbiAgICAgICAgICAgICAgICAgICAgbW92ZWQ6IHRoaXMubW92ZWQsXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVjdCxcbiAgICAgICAgICAgICAgICAgICAgcmVsZWFzZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbmNlbGVkO1xuICAgIH07XG4gICAgcHJpdmF0ZSBjaGFuZ2VWYWx1ZSA9IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50PikgPT4ge1xuICAgICAgICBjb25zdCB7IGRpc2FibGVkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICB0aGlzLm1vdmVkID0gZmFsc2U7XG4gICAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRyYWNrTW91c2UoZSwgdGhpcy51cGRhdGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHByaXZhdGUgcHJldmVudFZhbHVlID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZGlzYWJsZWQsIG9wYXF1ZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKCFkaXNhYmxlZCAmJiAhb3BhcXVlICYmIHRoaXMubW92ZWQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHByaXZhdGUgY2hhbmdlVG91Y2hWYWx1ZSA9IChlOiBSZWFjdC5Ub3VjaEV2ZW50PEhUTUxEaXZFbGVtZW50PikgPT4ge1xuICAgICAgICBjb25zdCB7IGRpc2FibGVkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICB0aGlzLm1vdmVkID0gZmFsc2U7XG4gICAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRyYWNrVG91Y2goZSwgdGhpcy51cGRhdGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbiwgZGlzYWJsZWQsIG9uQ2hhbmdlOiBfMCwgb3BhcXVlOiBfMSwgLi4ucHJvcHMgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiAoPENvbnRhaW5lciB7Li4ucHJvcHN9IG9uTW91c2VEb3duQ2FwdHVyZT17dGhpcy5jaGFuZ2VWYWx1ZX0gb25DbGlja0NhcHR1cmU9e3RoaXMucHJldmVudFZhbHVlfSBvblRvdWNoU3RhcnRDYXB0dXJlPXt0aGlzLmNoYW5nZVRvdWNoVmFsdWV9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L0NvbnRhaW5lcj4pO1xuICAgIH1cbiAgICBzdGF0aWMgaW5uZXIgPSB7XG4gICAgICAgIGdldCBDb250YWluZXIoKSB7IHJldHVybiBDb250YWluZXIgYXMgdHlwZW9mIENvbnRhaW5lcjsgfVxuICAgIH07XG59XG4iXX0=