import * as React from 'react';
import { StandardProps } from '../../common';
export interface InteractiveSurfaceChangeEvent {
    /**
     * Relative horizontal coordinate (0 to 1).
     */
    x: number;
    /**
     * Relative vertical coordinate (0 to 1).
     */
    y: number;
    /**
     * Gets if the dragging is currently active.
     */
    active: boolean;
    /**
     * Gets if any move was detected up until now.
     */
    moved: boolean;
    /**
     * Gets the associated absolute dimensions.
     */
    rect: ClientRect;
    /**
     * Releases the drag handler from the surface.
     */
    release(): void;
}
export interface InteractiveSurfaceProps extends StandardProps {
    /**
     * Event that is fired once interaction with the component is happening.
     */
    onChange?(e: InteractiveSurfaceChangeEvent): void;
    /**
     * Determines if interactivity is disabled, i.e., touch etc. behaves as a scroll.
     */
    disabled?: boolean;
    /**
     * Passes the event capturing on to children, such that links etc. can be clicked.
     */
    opaque?: boolean;
    /**
     * The content of the container.
     */
    children?: React.ReactNode;
}
/**
 * The interactive surface provides a component that reacts on touch (or click) interactivity.
 */
export declare class InteractiveSurface extends React.Component<InteractiveSurfaceProps> {
    private mounted;
    private moved;
    UNSAFE_componentWillMount(): void;
    componentWillUnmount(): void;
    private updateValue;
    private changeValue;
    private preventValue;
    private changeTouchValue;
    render(): JSX.Element;
    static inner: {
        readonly Container: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, InteractiveSurfaceProps, never>;
    };
}
