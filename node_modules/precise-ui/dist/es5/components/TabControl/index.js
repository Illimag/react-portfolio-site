"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
/**
 * The functional component to handle tabs.
 * DEPRECATED: Please use `withTabControl` instead.
 * @deprecated
 */
var TabControl = /** @class */ (function (_super) {
    __extends(TabControl, _super);
    function TabControl(props) {
        var _this = _super.call(this, props) || this;
        _this.selects = [];
        _this.changeIndex = function (target) {
            var change = _this.props.onTabChange;
            if (typeof change === 'function') {
                change({
                    previousIndex: _this.state.selectedIndex,
                    selectedIndex: target,
                });
            }
            if (!_this.state.controlled) {
                _this.setState({
                    selectedIndex: target,
                });
            }
        };
        _this.state = {
            selectedIndex: props.selectedIndex || props.defaultIndex || 0,
            controlled: props.selectedIndex !== undefined,
        };
        return _this;
    }
    TabControl.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        var selectedIndex = nextProps.selectedIndex;
        if (this.state.controlled && typeof selectedIndex === 'number') {
            this.setState({
                selectedIndex: selectedIndex,
            });
        }
    };
    TabControl.prototype.render = function () {
        var _this = this;
        var selectedIndex = this.state.selectedIndex;
        var _a = this.props, children = _a.children, render = _a.render;
        var items = [];
        var selects = this.selects;
        React.Children.forEach(children, function (element, index) {
            if (element && React.isValidElement(element)) {
                var active = index === selectedIndex;
                if (selects[index] === undefined) {
                    selects[index] = function () { return _this.changeIndex(index); };
                }
                items.push({
                    onSelect: selects[index],
                    active: active,
                    element: element,
                });
            }
        });
        return render(items);
    };
    return TabControl;
}(React.PureComponent));
exports.TabControl = TabControl;
function isTabPage(child) {
    return !!child;
}
function useTabControl(_a) {
    var children = _a.children, selectedIndex = _a.selectedIndex, defaultIndex = _a.defaultIndex, onTabChange = _a.onTabChange;
    var controlled = React.useState(selectedIndex !== undefined)[0];
    var _b = React.useState(selectedIndex || defaultIndex || 0), activeTabIndex = _b[0], setActiveTabIndex = _b[1];
    React.useEffect(function () {
        if (controlled && typeof selectedIndex === 'number') {
            setActiveTabIndex(selectedIndex);
        }
    }, [selectedIndex]);
    var elements = React.useMemo(function () { return (React.Children.map(children, function (child) { return (React.isValidElement(child) ? child : undefined); }) || []).filter(isTabPage); }, [children]);
    var headers = React.useMemo(function () { return elements.map(function (child) { return child.props.header; }); }, [elements]);
    var onSelect = React.useCallback(function (selectedIndex) {
        setActiveTabIndex(function (previousIndex) {
            if (typeof onTabChange === 'function') {
                onTabChange({
                    previousIndex: previousIndex,
                    selectedIndex: selectedIndex,
                });
            }
            return controlled ? previousIndex : selectedIndex;
        });
    }, [onTabChange, controlled]);
    return {
        elements: elements,
        headers: headers,
        activeTabIndex: activeTabIndex,
        onSelect: onSelect,
        isActive: function (index) {
            return activeTabIndex === index;
        },
    };
}
function withTabControl(Component) {
    var TabControl = Object.assign((function (_a) {
        var children = _a.children, Element = _a.tabItemRenderer, rest = __rest(_a, ["children", "tabItemRenderer"]);
        var _b = useTabControl(__assign({ children: children }, rest)), elements = _b.elements, headers = _b.headers, activeTabIndex = _b.activeTabIndex, isActive = _b.isActive, onSelect = _b.onSelect;
        return (React.createElement(Component, __assign({}, rest, { headers: headers, activeIndex: activeTabIndex, onSelect: onSelect }), elements.map(function (child, i) { return (React.createElement(Element, { key: "item-" + i, active: isActive(i) }, child)); })));
    }), { inner: {
            get Component() { return Component; }
        } });
    return TabControl;
}
exports.withTabControl = withTabControl;
//# sourceMappingURL=data:application/json;base64,