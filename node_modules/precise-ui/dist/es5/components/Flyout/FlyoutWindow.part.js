"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var withResponsive_1 = require("../../hoc/withResponsive");
var distance_1 = require("../../distance");
var textStyles_1 = require("../../textStyles");
var toolTipArrowSize = 18;
function getFlyoutArrowPosition(_a) {
    var mainPosition = _a.mainPosition, origSecondaryPosition = _a.secondaryPosition, offset = _a.offset, targetRect = _a.targetRect, flyoutRect = _a.flyoutRect;
    var _b;
    if (mainPosition && flyoutRect.width) {
        var vertical = isVertical(mainPosition);
        var mainAxisTargetSize = vertical ? targetRect.height : targetRect.width;
        var secondaryAxisTargetSize = vertical ? targetRect.width : targetRect.height;
        var secondaryAxisContnetSize = vertical ? flyoutRect.width : flyoutRect.height;
        var mainPositionValue = mainAxisTargetSize + offset + 1 - toolTipArrowSize / 2;
        var secondaryPosition = void 0;
        var secondaryPositionValue = void 0;
        if (!origSecondaryPosition) {
            secondaryPosition = vertical ? 'left' : 'top';
            secondaryPositionValue = (secondaryAxisTargetSize - toolTipArrowSize) / 2;
        }
        else {
            secondaryPosition = origSecondaryPosition;
            secondaryPositionValue =
                secondaryAxisTargetSize / 4 > secondaryAxisContnetSize - toolTipArrowSize
                    ? secondaryAxisContnetSize - toolTipArrowSize
                    : secondaryAxisTargetSize / 4;
        }
        var rotate = {
            top: 0,
            left: -90,
            right: 90,
            bottom: 180,
        };
        return _b = {
                rotate: rotate[mainPosition]
            },
            _b[invertPosition(mainPosition)] = mainPositionValue,
            _b[secondaryPosition] = secondaryPositionValue,
            _b;
    }
    return {};
}
function getDetailedPositionInfo(_a) {
    var targetRect = _a.targetRect, dimensions = _a.dimensions, flyoutRect = _a.flyoutRect;
    var viewportPosition = {
        left: targetRect.left,
        right: dimensions.width - targetRect.right,
        top: targetRect.top,
        bottom: dimensions.height - targetRect.bottom,
    };
    var hasEnoughSpace = {};
    var hasMoreSpace = {};
    for (var _i = 0, _b = Object.keys(viewportPosition); _i < _b.length; _i++) {
        var position = _b[_i];
        if (isVertical(position)) {
            // There is always enought space for top/bottom flyout when it lays outside of the viewport.
            hasEnoughSpace[position] = targetRect.top > dimensions.height || viewportPosition[position] > flyoutRect.height;
        }
        else {
            hasEnoughSpace[position] = viewportPosition[position] > flyoutRect.width;
        }
        hasMoreSpace[position] = viewportPosition[position] > viewportPosition[invertPosition(position)];
    }
    return {
        viewportPosition: viewportPosition,
        hasEnoughSpace: hasEnoughSpace,
        hasMoreSpace: hasMoreSpace,
    };
}
function getMainAxisFlyoutPositionAndSize(_a) {
    var direction = _a.direction, targetRect = _a.targetRect, offset = _a.offset, dimensions = _a.dimensions, vertical = _a.vertical, flyoutRect = _a.flyoutRect;
    var targetSize = vertical ? targetRect.height : targetRect.width;
    var flyoutSize = vertical ? flyoutRect.height : flyoutRect.width;
    var _b = getDetailedPositionInfo({
        targetRect: targetRect,
        dimensions: dimensions,
        flyoutRect: flyoutRect,
    }), hasEnoughSpace = _b.hasEnoughSpace, viewportPosition = _b.viewportPosition;
    var sizeValue = hasEnoughSpace[direction]
        ? flyoutSize
        : viewportPosition[direction] - (offset + toolTipArrowSize / 2) - distance_1.distancePx.medium;
    return {
        position: {
            name: invertPosition(direction),
            value: targetSize + (offset + toolTipArrowSize / 2),
        },
        size: {
            name: vertical ? 'height' : 'width',
            value: sizeValue,
        },
    };
}
function getSecondaryAxisFlyoutPositionAndSize(_a) {
    var direction = _a.direction, targetRect = _a.targetRect, dimensions = _a.dimensions, vertical = _a.vertical, flyoutRect = _a.flyoutRect;
    var positionValue;
    var positionName;
    var sizeName = vertical ? 'width' : 'height';
    var targetSize = vertical ? targetRect.width : targetRect.height;
    var targetPosition = vertical ? targetRect.left : targetRect.top;
    var flyoutSize = vertical ? flyoutRect.width : flyoutRect.height;
    var windowSize = vertical ? dimensions.width : dimensions.height;
    var viewportPosition = getDetailedPositionInfo({
        targetRect: targetRect,
        dimensions: dimensions,
        flyoutRect: flyoutRect,
    }).viewportPosition;
    var sizeValue = flyoutSize;
    if (direction === undefined) {
        positionName = vertical ? 'left' : 'top';
        var centeredValue = (targetSize - flyoutSize) / 2;
        if (viewportPosition[positionName] > 0 && viewportPosition[positionName] + centeredValue < 0) {
            positionValue = -viewportPosition[positionName] + distance_1.distancePx.medium;
            sizeValue = flyoutSize > windowSize ? windowSize - distance_1.distancePx.xlarge : flyoutSize;
        }
        else {
            positionValue = centeredValue;
        }
    }
    else {
        positionName = direction;
        positionValue =
            positionName === 'top' || positionName === 'left'
                ? 0
                : targetPosition - flyoutSize > 0
                    ? targetSize - flyoutSize
                    : -targetPosition + distance_1.distancePx.medium;
        if (positionName === 'top' || positionName === 'left') {
            sizeValue =
                targetPosition + positionValue + flyoutSize > windowSize
                    ? windowSize - targetPosition + positionValue - distance_1.distancePx.medium
                    : flyoutSize;
        }
        else {
            sizeValue =
                flyoutSize > targetPosition + targetSize ? targetPosition + targetSize - distance_1.distancePx.medium : flyoutSize;
            positionName = invertPosition(positionName);
        }
    }
    return {
        position: {
            name: positionName,
            value: positionValue,
        },
        size: {
            name: sizeName,
            value: sizeValue,
        },
    };
}
function invertPosition(position) {
    var invertedPosition = {
        top: 'bottom',
        left: 'right',
        right: 'left',
        bottom: 'top',
    };
    return invertedPosition[position];
}
function isVertical(position) {
    return position === 'top' || position === 'bottom' ? true : false;
}
var StyledFlyoutWindow = styled_1.default('div')(styled_1.themed(function (_a) {
    var theme = _a.theme, size = _a.size, position = _a.position, noGutter = _a.noGutter;
    return styled_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      ", "\n\n      position: absolute;\n      z-index: 100;\n      box-sizing: border-box;\n      box-shadow: 0 2px 6px 0 rgba(75, 78, 82, 0.2);\n      border: 1px solid ", ";\n      background: ", ";\n      color: ", ";\n      max-width: ", ";\n      max-height: ", ";\n      ", " box-sizing: border-box;\n\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      overflow: auto;\n    "], ["\n      ", "\n\n      position: absolute;\n      z-index: 100;\n      box-sizing: border-box;\n      box-shadow: 0 2px 6px 0 rgba(75, 78, 82, 0.2);\n      border: 1px solid ", ";\n      background: ", ";\n      color: ", ";\n      max-width: ", ";\n      max-height: ", ";\n      ", " box-sizing: border-box;\n\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      overflow: auto;\n    "])), textStyles_1.getFontStyle({ size: 'medium' }), theme.ui4, theme.flyout.background, theme.flyout.textColor, theme.flyout.maxWidth, theme.flyout.maxHeight, !noGutter ? "padding: " + distance_1.distance.small + " " + distance_1.distance.medium + ";" : '', size && size.width !== undefined ? "width: " + size.width + "px" : '', size && size.height !== undefined ? "height: " + size.height + "px" : '', position && position.top !== undefined ? "top: " + position.top + "px" : '', position && position.left !== undefined ? "left: " + position.left + "px" : '', position && position.bottom !== undefined ? "bottom: " + position.bottom + "px" : '', position && position.right !== undefined ? "right: " + position.right + "px" : '');
}));
var StyledFlyoutArrow = styled_1.default('div')(styled_1.themed(function (_a) {
    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right, rotate = _a.rotate, theme = _a.theme;
    return styled_1.css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      pointer-events: none;\n      position: absolute;\n      z-index: 101;\n      width: ", "px;\n      height: ", "px;\n\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n\n      :before {\n        content: ' ';\n        position: absolute;\n        top: 0;\n        left: 0;\n        border-style: solid;\n        border-width: ", "px;\n        border-color: ", " transparent transparent transparent;\n      }\n\n      :after {\n        content: ' ';\n        position: absolute;\n        top: 0;\n        left: 0;\n        border-style: solid;\n        border-width: ", "px;\n        margin-left: 1px;\n        border-color: ", " transparent transparent transparent;\n      }\n    "], ["\n      pointer-events: none;\n      position: absolute;\n      z-index: 101;\n      width: ", "px;\n      height: ", "px;\n\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n\n      :before {\n        content: ' ';\n        position: absolute;\n        top: 0;\n        left: 0;\n        border-style: solid;\n        border-width: ", "px;\n        border-color: ", " transparent transparent transparent;\n      }\n\n      :after {\n        content: ' ';\n        position: absolute;\n        top: 0;\n        left: 0;\n        border-style: solid;\n        border-width: ", "px;\n        margin-left: 1px;\n        border-color: ", " transparent transparent transparent;\n      }\n    "])), toolTipArrowSize, toolTipArrowSize, top !== undefined ? "top: " + top + "px" : '', left !== undefined ? "left: " + left + "px" : '', bottom !== undefined ? "bottom: " + bottom + "px" : '', right !== undefined ? "right: " + right + "px" : '', rotate !== undefined ? "transform: rotate(" + rotate + "deg)" : '', toolTipArrowSize / 2, theme.ui4, toolTipArrowSize / 2 - 1, theme.flyout.background);
}));
var FlyoutWindowInt = /** @class */ (function (_super) {
    __extends(FlyoutWindowInt, _super);
    function FlyoutWindowInt(props) {
        var _this = _super.call(this, props) || this;
        _this.scrollPosition = { top: 0, left: 0 };
        _this.setFlyoutRef = function (el) {
            if (_this.flyoutContainer) {
                _this.flyoutContainer.removeEventListener('scroll', _this.onScroll);
            }
            if (el) {
                el.addEventListener('scroll', _this.onScroll);
            }
            _this.flyoutContainer = el;
        };
        _this.onScroll = function (e) {
            if (e.target && e.target instanceof HTMLElement) {
                _this.scrollPosition = {
                    top: e.target.scrollTop,
                    left: e.target.scrollLeft,
                };
            }
        };
        _this.state = {
            flyoutRect: undefined,
            children: undefined,
        };
        return _this;
    }
    FlyoutWindowInt.getDerivedStateFromProps = function (nextProps, prevState) {
        if (nextProps.children !== prevState.children) {
            return {
                flyoutRect: undefined,
                children: nextProps.children,
            };
        }
        return {
            children: nextProps.children,
        };
    };
    FlyoutWindowInt.prototype.componentDidMount = function () {
        if (this.flyoutContainer) {
            this.updateMeasurements();
        }
    };
    FlyoutWindowInt.prototype.componentWillUnmount = function () {
        if (this.flyoutContainer) {
            this.flyoutContainer.removeEventListener('scroll', this.onScroll);
        }
    };
    FlyoutWindowInt.prototype.componentDidUpdate = function () {
        if (this.flyoutContainer) {
            if (!this.state.flyoutRect) {
                this.updateMeasurements();
            }
            if (this.flyoutContainer.scroll) {
                this.flyoutContainer.scroll({
                    top: this.scrollPosition.top,
                    left: this.scrollPosition.left,
                });
            }
        }
    };
    FlyoutWindowInt.prototype.updateMeasurements = function () {
        if (this.flyoutContainer) {
            var flyoutRect = this.flyoutContainer.getBoundingClientRect();
            this.setState({
                flyoutRect: flyoutRect,
            });
        }
    };
    FlyoutWindowInt.prototype.getFlyoutDimensions = function () {
        var _a, _b;
        var flyoutRect = this.state.flyoutRect;
        if (!flyoutRect) {
            return {};
        }
        var _c = this.props, position = _c.position, _d = _c.defaultPosition, defaultPosition = _d === void 0 ? 'bottom' : _d, _e = _c.offset, offset = _e === void 0 ? 4 : _e, dimensions = _c.dimensions, targetRect = _c.targetRect;
        var _f = (position || defaultPosition).split('-'), mainPosition = _f[0], secondaryPosition = _f[1];
        if (!dimensions || !mainPosition) {
            return {};
        }
        var vertical = isVertical(mainPosition);
        var _g = getDetailedPositionInfo({
            targetRect: targetRect,
            dimensions: dimensions,
            flyoutRect: flyoutRect,
        }), hasMoreSpace = _g.hasMoreSpace, hasEnoughSpace = _g.hasEnoughSpace;
        var mainDirection = mainPosition;
        var main = getMainAxisFlyoutPositionAndSize({
            direction: mainDirection,
            targetRect: targetRect,
            offset: offset,
            dimensions: dimensions,
            vertical: vertical,
            flyoutRect: flyoutRect,
        });
        if (!position && !hasEnoughSpace[mainDirection] && !hasMoreSpace[mainDirection]) {
            mainDirection = invertPosition(mainDirection);
            main = getMainAxisFlyoutPositionAndSize({
                direction: mainDirection,
                targetRect: targetRect,
                offset: offset,
                dimensions: dimensions,
                vertical: vertical,
                flyoutRect: flyoutRect,
            });
        }
        var secondaryDirection = secondaryPosition;
        var secondary = getSecondaryAxisFlyoutPositionAndSize({
            direction: secondaryDirection,
            targetRect: targetRect,
            dimensions: dimensions,
            vertical: vertical,
            flyoutRect: flyoutRect,
        });
        if (!position && secondaryDirection && !hasEnoughSpace[secondaryDirection] && hasMoreSpace[secondaryDirection]) {
            secondaryDirection = invertPosition(secondaryDirection);
            secondary = getSecondaryAxisFlyoutPositionAndSize({
                direction: secondaryDirection,
                targetRect: targetRect,
                dimensions: dimensions,
                vertical: vertical,
                flyoutRect: flyoutRect,
            });
        }
        return {
            position: (_a = {},
                _a[main.position.name] = main.position.value,
                _a[secondary.position.name] = secondary.position.value,
                _a),
            size: (_b = {},
                _b[main.size.name] = main.size.value,
                _b[secondary.size.name] = secondary.size.value,
                _b),
            arrowPosition: getFlyoutArrowPosition({
                mainPosition: mainDirection,
                secondaryPosition: secondaryDirection,
                offset: offset,
                targetRect: targetRect,
                flyoutRect: flyoutRect,
            }),
        };
    };
    FlyoutWindowInt.prototype.render = function () {
        var _a = this.props, children = _a.children, _0 = _a.targetRect, _1 = _a.position, _2 = _a.offset, _3 = _a.dimensions, _4 = _a.innerRef, props = __rest(_a, ["children", "targetRect", "position", "offset", "dimensions", "innerRef"]);
        var _b = this.getFlyoutDimensions(), arrowPosition = _b.arrowPosition, flyoutDimensions = __rest(_b, ["arrowPosition"]);
        return (children && (React.createElement(React.Fragment, null,
            React.createElement(StyledFlyoutArrow, __assign({}, arrowPosition, { theme: props.theme })),
            React.createElement(StyledFlyoutWindow, __assign({}, flyoutDimensions, props, { ref: this.setFlyoutRef }), children))));
    };
    FlyoutWindowInt.inner = {
        get StyledFlyoutArrow() { return StyledFlyoutArrow; },
        get StyledFlyoutWindow() { return StyledFlyoutWindow; }
    };
    return FlyoutWindowInt;
}(React.Component));
exports.FlyoutWindowInt = FlyoutWindowInt;
exports.FlyoutWindow = withResponsive_1.withResponsive(FlyoutWindowInt);
var templateObject_1, templateObject_2;
//# sourceMappingURL=data:application/json;base64,