"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var Prompt_1 = require("../Prompt");
var contexts_1 = require("../../contexts");
var StyledForm = styled_1.default.form(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  margin: 0;\n"], ["\n  margin: 0;\n"])));
function isDifferent(a, b) {
    if (a !== b) {
        if (Array.isArray(a) && Array.isArray(b)) {
            if (a.length === b.length) {
                for (var i = 0; i < a.length; i++) {
                    if (isDifferent(a[i], b[i])) {
                        return true;
                    }
                }
                return false;
            }
        }
        else if (typeof a === 'object' && typeof b === 'object') {
            var keysA = Object.keys(a);
            var keysB = Object.keys(b);
            if (keysA.length === keysB.length) {
                for (var _i = 0, keysA_1 = keysA; _i < keysA_1.length; _i++) {
                    var key = keysA_1[_i];
                    if (isDifferent(a[key], b[key])) {
                        return true;
                    }
                }
                return false;
            }
        }
        return true;
    }
    return false;
}
function isChanged(initial, current) {
    var keys = Object.keys(current);
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        if (isDifferent(current[key], initial[key])) {
            return true;
        }
    }
    return false;
}
/**
 * Represents a field aggregator that enables easily creating forms.
 */
var Form = /** @class */ (function (_super) {
    __extends(Form, _super);
    function Form(props) {
        var _this = _super.call(this, props) || this;
        _this.fields = [];
        _this.ctx = _this.createContext();
        _this.submit = function (e) {
            var _a = _this.props, onSubmit = _a.onSubmit, disabled = _a.disabled;
            var _b = _this.state, current = _b.current, changed = _b.changed, errors = _b.errors;
            _this.setErrors(current);
            if (!disabled && typeof onSubmit === 'function') {
                var arrayErrors_1 = Object.keys(errors).reduce(function (arrayErrors, field) {
                    var error = errors[field];
                    if (error) {
                        arrayErrors.push({ field: field, error: error });
                    }
                    return arrayErrors;
                }, []);
                _this.setState({
                    changed: false,
                    initial: current,
                }, function () { return onSubmit({
                    data: current,
                    errors: arrayErrors_1,
                    changed: changed,
                }); });
            }
            e.preventDefault();
            return false;
        };
        var data = props.value || props.defaultValue || {};
        _this.state = {
            changed: false,
            controlled: props.value !== undefined,
            initial: data,
            current: data,
            errors: {},
        };
        return _this;
    }
    Form.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        var _a = this.state, controlled = _a.controlled, initial = _a.initial;
        if (controlled) {
            var _b = nextProps.value, value = _b === void 0 ? {} : _b;
            var changed = isChanged(initial, value);
            this.setValues(value, changed);
        }
    };
    Form.prototype.setValues = function (current, changed) {
        var keys = Object.keys(current);
        this.setState({
            current: current,
            changed: changed,
        });
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
            var key = keys_2[_i];
            var value = current[key];
            for (var _a = 0, _b = this.fields; _a < _b.length; _a++) {
                var field = _b[_a];
                if (field.props.name === key && field.state.value !== value) {
                    field.setState({
                        value: value,
                    });
                }
            }
        }
    };
    Form.prototype.getError = function (name, value) {
        var validator = this.props.validationRules && this.props.validationRules[name];
        var validationResult = validator ? validator(value) : true;
        var error = validationResult === true ? undefined : validationResult;
        return error;
    };
    Form.prototype.setFieldError = function (name, error) {
        for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
            var fieldEntity = _a[_i];
            if (fieldEntity.props.name === name) {
                fieldEntity.setState({ error: error });
                return;
            }
        }
    };
    Form.prototype.setError = function (_a) {
        var name = _a.name, value = _a.value;
        var _b;
        var error = this.getError(name, value);
        this.setFieldError(name, error);
        this.setState({ errors: __assign({}, this.state.errors, (_b = {}, _b[name] = error, _b)) });
    };
    Form.prototype.setErrors = function (current) {
        var keys = Object.keys(current);
        var errors = __assign({}, this.state.errors);
        for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {
            var key = keys_3[_i];
            var value = current[key];
            var error = this.getError(key, value);
            errors[key] = error;
            this.setFieldError(key, error);
        }
        this.setState({ errors: errors });
    };
    Form.prototype.createContext = function () {
        var _this = this;
        return {
            change: function (field) {
                var _a;
                var onChange = _this.props.onChange;
                var _b = _this.state, controlled = _b.controlled, current = _b.current, initial = _b.initial;
                var proposed = __assign({}, current, (_a = {}, _a[field.name] = field.value, _a));
                var changed = isChanged(initial, proposed);
                if (!controlled) {
                    _this.setValues(proposed, changed);
                }
                _this.setError(field);
                if (typeof onChange === 'function') {
                    onChange({
                        changed: changed,
                        value: proposed,
                    });
                }
            },
            subscribe: function (field) {
                var _a;
                var _b = _this.state, current = _b.current, _c = _b.errors, errors = _c === void 0 ? {} : _c;
                var name = field.props.name;
                if (name) {
                    _this.fields.push(field);
                    var error = void 0;
                    if (name in current) {
                        var value = current[name];
                        error = _this.getError(name, value);
                        field.setState({
                            value: value,
                        });
                    }
                    else {
                        var value = field.state.value;
                        current[name] = value;
                        error = _this.getError(name, value);
                    }
                    if (error) {
                        _this.setState({ errors: __assign({}, errors, (_a = {}, _a[name] = error, _a)) });
                    }
                }
            },
            unsubscribe: function (field) {
                var index = _this.fields.indexOf(field);
                index >= 0 && _this.fields.splice(index, 1);
            },
        };
    };
    Form.prototype.render = function () {
        var _a = this.props, _0 = _a.value, _1 = _a.defaultValue, _2 = _a.onChange, _3 = _a.onSubmit, _4 = _a.disabled, children = _a.children, prompt = _a.prompt, rest = __rest(_a, ["value", "defaultValue", "onChange", "onSubmit", "disabled", "children", "prompt"]);
        var changed = this.state.changed;
        return (React.createElement(StyledForm, __assign({}, rest, { onSubmit: this.submit }),
            prompt && (typeof prompt === 'function' ? prompt(changed) : React.createElement(Prompt_1.Prompt, { when: changed, message: prompt })),
            React.createElement(contexts_1.FormContext.Provider, { value: this.ctx }, children)));
    };
    Form.inner = {
        get StyledForm() { return StyledForm; },
        get Prompt() { return Prompt_1.Prompt; }
    };
    return Form;
}(React.Component));
exports.Form = Form;
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,