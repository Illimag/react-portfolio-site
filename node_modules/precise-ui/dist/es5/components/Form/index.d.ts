import * as React from 'react';
import { Prompt } from '../Prompt';
import { StandardProps } from '../../common';
export interface FormSubmitEvent {
    /**
     * The data to be submitted.
     */
    data: FormValuesData;
    /**
     * Validation errors
     */
    errors?: Array<FormValidationError>;
    /**
     * Indicates whether the data has changed from the initial state.
     */
    changed: boolean;
}
export interface FormChangeEvent {
    /**
     * The current values of the form fields.
     */
    value: FormValuesData;
    /**
     * Indicates whether the data has changed from the initial state.
     */
    changed: boolean;
}
export interface FormValuesData {
    [name: string]: any;
}
export interface FormValidationError {
    field: string;
    error: React.ReactChild;
}
export interface FormProps<FormValues> extends StandardProps {
    /**
     * Shows the given message if the user wants to navigate
     * with changes being made or renders custom component with message if provided.
     */
    prompt?: ((changed: boolean) => React.ReactChild) | string;
    /**
     * The value of the form to be used in controlled mode.
     */
    value?: FormValues;
    /**
     * The initial value of the form to be used in managed mode.
     */
    defaultValue?: FormValues;
    /**
     * Rules for validating fields values.
     */
    validationRules?: {
        [T in keyof FormValues]?: (value: any) => React.ReactChild | true;
    };
    /**
     * Event emitted when a field of the form changed.
     */
    onChange?(e: FormChangeEvent): void;
    /**
     * Event emitted when the form is submitted.
     */
    onSubmit?(e: FormSubmitEvent): void;
    /**
     * Disables the form in case of invalid input. Effectively
     * disables the possibility of submitting forms.
     * @default false
     */
    disabled?: boolean;
}
export interface FormState<FormValues> {
    changed: boolean;
    initial: FormValues;
    controlled: boolean;
    current: FormValues;
    errors: Partial<{
        [T in keyof FormValues]: React.ReactChild;
    }>;
}
/**
 * Represents a field aggregator that enables easily creating forms.
 */
export declare class Form<Values extends FormValuesData> extends React.Component<FormProps<Values>, FormState<Values>> {
    private readonly fields;
    private readonly ctx;
    constructor(props: FormProps<Values>);
    UNSAFE_componentWillReceiveProps(nextProps: FormProps<Values>): void;
    private setValues;
    private getError;
    private setFieldError;
    private setError;
    private setErrors;
    private createContext;
    private submit;
    render(): JSX.Element;
    static inner: {
        readonly StyledForm: import("styled-components").StyledComponent<"form", import("../../common").PreciseTheme, {}, never>;
        readonly Prompt: typeof Prompt;
    };
}
