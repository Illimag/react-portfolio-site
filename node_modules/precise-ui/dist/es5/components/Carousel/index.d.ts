import * as React from 'react';
import { InteractiveSurface, InteractiveSurfaceProps } from '../InteractiveSurface';
import { StandardProps } from '../../common';
export interface CarouselChangeEvent {
    /**
     * The previously selected page index.
     */
    previousIndex: number;
    /**
     * The currently selected page index.
     */
    selectedIndex: number;
}
export interface CarouselStopEvent {
    /**
     * The reason for stopping the autoplay mode.
     */
    reason: 'ended' | 'manual';
    /**
     * Resumes execution of the autoplay mode.
     */
    resume(): void;
}
export interface CarouselProps extends StandardProps {
    /**
     * The default page index - only set for use in automatic mode.
     */
    defaultIndex?: number;
    /**
     * The currently selected page index - used in the controlled mode.
     */
    selectedIndex?: number;
    /**
     * Notification callback if the selected page index should change.
     */
    onPageChange?(e: CarouselChangeEvent): void;
    /**
     * The children, usually passed as a collection of elements.
     */
    children?: React.ReactNode;
    /**
     * Overrides the default container for bullets.
     */
    bulletsContainer?: React.ComponentType;
    /**
     * Overrides the default bullet point component.
     */
    bullet?: React.ComponentType<BulletProps>;
    /**
     * Displays the previous / next arrow. By default disabled.
     * @default false
     */
    arrows?: boolean;
    /**
     * Event emitted once the Carousel autoplay stops.
     */
    onStop?(e: CarouselStopEvent): void;
    /**
     * Activate the autoplay mode, potentially with the time per slide
     * in milliseconds. By default 3000.
     * @default false
     */
    autoplay?: boolean | number;
    /**
     * Whether the Carousel can loop without stopping.
     * @default false
     */
    infinite?: boolean;
    /**
     * Whether the Carousel can stop propagation so that links can be clicked
     * @default false
     */
    opaque?: InteractiveSurfaceProps['opaque'];
}
export interface DragStatus {
    isDragging: boolean;
    start?: Point;
}
export interface Point {
    x: number;
    y: number;
}
export interface CarouselState {
    /**
     * The currently selected page index.
     */
    selectedIndex: number;
    /**
     * Determines if the tab component is controlled from the outside or not.
     */
    controlled: boolean;
    /**
     * Status of the current swipe move.
     */
    dragStatus: DragStatus;
}
export interface BulletProps extends StandardProps {
    /**
     * Determines if the bullet is active or not.
     */
    active: boolean;
    /**
     * Fired once the bullet has been clicked.
     */
    onClick(): void;
    /**
     * Sets the bullet's index.
     */
    index: number;
}
interface PagesContainerProps extends StandardProps {
    selectedIndex: number;
}
/**
 * The Carousel component displays a toggling list of content. Page can be changed using bullet
 * controls or swiping gestures.
 */
export declare class Carousel extends React.PureComponent<CarouselProps, CarouselState> {
    private selects;
    private pagesContainer;
    private autoPlayTimeout;
    constructor(props: CarouselProps);
    UNSAFE_componentWillReceiveProps(nextProps: CarouselProps): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private tryToPlay;
    private play;
    private stop;
    private resume;
    private changePage;
    private dragTile;
    private checkPageChange;
    private setDragStyle;
    private resetInitialStyle;
    private swipe;
    private swipeLeft;
    private swipeRight;
    private swipeRightAuto;
    private handleKeyDown;
    render(): JSX.Element;
    static inner: {
        readonly PageItem: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, {}, never>;
        readonly RootContainer: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, {}, never>;
        readonly Mask: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, {}, never>;
        readonly InteractiveSurface: typeof InteractiveSurface;
        readonly PagesContainer: import("styled-components").StyledComponent<"div", import("../../common").PreciseTheme, PagesContainerProps, never>;
        readonly ArrowLeft: import("styled-components").StyledComponent<"button", import("../../common").PreciseTheme, {}, never>;
        readonly Icon: React.FunctionComponent<import("../Icon").IconProps> & {
            inner: {
                readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../../common").PreciseTheme, {}, never>;
            };
        };
        readonly ArrowRight: import("styled-components").StyledComponent<"button", import("../../common").PreciseTheme, {}, never>;
    };
}
export {};
