"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var remCalc_1 = require("../../utils/remCalc");
var InteractiveSurface_1 = require("../InteractiveSurface");
var Icon_1 = require("../Icon");
var distance_1 = require("../../distance");
var textStyles_1 = require("../../textStyles");
var shiftThreshold = 0.3;
var animationDuration = '0.3s';
var animationFunction = 'ease-in-out';
var RootContainer = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  outline: none;\n"], ["\n  outline: none;\n"])));
var DefaultBulletsContainer = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n"], ["\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n"])));
var ActiveBullet = styled_1.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  background-color: rgba(116, 118, 120, 1);\n"], ["\n  background-color: rgba(116, 118, 120, 1);\n"])));
var DefaultBullet = styled_1.default.div(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  height: ", ";\n  width: ", ";\n  background-color: rgba(224, 225, 221, 1);\n  border-radius: 50%;\n  display: inline-block;\n  cursor: pointer;\n  margin: ", ";\n  ", ";\n"], ["\n  height: ", ";\n  width: ", ";\n  background-color: rgba(224, 225, 221, 1);\n  border-radius: 50%;\n  display: inline-block;\n  cursor: pointer;\n  margin: ", ";\n  ", ";\n"])), remCalc_1.remCalc('12px'), remCalc_1.remCalc('12px'), distance_1.distance.xsmall, function (props) { return (props.active ? ActiveBullet : ''); });
var PageItem = styled_1.default.div(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  min-width: 100%;\n"], ["\n  min-width: 100%;\n"])));
var PagesContainer = styled_1.default.div(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  box-sizing: border-box;\n  display: flex;\n  position: relative;\n  left: ", "%;\n  transition: left ", " ", ";\n"], ["\n  box-sizing: border-box;\n  display: flex;\n  position: relative;\n  left: ", "%;\n  transition: left ", " ", ";\n"])), function (props) { return -props.selectedIndex * 100; }, animationDuration, animationFunction);
var Mask = styled_1.default.div(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n  position: relative;\n  box-sizing: border-box;\n  overflow: hidden;\n"], ["\n  position: relative;\n  box-sizing: border-box;\n  overflow: hidden;\n"])));
var Arrow = styled_1.default.button(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n  ", "\n\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  background-color: transparent;\n  padding: 0;\n  border: none;\n  align-self: start;\n  cursor: pointer;\n  > i {\n    vertical-align: middle;\n  }\n"], ["\n  ", "\n\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  background-color: transparent;\n  padding: 0;\n  border: none;\n  align-self: start;\n  cursor: pointer;\n  > i {\n    vertical-align: middle;\n  }\n"])), textStyles_1.getFontStyle({ size: 'medium' }));
var ArrowLeft = styled_1.default(Arrow)(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n  left: 8px;\n"], ["\n  left: 8px;\n"])));
var ArrowRight = styled_1.default(Arrow)(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n  right: 8px;\n"], ["\n  right: 8px;\n"])));
function calcNextPage(currentPage, totalPages, infinite) {
    if (infinite === void 0) { infinite = false; }
    var maxIndex = totalPages - 1;
    var nextPage = currentPage + 1;
    return infinite && nextPage > maxIndex ? 0 : Math.min(nextPage, maxIndex);
}
function calcPrevPage(currentPage, totalPages, infinite) {
    if (infinite === void 0) { infinite = false; }
    var prevPage = currentPage - 1;
    var maxIndex = totalPages - 1;
    return infinite && prevPage < 0 ? maxIndex : Math.max(prevPage, 0);
}
function calcLeftShiftPercent(selectedIndex) {
    return selectedIndex * -100;
}
var defaultAutoPlayTime = 3000;
/**
 * The Carousel component displays a toggling list of content. Page can be changed using bullet
 * controls or swiping gestures.
 */
var Carousel = /** @class */ (function (_super) {
    __extends(Carousel, _super);
    function Carousel(props) {
        var _this = _super.call(this, props) || this;
        _this.selects = [];
        _this.resume = function () {
            if (!_this.autoPlayTimeout) {
                _this.tryToPlay();
            }
        };
        _this.dragTile = function (e) {
            var _a = _this.state, controlled = _a.controlled, selectedIndex = _a.selectedIndex, dragStatus = _a.dragStatus;
            var shift = dragStatus.start ? e.x - dragStatus.start.x : 0;
            if (controlled) {
                e.release();
            }
            if (_this.pagesContainer) {
                if (e.active) {
                    if (!dragStatus.isDragging) {
                        _this.setState({ dragStatus: { isDragging: true, start: { x: e.x, y: e.y } } });
                        _this.setDragStyle(_this.pagesContainer);
                    }
                    _this.pagesContainer.style.left = calcLeftShiftPercent(selectedIndex) + shift * 100 + "%";
                }
                else {
                    _this.setState({ dragStatus: { isDragging: false, start: undefined } });
                    _this.resetInitialStyle(_this.pagesContainer);
                    _this.checkPageChange(shift);
                }
            }
        };
        _this.swipeLeft = function () {
            _this.swipe(-1, true);
        };
        _this.swipeRight = function () {
            _this.swipe(1, true);
        };
        _this.swipeRightAuto = function () {
            _this.swipe(1, false);
        };
        _this.handleKeyDown = function (e) {
            var _a = _this.props, children = _a.children, infinite = _a.infinite;
            var selectedIndex = _this.state.selectedIndex;
            var childrenCount = React.Children.count(children);
            var nextIndex = selectedIndex;
            switch (e.keyCode) {
                case 37 /* left */:
                    nextIndex = calcPrevPage(selectedIndex, childrenCount, infinite);
                    break;
                case 39 /* right */:
                    nextIndex = calcNextPage(selectedIndex, childrenCount, infinite);
                    break;
                case 35 /* end */:
                    nextIndex = childrenCount - 1;
                    break;
                case 36 /* home */:
                    nextIndex = 0;
                    break;
                default:
                    return;
            }
            _this.changePage(nextIndex);
        };
        _this.state = {
            selectedIndex: props.selectedIndex || props.defaultIndex || 0,
            controlled: props.selectedIndex !== undefined,
            dragStatus: { isDragging: false },
        };
        return _this;
    }
    Carousel.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        var selectedIndex = nextProps.selectedIndex;
        var controlled = this.state.controlled;
        if (controlled && typeof selectedIndex === 'number') {
            this.setState({
                selectedIndex: selectedIndex,
            });
        }
    };
    Carousel.prototype.componentDidMount = function () {
        this.tryToPlay();
    };
    Carousel.prototype.componentWillUnmount = function () {
        this.stop();
    };
    Carousel.prototype.tryToPlay = function () {
        this.stop();
        var autoplay = this.props.autoplay;
        if (autoplay) {
            this.play(typeof autoplay === 'number' ? autoplay : defaultAutoPlayTime);
        }
    };
    Carousel.prototype.play = function (time) {
        this.autoPlayTimeout = setInterval(this.swipeRightAuto, time);
    };
    Carousel.prototype.stop = function () {
        this.autoPlayTimeout = clearInterval(this.autoPlayTimeout);
    };
    Carousel.prototype.changePage = function (target, manual) {
        if (manual === void 0) { manual = true; }
        var _a = this.props, onPageChange = _a.onPageChange, onStop = _a.onStop, children = _a.children;
        var childrenCount = React.Children.count(children);
        var _b = this.state, controlled = _b.controlled, selectedIndex = _b.selectedIndex;
        var shouldStop = target >= childrenCount || target < 0;
        if (manual || shouldStop) {
            if (this.autoPlayTimeout) {
                this.stop();
                if (typeof onStop === 'function') {
                    onStop({
                        reason: manual ? 'manual' : 'ended',
                        resume: this.resume,
                    });
                }
            }
        }
        if (!shouldStop) {
            if (typeof onPageChange === 'function') {
                onPageChange({
                    previousIndex: selectedIndex,
                    selectedIndex: target,
                });
            }
            if (!controlled) {
                this.setState(function () { return ({
                    selectedIndex: target,
                }); });
            }
        }
    };
    Carousel.prototype.checkPageChange = function (shift) {
        var selectedIndex = this.state.selectedIndex;
        if (shift <= -shiftThreshold) {
            var nextIndex = calcNextPage(selectedIndex, React.Children.count(this.props.children), this.props.infinite);
            this.changePage(nextIndex);
        }
        else if (shift >= shiftThreshold) {
            var prevIndex = calcPrevPage(selectedIndex, React.Children.count(this.props.children), this.props.infinite);
            this.changePage(prevIndex);
        }
    };
    Carousel.prototype.setDragStyle = function (node) {
        var style = node.style;
        style.transitionProperty = 'unset';
        style.transitionDuration = 'unset';
        style.transitionTimingFunction = 'unset';
    };
    Carousel.prototype.resetInitialStyle = function (node) {
        var style = node.style;
        // tslint:disable-next-line
        style.left = null;
        style.transitionProperty = 'left';
        style.transitionDuration = animationDuration;
        style.transitionTimingFunction = animationFunction;
    };
    Carousel.prototype.swipe = function (direction, manual) {
        var selectedIndex = this.state.selectedIndex;
        var _a = this.props, children = _a.children, infinite = _a.infinite;
        var childrenCount = React.Children.count(children);
        var nextIndex = selectedIndex;
        if (direction === 1) {
            nextIndex = calcNextPage(selectedIndex, childrenCount, infinite);
        }
        else if (direction === -1) {
            nextIndex = calcPrevPage(selectedIndex, childrenCount, infinite);
        }
        this.changePage(nextIndex, manual);
    };
    Carousel.prototype.render = function () {
        var _this = this;
        var selectedIndex = this.state.selectedIndex;
        var _a = this.props, children = _a.children, theme = _a.theme, _0 = _a.selectedIndex, _1 = _a.defaultIndex, _2 = _a.onPageChange, CustomBulletsContainer = _a.bulletsContainer, CustomBullet = _a.bullet, _b = _a.arrows, arrows = _b === void 0 ? false : _b, _c = _a.infinite, infinite = _c === void 0 ? false : _c, _d = _a.opaque, opaque = _d === void 0 ? false : _d, props = __rest(_a, ["children", "theme", "selectedIndex", "defaultIndex", "onPageChange", "bulletsContainer", "bullet", "arrows", "infinite", "opaque"]);
        var childrenCount = React.Children.count(children);
        var bullets = [];
        var items = [];
        var selects = this.selects;
        var BulletsContainer = CustomBulletsContainer || DefaultBulletsContainer;
        var Bullet = CustomBullet || DefaultBullet;
        React.Children.forEach(children, function (element, index) {
            if (element && React.isValidElement(element)) {
                var active = index === selectedIndex;
                if (selects[index] === undefined) {
                    selects[index] = function () { return _this.changePage(index); };
                }
                bullets.push(React.createElement(Bullet, { theme: theme, key: "bullet-" + index, active: active, index: index, onClick: selects[index] }));
                items.push(React.createElement(PageItem, { key: "item-" + index }, element));
            }
        });
        var disableLeft = !infinite && selectedIndex < 1;
        var disableRight = !infinite && selectedIndex > childrenCount - 2;
        return (React.createElement(RootContainer, __assign({}, props, { onKeyDown: this.handleKeyDown, tabIndex: 0 }),
            React.createElement(Mask, null,
                React.createElement(InteractiveSurface_1.InteractiveSurface, { theme: theme, onChange: this.dragTile, opaque: opaque },
                    React.createElement(PagesContainer, { ref: function (node) { return (_this.pagesContainer = node); }, selectedIndex: selectedIndex }, items)),
                arrows && (React.createElement("div", null,
                    React.createElement(ArrowLeft, { onClick: this.swipeLeft, disabled: disableLeft, type: "button" },
                        React.createElement(Icon_1.Icon, { name: "KeyboardArrowLeft", size: 2 })),
                    React.createElement(ArrowRight, { onClick: this.swipeRight, disabled: disableRight, type: "button" },
                        React.createElement(Icon_1.Icon, { name: "KeyboardArrowRight", size: 2 }))))),
            React.createElement(BulletsContainer, null, bullets)));
    };
    Carousel.inner = {
        get PageItem() { return PageItem; },
        get RootContainer() { return RootContainer; },
        get Mask() { return Mask; },
        get InteractiveSurface() { return InteractiveSurface_1.InteractiveSurface; },
        get PagesContainer() { return PagesContainer; },
        get ArrowLeft() { return ArrowLeft; },
        get Icon() { return Icon_1.Icon; },
        get ArrowRight() { return ArrowRight; }
    };
    return Carousel;
}(React.PureComponent));
exports.Carousel = Carousel;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10;
//# sourceMappingURL=data:application/json;base64,