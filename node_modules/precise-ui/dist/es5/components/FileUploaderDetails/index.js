"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var eventManager_1 = require("../../utils/eventManager");
var FileUploaderDetails_types_part_1 = require("./FileUploaderDetails.types.part");
exports.FileUploadActions = FileUploaderDetails_types_part_1.FileUploadActions;
var UploaderProgressBar_part_1 = require("./UploaderProgressBar.part");
var UploaderProgressDetails_part_1 = require("./UploaderProgressDetails.part");
var helpers_1 = require("./helpers");
var distance_1 = require("../../distance");
var initialState = {
    files: [],
    showDetails: false,
    showUploader: false,
};
var StyledUploaderHost = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  z-index: 10001;\n  width: 100%;\n  position: fixed;\n  left: 0;\n  bottom: ", ";\n  height: 0px;\n  overflow: visible;\n  display: flex;\n  align-items: flex-end;\n"], ["\n  z-index: 10001;\n  width: 100%;\n  position: fixed;\n  left: 0;\n  bottom: ", ";\n  height: 0px;\n  overflow: visible;\n  display: flex;\n  align-items: flex-end;\n"])), distance_1.distance.large);
var StyledDetailsHost = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  // We override the 'z-index' of the styled component 'FixedContainer' of 'Blocker' (which is called by 'Modal').\n  // This fixes the problem of showing 'UploadProgressDetails' behind modal in IE.\n  & > div:first-child {\n    z-index: 10001;\n  }\n"], ["\n  // We override the 'z-index' of the styled component 'FixedContainer' of 'Blocker' (which is called by 'Modal').\n  // This fixes the problem of showing 'UploadProgressDetails' behind modal in IE.\n  & > div:first-child {\n    z-index: 10001;\n  }\n"])));
/**
 * The host element for global async file upload process. Use as a singleton only.
 */
var FileUploaderDetails = /** @class */ (function (_super) {
    __extends(FileUploaderDetails, _super);
    function FileUploaderDetails(props) {
        var _this = _super.call(this, props) || this;
        _this.onStart = function (e) {
            _this.props.onUpload(e);
            _this.setState({
                showUploader: true,
            });
        };
        _this.onChange = function (_a) {
            var files = _a.files;
            var currentFiles = _this.state.files;
            _this.setState({
                files: helpers_1.mergeData(files, currentFiles),
            });
        };
        _this.onCancel = function (_a) {
            var files = _a.files;
            var onCancel = _this.props.onCancel;
            if (typeof onCancel === 'function') {
                onCancel({
                    files: files.filter(function (item) { return item.progress < 100 && !item.canceled && !item.error; }),
                });
            }
        };
        _this.onDelete = function (_a) {
            var files = _a.files;
            var onDelete = _this.props.onDelete;
            if (typeof onDelete === 'function') {
                onDelete({
                    files: files.filter(function (item) { return item.progress >= 100 && !item.canceled && !item.error; }),
                });
            }
        };
        _this.onClear = function (uploaderId) {
            var currentFiles = _this.state.files;
            var newFiles = currentFiles.filter(function (item) { return item.uploaderId !== uploaderId; });
            var oldFiles = currentFiles.filter(function (item) { return item.uploaderId === uploaderId; });
            _this.setState({
                files: newFiles,
            }, function () {
                _this.onCancel({
                    files: oldFiles,
                });
            });
        };
        _this.closeUploader = function () {
            var onClose = _this.props.onClose;
            if (typeof onClose === 'function') {
                onClose();
            }
            _this.setState(__assign({}, initialState));
        };
        _this.hideDetails = function () {
            _this.setState({
                showDetails: false,
            });
        };
        _this.showDetails = function () {
            _this.setState({
                showDetails: true,
            });
        };
        var events = props.events;
        _this.eventManager = events || eventManager_1.eventManagers[0];
        _this.state = __assign({}, initialState);
        return _this;
    }
    FileUploaderDetails.prototype.componentDidMount = function () {
        var em = this.eventManager;
        em.on(FileUploaderDetails_types_part_1.FileUploadActions.startUpload, this.onStart);
        em.on(FileUploaderDetails_types_part_1.FileUploadActions.cancelUpload, this.onCancel);
        em.on(FileUploaderDetails_types_part_1.FileUploadActions.uploadProgress, this.onChange);
        em.on(FileUploaderDetails_types_part_1.FileUploadActions.uploadFailure, this.onChange);
        em.on(FileUploaderDetails_types_part_1.FileUploadActions.showUploads, this.showDetails);
        em.on(FileUploaderDetails_types_part_1.FileUploadActions.clearUploads, this.onClear);
        em.on(FileUploaderDetails_types_part_1.FileUploadActions.deleteUploads, this.onDelete);
        eventManager_1.eventManagers.push(em);
    };
    FileUploaderDetails.prototype.componentWillUnmount = function () {
        var em = this.eventManager;
        em.off(FileUploaderDetails_types_part_1.FileUploadActions.startUpload, this.onStart);
        em.off(FileUploaderDetails_types_part_1.FileUploadActions.cancelUpload, this.onCancel);
        em.off(FileUploaderDetails_types_part_1.FileUploadActions.uploadProgress, this.onChange);
        em.off(FileUploaderDetails_types_part_1.FileUploadActions.uploadFailure, this.onChange);
        em.off(FileUploaderDetails_types_part_1.FileUploadActions.showUploads, this.showDetails);
        em.off(FileUploaderDetails_types_part_1.FileUploadActions.clearUploads, this.onClear);
        em.off(FileUploaderDetails_types_part_1.FileUploadActions.deleteUploads, this.onDelete);
        eventManager_1.eventManagers.splice(eventManager_1.eventManagers.lastIndexOf(em), 1);
    };
    FileUploaderDetails.prototype.render = function () {
        var _a = this.props, events = _a.events, onCancel = _a.onCancel, onClose = _a.onClose, onDelete = _a.onDelete, onUpload = _a.onUpload, props = __rest(_a, ["events", "onCancel", "onClose", "onDelete", "onUpload"]);
        var _b = this.state, showDetails = _b.showDetails, showUploader = _b.showUploader, files = _b.files;
        var inprogressFiles = files.filter(function (item) { return !(item.canceled || item.error); }).map(function (item) { return item.progress; });
        var errorFiles = files.filter(function (item) { return item.canceled || item.error; });
        var totalProgress = inprogressFiles.length > 0 ? inprogressFiles.reduce(function (acc, curr) { return acc + curr; }, 0) / inprogressFiles.length : 100;
        var scanning = files.filter(function (item) { return item.scanning && !item.canceled; }).length > 0;
        var show = showUploader && files.length > 0;
        return (show && (React.createElement(React.Fragment, null,
            React.createElement(StyledDetailsHost, null,
                React.createElement(UploaderProgressDetails_part_1.UploaderProgressDetails, __assign({}, props, { open: showDetails, files: files, onCancel: this.onCancel, onDelete: this.onDelete, onHide: this.hideDetails, progressValue: totalProgress }))),
            !showDetails && (React.createElement(StyledUploaderHost, null,
                React.createElement(UploaderProgressBar_part_1.UploaderProgressBar, __assign({}, props, { scanning: scanning, progressValue: totalProgress, inProgress: inprogressFiles.length, errors: errorFiles.length, total: files.length, onShow: this.showDetails, onClose: this.closeUploader })))))));
    };
    FileUploaderDetails.inner = {
        get StyledDetailsHost() { return StyledDetailsHost; },
        get UploaderProgressDetails() { return UploaderProgressDetails_part_1.UploaderProgressDetails; },
        get StyledUploaderHost() { return StyledUploaderHost; },
        get UploaderProgressBar() { return UploaderProgressBar_part_1.UploaderProgressBar; }
    };
    return FileUploaderDetails;
}(React.Component));
exports.FileUploaderDetails = FileUploaderDetails;
var templateObject_1, templateObject_2;
//# sourceMappingURL=data:application/json;base64,