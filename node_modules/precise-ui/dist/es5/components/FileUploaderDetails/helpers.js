"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var labels_1 = require("../../utils/labels");
function mergeData(newData, currentData) {
    var all = {};
    for (var _i = 0, currentData_1 = currentData; _i < currentData_1.length; _i++) {
        var file = currentData_1[_i];
        all[file.fileId] = file;
    }
    for (var _a = 0, newData_1 = newData; _a < newData_1.length; _a++) {
        var file = newData_1[_a];
        if (file.deleted) {
            delete all[file.fileId];
        }
        else if (!file.canceled || all[file.fileId]) {
            all[file.fileId] = file;
        }
    }
    return Object.keys(all).map(function (key) { return all[key]; });
}
exports.mergeData = mergeData;
exports.iconNames = {
    error: 'Error',
    canceled: 'Error',
    progress: 'Sync',
    scanning: 'Sync',
    success: 'CheckCircle',
};
labels_1.setLabels({
    tableHeaderFileLabel: 'File',
    tableHeaderStatusLabel: 'Status',
    errorTableUploadLabel: 'Upload failed',
    canceledTableUploadLabel: 'Upload canceled',
    progressTableUploadLabel: 'Uploading...',
    successTableUploadLabel: 'Upload successful',
    scanningTableUploadLabel: 'Scanning for viruses...',
    uploadModalTitleLabel: 'Upload Details',
    uploadProgressLabel: 'Uploading...',
    uploadSuccessLabel: 'Upload successful',
    uploadErrorLabel: 'Upload not successful',
    uploadScanningLabel: 'Scanning for viruses',
    viewDetailsLabel: 'View Details',
    itemPluralLabel: 'Files',
    itemSingularLabel: 'File',
    cancelAllLabel: 'Cancel all uploads',
});
function getStatus(file) {
    if (file.error) {
        return 'error';
    }
    else if (file.canceled || file.deleted) {
        return 'canceled';
    }
    else if (file.progress < 100) {
        return 'progress';
    }
    else if (file.scanning) {
        return 'scanning';
    }
    return 'success';
}
exports.getStatus = getStatus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0ZpbGVVcGxvYWRlckRldGFpbHMvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLDZDQUErQztBQUUvQyxTQUFnQixTQUFTLENBQUMsT0FBNEIsRUFBRSxXQUFnQztJQUN0RixJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFFZixLQUFtQixVQUFXLEVBQVgsMkJBQVcsRUFBWCx5QkFBVyxFQUFYLElBQVcsRUFBRTtRQUEzQixJQUFNLElBQUksb0JBQUE7UUFDYixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQztLQUN6QjtJQUVELEtBQW1CLFVBQU8sRUFBUCxtQkFBTyxFQUFQLHFCQUFPLEVBQVAsSUFBTyxFQUFFO1FBQXZCLElBQU0sSUFBSSxnQkFBQTtRQUNiLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzdDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO0tBQ0Y7SUFFRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFSLENBQVEsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFoQkQsOEJBZ0JDO0FBRVksUUFBQSxTQUFTLEdBQThCO0lBQ2xELEtBQUssRUFBRSxPQUFPO0lBQ2QsUUFBUSxFQUFFLE9BQU87SUFDakIsUUFBUSxFQUFFLE1BQU07SUFDaEIsUUFBUSxFQUFFLE1BQU07SUFDaEIsT0FBTyxFQUFFLGFBQWE7Q0FDdkIsQ0FBQztBQUVGLGtCQUFTLENBQUM7SUFDUixvQkFBb0IsRUFBRSxNQUFNO0lBQzVCLHNCQUFzQixFQUFFLFFBQVE7SUFDaEMscUJBQXFCLEVBQUUsZUFBZTtJQUN0Qyx3QkFBd0IsRUFBRSxpQkFBaUI7SUFDM0Msd0JBQXdCLEVBQUUsY0FBYztJQUN4Qyx1QkFBdUIsRUFBRSxtQkFBbUI7SUFDNUMsd0JBQXdCLEVBQUUseUJBQXlCO0lBQ25ELHFCQUFxQixFQUFFLGdCQUFnQjtJQUN2QyxtQkFBbUIsRUFBRSxjQUFjO0lBQ25DLGtCQUFrQixFQUFFLG1CQUFtQjtJQUN2QyxnQkFBZ0IsRUFBRSx1QkFBdUI7SUFDekMsbUJBQW1CLEVBQUUsc0JBQXNCO0lBQzNDLGdCQUFnQixFQUFFLGNBQWM7SUFDaEMsZUFBZSxFQUFFLE9BQU87SUFDeEIsaUJBQWlCLEVBQUUsTUFBTTtJQUN6QixjQUFjLEVBQUUsb0JBQW9CO0NBQ3JDLENBQUMsQ0FBQztBQUVILFNBQWdCLFNBQVMsQ0FBQyxJQUFrQjtJQUMxQyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDZCxPQUFPLE9BQU8sQ0FBQztLQUNoQjtTQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ3hDLE9BQU8sVUFBVSxDQUFDO0tBQ25CO1NBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsRUFBRTtRQUM5QixPQUFPLFVBQVUsQ0FBQztLQUNuQjtTQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUN4QixPQUFPLFVBQVUsQ0FBQztLQUNuQjtJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFaRCw4QkFZQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEljb25OYW1lIH0gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgeyBGaWxlUHJvZ3Jlc3MsIFByb2dyZXNzU3RhdHVzIH0gZnJvbSAnLi9GaWxlVXBsb2FkZXJEZXRhaWxzLnR5cGVzLnBhcnQnO1xuaW1wb3J0IHsgc2V0TGFiZWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMvbGFiZWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRGF0YShuZXdEYXRhOiBBcnJheTxGaWxlUHJvZ3Jlc3M+LCBjdXJyZW50RGF0YTogQXJyYXk8RmlsZVByb2dyZXNzPik6IEFycmF5PEZpbGVQcm9ncmVzcz4ge1xuICBjb25zdCBhbGwgPSB7fTtcblxuICBmb3IgKGNvbnN0IGZpbGUgb2YgY3VycmVudERhdGEpIHtcbiAgICBhbGxbZmlsZS5maWxlSWRdID0gZmlsZTtcbiAgfVxuXG4gIGZvciAoY29uc3QgZmlsZSBvZiBuZXdEYXRhKSB7XG4gICAgaWYgKGZpbGUuZGVsZXRlZCkge1xuICAgICAgZGVsZXRlIGFsbFtmaWxlLmZpbGVJZF07XG4gICAgfSBlbHNlIGlmICghZmlsZS5jYW5jZWxlZCB8fCBhbGxbZmlsZS5maWxlSWRdKSB7XG4gICAgICBhbGxbZmlsZS5maWxlSWRdID0gZmlsZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmtleXMoYWxsKS5tYXAoa2V5ID0+IGFsbFtrZXldKTtcbn1cblxuZXhwb3J0IGNvbnN0IGljb25OYW1lczogeyBbeDogc3RyaW5nXTogSWNvbk5hbWUgfSA9IHtcbiAgZXJyb3I6ICdFcnJvcicsXG4gIGNhbmNlbGVkOiAnRXJyb3InLFxuICBwcm9ncmVzczogJ1N5bmMnLFxuICBzY2FubmluZzogJ1N5bmMnLFxuICBzdWNjZXNzOiAnQ2hlY2tDaXJjbGUnLFxufTtcblxuc2V0TGFiZWxzKHtcbiAgdGFibGVIZWFkZXJGaWxlTGFiZWw6ICdGaWxlJyxcbiAgdGFibGVIZWFkZXJTdGF0dXNMYWJlbDogJ1N0YXR1cycsXG4gIGVycm9yVGFibGVVcGxvYWRMYWJlbDogJ1VwbG9hZCBmYWlsZWQnLFxuICBjYW5jZWxlZFRhYmxlVXBsb2FkTGFiZWw6ICdVcGxvYWQgY2FuY2VsZWQnLFxuICBwcm9ncmVzc1RhYmxlVXBsb2FkTGFiZWw6ICdVcGxvYWRpbmcuLi4nLFxuICBzdWNjZXNzVGFibGVVcGxvYWRMYWJlbDogJ1VwbG9hZCBzdWNjZXNzZnVsJyxcbiAgc2Nhbm5pbmdUYWJsZVVwbG9hZExhYmVsOiAnU2Nhbm5pbmcgZm9yIHZpcnVzZXMuLi4nLFxuICB1cGxvYWRNb2RhbFRpdGxlTGFiZWw6ICdVcGxvYWQgRGV0YWlscycsXG4gIHVwbG9hZFByb2dyZXNzTGFiZWw6ICdVcGxvYWRpbmcuLi4nLFxuICB1cGxvYWRTdWNjZXNzTGFiZWw6ICdVcGxvYWQgc3VjY2Vzc2Z1bCcsXG4gIHVwbG9hZEVycm9yTGFiZWw6ICdVcGxvYWQgbm90IHN1Y2Nlc3NmdWwnLFxuICB1cGxvYWRTY2FubmluZ0xhYmVsOiAnU2Nhbm5pbmcgZm9yIHZpcnVzZXMnLFxuICB2aWV3RGV0YWlsc0xhYmVsOiAnVmlldyBEZXRhaWxzJyxcbiAgaXRlbVBsdXJhbExhYmVsOiAnRmlsZXMnLFxuICBpdGVtU2luZ3VsYXJMYWJlbDogJ0ZpbGUnLFxuICBjYW5jZWxBbGxMYWJlbDogJ0NhbmNlbCBhbGwgdXBsb2FkcycsXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXR1cyhmaWxlOiBGaWxlUHJvZ3Jlc3MpOiBQcm9ncmVzc1N0YXR1cyB7XG4gIGlmIChmaWxlLmVycm9yKSB7XG4gICAgcmV0dXJuICdlcnJvcic7XG4gIH0gZWxzZSBpZiAoZmlsZS5jYW5jZWxlZCB8fCBmaWxlLmRlbGV0ZWQpIHtcbiAgICByZXR1cm4gJ2NhbmNlbGVkJztcbiAgfSBlbHNlIGlmIChmaWxlLnByb2dyZXNzIDwgMTAwKSB7XG4gICAgcmV0dXJuICdwcm9ncmVzcyc7XG4gIH0gZWxzZSBpZiAoZmlsZS5zY2FubmluZykge1xuICAgIHJldHVybiAnc2Nhbm5pbmcnO1xuICB9XG5cbiAgcmV0dXJuICdzdWNjZXNzJztcbn1cbiJdfQ==