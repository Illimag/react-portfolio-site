"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var InteractiveList_types_part_1 = require("./InteractiveList.types.part");
var Icon_1 = require("../Icon");
var Checkbox_1 = require("../Checkbox");
var colors_1 = require("../../colors");
var distance_1 = require("../../distance");
var textStyles_1 = require("../../textStyles");
var InteractiveListContainer = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  position: relative;\n  outline: none;\n"], ["\n  position: relative;\n  outline: none;\n"])));
var ListWrapper = styled_1.default('ul')(styled_1.themed(function (_a) {
    var open = _a.open, border = _a.border, direction = _a.direction, ui4 = _a.theme.ui4;
    return styled_1.css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      display: ", ";\n      list-style: none;\n      width: 100%;\n      position: relative;\n      transform: translateY(", "%);\n      box-sizing: border-box;\n      box-shadow: none;\n      margin: 0;\n      padding: 0;\n      background: ", ";\n      border: 1px solid ", ";\n      ", ";\n      max-height: 100%;\n      overflow-y: auto;\n      z-index: 100;\n    "], ["\n      display: ", ";\n      list-style: none;\n      width: 100%;\n      position: relative;\n      transform: translateY(", "%);\n      box-sizing: border-box;\n      box-shadow: none;\n      margin: 0;\n      padding: 0;\n      background: ", ";\n      border: 1px solid ", ";\n      ", ";\n      max-height: 100%;\n      overflow-y: auto;\n      z-index: 100;\n    "])), open ? 'block' : 'none', direction === InteractiveList_types_part_1.InteractiveListDirection.normal ? 0 : -100, colors_1.transparent, border === 0 /* none */ ? colors_1.transparent : ui4, direction === InteractiveList_types_part_1.InteractiveListDirection.normal ? 'border-top: none' : 'border-bottom: none');
}));
var ListItem = styled_1.default.li(styled_1.themed(function (_a) {
    var hovered = _a.hovered, _b = _a.theme, ui3 = _b.ui3, text2 = _b.text2, disabled = _a.disabled;
    return styled_1.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      ", "\n      \n      background: ", ";\n      color: ", ";\n      list-style: none;\n      box-sizing: border-box;\n      opacity: ", ";\n      cursor: ", ";\n      display: block;\n      width: 100%;\n      height: auto;\n      position: relative;\n\n      a {\n        color: inherit;\n        display: block;\n        text-decoration: none;\n\n        &:hover {\n          text-decoration: none;\n        }\n      }\n    "], ["\n      ", "\n      \n      background: ", ";\n      color: ", ";\n      list-style: none;\n      box-sizing: border-box;\n      opacity: ", ";\n      cursor: ", ";\n      display: block;\n      width: 100%;\n      height: auto;\n      position: relative;\n\n      a {\n        color: inherit;\n        display: block;\n        text-decoration: none;\n\n        &:hover {\n          text-decoration: none;\n        }\n      }\n    "])), textStyles_1.getFontStyle({ size: 'medium' }), hovered ? ui3 : colors_1.transparent, text2, disabled ? '0.5' : '1.0', disabled ? 'not-allowed' : 'pointer');
}));
var ListItemInnerContainer = styled_1.default.div(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  display: flex;\n  align-items: center;\n"], ["\n  display: flex;\n  align-items: center;\n"])));
var ListItemContent = styled_1.default.div(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  width: 100%;\n"], ["\n  width: 100%;\n"])));
var ListItemContentPadding = styled_1.default('div')(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  padding: ", ";\n  ", ";\n"], ["\n  padding: ", ";\n  ", ";\n"])), function (props) { return (props.condensed ? distance_1.distance.small + " " + distance_1.distance.medium : distance_1.distance.medium); }, function (props) { return (props.showTick ? 'padding-right: 0;' : ''); });
var ListItemContentComponentPadding = styled_1.default('div')(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n  > * {\n    padding: ", ";\n    ", ";\n  }\n"], ["\n  > * {\n    padding: ", ";\n    ", ";\n  }\n"])), function (props) { return (props.condensed ? distance_1.distance.small + " " + distance_1.distance.medium : distance_1.distance.medium); }, function (props) { return (props.showTick ? 'padding-right: 0;' : ''); });
var StyledCheckbox = styled_1.default(Checkbox_1.Checkbox)(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n  display: block;\n"], ["\n  display: block;\n"])));
var ListItemIconPadding = styled_1.default('div')(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n  padding: 0 ", ";\n\n  i {\n    display: block;\n  }\n"], ["\n  padding: 0 ", ";\n\n  i {\n    display: block;\n  }\n"])), distance_1.distance.medium);
var ListDivider = styled_1.default.hr(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n  margin: ", " ", ";\n  border: none;\n  border-top: 1px solid ", ";\n"], ["\n  margin: ", " ", ";\n  border: none;\n  border-top: 1px solid ", ";\n"])), distance_1.distance.xsmall, distance_1.distance.small, styled_1.themed(function (props) { return props.theme.textDisabled; }));
var ListHeader = styled_1.default.span(templateObject_11 || (templateObject_11 = __makeTemplateObject(["\n  ", "\n  \n  padding: ", " ", ";\n  width: 100%;\n  display: block;\n  height: auto;\n  min-height: 1em;\n  box-sizing: border-box;\n  color: ", ";\n"], ["\n  ", "\n  \n  padding: ", " ", ";\n  width: 100%;\n  display: block;\n  height: auto;\n  min-height: 1em;\n  box-sizing: border-box;\n  color: ", ";\n"])), textStyles_1.getFontStyle({ size: 'medium' }), distance_1.distance.medium, distance_1.distance.small, styled_1.themed(function (props) { return props.theme.primary; }));
function getChosen(selected, multiple) {
    if (multiple) {
        return Array.isArray(selected) ? selected : [selected];
    }
    else {
        return [Array.isArray(selected) ? selected[0] : selected];
    }
}
function getIndices(data, selected, multiple) {
    var chosen = getChosen(selected, multiple);
    var indices = [];
    for (var i = 0; i < data.length; i++) {
        var item = data[i];
        if (!item) {
            continue;
        }
        var key = typeof item === 'string' ? item : item.key;
        if (chosen.indexOf(key) !== -1) {
            indices.push(i);
        }
    }
    if (!multiple && indices.length > 1) {
        indices.splice(1);
    }
    return indices;
}
function autoSelect(element) {
    var child = element && element.querySelector('a');
    if (child) {
        child.click();
    }
}
var InteractiveListInt = /** @class */ (function (_super) {
    __extends(InteractiveListInt, _super);
    function InteractiveListInt(props) {
        var _this = _super.call(this, props) || this;
        _this.selects = [];
        _this.elements = [];
        _this.defaultHandleClickOutside = function () {
            var _a = _this.props, open = _a.open, onBlur = _a.onBlur;
            if (open) {
                if (typeof onBlur === 'function') {
                    onBlur();
                }
                _this.setState({
                    selected: undefined,
                });
            }
        };
        _this.handleClickOutside = function () {
            if (_this.props.open) {
                _this.props.onClickOutside ? _this.props.onClickOutside() : _this.defaultHandleClickOutside();
            }
        };
        _this.control = function (e) {
            var _a = _this.props, data = _a.data, onBlur = _a.onBlur, disabled = _a.disabled, onKeyDown = _a.onKeyDown;
            if (!disabled) {
                var selected = _this.state.selected;
                if (typeof onKeyDown === 'function') {
                    onKeyDown(e);
                }
                switch (e.keyCode) {
                    case 40 /* down */:
                        _this.setState({
                            selected: _this.getNext(selected === undefined ? 0 : (selected + 1) % data.length, 1),
                        });
                        break;
                    case 38 /* up */:
                        _this.setState({
                            selected: _this.getNext(((selected || data.length) - 1) % data.length, -1),
                        });
                        break;
                    case 36 /* home */:
                        _this.setState({
                            selected: _this.getNext(0, 1),
                        });
                        break;
                    case 35 /* end */:
                        _this.setState({
                            selected: _this.getNext(data.length - 1, -1),
                        });
                        break;
                    case 13 /* enter */:
                    case 32 /* space */:
                        if (typeof selected === 'number') {
                            autoSelect(_this.elements[selected]);
                        }
                        _this.done();
                        break;
                    case 27 /* escape */:
                        if (typeof onBlur === 'function') {
                            onBlur();
                        }
                        break;
                    default:
                        _this.jumpTo(e.key.toLowerCase());
                        return;
                }
            }
            e.stopPropagation();
            e.preventDefault();
        };
        _this.getItemDetails = function (item) {
            var key = '';
            var content;
            if (typeof item === 'string') {
                key = item;
                content = item;
            }
            else {
                key = item.key;
                content = item.content || item.key;
            }
            return {
                key: key,
                content: content,
            };
        };
        _this.createSingleItem = function (item, index) {
            var _a = _this.getItemDetails(item), key = _a.key, content = _a.content;
            return _this.createItem(key, index, content);
        };
        _this.createMultipleItem = function (item, index) {
            var disabledItems = _this.props.disabledItems;
            var value = _this.state.value;
            var _a = _this.getItemDetails(item), key = _a.key, content = _a.content;
            var isItemDisabled = disabledItems && disabledItems.indexOf(key) !== -1;
            var newContent = (React.createElement(StyledCheckbox, { value: value.indexOf(index) >= 0, disabled: isItemDisabled }, content));
            return _this.createItem(key, index, newContent);
        };
        _this.done = function () {
            var _a = _this.props, multiple = _a.multiple, onChange = _a.onChange, disabled = _a.disabled, data = _a.data, _b = _a.disabledItems, disabledItems = _b === void 0 ? [] : _b;
            var _c = _this.state, value = _c.value, controlled = _c.controlled, selected = _c.selected;
            var item = data && selected !== undefined && data[selected];
            var key = item && _this.getItemDetails(item).key;
            var isItemDisabled = key && disabledItems.indexOf(key) !== -1;
            if (!disabled && !isItemDisabled && selected !== undefined) {
                var newValue = multiple
                    ? value.indexOf(selected) === -1
                        ? value.concat([selected]) : value.filter(function (i) { return i !== selected; })
                    : [selected];
                if (!controlled) {
                    _this.setState({
                        value: newValue,
                    });
                }
                if (typeof onChange === 'function') {
                    onChange({
                        value: newValue,
                    });
                }
            }
        };
        _this.setNode = function (ref) {
            _this.interactiveList = ref;
        };
        var value = props.value || props.defaultValue || [];
        _this.state = {
            value: props.indices || getIndices(props.data || [], value, props.multiple),
            controlled: props.indices !== undefined || props.value !== undefined,
            selected: undefined,
            direction: props.direction || InteractiveList_types_part_1.InteractiveListDirection.normal,
        };
        return _this;
    }
    InteractiveListInt.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        var _a = this.props, open = _a.open, autoPosition = _a.autoPosition, focus = _a.focus;
        if (this.state.controlled) {
            var indices = nextProps.indices, value = nextProps.value, _b = nextProps.data, data = _b === void 0 ? [] : _b, multiple = nextProps.multiple;
            this.setState({
                value: indices || getIndices(data, value || [], multiple),
            });
        }
        var componentIsNotFocused = nextProps.focus !== focus || (this.interactiveList && document.activeElement !== this.interactiveList);
        if (componentIsNotFocused && nextProps.focus) {
            if (open && nextProps.open) {
                this.interactiveList && this.interactiveList.focus();
                this.setState({
                    selected: 0,
                });
            }
        }
        if (autoPosition && !open && nextProps.open && this.interactiveList) {
            var windowHeight = window.innerHeight;
            var top_1 = this.interactiveList.getBoundingClientRect().top;
            if (top_1 > windowHeight / 2) {
                this.setState(function () { return ({
                    direction: InteractiveList_types_part_1.InteractiveListDirection.reverse,
                }); });
            }
            else {
                this.setState(function () { return ({
                    direction: InteractiveList_types_part_1.InteractiveListDirection.normal,
                }); });
            }
        }
    };
    InteractiveListInt.prototype.componentDidUpdate = function () {
        var _a = this.props, open = _a.open, autoFocus = _a.autoFocus;
        if (open && autoFocus && this.interactiveList) {
            this.interactiveList.focus();
        }
    };
    InteractiveListInt.prototype.getNext = function (proposed, dir) {
        var data = this.props.data;
        var max = data.length;
        for (var i = 0; i < max; i++) {
            var item = data[proposed];
            if (!item) {
                continue;
            }
            if (typeof item === 'string' || (item.type !== 'divider' && item.type !== 'header')) {
                return proposed;
            }
            proposed += dir;
            if (proposed < 0) {
                proposed = max - 1;
            }
            else if (proposed === max) {
                proposed = 0;
            }
        }
        return 0;
    };
    InteractiveListInt.prototype.jumpTo = function (part) {
        var data = this.props.data;
        var selected = this.state.selected;
        var start = selected ? (selected === data.length - 1 ? 0 : selected) : 0;
        var index = start;
        for (var i = start; i < start + data.length; i++, index = i === data.length ? 0 : index + 1) {
            var item = data[index];
            if (!item) {
                continue;
            }
            var lookup = typeof item === 'string' ? item : item.searchText || item.content || item.key;
            if (typeof lookup === 'string' && lookup.substr(0, part.length).toLowerCase() === part && selected !== index) {
                this.setState({
                    selected: index,
                });
                break;
            }
        }
    };
    InteractiveListInt.prototype.createItem = function (key, index, content) {
        var _this = this;
        var _a = this.state, value = _a.value, selected = _a.selected;
        var _b = this.props, disabled = _b.disabled, _c = _b.showTick, showTick = _c === void 0 ? false : _c, _d = _b.multiple, multiple = _d === void 0 ? false : _d, _e = _b.condensed, condensed = _e === void 0 ? false : _e, disabledItems = _b.disabledItems;
        var isItemDisabled = disabledItems && disabledItems.indexOf(key) !== -1;
        var isHovered = !disabled && selected === index;
        var isSelected = value.indexOf(index) >= 0;
        var selects = this.selects;
        var ContentWrapper = typeof content === 'string' ? ListItemContentPadding : ListItemContentComponentPadding;
        if (selects[index] === undefined) {
            selects[index] = function () { return _this.select(index); };
        }
        return (React.createElement(ListItem, { key: key + "-" + index, onClick: this.done, onMouseMove: selects[index], selected: isSelected, hovered: isHovered, disabled: isItemDisabled, ref: function (node) {
                _this.elements[index] = node;
                if (isHovered && node) {
                    var parent_1 = node.parentElement;
                    if (parent_1) {
                        var height = parent_1.clientHeight;
                        var position = parent_1.scrollTop;
                        var y0 = node.offsetTop - position;
                        var y1 = y0 + node.offsetHeight - height;
                        if (y0 < 0) {
                            parent_1.scrollTop = node.offsetTop;
                        }
                        else if (y1 > 0) {
                            parent_1.scrollTop += y1;
                        }
                    }
                }
            } },
            React.createElement(ListItemInnerContainer, null,
                React.createElement(ListItemContent, null,
                    React.createElement(ContentWrapper, { condensed: condensed, showTick: isSelected && showTick }, content)),
                isSelected && !multiple && showTick && (React.createElement(ListItemIconPadding, { condensed: condensed },
                    React.createElement(Icon_1.Icon, { name: "Check", color: colors_1.pacificBlue, size: 1.375 }))))));
    };
    InteractiveListInt.prototype.select = function (index) {
        var disabled = this.props.disabled;
        if (!disabled && this.state.selected !== index) {
            this.setState({
                selected: index,
            });
        }
    };
    InteractiveListInt.prototype.render = function () {
        var _a = this.props, _0 = _a.onChange, _1 = _a.indices, _2 = _a.disabled, _3 = _a.onKeyDown, _4 = _a.onClickOutside, _b = _a.data, data = _b === void 0 ? [] : _b, theme = _a.theme, _c = _a.borderless, borderless = _c === void 0 ? false : _c, children = _a.children, _d = _a.multiple, multiple = _d === void 0 ? false : _d, _e = _a.open, open = _e === void 0 ? false : _e, onBlur = _a.onBlur, customWrapper = _a.customWrapper, onClick = _a.onClick, props = __rest(_a, ["onChange", "indices", "disabled", "onKeyDown", "onClickOutside", "data", "theme", "borderless", "children", "multiple", "open", "onBlur", "customWrapper", "onClick"]);
        var border = borderless ? 0 /* none */ : 1 /* normal */;
        var createItem = multiple ? this.createMultipleItem : this.createSingleItem;
        var Wrapper = customWrapper || ListWrapper;
        return (React.createElement(InteractiveListContainer, __assign({ ref: this.setNode }, (open ? { tabIndex: 0 } : undefined), { onKeyDown: this.control }, props),
            React.createElement(Wrapper, { open: open, border: border, direction: this.state.direction, onClick: onClick }, open &&
                data.map(function (item, index) {
                    if (item) {
                        if (typeof item !== 'string') {
                            switch (item.type) {
                                case 'divider':
                                    return React.createElement(ListDivider, { key: item.key });
                                case 'header':
                                    return React.createElement(ListHeader, { key: item.key }, item.content || item.key);
                            }
                        }
                        return createItem(item, index);
                    }
                    return undefined;
                }))));
    };
    InteractiveListInt.inner = {
        get StyledCheckbox() { return StyledCheckbox; },
        get ListItem() { return ListItem; },
        get ListItemInnerContainer() { return ListItemInnerContainer; },
        get ListItemContent() { return ListItemContent; },
        get ListItemIconPadding() { return ListItemIconPadding; },
        get Icon() { return Icon_1.Icon; },
        get InteractiveListContainer() { return InteractiveListContainer; },
        get ListDivider() { return ListDivider; },
        get ListHeader() { return ListHeader; }
    };
    return InteractiveListInt;
}(React.PureComponent));
exports.InteractiveListInt = InteractiveListInt;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11;
//# sourceMappingURL=data:application/json;base64,