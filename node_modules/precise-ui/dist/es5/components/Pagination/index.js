"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PaginationBar_1 = require("../PaginationBar");
var PaginationLayout_part_1 = require("./PaginationLayout.part");
/**
 * The Pagination component allows generic pagination of arbitrary components.
 */
var Pagination = /** @class */ (function (_super) {
    __extends(Pagination, _super);
    function Pagination(props) {
        var _this = _super.call(this, props) || this;
        _this.handlePageChange = function (_a) {
            var page = _a.page;
            var _b = _this.props, onChange = _b.onChange, value = _b.value;
            if (value === undefined) {
                _this.setState({
                    current: page,
                });
            }
            if (typeof onChange === 'function') {
                onChange({
                    value: page,
                });
            }
        };
        _this.handleSizeChange = function (_a) {
            var size = _a.size;
            var children = _this.props.children;
            var current = _this.state.current;
            var total = React.Children.count(children);
            var maxPageCount = Math.max(Math.ceil(total / size) - 1, 0);
            _this.setState({
                size: size,
                current: Math.min(current, maxPageCount),
            });
        };
        var value = props.value, defaultValue = props.defaultValue, _a = props.size, size = _a === void 0 ? 20 : _a;
        _this.state = {
            current: value || defaultValue || 0,
            size: Array.isArray(size) ? size[0] : size,
        };
        return _this;
    }
    Pagination.prototype.getDim = function (count) {
        var _a = this.state, current = _a.current, sizeState = _a.size;
        var min = current * sizeState;
        if (min < count) {
            return {
                current: current,
                min: min,
                max: min + sizeState,
                sizeState: sizeState,
            };
        }
        else {
            var previous = ~~((count - 1) / sizeState);
            return {
                current: previous,
                min: previous * sizeState,
                max: (previous + 1) * sizeState,
                sizeState: sizeState,
            };
        }
    };
    Pagination.prototype.render = function () {
        var _a = this.props, children = _a.children, host = _a.host, sizeProp = _a.size, itemsInfo = _a.itemsInfo, pagesInfo = _a.pagesInfo, label = _a.label, render = _a.render, props = __rest(_a, ["children", "host", "size", "itemsInfo", "pagesInfo", "label", "render"]);
        var count = React.Children.count(children);
        var _b = this.getDim(count), current = _b.current, min = _b.min, max = _b.max, sizeState = _b.sizeState;
        var content = count < sizeState
            ? children
            : React.Children.map(children, function (child, index) {
                if (index >= min && index < max) {
                    return child;
                }
                return undefined;
            });
        if (typeof render === 'function') {
            return render({
                current: current,
                min: min,
                max: max,
                count: count,
                content: content,
                sizeChanged: this.handleSizeChange,
                pageChanged: this.handlePageChange,
            });
        }
        return (React.createElement(PaginationLayout_part_1.PaginationLayout, __assign({}, props, { host: host, content: content, controls: React.createElement(PaginationBar_1.PaginationBar, { selectedPage: current, itemsInfo: itemsInfo, itemsPerPageLabel: label, pagesInfo: pagesInfo, size: sizeState, items: count, onSizeChanged: this.handleSizeChange, onPageChanged: this.handlePageChange, availableSizes: Array.isArray(sizeProp) ? sizeProp : [] }) })));
    };
    Pagination.inner = {
        get PaginationLayout() { return PaginationLayout_part_1.PaginationLayout; }
    };
    return Pagination;
}(React.Component));
exports.Pagination = Pagination;
//# sourceMappingURL=data:application/json;base64,