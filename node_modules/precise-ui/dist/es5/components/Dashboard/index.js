"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var InteractiveSurface_1 = require("../InteractiveSurface");
var Grid_1 = require("../Grid");
var GridArea_1 = require("../GridArea");
function clamp(lower, value, upper) {
    return Math.min(Math.max(lower, value), upper);
}
function calc(rel, off, total, dim) {
    var value = clamp(0, rel * total - off, total - dim);
    return value + "px";
}
function repeat(count, dim) {
    var value = dim !== undefined ? dim + "px" : '1fr';
    if (count !== undefined) {
        var values = [];
        for (var i = 0; i < count; i++) {
            values.push(value);
        }
        return values;
    }
    return value;
}
function collides(a, b) {
    if (a.hidden || b.hidden) {
        return false;
    }
    else if (a.column !== undefined && a.row !== undefined && b.column !== undefined && b.row !== undefined) {
        var _a = a.colSpan, acp = _a === void 0 ? 1 : _a, _b = a.rowSpan, arp = _b === void 0 ? 1 : _b;
        var _c = b.colSpan, bcp = _c === void 0 ? 1 : _c, _d = b.rowSpan, brp = _d === void 0 ? 1 : _d;
        var acs = a.column;
        var ace = a.column + acp - 1;
        var ars = a.row;
        var are = a.row + arp - 1;
        var bcs = b.column;
        var bce = b.column + bcp - 1;
        var brs = b.row;
        var bre = b.row + brp - 1;
        return acs <= bce && ace >= bcs && ars <= bre && are >= brs;
    }
    return false;
}
function notEqual(a, b) {
    if (a !== b) {
        if (a.length !== b.length) {
            return true;
        }
        for (var i = a.length; i--;) {
            var at = a[i];
            var bt = b[i];
            if (at !== bt ||
                at.colSpan !== bt.colSpan ||
                at.column !== bt.column ||
                at.id !== bt.id ||
                at.row !== bt.row ||
                at.rowSpan !== bt.rowSpan) {
                return true;
            }
        }
    }
    return false;
}
function resetStyle(node) {
    // tslint:disable-next-line
    var defaultValue = null;
    var style = node.style;
    style.position = 'static';
    style.cursor = defaultValue;
    style.width = defaultValue;
    style.height = defaultValue;
    style.left = defaultValue;
    style.top = defaultValue;
    style.zIndex = defaultValue;
}
var Preview = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  background: #eee;\n  border: 1px dashed #ccc;\n  width: 100%;\n  height: 100%;\n"], ["\n  background: #eee;\n  border: 1px dashed #ccc;\n  width: 100%;\n  height: 100%;\n"])));
function getPreview(preview, tile) {
    var content = preview === true ? React.createElement(Preview, null) : preview;
    return (React.createElement(GridArea_1.GridArea, { colSpan: tile.colSpan, rowSpan: tile.rowSpan, column: tile.column, row: tile.row }, content));
}
var defaultActiveTile = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
};
function changeTile(oldTiles, newTile) {
    var changed = false;
    var newTiles = oldTiles.map(function (tile) {
        if (tile.id === newTile.id) {
            changed =
                changed ||
                    tile.colSpan !== newTile.colSpan ||
                    tile.column !== newTile.column ||
                    tile.hidden !== newTile.hidden ||
                    tile.row !== newTile.row ||
                    tile.rowSpan !== newTile.rowSpan;
            return newTile;
        }
        else if (collides(tile, newTile)) {
            changed = true;
            return {
                id: tile.id,
                colSpan: tile.colSpan,
                rowSpan: tile.rowSpan,
            };
        }
        return tile;
    });
    return changed ? newTiles : oldTiles;
}
/**
 * Dashboard component.
 */
var Dashboard = /** @class */ (function (_super) {
    __extends(Dashboard, _super);
    function Dashboard(props) {
        var _this = _super.call(this, props) || this;
        _this.setters = [];
        _this.dragTile = function (e) {
            var activeTile = _this.activeTile;
            if (activeTile) {
                var node = activeTile.node;
                var current = activeTile.current;
                if (!e.moved) {
                }
                else if (e.active) {
                    var style = node.style;
                    style.left = calc(e.x, activeTile.x, e.rect.width, activeTile.width);
                    style.top = calc(e.y, activeTile.y, e.rect.height, activeTile.height);
                    _this.previewDrag(e.x, e.y, current);
                }
                else {
                    var pos = _this.getTargetPosition(e.x, e.y, current);
                    resetStyle(node);
                    _this.finishDrag(__assign({}, current, { column: pos.column, row: pos.row }));
                }
            }
            else {
                e.release();
            }
        };
        _this.setLayout = function (_a) {
            var layout = _a.layout;
            _this.layout = layout;
        };
        var _a = props.defaultTiles, defaultTiles = _a === void 0 ? [] : _a;
        _this.state = {
            tiles: defaultTiles.slice(),
            live: undefined,
        };
        return _this;
    }
    Dashboard.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        var _a = this.props.defaultTiles, currTiles = _a === void 0 ? [] : _a;
        var _b = nextProps.defaultTiles, nextTiles = _b === void 0 ? [] : _b;
        if (notEqual(currTiles, nextTiles)) {
            this.setState({
                tiles: nextTiles.slice(),
                live: undefined,
            });
        }
    };
    Dashboard.prototype.finishDrag = function (newTile) {
        var onChange = this.props.onChange;
        var oldTiles = this.state.tiles;
        var newTiles = changeTile(oldTiles, newTile);
        this.activeTile = undefined;
        if (newTiles !== oldTiles) {
            this.setState({
                tiles: newTiles,
                live: undefined,
            });
            if (typeof onChange === 'function') {
                onChange({
                    tile: newTile,
                    tiles: newTiles,
                });
            }
        }
        else {
            this.setState({
                live: undefined,
            });
        }
    };
    Dashboard.prototype.previewDrag = function (h, v, tile) {
        var active = this.activeTile;
        var preview = this.props.preview;
        var _a = this.state, live = _a.live, tiles = _a.tiles;
        if (preview && active && live) {
            var current = active.current;
            var pos = this.getTargetPosition(h, v, tile);
            var last = live[active.index];
            if (pos.column !== last.column || pos.row !== last.row) {
                this.setState({
                    live: changeTile(tiles, __assign({}, current, { column: pos.column, row: pos.row })),
                });
            }
        }
    };
    Dashboard.prototype.getTargetPosition = function (h, v, tile) {
        var _a = this.layout, columns = _a.columns, rows = _a.rows;
        var _b = tile.colSpan, colSpan = _b === void 0 ? 1 : _b, _c = tile.rowSpan, rowSpan = _c === void 0 ? 1 : _c;
        var _d = this.activeTile || defaultActiveTile, x = _d.x, y = _d.y, width = _d.width, height = _d.height;
        var totalRows = rows.length;
        var totalColumns = columns.length;
        var columnOffset = ~~((x * colSpan) / width);
        var rowOffset = ~~((y * rowSpan) / height);
        return {
            column: clamp(0, ~~(h * totalColumns) - columnOffset, totalColumns - colSpan),
            row: clamp(0, ~~(v * totalRows) - rowOffset, totalRows - rowSpan),
        };
    };
    Dashboard.prototype.setActiveTile = function (e, index) {
        var disabled = this.props.disabled;
        var tiles = this.state.tiles;
        var current = tiles[index];
        if (!disabled) {
            this.activeTile = __assign({}, e, { index: index,
                current: current });
            var style = e.node.style;
            style.cursor = 'move';
            style.position = 'absolute';
            style.width = e.width + "px";
            style.height = e.height + "px";
            style.zIndex = '100000000';
            this.setState({
                live: tiles,
            });
        }
    };
    Dashboard.prototype.render = function () {
        var _this = this;
        var _a = this.props, columnWidth = _a.columnWidth, _b = _a.columnCount, columnCount = _b === void 0 ? 5 : _b, rowHeight = _a.rowHeight, rowCount = _a.rowCount, _c = _a.spacing, spacing = _c === void 0 ? 10 : _c, theme = _a.theme, children = _a.children, disabled = _a.disabled, preview = _a.preview, _0 = _a.defaultTiles, _1 = _a.onChange, emptyTiles = _a.emptyTiles, props = __rest(_a, ["columnWidth", "columnCount", "rowHeight", "rowCount", "spacing", "theme", "children", "disabled", "preview", "defaultTiles", "onChange", "emptyTiles"]);
        var _d = this.state, tiles = _d.tiles, live = _d.live;
        var currentTiles = live || tiles;
        var columns = repeat(columnCount, columnWidth);
        var rows = repeat(rowCount, rowHeight);
        var active = this.activeTile;
        return (React.createElement(InteractiveSurface_1.InteractiveSurface, { theme: theme, onChange: this.dragTile, disabled: disabled },
            React.createElement(Grid_1.Grid, __assign({ theme: theme, rows: rows, columns: columns, spacing: spacing + "px", showEmptyCells: emptyTiles, onLayout: this.setLayout }, props),
                React.Children.map(children, function (child, index) {
                    var tile = currentTiles[index];
                    var setters = _this.setters;
                    if (setters[index] === undefined) {
                        setters[index] = function (e) { return _this.setActiveTile(e, index); };
                    }
                    return (tile && (React.createElement(GridArea_1.GridArea, { key: tile.id, theme: theme, onTap: setters[index], column: tile.column, colSpan: tile.colSpan, rowSpan: tile.rowSpan, hidden: tile.hidden, row: tile.row }, child)));
                }),
                preview && active && getPreview(preview, currentTiles[active.index]))));
    };
    Dashboard.inner = {
        get InteractiveSurface() { return InteractiveSurface_1.InteractiveSurface; },
        get Grid() { return Grid_1.Grid; },
        get GridArea() { return GridArea_1.GridArea; }
    };
    return Dashboard;
}(React.Component));
exports.Dashboard = Dashboard;
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,