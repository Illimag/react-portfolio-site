"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var input_1 = require("../../utils/input");
var text_1 = require("../../utils/text");
var Icon_1 = require("../Icon");
var InputIcon_1 = require("../InputIcon");
var colors_1 = require("../../colors");
var distance_1 = require("../../distance");
var withFormContext_1 = require("../../hoc/withFormContext");
var quarks_1 = require("../../quarks");
var textStyles_1 = require("../../textStyles");
var finishTagKeys = [13 /* enter */, 32 /* space */, 188 /* comma */, 186 /* semicolon */];
var StyledIcon = styled_1.default(Icon_1.Icon)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n\n  cursor: pointer;\n  vertical-align: middle;\n  color: ", ";\n  font-family: ", ";\n  margin-left: ", ";\n"], ["\n  ", "\n\n  cursor: pointer;\n  vertical-align: middle;\n  color: ", ";\n  font-family: ", ";\n  margin-left: ", ";\n"])), textStyles_1.getFontStyle({ size: 'small' }), styled_1.themed(function (props) { return props.theme.ui5; }), styled_1.themed(function (props) { return props.theme.fontFamily; }), distance_1.distance.small);
var TagBuilderContainer = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject([""], [""])));
function getContainerPadding(props) {
    var tagRenderer = props.tagRenderer, labelShown = props.labelShown;
    if (!tagRenderer) {
        return !labelShown
            ? distance_1.distance.medium + " " + distance_1.distance.medium + " " + distance_1.distance.small
            : distance_1.distance.large + " " + distance_1.distance.medium + " 0";
    }
    return !labelShown ? "" + distance_1.distance.medium : distance_1.distance.large + " " + distance_1.distance.medium + " " + distance_1.distance.small;
}
var StyledTagsContainer = styled_1.default.div(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  padding: ", ";\n  margin: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n"], ["\n  padding: ", ";\n  margin: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n"])), getContainerPadding);
var StyledInput = styled_1.default('input')(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  ", "\n  box-sizing: content-box;\n  box-shadow: none;\n  border: none;\n  border-radius: 0;\n  margin: 0;\n  outline: none;\n  outline-color: transparent !important;\n  background: ", ";\n  width: ", ";\n  color: ", ";\n  cursor: ", ";\n  font-family: inherit;\n"], ["\n  ", "\n  box-sizing: content-box;\n  box-shadow: none;\n  border: none;\n  border-radius: 0;\n  margin: 0;\n  outline: none;\n  outline-color: transparent !important;\n  background: ", ";\n  width: ", ";\n  color: ", ";\n  cursor: ", ";\n  font-family: inherit;\n"])), textStyles_1.getFontSize('medium'), colors_1.transparent, function (props) { return (props.value.length > 2 ? props.value.length * 10 + 'px' : '20px'); }, styled_1.themed(function (_a) {
    var disabled = _a.disabled, theme = _a.theme, valid = _a.valid;
    return (valid ? (disabled ? theme.textDisabled : colors_1.dark) : colors_1.purpleRed);
}), function (props) { return (props.disabled ? 'not-allowed' : 'auto'); });
var RestyledTagItem = styled_1.default(quarks_1.StyledTagItem)(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  margin: 0 ", " ", " 0;\n"], ["\n  margin: 0 ", " ", " 0;\n"])), distance_1.distance.small, distance_1.distance.small);
var InputContainer = styled_1.default('div')(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  display: inline;\n  padding-bottom: ", ";\n"], ["\n  display: inline;\n  padding-bottom: ", ";\n"])), function (_a) {
    var tagRenderer = _a.tagRenderer;
    return (!tagRenderer ? "" + distance_1.distance.small : '0');
});
var StyledText = styled_1.default.span(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n  display: inline-block;\n  vertical-align: middle;\n"], ["\n  display: inline-block;\n  vertical-align: middle;\n"])));
var CloseIcon = Object.assign((function (_a) {
    var theme = _a.theme, onClick = _a.onClick, onMouseDown = _a.onMouseDown;
    return (React.createElement(StyledIcon, { theme: theme, name: "Close", onClick: onClick, onMouseDown: onMouseDown }));
}), { inner: {
        get StyledIcon() { return StyledIcon; }
    } });
var TagBuilderInt = /** @class */ (function (_super) {
    __extends(TagBuilderInt, _super);
    function TagBuilderInt(props) {
        var _this = _super.call(this, props) || this;
        _this.inputChanged = function (e) {
            var onInput = _this.props.onInput;
            var _a = _this.state, controlled = _a.controlled, prevTags = _a.value;
            var value = e.currentTarget.value;
            if (typeof onInput === 'function') {
                onInput({ value: value });
            }
            if (!controlled) {
                _this.setState({ inputValue: value, valid: value.length > 0 ? prevTags.indexOf(value) === -1 : true });
            }
        };
        _this.keyDownHandler = function (e) {
            var _a = _this.state, inputValue = _a.inputValue, controlled = _a.controlled;
            var shouldFinishTag = _this.props.shouldFinishTag;
            var isHandled = false;
            var handleKeyEvent = function () {
                e.stopPropagation();
                e.preventDefault();
                isHandled = true;
            };
            if (inputValue.length === 0) {
                switch (e.keyCode) {
                    case 8 /* backspace */:
                        _this.removePrevTag();
                        handleKeyEvent();
                        break;
                    case 46 /* delete */:
                        _this.removeNextTag();
                        handleKeyEvent();
                        break;
                }
            }
            if (!isHandled && !controlled) {
                if (typeof shouldFinishTag === 'function') {
                    if (shouldFinishTag(e)) {
                        _this.addTag(inputValue);
                        handleKeyEvent();
                        return;
                    }
                }
                else if (finishTagKeys.indexOf(e.keyCode) !== -1) {
                    _this.addTag(inputValue);
                    handleKeyEvent();
                }
                if (inputValue.length === 0) {
                    switch (e.keyCode) {
                        case 35 /* end */:
                            _this.inputMoveEnd();
                            handleKeyEvent();
                            break;
                        case 36 /* home */:
                            _this.inputMoveHome();
                            handleKeyEvent();
                            break;
                        case 37 /* left */:
                            _this.inputMoveLeft();
                            handleKeyEvent();
                            break;
                        case 39 /* right */:
                            _this.inputMoveRight();
                            handleKeyEvent();
                            break;
                    }
                }
            }
        };
        _this.inputFocused = function () {
            var onFocus = _this.props.onFocus;
            _this.setState({
                focused: true,
            }, onFocus);
        };
        _this.inputBlurred = function () {
            var _a = _this.props, onBlur = _a.onBlur, appendTagOnBlur = _a.appendTagOnBlur;
            if (!!appendTagOnBlur && !_this.state.controlled) {
                var inputValue = _this.state.inputValue;
                if (inputValue) {
                    _this.addTag(inputValue);
                }
            }
            _this.setState({
                focused: false,
            }, onBlur);
        };
        _this.setFocus = function () {
            _this._input && _this._input.focus();
        };
        _this.removeTagMouseDownHandler = function (event) {
            event.preventDefault();
        };
        _this.renderTag = function (e) {
            var _a = _this.props, theme = _a.theme, disabled = _a.disabled;
            return (React.createElement(RestyledTagItem, { theme: theme, key: e.item + e.index },
                React.createElement(StyledText, null, e.item),
                !disabled && (React.createElement(CloseIcon, { theme: theme, onMouseDown: _this.removeTagMouseDownHandler, onClick: function () { return _this.removeTag(e.index); } }))));
        };
        _this.setContainer = function (node) {
            _this._input = node;
            var inputRef = _this.props.inputRef;
            if (typeof inputRef === 'function') {
                inputRef(node);
            }
        };
        var tags = (props.value || props.defaultValue || []).map(text_1.lowerize);
        _this.state = {
            value: tags,
            inputValue: props.inputValue || '',
            controlled: props.value !== undefined || props.inputValue !== undefined,
            focused: false,
            valid: true,
            error: props.error,
        };
        return _this;
    }
    TagBuilderInt.prototype.UNSAFE_componentWillReceiveProps = function (_a) {
        var value = _a.value, _b = _a.inputValue, inputValue = _b === void 0 ? '' : _b, error = _a.error;
        if (this.state.controlled && value !== undefined) {
            this.setState({
                value: value.slice(),
                inputValue: inputValue,
            });
        }
        this.setState({ error: error });
    };
    TagBuilderInt.prototype.componentDidMount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.subscribe(this);
        }
    };
    TagBuilderInt.prototype.componentWillUnmount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    };
    TagBuilderInt.prototype.fireBeforeTagRemoveEvent = function (index) {
        var onBeforeTagRemove = this.props.onBeforeTagRemove;
        if (typeof onBeforeTagRemove === 'function') {
            onBeforeTagRemove(index);
        }
    };
    TagBuilderInt.prototype.inputMoveLeft = function () {
        var value = this.state.value;
        var _a = this.state.inputPosition, inputPosition = _a === void 0 ? value.length : _a;
        if (inputPosition > 0) {
            this.setState({ inputPosition: inputPosition - 1 });
        }
    };
    TagBuilderInt.prototype.inputMoveRight = function () {
        var _a = this.state, value = _a.value, inputPosition = _a.inputPosition;
        if (inputPosition !== undefined && inputPosition < value.length) {
            this.setState({ inputPosition: inputPosition + 1 });
        }
    };
    TagBuilderInt.prototype.inputMoveEnd = function () {
        var value = this.state.value;
        this.setState({ inputPosition: value.length });
    };
    TagBuilderInt.prototype.inputMoveHome = function () {
        this.setState({ inputPosition: 0 });
    };
    TagBuilderInt.prototype.addTag = function (inputValue) {
        var _this = this;
        var _a = this.state, prevTags = _a.value, valid = _a.valid;
        var _b = this.state.inputPosition, inputPosition = _b === void 0 ? prevTags.length : _b;
        inputValue = inputValue.trim().toLowerCase();
        if (inputValue.length > 0 && valid) {
            var tags_1 = prevTags.slice();
            tags_1.splice(inputPosition, 0, inputValue);
            this.setState({ inputValue: '', inputPosition: inputPosition + 1 }, function () { return _this.onChange(tags_1); });
        }
    };
    TagBuilderInt.prototype.removePrevTag = function () {
        var prevTags = this.state.value;
        var _a = this.state.inputPosition, inputPosition = _a === void 0 ? prevTags.length : _a;
        if (inputPosition > 0) {
            this.removeTag(inputPosition - 1);
            this.setState({ inputPosition: inputPosition - 1 });
        }
    };
    TagBuilderInt.prototype.removeNextTag = function () {
        var _a = this.state, prevTags = _a.value, inputPosition = _a.inputPosition;
        if (inputPosition !== undefined && inputPosition < prevTags.length) {
            this.removeTag(inputPosition);
        }
    };
    TagBuilderInt.prototype.removeTag = function (index) {
        var prevTags = this.state.value;
        this.fireBeforeTagRemoveEvent(index);
        var tags = prevTags.slice(0, index).concat(prevTags.slice(index + 1));
        this.onChange(tags);
    };
    TagBuilderInt.prototype.onChange = function (value) {
        var _a = this.props, onChange = _a.onChange, _b = _a.name, name = _b === void 0 ? '' : _b, form = _a.form;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name: name,
                    value: value,
                });
            }
            else {
                this.setState({
                    value: value,
                });
            }
        }
        if (typeof onChange === 'function') {
            onChange({
                value: value,
            });
        }
    };
    TagBuilderInt.prototype.render = function () {
        var _a = this.props, tagRenderer = _a.tagRenderer, info = _a.info, disabled = _a.disabled, borderless = _a.borderless, theme = _a.theme, label = _a.label, placeholder = _a.placeholder;
        var _b = this.state, value = _b.value, inputValue = _b.inputValue, focused = _b.focused, valid = _b.valid, error = _b.error;
        var _c = this.state.inputPosition, inputPosition = _c === void 0 ? value.length : _c;
        var border = quarks_1.getTextFieldBorderType(borderless, !!error, focused);
        var renderer = tagRenderer || this.renderTag;
        var children = value.map(function (item, index) { return renderer({ item: item, index: index, tags: value }); });
        var hasValue = !!inputValue || value.length > 0;
        children.splice(inputPosition, 0, React.createElement(InputContainer, { key: "input", onKeyDown: this.keyDownHandler, tagRenderer: !!tagRenderer },
            React.createElement(StyledInput, { theme: theme, disabled: disabled, ref: this.setContainer, type: "text", value: inputValue, onChange: this.inputChanged, onFocus: this.inputFocused, onBlur: this.inputBlurred, valid: valid })));
        return (React.createElement(TagBuilderContainer, null,
            React.createElement(quarks_1.StyledInputBox, { border: border, disabled: disabled, focused: focused, hasValue: hasValue },
                React.createElement(quarks_1.StyledInputRow, { onClick: this.setFocus, label: label, hasValue: hasValue, placeholder: placeholder, error: !!error, focused: focused },
                    React.createElement(StyledTagsContainer, { labelShown: !!label, tagRenderer: !!tagRenderer }, children)),
                React.createElement(InputIcon_1.InputIcon, { disabled: disabled, theme: theme, error: error, hasValue: hasValue })),
            input_1.showInputInfo(error, info)));
    };
    TagBuilderInt.inner = {
        get RestyledTagItem() { return RestyledTagItem; },
        get StyledText() { return StyledText; },
        get CloseIcon() { return CloseIcon; },
        get InputContainer() { return InputContainer; },
        get StyledInput() { return StyledInput; },
        get TagBuilderContainer() { return TagBuilderContainer; },
        get StyledInputBox() { return quarks_1.StyledInputBox; },
        get StyledInputRow() { return quarks_1.StyledInputRow; },
        get StyledTagsContainer() { return StyledTagsContainer; },
        get InputIcon() { return InputIcon_1.InputIcon; }
    };
    return TagBuilderInt;
}(React.Component));
exports.TagBuilderInt = TagBuilderInt;
exports.TagBuilder = withFormContext_1.withFormContext(TagBuilderInt);
exports.TagBuilder.displayName = 'TagBuilder';
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7;
//# sourceMappingURL=data:application/json;base64,