"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var memoize_one_1 = require("memoize-one");
var styled_1 = require("../../utils/styled");
var sort_1 = require("../../utils/sort");
var distance_1 = require("../../distance");
var TableShared_part_1 = require("./TableShared.part");
var textStyles_1 = require("../../textStyles");
var StyledTable = styled_1.default.table(styled_1.themed(function (_a) {
    var theme = _a.theme, borderless = _a.borderless, condensed = _a.condensed;
    return styled_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    ", "\n\n    table-layout: ", ";\n    border-collapse: collapse;\n    width: 100%;\n    color: ", ";\n    border: ", ";\n\n    > thead > tr > th,\n    > tbody > tr > td {\n      padding: ", ";\n\n      &:not(:last-child) {\n        padding-right: 0;\n      }\n    }\n    "], ["\n    ", "\n\n    table-layout: ", ";\n    border-collapse: collapse;\n    width: 100%;\n    color: ", ";\n    border: ", ";\n\n    > thead > tr > th,\n    > tbody > tr > td {\n      padding: ", ";\n\n      &:not(:last-child) {\n        padding-right: 0;\n      }\n    }\n    "])), textStyles_1.getFontStyle({ size: 'small', lineHeight: 'xSmall' }), theme.tableLayout, theme.text6, borderless ? 'none' : theme.tableBorder, condensed ? distance_1.distance.small + " " + distance_1.distance.large : theme.tableHeadPadding);
}));
var StyledTableBody = styled_1.default.tbody(templateObject_2 || (templateObject_2 = __makeTemplateObject([""], [""])));
var TableHost = Object.assign((function (_a) {
    var head = _a.head, foot = _a.foot, theme = _a.theme, children = _a.children, props = __rest(_a, ["head", "foot", "theme", "children"]);
    return (React.createElement(StyledTable, __assign({ theme: theme }, props),
        head,
        React.createElement(StyledTableBody, { theme: theme }, children),
        foot));
}), { inner: {
        get StyledTable() { return StyledTable; },
        get StyledTableBody() { return StyledTableBody; }
    } });
var HiddenCell = styled_1.default.td(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  display: none;\n"], ["\n  display: none;\n"])));
var StyledTableCell = styled_1.default.td(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  text-align: left;\n"], ["\n  text-align: left;\n"])));
var StyledPlaceholderCell = styled_1.default(StyledTableCell)(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  text-align: center;\n"], ["\n  text-align: center;\n"])));
function defaultRowKeyGetter(_a) {
    var key = _a.key;
    return key;
}
function normalizeSortBy(sortBy) {
    if (!sortBy) {
        return undefined;
    }
    if (typeof sortBy === 'string') {
        if (sortBy[0] === '-') {
            return {
                columnKey: sortBy.substr(1),
                order: 'descending',
            };
        }
        else {
            return {
                columnKey: sortBy,
                order: 'ascending',
            };
        }
    }
    return {
        columnKey: sortBy.columnKey,
        order: sortBy.order || 'ascending',
    };
}
var TableBasic = /** @class */ (function (_super) {
    __extends(TableBasic, _super);
    function TableBasic(props) {
        var _this = _super.call(this, props) || this;
        _this.getIndices = memoize_one_1.default(function (data, grouping, sorting) { return sorting
            ? sort_1.sortObjectList(data, sorting.columnKey, sorting.order, grouping)
            : sort_1.sortObjectList(data, undefined, undefined, grouping); });
        _this.defaultHeadRenderer = function (_a) {
            var columns = _a.columns, sortBy = _a.sortBy, keys = _a.keys;
            var onSort = _this.props.onSort;
            var defaultHeaderCellRenderer = TableShared_part_1.getDefaultHeaderCellRenderer(function (columnKey, order) {
                _this.setState({
                    sorting: {
                        columnKey: columnKey,
                        order: order,
                    },
                }, function () {
                    if (typeof onSort === 'function') {
                        onSort({
                            column: keys.indexOf(columnKey),
                            key: columnKey,
                            order: order,
                        });
                    }
                });
            });
            var _b = _this.props, indexed = _b.indexed, theme = _b.theme, _c = _b.headerCellRenderer, headerCellRenderer = _c === void 0 ? defaultHeaderCellRenderer : _c;
            return (React.createElement(TableShared_part_1.StyledTableHead, { theme: theme },
                React.createElement(TableShared_part_1.StyledTableHeaderRow, { theme: theme },
                    indexed && (React.createElement(TableShared_part_1.StyledTableHeader, { onClick: function (e) { return _this.headerClicked(e, -1, '#'); }, theme: theme }, headerCellRenderer({
                        column: -1,
                        key: '',
                        row: -1,
                        value: '#',
                        render: defaultHeaderCellRenderer,
                    }))),
                    keys.map(function (key, cell) {
                        var column = columns[key];
                        var hidden = typeof column !== 'string' && column.hidden;
                        if (!hidden) {
                            var name_1 = typeof column === 'string' ? column : column.header;
                            var width = typeof column === 'string' ? undefined : column.width;
                            var sortable = _this.isSortable(key, columns);
                            var direction = sortable && sortBy && (sortBy.columnKey !== key ? undefined : sortBy.order);
                            return (React.createElement(TableShared_part_1.StyledTableHeader, { sortable: sortable, width: width, key: key, onClick: function (e) { return _this.headerClicked(e, cell, key); }, theme: theme }, headerCellRenderer({
                                column: cell,
                                key: key,
                                row: -1,
                                sorting: direction,
                                value: name_1,
                                render: defaultHeaderCellRenderer,
                            })));
                        }
                        return React.createElement(HiddenCell, { key: key });
                    }))));
        };
        _this.defaultFootRenderer = function (_a) {
            var columns = _a.columns, keys = _a.keys, sortBy = _a.sortBy;
            var _b = _this.props, indexed = _b.indexed, theme = _b.theme, _c = _b.footerCellRenderer, footerCellRenderer = _c === void 0 ? TableShared_part_1.defaultCellRenderer : _c;
            return (React.createElement(TableShared_part_1.StyledTableFoot, { theme: theme },
                React.createElement(TableShared_part_1.StyledTableRow, { theme: theme },
                    indexed && (React.createElement(StyledTableCell, { onClick: function (e) { return _this.footerClicked(e, -1, '#'); }, theme: theme }, footerCellRenderer({
                        column: -1,
                        key: '',
                        row: -1,
                        value: '',
                        render: TableShared_part_1.defaultCellRenderer,
                    }))),
                    keys.map(function (key, i) {
                        var column = columns[key];
                        var sortable = _this.isSortable(key, columns);
                        var direction = sortable && sortBy && (sortBy.columnKey !== key ? undefined : sortBy.order);
                        var hidden = typeof column !== 'string' && column.hidden;
                        if (!hidden) {
                            var name_2 = typeof column === 'string' ? undefined : column.footer;
                            return (React.createElement(StyledTableCell, { key: key, theme: theme, onClick: function (e) { return _this.footerClicked(e, i, key); } }, footerCellRenderer({
                                column: i,
                                key: key,
                                row: -1,
                                value: name_2,
                                sorting: direction,
                                render: TableShared_part_1.defaultCellRenderer,
                            })));
                        }
                        return React.createElement(HiddenCell, { key: key });
                    }))));
        };
        _this.defaultRowRenderer = function (_a) {
            var cells = _a.cells, index = _a.index;
            var theme = _this.props.theme;
            return (React.createElement(TableShared_part_1.StyledTableRow, { key: index, theme: theme }, cells));
        };
        _this.state = {
            controlledSorting: false,
        };
        return _this;
    }
    TableBasic.getDerivedStateFromProps = function (props, state) {
        var controlledSorting = props.sortBy !== undefined || state.controlledSorting;
        if (controlledSorting) {
            return {
                sorting: normalizeSortBy(props.sortBy),
                controlledSorting: controlledSorting,
            };
        }
        return state;
    };
    TableBasic.prototype.isSortable = function (key, cols) {
        var sortBy = this.props.sortBy;
        var col = cols[key];
        return !sortBy && (!col || (typeof col !== 'string' && col.sortable));
    };
    TableBasic.prototype.headerClicked = function (e, column, key) {
        var _this = this;
        var _a = this.props, onHeaderClick = _a.onHeaderClick, onSort = _a.onSort, _b = _a.data, data = _b === void 0 ? [] : _b, columns = _a.columns;
        e.preventDefault();
        if (typeof onHeaderClick === 'function') {
            onHeaderClick({
                column: column,
                key: key,
                row: -1,
            });
        }
        else if (this.isSortable(key, TableShared_part_1.getColumns(data, columns))) {
            this.setState(function (_a) {
                var sorting = _a.sorting;
                var isAscending = sorting && sorting.order === 'descending' && sorting.columnKey === key;
                var order = sorting && sorting.columnKey === key ? 'descending' : 'ascending';
                var newSortingValue = undefined;
                if (!isAscending && column !== -1) {
                    newSortingValue = {
                        columnKey: key,
                        order: order,
                    };
                }
                return { sorting: newSortingValue };
            }, function () {
                if (typeof onSort === 'function') {
                    onSort({
                        column: column,
                        key: key,
                        order: _this.state.sorting && _this.state.sorting.order,
                    });
                }
            });
        }
    };
    TableBasic.prototype.footerClicked = function (e, column, key) {
        e.preventDefault();
        var onFooterClick = this.props.onFooterClick;
        if (typeof onFooterClick === 'function') {
            onFooterClick({
                column: column,
                key: key,
                row: -1,
            });
        }
    };
    TableBasic.prototype.renderCells = function (keys, rowIndex) {
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, _c = _a.cellRenderer, cellRenderer = _c === void 0 ? TableShared_part_1.defaultCellRenderer : _c, indexed = _a.indexed, theme = _a.theme, columns = _a.columns, onDataClick = _a.onDataClick;
        var cols = TableShared_part_1.getColumns(data, columns);
        var row = data[rowIndex];
        var cells = keys.map(function (key, cell) {
            var column = cols[key];
            var hidden = typeof column !== 'string' && column.hidden;
            if (!hidden) {
                return (React.createElement(StyledTableCell, { key: key, onClick: TableShared_part_1.handleDataClickedEvent({ row: rowIndex, column: cell, key: key, data: row }, onDataClick), theme: theme }, cellRenderer({
                    column: cell,
                    key: key,
                    data: row,
                    row: rowIndex,
                    value: row[key],
                    render: TableShared_part_1.defaultCellRenderer,
                })));
            }
            return React.createElement(HiddenCell, { key: key });
        });
        if (indexed) {
            cells.unshift(React.createElement(StyledTableCell, { key: "index#", onClick: TableShared_part_1.handleDataClickedEvent({ row: rowIndex, column: -1, key: '__indexed', data: row }, onDataClick), theme: theme }, rowIndex + 1));
        }
        return cells;
    };
    TableBasic.prototype.renderRows = function (keys) {
        var _this = this;
        var _a = this.props, data = _a.data, groupBy = _a.groupBy, indexed = _a.indexed, placeholder = _a.placeholder, _b = _a.rowRenderer, rowRenderer = _b === void 0 ? this.defaultRowRenderer : _b, _c = _a.getRowKey, getRowKey = _c === void 0 ? defaultRowKeyGetter : _c, theme = _a.theme;
        var indices = this.getIndices(data, groupBy, this.state.sorting);
        var cols = keys.length + (indexed ? 1 : 0);
        var state = {};
        if (indices.length === 0) {
            return placeholder
                ? [
                    React.createElement(TableShared_part_1.StyledTableRow, { theme: theme, key: "placeholder" },
                        React.createElement(StyledPlaceholderCell, { colSpan: cols, theme: theme }, placeholder)),
                ]
                : [];
        }
        else {
            return indices.map(function (index) {
                var cells = _this.renderCells(keys, index);
                var renderData = { theme: theme, index: index, cells: cells, data: data[index], key: index.toString(), state: state };
                renderData.key = getRowKey(renderData);
                return rowRenderer(renderData);
            });
        }
    };
    TableBasic.prototype.renderHead = function (keys) {
        var _a = this.props, _b = _a.headRenderer, headRenderer = _b === void 0 ? this.defaultHeadRenderer : _b, groupBy = _a.groupBy, _c = _a.data, data = _c === void 0 ? [] : _c, columns = _a.columns;
        var sorting = this.state.sorting;
        return headRenderer({
            columns: TableShared_part_1.getColumns(data, columns),
            sortBy: sorting,
            groupBy: groupBy,
            data: data,
            keys: keys,
        });
    };
    TableBasic.prototype.renderFoot = function (keys) {
        var _a = this.props, _b = _a.footRenderer, footRenderer = _b === void 0 ? this.defaultFootRenderer : _b, groupBy = _a.groupBy, _c = _a.data, data = _c === void 0 ? [] : _c, columns = _a.columns;
        var sorting = this.state.sorting;
        return footRenderer({
            columns: TableShared_part_1.getColumns(data, columns),
            sortBy: sorting,
            groupBy: groupBy,
            data: data,
            keys: keys,
        });
    };
    TableBasic.prototype.render = function () {
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, columns = _a.columns, noHeader = _a.noHeader, theme = _a.theme, _c = _a.bodyRenderer, bodyRenderer = _c === void 0 ? TableShared_part_1.defaultBodyRenderer : _c, _1 = _a.cellRenderer, _2 = _a.indexed, _3 = _a.sortBy, _4 = _a.onDataClick, _5 = _a.onFooterClick, _6 = _a.onHeaderClick, _7 = _a.placeholder, _8 = _a.columns, _9 = _a.groupBy, _10 = _a.headRenderer, _11 = _a.footRenderer, _12 = _a.headerCellRenderer, _13 = _a.footerCellRenderer, _14 = _a.onSort, props = __rest(_a, ["data", "columns", "noHeader", "theme", "bodyRenderer", "cellRenderer", "indexed", "sortBy", "onDataClick", "onFooterClick", "onHeaderClick", "placeholder", "columns", "groupBy", "headRenderer", "footRenderer", "headerCellRenderer", "footerCellRenderer", "onSort"]);
        var cols = TableShared_part_1.getColumns(data, columns);
        var keys = Object.keys(cols);
        var showFooter = keys.filter(function (key) {
            var col = cols[key];
            return typeof col === 'object' && !!col.footer && !col.hidden;
        }).length > 0;
        var rows = this.renderRows(keys);
        return bodyRenderer({
            table: TableHost,
            props: __assign({ theme: theme, head: !noHeader && this.renderHead(keys), foot: showFooter && this.renderFoot(keys) }, props),
            rows: rows,
            mode: 'table',
        });
    };
    TableBasic.inner = {
        get StyledTableHead() { return TableShared_part_1.StyledTableHead; },
        get StyledTableHeaderRow() { return TableShared_part_1.StyledTableHeaderRow; },
        get StyledTableHeader() { return TableShared_part_1.StyledTableHeader; },
        get HiddenCell() { return HiddenCell; },
        get StyledTableFoot() { return TableShared_part_1.StyledTableFoot; },
        get StyledTableRow() { return TableShared_part_1.StyledTableRow; },
        get StyledTableCell() { return StyledTableCell; },
        get StyledPlaceholderCell() { return StyledPlaceholderCell; }
    };
    return TableBasic;
}(React.Component));
exports.TableBasic = TableBasic;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
//# sourceMappingURL=data:application/json;base64,