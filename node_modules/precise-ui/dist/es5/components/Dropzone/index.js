"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var input_1 = require("../../utils/input");
var quarks_1 = require("../../quarks");
var withFormContext_1 = require("../../hoc/withFormContext");
var Icon_1 = require("../Icon");
var IconLink_1 = require("../IconLink");
var Spinner_1 = require("../Spinner");
var distance_1 = require("../../distance");
function getFiles(target, files) {
    if (files === void 0) { files = []; }
    target.push.apply(target, files);
    return target;
}
var StyledDropzone = styled_1.default.div(styled_1.themed(function (_a) {
    var disabled = _a.disabled, active = _a.active, theme = _a.theme;
    return styled_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      width: 100%;\n      height: 100%;\n      min-height: 150px;\n      margin: 0 auto;\n      padding: ", ";\n      display: flex;\n      flex-direction: row;\n      justify-content: center;\n      align-items: center;\n      color: ", ";\n      background-repeat: no-repeat;\n      background-position: center;\n      background-size: contain;\n      background-color: ", ";\n      border: 1px ", ";\n      cursor: ", ";\n      box-sizing: border-box;\n    "], ["\n      width: 100%;\n      height: 100%;\n      min-height: 150px;\n      margin: 0 auto;\n      padding: ", ";\n      display: flex;\n      flex-direction: row;\n      justify-content: center;\n      align-items: center;\n      color: ", ";\n      background-repeat: no-repeat;\n      background-position: center;\n      background-size: contain;\n      background-color: ", ";\n      border: 1px ", ";\n      cursor: ", ";\n      box-sizing: border-box;\n    "])), distance_1.distance.medium, disabled ? theme.textDisabled : theme.text3, disabled ? theme.ui3 : active ? theme.ui2 : theme.ui1, disabled ? "solid " + theme.ui1 : "dashed " + (active ? theme.ui0 : theme.ui4), disabled ? 'no-drop' : 'pointer');
}));
var DropzoneLabel = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  flex: 1;\n  pointer-events: none;\n"], ["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  flex: 1;\n  pointer-events: none;\n"])));
var StyledLabel = styled_1.default.span(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n"], ["\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n"])));
var StyledAction = styled_1.default.div(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  margin-top: ", ";\n  visibility: ", ";\n"], ["\n  margin-top: ", ";\n  visibility: ", ";\n"])), distance_1.distance.small, function (props) { return (props.active || props.disabled ? 'hidden' : 'visible'); });
var FileInput = styled_1.default.input(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  display: none;\n"], ["\n  display: none;\n"])));
var Remove = styled_1.default.div(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  cursor: pointer;\n  line-height: 1;\n"], ["\n  cursor: pointer;\n  line-height: 1;\n"])));
var DropzoneInt = /** @class */ (function (_super) {
    __extends(DropzoneInt, _super);
    function DropzoneInt(props) {
        var _this = _super.call(this, props) || this;
        _this.addFileEntries = function (files) {
            var _a = _this.props, multiple = _a.multiple, form = _a.form, _b = _a.name, name = _b === void 0 ? '' : _b;
            if (!_this.state.controlled) {
                if (form) {
                    form.change({
                        name: name,
                        value: multiple ? _this.state.value.concat(files) : files,
                    });
                }
                else {
                    _this.setState(function (prevState) { return ({
                        value: multiple ? prevState.value.concat(files) : files,
                        previews: [],
                    }); }, function () { return _this.notifyChanges(_this.state.value); });
                }
            }
            else {
                _this.notifyChanges(multiple ? _this.state.value.concat(files) : files);
            }
        };
        _this.onDragOver = function (e) {
            e.preventDefault();
        };
        _this.onDragEnter = function () {
            _this.setState({ over: true });
        };
        _this.onDragLeave = function () {
            _this.setState({ over: false });
        };
        _this.onOpenAction = function () {
            var onOpen = _this.props.onOpen;
            var open = true;
            if (typeof onOpen === 'function') {
                onOpen({
                    preventDefault: function () {
                        open = false;
                    },
                });
            }
            return open;
        };
        _this.onDrop = function (ev) {
            ev.preventDefault();
            _this.setState({ over: false });
            var acceptFiles = _this.onOpenAction();
            if (!_this.props.disabled && acceptFiles) {
                var droppedFiles = getFiles([], ev.dataTransfer.files);
                var files = _this.props.multiple ? droppedFiles : [droppedFiles[0]];
                _this.addFileEntries(files);
            }
        };
        _this.onClick = function (ev) {
            var files = getFiles([], ev.target.files);
            if (files) {
                _this.addFileEntries(files);
            }
            ev.preventDefault();
        };
        _this.setInputRef = function (el) {
            _this.fileInput = el;
        };
        _this.openFilePicker = function () {
            var open = _this.onOpenAction();
            if (open && _this.fileInput) {
                _this.fileInput.click();
            }
        };
        var value = props.value || props.defaultValue || [];
        _this.state = {
            over: false,
            controlled: props.value !== undefined,
            value: value,
            previews: [],
            error: props.error,
        };
        return _this;
    }
    DropzoneInt.prototype.componentDidMount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.subscribe(this);
        }
    };
    DropzoneInt.prototype.componentWillUnmount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    };
    DropzoneInt.prototype.UNSAFE_componentWillReceiveProps = function (e) {
        var _a = this.state, controlled = _a.controlled, value = _a.value;
        if (controlled && e.value && value !== e.value) {
            this.setState(function () { return ({
                value: e.value || [],
                previews: [],
                error: e.error,
            }); });
        }
    };
    DropzoneInt.prototype.removeFileEntry = function (f) {
        var _this = this;
        var _a = this.props, form = _a.form, _b = _a.name, name = _b === void 0 ? '' : _b;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name: name,
                    value: this.state.value.filter(function (file) { return f !== file; }),
                });
            }
            else {
                this.setState(function (prevState) { return ({
                    value: prevState.value.filter(function (file) { return f !== file; }),
                    previews: prevState.previews.filter(function (preview) { return preview.file !== f; }),
                }); }, function () { return _this.notifyChanges(_this.state.value); });
            }
        }
        else {
            var files = this.state.value.filter(function (file) { return f !== file; });
            this.notifyChanges(files);
        }
    };
    DropzoneInt.prototype.notifyChanges = function (files) {
        var onChange = this.props.onChange;
        if (typeof onChange === 'function') {
            onChange({
                value: files,
            });
        }
    };
    DropzoneInt.prototype.renderItem = function (f) {
        var _this = this;
        return (React.createElement(quarks_1.StyledFileItem, { key: f.name, name: f.name },
            React.createElement(Remove, { onClick: function () { return _this.removeFileEntry(f); } },
                React.createElement(Icon_1.Icon, { name: "RemoveCircle", size: 1 }))));
    };
    DropzoneInt.prototype.renderPreview = function (f) {
        var _this = this;
        var preview = this.state.previews.filter(function (preview) { return preview.file === f; })[0];
        if (f.size > 1000000 || !f.type.match(/image/)) {
            return this.renderItem(f);
        }
        if (preview) {
            return (React.createElement(quarks_1.StyledFileImagePreview, { key: f.name, src: preview.data },
                React.createElement(Remove, { onClick: function () { return _this.removeFileEntry(f); } },
                    React.createElement(Icon_1.Icon, { name: "RemoveCircle", size: 1 }))));
        }
        var reader = new FileReader();
        reader.onload = (function (file) { return function () {
            var result = reader.result;
            typeof result === 'string' &&
                _this.setState(function (prevState) { return ({
                    previews: prevState.previews.concat([
                        {
                            file: file,
                            data: result,
                        },
                    ]),
                }); });
        }; })(f);
        reader.readAsDataURL(f);
        return (React.createElement(quarks_1.StyledFileImagePreview, { key: f.name },
            React.createElement(Spinner_1.Spinner, { size: "small" })));
    };
    DropzoneInt.prototype.render = function () {
        var _this = this;
        var _a = this.state, value = _a.value, over = _a.over, error = _a.error;
        var _b = this.props, _c = _b.message, message = _c === void 0 ? 'Drop files here to upload' : _c, multiple = _b.multiple, info = _b.info, _d = _b.icon, icon = _d === void 0 ? 'FileDownload' : _d, theme = _b.theme, _0 = _b.value, _1 = _b.defaultValue, disabled = _b.disabled, _2 = _b.onChange, _3 = _b.preview, _5 = _b.onInput, children = _b.children, props = __rest(_b, ["message", "multiple", "info", "icon", "theme", "value", "defaultValue", "disabled", "onChange", "preview", "onInput", "children"]);
        return (React.createElement("div", __assign({}, props),
            React.createElement(StyledDropzone, { active: over, disabled: disabled, onDrop: this.onDrop, onDragOver: this.onDragOver, onDragLeave: this.onDragLeave, onDragEnter: this.onDragEnter, onClick: this.openFilePicker },
                React.createElement(DropzoneLabel, null,
                    React.createElement(Icon_1.Icon, { name: icon, size: 2 }),
                    React.createElement(StyledLabel, null,
                        message,
                        React.createElement(FileInput, { disabled: disabled, ref: this.setInputRef, type: "file", multiple: multiple, value: "", onChange: this.onClick }),
                        React.createElement(StyledAction, { active: over, disabled: disabled },
                            React.createElement(IconLink_1.IconLink, { icon: "Add" }, children))))),
            value && value.length > 0 && (React.createElement(quarks_1.StyledFileList, null, value.map(function (file) { return (_this.props.preview ? _this.renderPreview(file) : _this.renderItem(file)); }))),
            input_1.showInputInfo(error, info)));
    };
    DropzoneInt.inner = {
        get StyledFileItem() { return quarks_1.StyledFileItem; },
        get Remove() { return Remove; },
        get Icon() { return Icon_1.Icon; },
        get StyledFileImagePreview() { return quarks_1.StyledFileImagePreview; },
        get Spinner() { return Spinner_1.Spinner; },
        get StyledDropzone() { return StyledDropzone; },
        get DropzoneLabel() { return DropzoneLabel; },
        get StyledLabel() { return StyledLabel; },
        get FileInput() { return FileInput; },
        get StyledAction() { return StyledAction; },
        get IconLink() { return IconLink_1.IconLink; },
        get StyledFileList() { return quarks_1.StyledFileList; }
    };
    return DropzoneInt;
}(React.Component));
exports.Dropzone = withFormContext_1.withFormContext(DropzoneInt);
exports.Dropzone.displayName = 'Dropzone';
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=data:application/json;base64,