"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var distance_1 = require("../../distance");
var remCalc_1 = require("../../utils/remCalc");
var Notification_1 = require("../Notification");
var animationDuration = 200; // ms
var offsetDistance = 32;
function sideMultiplier(position) {
    switch (position) {
        case 'bottom-left':
        case 'top-left':
            return -1;
        case 'top-right':
        case 'bottom-right':
            return 1;
        default:
            return 0;
    }
}
var InAnimation = function (startOffset) { return styled_1.keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  from {\n    opacity: 0;\n    transform: translate(", "px);\n  }\n  to {\n    opacity: 1;\n    transform: translate(0px);\n  }\n"], ["\n  from {\n    opacity: 0;\n    transform: translate(", "px);\n  }\n  to {\n    opacity: 1;\n    transform: translate(0px);\n  }\n"])), startOffset); };
var OutAnimation = function (endOffset) { return styled_1.keyframes(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  from {\n    opacity: 1;\n    transform: translate(0px);\n  }\n  to {\n    opacity: 0;\n    transform: translate(", "px);\n  }\n"], ["\n  from {\n    opacity: 1;\n    transform: translate(0px);\n  }\n  to {\n    opacity: 0;\n    transform: translate(", "px);\n  }\n"])), endOffset); };
var StyledNotification = styled_1.default(Notification_1.Notification)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  opacity: 0;\n  animation: ", "\n    ", "s ease-in-out forwards;\n"], ["\n  opacity: 0;\n  animation: ",
    "\n    ", "s ease-in-out forwards;\n"])), function (props) { return props.closing
    ? OutAnimation(sideMultiplier(props.position) * offsetDistance)
    : InAnimation(sideMultiplier(props.position) * offsetDistance); }, animationDuration / 1000);
var ToastNotification = /** @class */ (function (_super) {
    __extends(ToastNotification, _super);
    function ToastNotification(props) {
        var _this = _super.call(this, props) || this;
        _this.onCloseHandler = function () {
            _this.close();
            return false;
        };
        _this.close = function () {
            var onClose = _this.props.onClose;
            _this.setState({ closing: true }, function () {
                _this.closeId = setTimeout(function () {
                    if (typeof onClose === 'function') {
                        onClose();
                    }
                }, animationDuration);
            });
        };
        _this.state = {
            closing: false,
        };
        return _this;
    }
    ToastNotification.prototype.UNSAFE_componentWillMount = function () {
        var autoClose = this.props.autoClose;
        if (autoClose) {
            this.autoCloseId = setTimeout(this.close, autoClose);
        }
    };
    ToastNotification.prototype.componentWillUnmount = function () {
        if (this.closeId) {
            clearTimeout(this.closeId);
        }
        if (this.autoCloseId) {
            clearTimeout(this.autoCloseId);
        }
    };
    ToastNotification.prototype.render = function () {
        var closing = this.state.closing;
        var _a = this.props, _0 = _a.autoClose, _1 = _a.events, _2 = _a.id, _4 = _a.onClose, position = _a.position, other = __rest(_a, ["autoClose", "events", "id", "onClose", "position"]);
        var toastTheme = {
            notificationPadding: distance_1.distance.small + " " + distance_1.distance.small + " " + distance_1.distance.medium,
            notificationBorderWidth: "0 0 0 5px",
            notificationTextFontSize: remCalc_1.remCalc('12px'),
            notificationTextLineHeight: "14px",
            notificationIconMarginRight: distance_1.distance.small,
        };
        return (React.createElement(StyledNotification, __assign({ position: position, closing: closing, theme: toastTheme, onClose: this.onCloseHandler }, other)));
    };
    ToastNotification.inner = {
        get StyledNotification() { return StyledNotification; }
    };
    return ToastNotification;
}(React.Component));
exports.ToastNotification = ToastNotification;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9hc3ROb3RpZmljYXRpb24ucGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL05vdGlmaWNhdGlvbnMvVG9hc3ROb3RpZmljYXRpb24ucGFydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkJBQStCO0FBQy9CLDZDQUF1RDtBQUN2RCwyQ0FBMEM7QUFDMUMsK0NBQThDO0FBQzlDLGdEQUFrRTtBQU1sRSxJQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUs7QUFDcEMsSUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzFCLFNBQVMsY0FBYyxDQUFDLFFBQWdDO0lBQ3BELFFBQVEsUUFBUSxFQUFFO1FBQ2QsS0FBSyxhQUFhLENBQUM7UUFDbkIsS0FBSyxVQUFVO1lBQ1gsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNkLEtBQUssV0FBVyxDQUFDO1FBQ2pCLEtBQUssY0FBYztZQUNmLE9BQU8sQ0FBQyxDQUFDO1FBQ2I7WUFDSSxPQUFPLENBQUMsQ0FBQztLQUNoQjtBQUNMLENBQUM7QUFDRCxJQUFNLFdBQVcsR0FBRyxVQUFDLFdBQW1CLElBQUssT0FBQSxrQkFBUyx3TUFBQyx3REFHNUIsRUFBVywyRUFNckMsS0FOMEIsV0FBVyxHQUhPLENBUzVDLENBQUM7QUFDRixJQUFNLFlBQVksR0FBRyxVQUFDLFNBQWlCLElBQUssT0FBQSxrQkFBUyx3TUFBQyxzSEFPM0IsRUFBUyxhQUVuQyxLQUYwQixTQUFTLEdBUFEsQ0FTM0MsQ0FBQztBQUtGLElBQU0sa0JBQWtCLEdBQUcsZ0JBQU0sQ0FBQywyQkFBWSxDQUFDLDBJQUEwQixnQ0FFMUQ7SUFFbUQsUUFDNUQsRUFBd0IsMkJBQzdCLEtBSmMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsT0FBTztJQUNqQyxDQUFDLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsY0FBYyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxjQUFjLENBQUMsRUFGMUMsQ0FFMEMsRUFDNUQsaUJBQWlCLEdBQUcsSUFBSSxDQUM3QixDQUFDO0FBQ0Y7SUFBdUMscUNBQStEO0lBR2xHLDJCQUFZLEtBQTZCO1FBQXpDLFlBQ0ksa0JBQU0sS0FBSyxDQUFDLFNBSWY7UUFlTyxvQkFBYyxHQUFHO1lBQ3JCLEtBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNiLE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQztRQUNNLFdBQUssR0FBRztZQUNKLElBQUEsNkJBQU8sQ0FBZ0I7WUFDL0IsS0FBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDN0IsS0FBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUM7b0JBQ3RCLElBQUksT0FBTyxPQUFPLEtBQUssVUFBVSxFQUFFO3dCQUMvQixPQUFPLEVBQUUsQ0FBQztxQkFDYjtnQkFDTCxDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUMxQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQS9CRSxLQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1QsT0FBTyxFQUFFLEtBQUs7U0FDakIsQ0FBQzs7SUFDTixDQUFDO0lBQ0QscURBQXlCLEdBQXpCO1FBQ1ksSUFBQSxnQ0FBUyxDQUFnQjtRQUNqQyxJQUFJLFNBQVMsRUFBRTtZQUNYLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDeEQ7SUFDTCxDQUFDO0lBQ0QsZ0RBQW9CLEdBQXBCO1FBQ0ksSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM5QjtRQUNELElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNsQixZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2xDO0lBQ0wsQ0FBQztJQWVELGtDQUFNLEdBQU47UUFDWSxJQUFBLDRCQUFPLENBQWdCO1FBQy9CLElBQU0sZUFBbUYsRUFBakYsaUJBQWEsRUFBRSxjQUFVLEVBQUUsVUFBTSxFQUFFLGVBQVcsRUFBRSxzQkFBUSxFQUFFLHdFQUF1QixDQUFDO1FBQzFGLElBQU0sVUFBVSxHQUFHO1lBQ2YsbUJBQW1CLEVBQUssbUJBQVEsQ0FBQyxLQUFLLFNBQUksbUJBQVEsQ0FBQyxLQUFLLFNBQUksbUJBQVEsQ0FBQyxNQUFRO1lBQzdFLHVCQUF1QixFQUFFLFdBQVc7WUFDcEMsd0JBQXdCLEVBQUUsaUJBQU8sQ0FBQyxNQUFNLENBQUM7WUFDekMsMEJBQTBCLEVBQUUsTUFBTTtZQUNsQywyQkFBMkIsRUFBRSxtQkFBUSxDQUFDLEtBQUs7U0FDOUMsQ0FBQztRQUNGLE9BQU8sQ0FBQyxvQkFBQyxrQkFBa0IsYUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsSUFBTSxLQUFLLEVBQUcsQ0FBQyxDQUFDO0lBQ3JJLENBQUM7SUFDTSx1QkFBSyxHQUFHO1FBQ1gsSUFBSSxrQkFBa0IsS0FBSyxPQUFPLGtCQUErQyxDQUFDLENBQUMsQ0FBQztLQUN2RixDQUFDO0lBQ04sd0JBQUM7Q0FBQSxBQXBERCxDQUF1QyxLQUFLLENBQUMsU0FBUyxHQW9EckQ7QUFwRFksOENBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwgeyBrZXlmcmFtZXMgfSBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgZGlzdGFuY2UgfSBmcm9tICcuLi8uLi9kaXN0YW5jZSc7XG5pbXBvcnQgeyByZW1DYWxjIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVtQ2FsYyc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb24sIE5vdGlmaWNhdGlvblByb3BzIH0gZnJvbSAnLi4vTm90aWZpY2F0aW9uJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbk9wdGlvbiwgTm90aWZpY2F0aW9uc1Bvc2l0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5leHBvcnQgdHlwZSBUb2FzdE5vdGlmaWNhdGlvblByb3BzID0gTm90aWZpY2F0aW9uT3B0aW9uICYgTm90aWZpY2F0aW9uUHJvcHM7XG5leHBvcnQgaW50ZXJmYWNlIFRvYXN0Tm90aWZpY2F0aW9uU3RhdGUge1xuICAgIGNsb3Npbmc6IGJvb2xlYW47XG59XG5jb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDIwMDsgLy8gbXNcbmNvbnN0IG9mZnNldERpc3RhbmNlID0gMzI7XG5mdW5jdGlvbiBzaWRlTXVsdGlwbGllcihwb3NpdGlvbj86IE5vdGlmaWNhdGlvbnNQb3NpdGlvbikge1xuICAgIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICAgICAgY2FzZSAnYm90dG9tLWxlZnQnOlxuICAgICAgICBjYXNlICd0b3AtbGVmdCc6XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGNhc2UgJ3RvcC1yaWdodCc6XG4gICAgICAgIGNhc2UgJ2JvdHRvbS1yaWdodCc6XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cbmNvbnN0IEluQW5pbWF0aW9uID0gKHN0YXJ0T2Zmc2V0OiBudW1iZXIpID0+IGtleWZyYW1lcyBgXG4gIGZyb20ge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoJHtzdGFydE9mZnNldH1weCk7XG4gIH1cbiAgdG8ge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4KTtcbiAgfVxuYDtcbmNvbnN0IE91dEFuaW1hdGlvbiA9IChlbmRPZmZzZXQ6IG51bWJlcikgPT4ga2V5ZnJhbWVzIGBcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTogMTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgpO1xuICB9XG4gIHRvIHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKCR7ZW5kT2Zmc2V0fXB4KTtcbiAgfVxuYDtcbmludGVyZmFjZSBTdHlsZWROb3RpZmljYXRpb25Qcm9wcyB7XG4gICAgY2xvc2luZzogYm9vbGVhbjtcbiAgICBwb3NpdGlvbj86IE5vdGlmaWNhdGlvbnNQb3NpdGlvbjtcbn1cbmNvbnN0IFN0eWxlZE5vdGlmaWNhdGlvbiA9IHN0eWxlZChOb3RpZmljYXRpb24pPFN0eWxlZE5vdGlmaWNhdGlvblByb3BzPiBgXG4gIG9wYWNpdHk6IDA7XG4gIGFuaW1hdGlvbjogJHtwcm9wcyA9PiBwcm9wcy5jbG9zaW5nXG4gICAgPyBPdXRBbmltYXRpb24oc2lkZU11bHRpcGxpZXIocHJvcHMucG9zaXRpb24pICogb2Zmc2V0RGlzdGFuY2UpXG4gICAgOiBJbkFuaW1hdGlvbihzaWRlTXVsdGlwbGllcihwcm9wcy5wb3NpdGlvbikgKiBvZmZzZXREaXN0YW5jZSl9XG4gICAgJHthbmltYXRpb25EdXJhdGlvbiAvIDEwMDB9cyBlYXNlLWluLW91dCBmb3J3YXJkcztcbmA7XG5leHBvcnQgY2xhc3MgVG9hc3ROb3RpZmljYXRpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VG9hc3ROb3RpZmljYXRpb25Qcm9wcywgVG9hc3ROb3RpZmljYXRpb25TdGF0ZT4ge1xuICAgIHByaXZhdGUgYXV0b0Nsb3NlSWQ6IGFueTtcbiAgICBwcml2YXRlIGNsb3NlSWQ6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogVG9hc3ROb3RpZmljYXRpb25Qcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjbG9zaW5nOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgY29uc3QgeyBhdXRvQ2xvc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmIChhdXRvQ2xvc2UpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0b0Nsb3NlSWQgPSBzZXRUaW1lb3V0KHRoaXMuY2xvc2UsIGF1dG9DbG9zZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlSWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNsb3NlSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmF1dG9DbG9zZUlkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5hdXRvQ2xvc2VJZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBvbkNsb3NlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBwcml2YXRlIGNsb3NlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IG9uQ2xvc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjbG9zaW5nOiB0cnVlIH0sICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb25DbG9zZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjbG9zaW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCB7IGF1dG9DbG9zZTogXzAsIGV2ZW50czogXzEsIGlkOiBfMiwgb25DbG9zZTogXzQsIHBvc2l0aW9uLCAuLi5vdGhlciB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgdG9hc3RUaGVtZSA9IHtcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvblBhZGRpbmc6IGAke2Rpc3RhbmNlLnNtYWxsfSAke2Rpc3RhbmNlLnNtYWxsfSAke2Rpc3RhbmNlLm1lZGl1bX1gLFxuICAgICAgICAgICAgbm90aWZpY2F0aW9uQm9yZGVyV2lkdGg6IGAwIDAgMCA1cHhgLFxuICAgICAgICAgICAgbm90aWZpY2F0aW9uVGV4dEZvbnRTaXplOiByZW1DYWxjKCcxMnB4JyksXG4gICAgICAgICAgICBub3RpZmljYXRpb25UZXh0TGluZUhlaWdodDogYDE0cHhgLFxuICAgICAgICAgICAgbm90aWZpY2F0aW9uSWNvbk1hcmdpblJpZ2h0OiBkaXN0YW5jZS5zbWFsbCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuICg8U3R5bGVkTm90aWZpY2F0aW9uIHBvc2l0aW9uPXtwb3NpdGlvbn0gY2xvc2luZz17Y2xvc2luZ30gdGhlbWU9e3RvYXN0VGhlbWV9IG9uQ2xvc2U9e3RoaXMub25DbG9zZUhhbmRsZXJ9IHsuLi5vdGhlcn0vPik7XG4gICAgfVxuICAgIHN0YXRpYyBpbm5lciA9IHtcbiAgICAgICAgZ2V0IFN0eWxlZE5vdGlmaWNhdGlvbigpIHsgcmV0dXJuIFN0eWxlZE5vdGlmaWNhdGlvbiBhcyB0eXBlb2YgU3R5bGVkTm90aWZpY2F0aW9uOyB9XG4gICAgfTtcbn1cbiJdfQ==