"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var types_1 = require("./types");
var eventManager_1 = require("../../utils/eventManager");
var text_1 = require("../../utils/text");
var ToastNotification_part_1 = require("./ToastNotification.part");
var types_2 = require("./types");
exports.NotificationAction = types_2.NotificationAction;
var notifier_1 = require("./notifier");
exports.notify = notifier_1.notify;
var defaultProps = {
    width: 320,
};
var getNotificationPositionStyle = function (pos) {
    var positionStyle = pos.split('-')[0] + ":1rem;";
    if (pos.indexOf('center') !== -1) {
        positionStyle += "left:50%;transform:translateX(-50%);";
    }
    else {
        positionStyle += pos.split('-')[1] + ":1rem;";
    }
    return positionStyle;
};
var AbsoluteContainer = styled_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  z-index: 10001;\n  position: fixed;\n  ", ";\n  width: ", "px;\n  @media (max-width: 480px) {\n    width: 100vw;\n    padding: 0;\n    right: 0;\n    margin: 0;\n    position: fixed;\n    ", ";\n  }\n"], ["\n  z-index: 10001;\n  position: fixed;\n  ", ";\n  width: ", "px;\n  @media (max-width: 480px) {\n    width: 100vw;\n    padding: 0;\n    right: 0;\n    margin: 0;\n    position: fixed;\n    ", ";\n  }\n"])), function (props) { return getNotificationPositionStyle(props.position); }, function (props) { return (props.width ? props.width : defaultProps.width); }, function (props) { return (props.position.substring(0, 3) === 'top' ? 'top: 0' : 'bottom: 0'); });
var StyledNotifications = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  box-sizing: border-box;\n  width: ", ";\n  ", ";\n  @media (max-width: 480px) {\n    padding: 0;\n    margin: 0;\n  }\n  ", ";\n"], ["\n  box-sizing: border-box;\n  width: ", ";\n  ", ";\n  @media (max-width: 480px) {\n    padding: 0;\n    margin: 0;\n  }\n  ", ";\n"])), function (props) { return (!props.width ? 'auto' : props.width + "px"); }, function (props) { return (props.disablePointer ? "pointer-events: none" : ""); }, function (props) { return (props.position !== 'relative' ? AbsoluteContainer : ''); });
/**
 * The host element for arbitrary notifications. Use as a singleton only.
 */
var Notifications = /** @class */ (function (_super) {
    __extends(Notifications, _super);
    function Notifications(props) {
        var _this = _super.call(this, props) || this;
        _this.collection = [];
        _this.hide = function (id) {
            if (typeof id === 'string') {
                _this.removeNotification(id);
            }
            else {
                _this.clearNotifications();
            }
        };
        _this.show = function (payload) {
            var content = payload.content, _a = payload.options, options = _a === void 0 ? {} : _a;
            var _b = _this.props, position = _b.position, autoClose = _b.autoClose;
            var notifications = _this.state.notifications;
            var id = options.id || "" + ~~(Math.random() * 1000000);
            var opts = {
                id: id,
                type: options.type || 'none',
                onClose: function () { return _this.removeNotification(id); },
                position: options.position || position,
                title: options.title || text_1.capitalizeFirst(options.type || ''),
                actionRenderer: options.actionRenderer,
                autoClose: typeof options.autoClose === 'number' ? options.autoClose : autoClose,
            };
            _this.collection.push({
                name: id,
                options: opts,
                content: _this.getNotificationContent(content, opts.onClose),
            });
            _this.setState({
                notifications: notifications.concat([id]),
            });
        };
        var events = props.events;
        _this.eventManager = events || eventManager_1.eventManagers[0];
        _this.state = {
            notifications: [],
        };
        return _this;
    }
    Notifications.prototype.componentDidMount = function () {
        var em = this.eventManager;
        em.on(types_1.NotificationAction.showNotification, this.show);
        em.on(types_1.NotificationAction.clearNotification, this.hide);
        eventManager_1.eventManagers.push(em);
    };
    Notifications.prototype.componentWillUnmount = function () {
        var em = this.eventManager;
        em.off(types_1.NotificationAction.showNotification, this.show);
        em.off(types_1.NotificationAction.clearNotification, this.hide);
        eventManager_1.eventManagers.splice(eventManager_1.eventManagers.lastIndexOf(em), 1);
    };
    Notifications.prototype.removeNotification = function (id) {
        this.setState({
            notifications: this.state.notifications.filter(function (v) { return v !== id; }),
        });
    };
    Notifications.prototype.clearNotifications = function () {
        this.setState({
            notifications: [],
        });
    };
    Notifications.prototype.getNotificationContent = function (content, onClose) {
        if (React.isValidElement(content)) {
            return React.cloneElement(content, { onClose: onClose });
        }
        else if (typeof content === 'function') {
            return content({ onClose: onClose });
        }
        return content;
    };
    Notifications.prototype.defaultNotificationRenderer = function (payload) {
        var content = payload.content, _a = payload.options, options = _a === void 0 ? {} : _a;
        return (React.createElement(ToastNotification_part_1.ToastNotification, __assign({}, options, { title: options.title, key: "notification-" + options.id }), content));
    };
    Notifications.prototype.makeNotification = function (payload) {
        var notificationRenderer = this.props.notificationRenderer;
        var renderer = notificationRenderer || this.defaultNotificationRenderer;
        return renderer(payload);
    };
    Notifications.prototype.render = function () {
        var _this = this;
        var _a = this.props, _b = _a.position, position = _b === void 0 ? 'relative' : _b, width = _a.width, _c = _a.newestOnTop, newestOnTop = _c === void 0 ? false : _c;
        var notifications = this.state.notifications;
        var notificationsToRender = {};
        var collection = this.collection.map(function (item, i) { return ({
            id: item.name,
            item: item,
            index: i,
        }); });
        if (newestOnTop) {
            collection.reverse();
        }
        collection.forEach(function (_a) {
            var id = _a.id, item = _a.item, index = _a.index;
            var options = item.options || {};
            var itemPosition = options.position || position;
            notificationsToRender[itemPosition] || (notificationsToRender[itemPosition] = []);
            if (notifications.indexOf(id) !== -1) {
                notificationsToRender[itemPosition].push(_this.makeNotification(item));
            }
            else {
                notificationsToRender[itemPosition].push(undefined);
                _this.collection.splice(index, 1);
            }
        });
        return (React.createElement("div", null, Object.keys(notificationsToRender).map(function (position) {
            var disablePointer = notificationsToRender[position].length === 1 && notificationsToRender[position][0] === null;
            return (React.createElement(StyledNotifications, { key: "notification-container-" + position, width: width, position: position, disablePointer: disablePointer }, notificationsToRender[position]));
        })));
    };
    Notifications.inner = {
        get ToastNotification() { return ToastNotification_part_1.ToastNotification; },
        get StyledNotifications() { return StyledNotifications; }
    };
    return Notifications;
}(React.Component));
exports.Notifications = Notifications;
var templateObject_1, templateObject_2;
//# sourceMappingURL=data:application/json;base64,