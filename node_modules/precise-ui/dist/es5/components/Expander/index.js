"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
function getExpandingContainerHeight(status, expandedHeight, collapsedHeight) {
    if (!expandedHeight) {
        return '0';
    }
    switch (status) {
        case 'entering':
            return expandedHeight + "px";
        case 'entered':
            return 'auto';
        case 'exitingStart':
            return expandedHeight + "px";
        case 'exiting':
        default:
            return "" + (collapsedHeight || '0');
    }
}
var ExpandingContainer = styled_1.default('div')(function (_a) {
    var status = _a.status, expandedHeight = _a.expandedHeight, collapsedHeight = _a.collapsedHeight, timeout = _a.timeout;
    return "\n    overflow: hidden;\n    transition-duration: " + timeout + "ms;\n    height: " + getExpandingContainerHeight(status, expandedHeight, collapsedHeight) + "\n  ";
});
/**
 * A functional expander component for expanding / collapsing content.
 */
var Expander = /** @class */ (function (_super) {
    __extends(Expander, _super);
    function Expander(props) {
        var _this = _super.call(this, props) || this;
        _this.wrapperRef = React.createRef();
        _this.setContainer = function (ref) {
            _this.rootContainer = ref;
        };
        _this.state = {
            status: 'unmounted',
        };
        return _this;
    }
    Expander.prototype.componentDidMount = function () {
        this.handleChange();
    };
    Expander.prototype.componentDidUpdate = function (prevProps, prevState) {
        var expand = this.props.expand;
        var status = this.state.status;
        if (prevProps.expand !== expand || prevState.status !== status) {
            this.handleChange();
        }
    };
    Expander.prototype.componentWillUnmount = function () {
        this.clearTimer();
    };
    Expander.prototype.handleChange = function () {
        var expand = this.props.expand;
        var status = this.state.status;
        if (expand) {
            if (status === 'unmounted') {
                this.setState({
                    status: 'mounted',
                });
            }
            else if (status !== 'entering' && status !== 'entered') {
                this.performEnter();
            }
        }
        else {
            if (status === 'entering' || status === 'entered') {
                this.performExit();
            }
        }
    };
    Expander.prototype.performEnter = function () {
        var _this = this;
        this.setState({
            status: 'entering',
        }, function () { return _this.setDelayedStatus('entered'); });
    };
    Expander.prototype.performExit = function () {
        var _this = this;
        var unmountOnExit = this.props.unmountOnExit;
        this.setState({ status: 'exitingStart' }, function () { return _this.setState({ status: 'exiting' }, function () { return _this.setDelayedStatus(unmountOnExit ? 'unmounted' : 'exited'); }); });
    };
    Expander.prototype.clearTimer = function () {
        if (this.timer) {
            clearTimeout(this.timer);
        }
    };
    Expander.prototype.setDelayedStatus = function (status) {
        var _this = this;
        var _a = this.props.timeout, timeout = _a === void 0 ? 0 : _a;
        this.clearTimer();
        this.timer = setTimeout(function () {
            _this.setState({
                status: status,
            });
        }, timeout);
    };
    Expander.prototype.render = function () {
        var status = this.state.status;
        var _a = this.props, children = _a.children, collapsedHeight = _a.collapsedHeight, _b = _a.timeout, timeout = _b === void 0 ? 0 : _b;
        var contentRef = this.wrapperRef.current;
        if (status !== 'unmounted') {
            return (React.createElement(ExpandingContainer, { ref: this.setContainer, expandedHeight: contentRef ? contentRef.clientHeight : undefined, collapsedHeight: collapsedHeight, status: status, timeout: timeout, style: { minHeight: collapsedHeight } },
                React.createElement("div", { ref: this.wrapperRef }, children)));
        }
        return false;
    };
    Expander.inner = {
        get ExpandingContainer() { return ExpandingContainer; }
    };
    return Expander;
}(React.Component));
exports.Expander = Expander;
//# sourceMappingURL=data:application/json;base64,