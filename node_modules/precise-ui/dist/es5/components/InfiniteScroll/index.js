"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var Button_1 = require("../Button");
var Spinner_1 = require("../Spinner");
var distance_1 = require("../../distance");
var Container = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  height: ", ";\n  overflow: ", ";\n"], ["\n  height: ", ";\n  overflow: ", ";\n"])), function (_a) {
    var height = _a.height;
    return (height ? height + "px" : 'auto');
}, function (_a) {
    var height = _a.height;
    return (height ? 'auto' : 'visible');
});
var Footer = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  margin-top: ", ";\n"], ["\n  margin-top: ", ";\n"])), distance_1.distance.small);
var DefaultButton = styled_1.default(Button_1.Button)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  width: 100%;\n  display: flex;\n  justify-content: center;\n"], ["\n  width: 100%;\n  display: flex;\n  justify-content: center;\n"])));
var InfiniteScroll = /** @class */ (function (_super) {
    __extends(InfiniteScroll, _super);
    function InfiniteScroll(props) {
        var _this = _super.call(this, props) || this;
        _this.handleOnScroll = function () {
            var scrolledToBottom = _this.reachedBottom();
            if (scrolledToBottom && _this.props.hasMore) {
                _this.loadItems();
            }
        };
        _this.loadItems = function () {
            var data = _this.props.data;
            _this.setState({ isLoading: true });
            return _this.props.loadItems(data.length);
        };
        _this.setContainer = function (node) {
            _this.node = node;
            if (_this.node) {
                _this.node.removeEventListener('scroll', _this.handleOnScroll);
            }
            if (node && !_this.props.useWindow) {
                node.addEventListener('scroll', _this.handleOnScroll);
            }
            _this.node = node;
        };
        _this.state = {
            isButtonMode: !!_this.props.button,
            isLoading: false,
        };
        return _this;
    }
    InfiniteScroll.prototype.componentDidMount = function () {
        var isButtonMode = this.state.isButtonMode;
        if (!isButtonMode) {
            var useWindow = this.props.useWindow;
            if (useWindow) {
                window.addEventListener('scroll', this.handleOnScroll);
            }
        }
    };
    InfiniteScroll.prototype.componentWillUnmount = function () {
        var isButtonMode = this.state.isButtonMode;
        if (!isButtonMode) {
            var useWindow = this.props.useWindow;
            if (useWindow) {
                window.removeEventListener('scroll', this.handleOnScroll);
            }
            else if (this.node && !useWindow) {
                this.node.removeEventListener('scroll', this.handleOnScroll);
            }
        }
    };
    InfiniteScroll.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        if (nextProps.data.length !== this.props.data.length || nextProps.hasMore !== this.props.hasMore) {
            this.setState({
                isLoading: false,
            });
        }
    };
    InfiniteScroll.prototype.reachedBottom = function () {
        var edgeOffset = this.props.edgeOffset || 0;
        var documentElement = document.documentElement, body = document.body;
        var useWindow = this.props.useWindow;
        var scrollTop = useWindow
            ? (documentElement && documentElement.scrollTop) || body.scrollTop
            : (this.node && this.node.scrollTop) || 0;
        var scrollHeight = useWindow
            ? (documentElement && documentElement.scrollHeight) || body.scrollHeight
            : (this.node && this.node.scrollHeight) || 0;
        var innerHeight = useWindow ? window.innerHeight : (this.node && this.node.clientHeight) || 0;
        var scrolledToBottom = Math.ceil(scrollTop + innerHeight + edgeOffset) >= scrollHeight;
        return scrolledToBottom;
    };
    InfiniteScroll.prototype.renderButton = function () {
        var _a = this.props, data = _a.data, CustomButton = _a.button, hasMore = _a.hasMore;
        var isLoading = this.state.isLoading;
        if (!hasMore || data.length === 0 || isLoading) {
            return undefined;
        }
        if (CustomButton && typeof CustomButton !== 'boolean' && typeof CustomButton !== 'string') {
            return React.createElement(CustomButton, { onClick: this.loadItems });
        }
        return (React.createElement(DefaultButton, { buttonStyle: "secondary", onClick: this.loadItems, theme: { buttonIconPosition: 'left' }, icon: "Add" }, typeof CustomButton === 'string' ? CustomButton : 'Show more'));
    };
    InfiniteScroll.prototype.render = function () {
        var _a = this.props, _b = _a.host, Host = _b === void 0 ? 'div' : _b, data = _a.data, containerHeight = _a.containerHeight, loadingIndicator = _a.loadingIndicator;
        var _c = this.state, isButtonMode = _c.isButtonMode, isLoading = _c.isLoading;
        return (React.createElement(Container, { ref: this.setContainer, height: containerHeight },
            React.createElement(Host, null, data),
            React.createElement(Footer, null,
                isLoading && (loadingIndicator || React.createElement(Spinner_1.Spinner, { size: "x-small" })),
                isButtonMode && this.renderButton())));
    };
    InfiniteScroll.inner = {
        get DefaultButton() { return DefaultButton; },
        get Container() { return Container; },
        get Footer() { return Footer; },
        get Spinner() { return Spinner_1.Spinner; }
    };
    return InfiniteScroll;
}(React.Component));
exports.InfiniteScroll = InfiniteScroll;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=data:application/json;base64,