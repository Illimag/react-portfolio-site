"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var memoize_one_1 = require("memoize-one");
var utils_1 = require("../../utils");
var TagBuilder_1 = require("../TagBuilder");
var Autocomplete_1 = require("../Autocomplete");
var AutocompleteTagBuilderInt = /** @class */ (function (_super) {
    __extends(AutocompleteTagBuilderInt, _super);
    function AutocompleteTagBuilderInt(props) {
        var _this = _super.call(this, props) || this;
        _this.removeValueByIndex = function (index) {
            var value = _this.state.value;
            var keys = Array.from(value.keys());
            index = index >= 0 ? index : keys.length + index;
            if (index >= 0 && index < keys.length) {
                value.splice(index, 1);
                var newValue = value.slice();
                _this.updateValue(newValue);
            }
        };
        _this.getTagsArray = memoize_one_1.default(function (value) {
            return value.map(function (x) { return _this.getSuggestionValue(x); });
        });
        _this.tagRemoveHandler = function (index) {
            _this.removeValueByIndex(index);
        };
        _this.suggestionSelectedHandler = function (e) {
            _this.addSuggestion(e.value);
        };
        _this.inputChangeHandler = function (e) {
            _this.changeInputValue(e.value);
        };
        _this.inputRefHandler = function (node) {
            _this._inputNode = node;
        };
        _this.tagBuilderRenderer = function (inputProps) {
            var _a = _this.props, disabled = _a.disabled, tagRenderer = _a.tagRenderer, _b = _a.borderless, borderless = _b === void 0 ? false : _b;
            var value = _this.state.value;
            var onChange = inputProps.onChange, inputValue = inputProps.value, restProps = __rest(inputProps, ["onChange", "value"]);
            var tagBuilderValue = _this.getTagsArray(value);
            return (React.createElement(TagBuilder_1.TagBuilder, __assign({}, restProps, { disabled: disabled, inputValue: inputValue, onInput: onChange, value: tagBuilderValue, tagRenderer: tagRenderer, borderless: borderless, onBeforeTagRemove: _this.tagRemoveHandler })));
        };
        var _a = _this.props, nullableValue = _a.value, defaultValue = _a.defaultValue, onInputChange = _a.onInputChange, inputValue = _a.inputValue, _b = _a.delay, delay = _b === void 0 ? 0 : _b;
        var value = nullableValue || defaultValue || [];
        _this.state = {
            value: value,
            inputValue: inputValue || '',
            controlled: props.value !== undefined || inputValue !== undefined,
        };
        _this._fireOnInputChange = utils_1.debounce(function (value) {
            onInputChange && onInputChange({ value: value });
        }, delay);
        return _this;
    }
    AutocompleteTagBuilderInt.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        if (this.state.controlled) {
            var value = nextProps.value, inputValue = nextProps.inputValue;
            this.setState({
                value: value || [],
                inputValue: inputValue || '',
            });
        }
    };
    AutocompleteTagBuilderInt.prototype.componentDidMount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.subscribe(this);
        }
    };
    AutocompleteTagBuilderInt.prototype.componentWillUnmount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    };
    AutocompleteTagBuilderInt.prototype.addSuggestion = function (suggestion) {
        var _this = this;
        var value = this.state.value;
        var key = this.getSuggestionKey(suggestion);
        var suggestionAlreadyAdded = value.some(function (x) { return _this.getSuggestionKey(x) === key; });
        if (!suggestionAlreadyAdded) {
            var newValue = value.slice();
            newValue.push(suggestion);
            this.updateValue(newValue);
        }
        this.changeInputValue('');
    };
    AutocompleteTagBuilderInt.prototype.updateValue = function (newValue) {
        var _a = this.props, onChange = _a.onChange, _b = _a.name, name = _b === void 0 ? '' : _b, form = _a.form;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name: name,
                    value: newValue,
                });
            }
            else {
                this.setState({
                    value: newValue,
                });
            }
        }
        if (this._inputNode) {
            this._inputNode.focus();
        }
        if (typeof onChange === 'function') {
            onChange({ value: newValue });
        }
    };
    AutocompleteTagBuilderInt.prototype.changeInputValue = function (newValue) {
        if (!this.state.controlled) {
            this.setState({
                inputValue: newValue,
            });
        }
        this._fireOnInputChange(newValue);
    };
    AutocompleteTagBuilderInt.prototype.getSuggestionValue = function (item) {
        var getSuggestionValue = this.props.getSuggestionValue;
        if (typeof item === 'string') {
            return item;
        }
        else if (typeof getSuggestionValue === 'function') {
            return getSuggestionValue(item);
        }
        else {
            throw new Error('Get suggestion value should be specified');
        }
    };
    AutocompleteTagBuilderInt.prototype.getSuggestionKey = function (item) {
        var getSuggestionKey = this.props.getSuggestionKey;
        if (typeof item === 'string') {
            return item;
        }
        else if (typeof getSuggestionKey === 'function') {
            return getSuggestionKey(item);
        }
        else {
            throw new Error('Get suggestion key should be specified');
        }
    };
    AutocompleteTagBuilderInt.prototype.defaultSuggestionRenderer = function (suggestion) {
        return {
            content: this.getSuggestionValue(suggestion),
            key: this.getSuggestionKey(suggestion),
        };
    };
    AutocompleteTagBuilderInt.prototype.render = function () {
        var _this = this;
        var _a = this.props, _b = _a.suggestions, suggestions = _b === void 0 ? [] : _b, noSuggestionsMessage = _a.noSuggestionsMessage, disabled = _a.disabled, _c = _a.renderSuggestion, renderSuggestion = _c === void 0 ? function (item) { return _this.defaultSuggestionRenderer(item); } : _c, label = _a.label, placeholder = _a.placeholder, info = _a.info, _d = _a.borderless, borderless = _d === void 0 ? false : _d, error = _a.error, onBlur = _a.onBlur, onFocus = _a.onFocus;
        var inputValue = this.state.inputValue;
        return (React.createElement(Autocomplete_1.Autocomplete, { noSuggestionsMessage: noSuggestionsMessage, suggestions: suggestions, inputRenderer: this.tagBuilderRenderer, renderSuggestion: renderSuggestion, disabled: disabled, value: inputValue, onChange: this.inputChangeHandler, onSuggestionSelected: this.suggestionSelectedHandler, inputRef: this.inputRefHandler, label: label, placeholder: placeholder, info: info, error: error, borderless: borderless, onBlur: onBlur, onFocus: onFocus }));
    };
    AutocompleteTagBuilderInt.inner = {
        get TagBuilder() { return TagBuilder_1.TagBuilder; },
        get Autocomplete() { return Autocomplete_1.Autocomplete; }
    };
    return AutocompleteTagBuilderInt;
}(React.Component));
exports.AutocompleteTagBuilderInt = AutocompleteTagBuilderInt;
//# sourceMappingURL=data:application/json;base64,