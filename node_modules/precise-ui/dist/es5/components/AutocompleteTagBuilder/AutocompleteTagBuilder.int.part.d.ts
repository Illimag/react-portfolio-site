import * as React from 'react';
import { FormContextProps } from '../../hoc/withFormContext';
import { AutocompleteTagBuilderProps, AutocompleteTagBuilderState } from './AutocompleteTagBuilder.types.part';
export declare class AutocompleteTagBuilderInt<T> extends React.Component<AutocompleteTagBuilderProps<T> & FormContextProps, AutocompleteTagBuilderState<T>> {
    private _fireOnInputChange;
    private _inputNode;
    constructor(props: AutocompleteTagBuilderProps<T>);
    UNSAFE_componentWillReceiveProps(nextProps: AutocompleteTagBuilderProps<T>): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private addSuggestion;
    private removeValueByIndex;
    private updateValue;
    private changeInputValue;
    private getSuggestionValue;
    private getSuggestionKey;
    private getTagsArray;
    private defaultSuggestionRenderer;
    private tagRemoveHandler;
    private suggestionSelectedHandler;
    private inputChangeHandler;
    private inputRefHandler;
    private tagBuilderRenderer;
    render(): JSX.Element;
    static inner: {
        readonly TagBuilder: React.FunctionComponent<import("../TagBuilder").TagBuilderProps>;
        readonly Autocomplete: React.FunctionComponent<Pick<import("../Autocomplete").AutocompleteProps<{}>, "label" | "style" | "children" | "error" | "theme" | "className" | "defaultValue" | "placeholder" | "prefix" | "onFocus" | "onBlur" | "onChange" | "onInput" | "name" | "icon" | "disabled" | "value" | "borderless" | "multiline" | "autoComplete" | "autoFocus" | "maxLength" | "type" | "onClear" | "info" | "resizable" | "inputRef" | "suffix" | "noSuggestionsMessage" | "suggestions" | "renderSuggestion" | "onSuggestionSelected" | "getSuggestionValue" | "inputRenderer">>;
    };
}
