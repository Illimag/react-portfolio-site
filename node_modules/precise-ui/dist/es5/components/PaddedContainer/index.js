"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var distance_1 = require("../../distance");
var StyledContainer = styled_1.default('div')(function (_a) {
    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right, gutter = _a.gutter;
    return styled_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    ", "\n    ", "\n    ", "\n    ", "\n    ", "\n  "], ["\n    ", "\n    ", "\n    ", "\n    ", "\n    ", "\n  "])), top ? "padding-top: " + distance_1.distance[top] + ";" : '', left ? "padding-left: " + distance_1.distance[left] + ";" : '', bottom ? "padding-bottom: " + distance_1.distance[bottom] + ";" : '', right ? "padding-right: " + distance_1.distance[right] + ";" : '', gutter ? "padding: " + distance_1.distance[gutter] + ";" : '');
});
exports.PaddedContainer = Object.assign((function (props) {
    return React.createElement(StyledContainer, __assign({}, props));
}), { inner: {
        get StyledContainer() { return StyledContainer; }
    } });
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9QYWRkZWRDb250YWluZXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkJBQStCO0FBQy9CLDZDQUFpRDtBQUNqRCwyQ0FBMEM7QUE0QjFDLElBQU0sZUFBZSxHQUFHLGdCQUFNLENBQUMsS0FBSyxDQUFDLENBQXVCLFVBQUMsRUFBb0M7UUFBbEMsWUFBRyxFQUFFLGNBQUksRUFBRSxrQkFBTSxFQUFFLGdCQUFLLEVBQUUsa0JBQU07SUFBTyxPQUFBLFlBQUcsMkhBQUMsUUFDcEcsRUFBMkMsUUFDM0MsRUFBOEMsUUFDOUMsRUFBb0QsUUFDcEQsRUFBaUQsUUFDakQsRUFBNkMsTUFDaEQsS0FMRyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtCQUFnQixtQkFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFDM0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxtQkFBaUIsbUJBQVEsQ0FBQyxJQUFJLENBQUMsTUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQzlDLE1BQU0sQ0FBQyxDQUFDLENBQUMscUJBQW1CLG1CQUFRLENBQUMsTUFBTSxDQUFDLE1BQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUNwRCxLQUFLLENBQUMsQ0FBQyxDQUFDLG9CQUFrQixtQkFBUSxDQUFDLEtBQUssQ0FBQyxNQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFDakQsTUFBTSxDQUFDLENBQUMsQ0FBQyxjQUFZLG1CQUFRLENBQUMsTUFBTSxDQUFDLE1BQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUxtRCxDQU1uRyxDQUFDLENBQUM7QUFDUSxRQUFBLGVBQWUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLENBQUMsVUFBQSxLQUFLO0lBQ2hELE9BQU8sb0JBQUMsZUFBZSxlQUFLLEtBQUssRUFBRyxDQUFDO0FBQ3pDLENBQUMsQ0FBb0MsRUFBRSxFQUFFLEtBQUssRUFBRTtRQUN4QyxJQUFJLGVBQWUsS0FBSyxPQUFPLGVBQXlDLENBQUMsQ0FBQyxDQUFDO0tBQzlFLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgZGlzdGFuY2UgfSBmcm9tICcuLi8uLi9kaXN0YW5jZSc7XG5leHBvcnQgaW50ZXJmYWNlIFBhZGRlZENvbnRhaW5lclByb3BzIHtcbiAgICAvKipcbiAgICAgKiBQYWRkaW5nIG9uIHRvcC4gVmFsaWQgdmFsdWVzOiB4eHNtYWxsLCB4c21hbGwsIHNtYWxsLCBtZWRpdW0sIGxhcmdlLCB4bGFyZ2UsIHh4bGFyZ2UsIHh4eGxhcmdlLlxuICAgICAqL1xuICAgIHRvcD86IGtleW9mIHR5cGVvZiBkaXN0YW5jZTtcbiAgICAvKipcbiAgICAgKiBQYWRkaW5nIG9uIGxlZnQuIFZhbGlkIHZhbHVlczogeHhzbWFsbCwgeHNtYWxsLCBzbWFsbCwgbWVkaXVtLCBsYXJnZSwgeGxhcmdlLCB4eGxhcmdlLCB4eHhsYXJnZS5cbiAgICAgKi9cbiAgICBsZWZ0Pzoga2V5b2YgdHlwZW9mIGRpc3RhbmNlO1xuICAgIC8qKlxuICAgICAqIFBhZGRpbmcgb24gYm90dG9tLiBWYWxpZCB2YWx1ZXM6IHh4c21hbGwsIHhzbWFsbCwgc21hbGwsIG1lZGl1bSwgbGFyZ2UsIHhsYXJnZSwgeHhsYXJnZSwgeHh4bGFyZ2UuXG4gICAgICovXG4gICAgYm90dG9tPzoga2V5b2YgdHlwZW9mIGRpc3RhbmNlO1xuICAgIC8qKlxuICAgICAqIFBhZGRpbmcgb24gcmlnaHQuIFZhbGlkIHZhbHVlczogeHhzbWFsbCwgeHNtYWxsLCBzbWFsbCwgbWVkaXVtLCBsYXJnZSwgeGxhcmdlLCB4eGxhcmdlLCB4eHhsYXJnZS5cbiAgICAgKi9cbiAgICByaWdodD86IGtleW9mIHR5cGVvZiBkaXN0YW5jZTtcbiAgICAvKipcbiAgICAgKiBQYWRkaW5nIGFyb3VuZCB0aGUgY29udGVudC4gVmFsaWQgdmFsdWVzOiB4eHNtYWxsLCB4c21hbGwsIHNtYWxsLCBtZWRpdW0sIGxhcmdlLCB4bGFyZ2UsIHh4bGFyZ2UsIHh4eGxhcmdlLlxuICAgICAqL1xuICAgIGd1dHRlcj86IGtleW9mIHR5cGVvZiBkaXN0YW5jZTtcbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gY2hhbmdlIHRoZSBjb250YWluZXIgZWxlbWVudC5cbiAgICAgKiBAZGVmYXVsdCAnZGl2J1xuICAgICAqL1xuICAgIGFzPzoga2V5b2YgSlNYLkludHJpbnNpY0VsZW1lbnRzO1xufVxuY29uc3QgU3R5bGVkQ29udGFpbmVyID0gc3R5bGVkKCdkaXYnKTxQYWRkZWRDb250YWluZXJQcm9wcz4oKHsgdG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBndXR0ZXIgfSkgPT4gY3NzIGBcbiAgICAke3RvcCA/IGBwYWRkaW5nLXRvcDogJHtkaXN0YW5jZVt0b3BdfTtgIDogJyd9XG4gICAgJHtsZWZ0ID8gYHBhZGRpbmctbGVmdDogJHtkaXN0YW5jZVtsZWZ0XX07YCA6ICcnfVxuICAgICR7Ym90dG9tID8gYHBhZGRpbmctYm90dG9tOiAke2Rpc3RhbmNlW2JvdHRvbV19O2AgOiAnJ31cbiAgICAke3JpZ2h0ID8gYHBhZGRpbmctcmlnaHQ6ICR7ZGlzdGFuY2VbcmlnaHRdfTtgIDogJyd9XG4gICAgJHtndXR0ZXIgPyBgcGFkZGluZzogJHtkaXN0YW5jZVtndXR0ZXJdfTtgIDogJyd9XG4gIGApO1xuZXhwb3J0IGNvbnN0IFBhZGRlZENvbnRhaW5lciA9IE9iamVjdC5hc3NpZ24oKChwcm9wcyA9PiB7XG4gICAgcmV0dXJuIDxTdHlsZWRDb250YWluZXIgey4uLnByb3BzfS8+O1xufSkgYXMgUmVhY3QuRkM8UGFkZGVkQ29udGFpbmVyUHJvcHM+KSwgeyBpbm5lcjoge1xuICAgICAgICBnZXQgU3R5bGVkQ29udGFpbmVyKCkgeyByZXR1cm4gU3R5bGVkQ29udGFpbmVyIGFzIHR5cGVvZiBTdHlsZWRDb250YWluZXI7IH1cbiAgICB9IH0pO1xuIl19