"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var icons = require("../Icon/icons");
var styled_1 = require("../../utils/styled");
var withFormContext_1 = require("../../hoc/withFormContext");
var colors_1 = require("../../colors");
var distance_1 = require("../../distance");
var RatingContainer = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: inline-block;\n"], ["\n  display: inline-block;\n"])));
var SetAnimation = styled_1.keyframes(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  0% {\n    transform: scale(1);\n  }\n  25% {\n    transform: scale(1.5);\n  }\n  50% {\n    transform: scale(0.9);\n  }\n  75% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n"], ["\n  0% {\n    transform: scale(1);\n  }\n  25% {\n    transform: scale(1.5);\n  }\n  50% {\n    transform: scale(0.9);\n  }\n  75% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n"])));
var RatingElement = styled_1.default.span(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  display: inline-block;\n  cursor: ", ";\n\n  & + & {\n    padding-left: ", ";\n  }\n"], ["\n  display: inline-block;\n  cursor: ", ";\n\n  & + & {\n    padding-left: ", ";\n  }\n"])), function (props) { return (props.disabled ? 'not-allowed' : 'pointer'); }, function (props) { return (props.size === 'medium' ? distance_1.distance.small : distance_1.distance.xsmall); });
function getColor(theme, disabled, i, value, hover) {
    if (!disabled) {
        if (hover !== -1) {
            if (i < hover) {
                return theme.ui0;
            }
            else if (i === hover) {
                return colors_1.ocean;
            }
        }
        else if (i < value) {
            return theme.ui5;
        }
        return theme.ui4;
    }
    else if (i < value) {
        return theme.ui4;
    }
    return theme.ui3;
}
function getAnimation(i, value) {
    if (i + 1 === value) {
        return styled_1.css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n      ", " 0.5s ease-in-out\n    "], ["\n      ", " 0.5s ease-in-out\n    "])), SetAnimation);
    }
    return 'none';
}
var RatingIconInt = function (_a) {
    var disabled = _a.disabled, index = _a.index, value = _a.value, hover = _a.hover, size = _a.size, props = __rest(_a, ["disabled", "index", "value", "hover", "size"]);
    return (React.createElement(icons.Star, __assign({}, props)));
};
var RatingIcon = styled_1.default(RatingIconInt)(function (_a) {
    var theme = _a.theme, disabled = _a.disabled, index = _a.index, value = _a.value, hover = _a.hover, size = _a.size;
    return styled_1.css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n    fill: ", ";\n    animation: ", ";\n    width: ", ";\n    height: ", ";\n  "], ["\n    fill: ", ";\n    animation: ", ";\n    width: ", ";\n    height: ", ";\n  "])), getColor(theme, disabled, index, value, hover), getAnimation(index, value), size, size);
});
var RatingInt = /** @class */ (function (_super) {
    __extends(RatingInt, _super);
    function RatingInt(props) {
        var _this = _super.call(this, props) || this;
        _this.hoverVoid = function () {
            _this.setState({
                hover: -1,
            });
        };
        var value = props.value, defaultValue = props.defaultValue, _a = props.levels, levels = _a === void 0 ? 5 : _a;
        var changers = [];
        var hovers = [];
        var _loop_1 = function (i) {
            changers.push(function () { return _this.updateValue(i + 1); });
            hovers.push(function () { return _this.hoverValue(i); });
        };
        for (var i = 0; i < levels; i++) {
            _loop_1(i);
        }
        _this.state = {
            controlled: value !== undefined,
            value: value || defaultValue || 0,
            error: props.error,
            hover: -1,
            changers: changers,
            hovers: hovers,
        };
        return _this;
    }
    RatingInt.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        if (this.state.controlled) {
            this.setState({
                value: nextProps.value || 0,
                error: nextProps.error,
            });
        }
    };
    RatingInt.prototype.componentDidMount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.subscribe(this);
        }
    };
    RatingInt.prototype.componentWillUnmount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    };
    RatingInt.prototype.updateValue = function (value) {
        var _a = this.props, onChange = _a.onChange, _b = _a.name, name = _b === void 0 ? '' : _b, form = _a.form;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name: name,
                    value: value,
                });
            }
            else {
                this.setState({
                    value: value,
                });
            }
        }
        if (typeof onChange === 'function') {
            onChange({
                value: value,
            });
        }
    };
    RatingInt.prototype.hoverValue = function (value) {
        this.setState({
            hover: value,
        });
    };
    RatingInt.prototype.render = function () {
        var _this = this;
        var _a = this.props, _0 = _a.levels, _1 = _a.name, _2 = _a.value, _3 = _a.defaultValue, _4 = _a.onChange, _5 = _a.onInput, disabled = _a.disabled, _b = _a.size, size = _b === void 0 ? 'medium' : _b, _c = _a.icon, icon = _c === void 0 ? 'Star' : _c, props = __rest(_a, ["levels", "name", "value", "defaultValue", "onChange", "onInput", "disabled", "size", "icon"]);
        var _d = this.state, value = _d.value, changers = _d.changers, hover = _d.hover, hovers = _d.hovers;
        var dim = size === 'medium' ? '32px' : '22px';
        return (React.createElement(RatingContainer, __assign({}, props), changers.map(function (changer, i) { return (React.createElement(RatingElement, { key: i, size: size, onClick: changer, disabled: disabled, onMouseEnter: hovers[i], onMouseLeave: _this.hoverVoid },
            React.createElement(RatingIcon, { index: i, disabled: disabled, value: value, hover: hover, size: dim, as: icons[icon] }))); })));
    };
    RatingInt.inner = {
        get RatingContainer() { return RatingContainer; },
        get RatingElement() { return RatingElement; },
        get RatingIcon() { return RatingIcon; }
    };
    return RatingInt;
}(React.Component));
/**
 * An input control for providing user ratings.
 */
exports.Rating = withFormContext_1.withFormContext(RatingInt);
exports.Rating.displayName = 'Rating';
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
//# sourceMappingURL=data:application/json;base64,