"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var Breadcrumb_1 = require("../Breadcrumb");
var colors_1 = require("../../colors");
var distance_1 = require("../../distance");
var OverflowMenu_1 = require("../OverflowMenu");
var textStyles_1 = require("../../textStyles");
var BreadcrumbContainer = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n  \n  color: ", ";\n"], ["\n  ", "\n  \n  color: ", ";\n"])), textStyles_1.getFontStyle({ size: 'small' }), styled_1.themed(function (props) { return props.theme.ui8; }));
var BreadcrumbSeparator = styled_1.default.span(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  padding: 0 ", ";\n  color: ", ";\n  font-size: inherit;\n  &:after {\n    content: '/';\n  }\n"], ["\n  padding: 0 ", ";\n  color: ", ";\n  font-size: inherit;\n  &:after {\n    content: '/';\n  }\n"])), distance_1.distance.medium, colors_1.dark);
function collapse(items, target, size) {
    items[target] = (React.createElement(OverflowMenu_1.OverflowMenu, { items: items.splice(target, 1 + items.length - size, ''), button: React.createElement(Breadcrumb_1.Breadcrumb, { title: "...", href: "#" }) }));
}
function insertSeparators(items) {
    for (var i = items.length; i-- > 1;) {
        items.splice(i, 0, React.createElement(BreadcrumbSeparator, null));
    }
}
/**
 * Display a list of Breadcrumb elements with optional grouping.
 */
exports.Breadcrumbs = Object.assign((function (_a) {
    var _b = _a.size, size = _b === void 0 ? 5 : _b, children = _a.children, props = __rest(_a, ["size", "children"]);
    var displayElements = [];
    var count = Math.max(size, 1);
    React.Children.forEach(children, function (child) {
        if (child) {
            displayElements.push(child);
        }
    });
    if (displayElements.length > count) {
        collapse(displayElements, +(count > 2), count);
    }
    insertSeparators(displayElements);
    return (React.createElement(BreadcrumbContainer, __assign({}, props), displayElements.map(function (element, i) { return (React.createElement("span", { key: i }, element)); })));
}), { inner: {
        get BreadcrumbContainer() { return BreadcrumbContainer; }
    } });
exports.Breadcrumbs.displayName = 'Breadcrumbs';
var templateObject_1, templateObject_2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9CcmVhZGNydW1icy9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2QkFBK0I7QUFDL0IsNkNBQW9EO0FBQ3BELDRDQUEyQztBQUMzQyx1Q0FBb0M7QUFFcEMsMkNBQTBDO0FBQzFDLGdEQUErQztBQUMvQywrQ0FBZ0Q7QUFDaEQsSUFBTSxtQkFBbUIsR0FBRyxnQkFBTSxDQUFDLEdBQUcsbUdBQUMsTUFDbkMsRUFBK0IsaUJBRXhCLEVBQWdDLEtBQzFDLEtBSEcseUJBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUV4QixlQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBZixDQUFlLENBQUMsQ0FDMUMsQ0FBQztBQUNGLElBQU0sbUJBQW1CLEdBQUcsZ0JBQU0sQ0FBQyxJQUFJLHVLQUFDLGlCQUN6QixFQUFlLGNBQ25CLEVBQUksaUVBS2QsS0FOYyxtQkFBUSxDQUFDLE1BQU0sRUFDbkIsYUFBSSxDQUtkLENBQUM7QUFZRixTQUFTLFFBQVEsQ0FBQyxLQUE4QixFQUFFLE1BQWMsRUFBRSxJQUFZO0lBQzFFLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG9CQUFDLDJCQUFZLElBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsb0JBQUMsdUJBQVUsSUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLElBQUksRUFBQyxHQUFHLEdBQUUsR0FBRyxDQUFDLENBQUM7QUFDNUksQ0FBQztBQUNELFNBQVMsZ0JBQWdCLENBQUMsS0FBOEI7SUFDcEQsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRztRQUNqQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsb0JBQUMsbUJBQW1CLE9BQUcsQ0FBQyxDQUFDO0tBQy9DO0FBQ0wsQ0FBQztBQUNEOztHQUVHO0FBQ1UsUUFBQSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLFVBQUMsRUFBZ0M7SUFBOUIsSUFBQSxZQUFRLEVBQVIsNkJBQVEsRUFBRSxzQkFBUSxFQUFFLHdDQUFRO0lBQ3RFLElBQU0sZUFBZSxHQUE0QixFQUFFLENBQUM7SUFDcEQsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFVBQUEsS0FBSztRQUNsQyxJQUFJLEtBQUssRUFBRTtZQUNQLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBeUIsQ0FBQyxDQUFDO1NBQ25EO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDSCxJQUFJLGVBQWUsQ0FBQyxNQUFNLEdBQUcsS0FBSyxFQUFFO1FBQ2hDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNsRDtJQUNELGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxvQkFBQyxtQkFBbUIsZUFBSyxLQUFLLEdBQ25DLGVBQWUsQ0FBQyxHQUFHLENBQUMsVUFBQyxPQUFPLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyw4QkFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFHLE9BQU8sQ0FBUSxDQUFDLEVBQWhDLENBQWdDLENBQUMsQ0FDbEQsQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FBaUMsRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNyQyxJQUFJLG1CQUFtQixLQUFLLE9BQU8sbUJBQWlELENBQUMsQ0FBQyxDQUFDO0tBQzFGLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsbUJBQVcsQ0FBQyxXQUFXLEdBQUcsYUFBYSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwgeyB0aGVtZWQgfSBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYiB9IGZyb20gJy4uL0JyZWFkY3J1bWInO1xuaW1wb3J0IHsgZGFyayB9IGZyb20gJy4uLy4uL2NvbG9ycyc7XG5pbXBvcnQgeyBTdGFuZGFyZFByb3BzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IGRpc3RhbmNlIH0gZnJvbSAnLi4vLi4vZGlzdGFuY2UnO1xuaW1wb3J0IHsgT3ZlcmZsb3dNZW51IH0gZnJvbSAnLi4vT3ZlcmZsb3dNZW51JztcbmltcG9ydCB7IGdldEZvbnRTdHlsZSB9IGZyb20gJy4uLy4uL3RleHRTdHlsZXMnO1xuY29uc3QgQnJlYWRjcnVtYkNvbnRhaW5lciA9IHN0eWxlZC5kaXYgYFxuICAke2dldEZvbnRTdHlsZSh7IHNpemU6ICdzbWFsbCcgfSl9XG4gIFxuICBjb2xvcjogJHt0aGVtZWQocHJvcHMgPT4gcHJvcHMudGhlbWUudWk4KX07XG5gO1xuY29uc3QgQnJlYWRjcnVtYlNlcGFyYXRvciA9IHN0eWxlZC5zcGFuIGBcbiAgcGFkZGluZzogMCAke2Rpc3RhbmNlLm1lZGl1bX07XG4gIGNvbG9yOiAke2Rhcmt9O1xuICBmb250LXNpemU6IGluaGVyaXQ7XG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcvJztcbiAgfVxuYDtcbmV4cG9ydCBpbnRlcmZhY2UgQnJlYWRjcnVtYnNQcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBlbGVtZW50cy4gQnkgZGVmYXVsdCwgc2V0IHRvIDUuXG4gICAgICogQGRlZmF1bHQgNVxuICAgICAqL1xuICAgIHNpemU/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGJyZWFkY3J1bWIgaXRlbXMgdG8gZGlzcGxheS5cbiAgICAgKi9cbiAgICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbn1cbmZ1bmN0aW9uIGNvbGxhcHNlKGl0ZW1zOiBBcnJheTxSZWFjdC5SZWFjdENoaWxkPiwgdGFyZ2V0OiBudW1iZXIsIHNpemU6IG51bWJlcikge1xuICAgIGl0ZW1zW3RhcmdldF0gPSAoPE92ZXJmbG93TWVudSBpdGVtcz17aXRlbXMuc3BsaWNlKHRhcmdldCwgMSArIGl0ZW1zLmxlbmd0aCAtIHNpemUsICcnKX0gYnV0dG9uPXs8QnJlYWRjcnVtYiB0aXRsZT1cIi4uLlwiIGhyZWY9XCIjXCIvPn0vPik7XG59XG5mdW5jdGlvbiBpbnNlcnRTZXBhcmF0b3JzKGl0ZW1zOiBBcnJheTxSZWFjdC5SZWFjdENoaWxkPikge1xuICAgIGZvciAobGV0IGkgPSBpdGVtcy5sZW5ndGg7IGktLSA+IDE7KSB7XG4gICAgICAgIGl0ZW1zLnNwbGljZShpLCAwLCA8QnJlYWRjcnVtYlNlcGFyYXRvciAvPik7XG4gICAgfVxufVxuLyoqXG4gKiBEaXNwbGF5IGEgbGlzdCBvZiBCcmVhZGNydW1iIGVsZW1lbnRzIHdpdGggb3B0aW9uYWwgZ3JvdXBpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBCcmVhZGNydW1icyA9IE9iamVjdC5hc3NpZ24oKCgoeyBzaXplID0gNSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IHtcbiAgICBjb25zdCBkaXNwbGF5RWxlbWVudHM6IEFycmF5PFJlYWN0LlJlYWN0Q2hpbGQ+ID0gW107XG4gICAgY29uc3QgY291bnQgPSBNYXRoLm1heChzaXplLCAxKTtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgZGlzcGxheUVsZW1lbnRzLnB1c2goY2hpbGQgYXMgUmVhY3QuUmVhY3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoZGlzcGxheUVsZW1lbnRzLmxlbmd0aCA+IGNvdW50KSB7XG4gICAgICAgIGNvbGxhcHNlKGRpc3BsYXlFbGVtZW50cywgKyhjb3VudCA+IDIpLCBjb3VudCk7XG4gICAgfVxuICAgIGluc2VydFNlcGFyYXRvcnMoZGlzcGxheUVsZW1lbnRzKTtcbiAgICByZXR1cm4gKDxCcmVhZGNydW1iQ29udGFpbmVyIHsuLi5wcm9wc30+XG4gICAgICB7ZGlzcGxheUVsZW1lbnRzLm1hcCgoZWxlbWVudCwgaSkgPT4gKDxzcGFuIGtleT17aX0+e2VsZW1lbnR9PC9zcGFuPikpfVxuICAgIDwvQnJlYWRjcnVtYkNvbnRhaW5lcj4pO1xufSkgYXMgUmVhY3QuU0ZDPEJyZWFkY3J1bWJzUHJvcHM+KSwgeyBpbm5lcjoge1xuICAgICAgICBnZXQgQnJlYWRjcnVtYkNvbnRhaW5lcigpIHsgcmV0dXJuIEJyZWFkY3J1bWJDb250YWluZXIgYXMgdHlwZW9mIEJyZWFkY3J1bWJDb250YWluZXI7IH1cbiAgICB9IH0pO1xuQnJlYWRjcnVtYnMuZGlzcGxheU5hbWUgPSAnQnJlYWRjcnVtYnMnO1xuIl19