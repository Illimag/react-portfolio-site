"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var StackPanelDirection;
(function (StackPanelDirection) {
    StackPanelDirection["leftToRight"] = "left";
    StackPanelDirection["rightToLeft"] = "right";
    StackPanelDirection["topToBottom"] = "top";
    StackPanelDirection["bottomToTop"] = "bottom";
})(StackPanelDirection = exports.StackPanelDirection || (exports.StackPanelDirection = {}));
var StackLayout = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: flex;\n  flex-direction: ", ";\n  flex-wrap: ", ";\n  justify-content: flex-start;\n"], ["\n  display: flex;\n  flex-direction: ", ";\n  flex-wrap: ", ";\n  justify-content: flex-start;\n"])), function (props) { return props.dir; }, function (props) { return props.wrapping; });
function mapFlex(direction) {
    switch (direction) {
        case StackPanelDirection.rightToLeft:
            return 'row-reverse';
        case StackPanelDirection.topToBottom:
            return 'column';
        case StackPanelDirection.bottomToTop:
            return 'column-reverse';
    }
    return 'row';
}
/**
 * The stack panel displays a stack of children in a given direction.
 */
exports.StackPanel = Object.assign((function (_a) {
    var theme = _a.theme, direction = _a.direction, wrap = _a.wrap, innerRef = _a.innerRef, props = __rest(_a, ["theme", "direction", "wrap", "innerRef"]);
    var wrapping = wrap ? 'wrap' : 'nowrap';
    var dir = mapFlex(direction);
    return React.createElement(StackLayout, __assign({ theme: theme, dir: dir, wrapping: wrapping, ref: innerRef }, props));
}), { inner: {
        get StackLayout() { return StackLayout; }
    } });
exports.StackPanel.displayName = 'StackPanel';
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9TdGFja1BhbmVsL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZCQUErQjtBQUMvQiw2Q0FBd0M7QUFFeEMsSUFBWSxtQkFLWDtBQUxELFdBQVksbUJBQW1CO0lBQzNCLDJDQUFvQixDQUFBO0lBQ3BCLDRDQUFxQixDQUFBO0lBQ3JCLDBDQUFtQixDQUFBO0lBQ25CLDZDQUFzQixDQUFBO0FBQzFCLENBQUMsRUFMVyxtQkFBbUIsR0FBbkIsMkJBQW1CLEtBQW5CLDJCQUFtQixRQUs5QjtBQTBCRCxJQUFNLFdBQVcsR0FBRyxnQkFBTSxDQUFDLEdBQUcsc0tBQW1CLHdDQUU3QixFQUFrQixrQkFDdkIsRUFBdUIscUNBRXJDLEtBSG1CLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLEdBQUcsRUFBVCxDQUFTLEVBQ3ZCLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLFFBQVEsRUFBZCxDQUFjLENBRXJDLENBQUM7QUFDRixTQUFTLE9BQU8sQ0FBQyxTQUErQjtJQUM1QyxRQUFRLFNBQVMsRUFBRTtRQUNmLEtBQUssbUJBQW1CLENBQUMsV0FBVztZQUNoQyxPQUFPLGFBQWEsQ0FBQztRQUN6QixLQUFLLG1CQUFtQixDQUFDLFdBQVc7WUFDaEMsT0FBTyxRQUFRLENBQUM7UUFDcEIsS0FBSyxtQkFBbUIsQ0FBQyxXQUFXO1lBQ2hDLE9BQU8sZ0JBQWdCLENBQUM7S0FDL0I7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBQ0Q7O0dBRUc7QUFDVSxRQUFBLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLENBQUMsVUFBQyxFQUE4QztJQUE1QyxJQUFBLGdCQUFLLEVBQUUsd0JBQVMsRUFBRSxjQUFJLEVBQUUsc0JBQVEsRUFBRSw4REFBUTtJQUNuRixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQzFDLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvQixPQUFPLG9CQUFDLFdBQVcsYUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxJQUFNLEtBQUssRUFBRyxDQUFDO0FBQ2hHLENBQUMsQ0FBZ0MsRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNwQyxJQUFJLFdBQVcsS0FBSyxPQUFPLFdBQWlDLENBQUMsQ0FBQyxDQUFDO0tBQ2xFLEVBQUUsQ0FBQyxDQUFDO0FBQ1Qsa0JBQVUsQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi91dGlscy9zdHlsZWQnO1xuaW1wb3J0IHsgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5leHBvcnQgZW51bSBTdGFja1BhbmVsRGlyZWN0aW9uIHtcbiAgICBsZWZ0VG9SaWdodCA9ICdsZWZ0JyxcbiAgICByaWdodFRvTGVmdCA9ICdyaWdodCcsXG4gICAgdG9wVG9Cb3R0b20gPSAndG9wJyxcbiAgICBib3R0b21Ub1RvcCA9ICdib3R0b20nXG59XG5leHBvcnQgaW50ZXJmYWNlIFN0YWNrUGFuZWxQcm9wcyBleHRlbmRzIFN0YW5kYXJkUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBhbmVsJ3MgY2hpbGRyZW4uXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGlyZWN0aW9uIG9mIHRoZSBwYW5lbCdzIGl0ZW1zLiBCeSBkZWZhdWx0IGxlZnQgdG8gcmlnaHQuXG4gICAgICogQGRlZmF1bHQgbGVmdFxuICAgICAqL1xuICAgIGRpcmVjdGlvbj86IFN0YWNrUGFuZWxEaXJlY3Rpb247XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgc3RhY2sgc2hvdWxkIGJlIHdyYXBwZWQuIEJ5IGRlZmF1bHQgaXQgaXMgbm90IHdyYXBwZWQuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICB3cmFwPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSByZWZlcmVuY2UgdG8gdGhlIHVuZGVybHlpbmcgSFRNTCBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBpbm5lclJlZj8oaW5zdGFuY2U6IEhUTUxFbGVtZW50IHwgbnVsbCk6IHZvaWQ7XG59XG5leHBvcnQgaW50ZXJmYWNlIFN0YWNrTGF5b3V0UHJvcHMge1xuICAgIHdyYXBwaW5nOiBzdHJpbmc7XG4gICAgZGlyOiBzdHJpbmc7XG4gICAgdGhlbWU6IGFueTtcbn1cbmNvbnN0IFN0YWNrTGF5b3V0ID0gc3R5bGVkLmRpdjxTdGFja0xheW91dFByb3BzPiBgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiAke3Byb3BzID0+IHByb3BzLmRpcn07XG4gIGZsZXgtd3JhcDogJHtwcm9wcyA9PiBwcm9wcy53cmFwcGluZ307XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbmA7XG5mdW5jdGlvbiBtYXBGbGV4KGRpcmVjdGlvbj86IFN0YWNrUGFuZWxEaXJlY3Rpb24pIHtcbiAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICBjYXNlIFN0YWNrUGFuZWxEaXJlY3Rpb24ucmlnaHRUb0xlZnQ6XG4gICAgICAgICAgICByZXR1cm4gJ3Jvdy1yZXZlcnNlJztcbiAgICAgICAgY2FzZSBTdGFja1BhbmVsRGlyZWN0aW9uLnRvcFRvQm90dG9tOlxuICAgICAgICAgICAgcmV0dXJuICdjb2x1bW4nO1xuICAgICAgICBjYXNlIFN0YWNrUGFuZWxEaXJlY3Rpb24uYm90dG9tVG9Ub3A6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbHVtbi1yZXZlcnNlJztcbiAgICB9XG4gICAgcmV0dXJuICdyb3cnO1xufVxuLyoqXG4gKiBUaGUgc3RhY2sgcGFuZWwgZGlzcGxheXMgYSBzdGFjayBvZiBjaGlsZHJlbiBpbiBhIGdpdmVuIGRpcmVjdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IFN0YWNrUGFuZWwgPSBPYmplY3QuYXNzaWduKCgoKHsgdGhlbWUsIGRpcmVjdGlvbiwgd3JhcCwgaW5uZXJSZWYsIC4uLnByb3BzIH0pID0+IHtcbiAgICBjb25zdCB3cmFwcGluZyA9IHdyYXAgPyAnd3JhcCcgOiAnbm93cmFwJztcbiAgICBjb25zdCBkaXIgPSBtYXBGbGV4KGRpcmVjdGlvbik7XG4gICAgcmV0dXJuIDxTdGFja0xheW91dCB0aGVtZT17dGhlbWV9IGRpcj17ZGlyfSB3cmFwcGluZz17d3JhcHBpbmd9IHJlZj17aW5uZXJSZWZ9IHsuLi5wcm9wc30vPjtcbn0pIGFzIFJlYWN0LlNGQzxTdGFja1BhbmVsUHJvcHM+KSwgeyBpbm5lcjoge1xuICAgICAgICBnZXQgU3RhY2tMYXlvdXQoKSB7IHJldHVybiBTdGFja0xheW91dCBhcyB0eXBlb2YgU3RhY2tMYXlvdXQ7IH1cbiAgICB9IH0pO1xuU3RhY2tQYW5lbC5kaXNwbGF5TmFtZSA9ICdTdGFja1BhbmVsJztcbiJdfQ==