"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var gridLayout_1 = require("../../utils/gridLayout");
var browser_1 = require("../../utils/browser");
var StyledGridWrapper = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  position: relative;\n"], ["\n  position: relative;\n"])));
function addPx(original, space) {
    if (original.endsWith('px')) {
        var dim = +original.replace('px', '');
        return dim + space + "px";
    }
    return original;
}
function computeIeRows(rows, spacing) {
    if (browser_1.isIE === 'IE11') {
        var rowSpace = spacing[1];
        if (rowSpace && rowSpace.endsWith('px')) {
            var space_1 = +rowSpace.replace('px', '');
            if (space_1) {
                var end_1 = rows.length - 1;
                return rows.map(function (row, i) { return (i !== end_1 ? addPx(row, space_1) : row); }).join(' ');
            }
        }
    }
    return rows.join(' ');
}
var BasicGridLayout = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  height: 100%;\n  width: 100%;\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-columns: ", ";\n  grid-template-columns: ", ";\n  -ms-grid-rows: ", ";\n  grid-template-rows: ", ";\n  grid-gap: ", ";\n"], ["\n  height: 100%;\n  width: 100%;\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-columns: ", ";\n  grid-template-columns: ", ";\n  -ms-grid-rows: ", ";\n  grid-template-rows: ", ";\n  grid-gap: ", ";\n"])), function (props) { return props.columns.join(' '); }, function (props) { return props.columns.join(' '); }, function (props) { return computeIeRows(props.rows, props.spacing); }, function (props) { return props.rows.join(' '); }, function (props) { return props.spacing.join(' '); });
var GridLayout = styled_1.default(BasicGridLayout)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  opacity: 0.9999;\n"], ["\n  opacity: 0.9999;\n"])));
var ShadowGrid = styled_1.default(BasicGridLayout)(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  position: absolute;\n"], ["\n  position: absolute;\n"])));
var DefaultUnusedCell = styled_1.default.div(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  width: 100%;\n  height: 100%;\n  background: #f1f1f1;\n"], ["\n  width: 100%;\n  height: 100%;\n  background: #f1f1f1;\n"])));
// Remark:
// At PR #258 a fix for "complex content that overflows" was introduced
// which caused some problem. If this fix should be required in the future
// again we should bring in something like the following:
//
// ```css
// overflow: auto;
// margin: -1em;
// padding: 1em;
// ```
var GridCell = styled_1.default.div(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  -ms-grid-row: ", ";\n  -ms-grid-row-span: ", ";\n  grid-row: ", " / span ", ";\n  -ms-grid-column: ", ";\n  -ms-grid-column-span: ", ";\n  grid-column: ", " / span ", ";\n  max-width: 100%;\n"], ["\n  -ms-grid-row: ", ";\n  -ms-grid-row-span: ", ";\n  grid-row: ", " / span ", ";\n  -ms-grid-column: ", ";\n  -ms-grid-column-span: ", ";\n  grid-column: ", " / span ", ";\n  max-width: 100%;\n"])), function (props) { return props.ri + 1; }, function (props) { return props.rf - props.ri; }, function (props) { return props.ri + 1; }, function (props) { return props.rf - props.ri; }, function (props) { return props.ci + 1; }, function (props) { return props.cf - props.ci; }, function (props) { return props.ci + 1; }, function (props) { return props.cf - props.ci; });
var HiddenGridCell = styled_1.default.div(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n  width: 0;\n  height: 0;\n  overflow: hidden;\n"], ["\n  width: 0;\n  height: 0;\n  overflow: hidden;\n"])));
function repeat(n, dim) {
    if (dim === void 0) { dim = '1fr'; }
    if (typeof n === 'number') {
        var arr = [];
        for (var i = 0; i < n; i++) {
            arr.push(dim);
        }
        return arr;
    }
    else if (!n) {
        return [dim];
    }
    return n;
}
function period(unit) {
    if (typeof unit === 'string') {
        return [unit, unit];
    }
    else if (!unit) {
        return ['0', '0'];
    }
    return unit;
}
function getEmptyComponent(showEmptyCells) {
    if (showEmptyCells === true) {
        return function (row, col) { return React.createElement(DefaultUnusedCell, { key: "uc-" + row + "-" + col }); };
    }
    else if (typeof showEmptyCells === 'object') {
        return function (row, col) { return React.cloneElement(showEmptyCells, { key: "uc-" + row + "-" + col }); };
    }
    else {
        return showEmptyCells;
    }
}
function computeAllocations(props) {
    var children = props.children, rows = props.rows, columns = props.columns;
    var allocation = [];
    var layout = gridLayout_1.calcLayout(children, {
        rows: typeof rows !== 'string' ? rows : undefined,
        columns: typeof columns !== 'string' ? columns : undefined,
    });
    var cells = React.Children.map(children, function (child, index) {
        var position = layout.cells[index];
        if (child && position) {
            allocation.push(position);
            var colSpan = position.colSpan, column = position.column, row = position.row, rowSpan = position.rowSpan;
            if (!colSpan || !rowSpan) {
                return React.createElement(HiddenGridCell, null, child);
            }
            return (React.createElement(GridCell, { ci: column, cf: column + colSpan, ri: row, rf: row + rowSpan, key: index }, child));
        }
        return undefined;
    }) || [];
    return {
        allocation: allocation,
        cells: cells,
        rows: typeof rows === 'string' ? repeat(layout.rows, rows) : repeat(rows || layout.rows),
        columns: typeof columns === 'string' ? repeat(layout.columns, columns) : repeat(columns || layout.columns),
    };
}
function computeUnused(props, layout) {
    var showEmptyCells = props.showEmptyCells;
    var rows = layout.rows, columns = layout.columns;
    var unusedCells = [];
    if (showEmptyCells) {
        var renderer = getEmptyComponent(showEmptyCells);
        var rowCount = rows.length;
        var colCount = columns.length;
        for (var i = 0; i < rowCount; i++) {
            for (var j = 0; j < colCount; j++) {
                var cell = renderer(i, j);
                unusedCells.push(cell);
            }
        }
    }
    return unusedCells;
}
/**
 * The `Grid` component represents a uniform grid, i.e., a grid that does not change its column layout from row to row.
 */
var Grid = /** @class */ (function (_super) {
    __extends(Grid, _super);
    function Grid(props) {
        var _this = _super.call(this, props) || this;
        var layout = computeAllocations(props);
        _this.state = {
            layout: layout,
            unused: computeUnused(props, layout),
        };
        return _this;
    }
    Grid.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        var currLayout = this.state.layout;
        var nextLayout = computeAllocations(nextProps);
        this.setState({
            layout: nextLayout,
        });
        if (nextProps.showEmptyCells !== this.props.showEmptyCells ||
            nextLayout.rows !== currLayout.rows ||
            nextLayout.columns !== currLayout.columns) {
            this.setState({
                unused: computeUnused(nextProps, nextLayout),
            });
        }
    };
    Grid.prototype.render = function () {
        var _a = this.props, _0 = _a.rows, _1 = _a.columns, _b = _a.spacing, spacing = _b === void 0 ? 0 : _b, _2 = _a.showEmptyCells, onLayout = _a.onLayout, innerRef = _a.innerRef, props = __rest(_a, ["rows", "columns", "spacing", "showEmptyCells", "onLayout", "innerRef"]);
        var _c = this.state, layout = _c.layout, unused = _c.unused;
        var space = typeof spacing === 'number' ? spacing + "px" : spacing;
        var selectedSpacing = period(space);
        if (typeof onLayout === 'function') {
            onLayout({
                layout: layout,
            });
        }
        return (React.createElement(StyledGridWrapper, { ref: innerRef },
            !!unused.length && (React.createElement(ShadowGrid, { rows: layout.rows, columns: layout.columns, spacing: selectedSpacing }, unused)),
            React.createElement(GridLayout, __assign({ rows: layout.rows, columns: layout.columns, spacing: selectedSpacing }, props), layout.cells)));
    };
    Grid.inner = {
        get StyledGridWrapper() { return StyledGridWrapper; },
        get ShadowGrid() { return ShadowGrid; },
        get GridLayout() { return GridLayout; }
    };
    return Grid;
}(React.PureComponent));
exports.Grid = Grid;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7;
//# sourceMappingURL=data:application/json;base64,