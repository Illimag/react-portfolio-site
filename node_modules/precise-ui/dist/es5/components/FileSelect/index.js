"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var quarks_1 = require("../../quarks");
var withFormContext_1 = require("../../hoc/withFormContext");
var Button_1 = require("../Button");
var Icon_1 = require("../Icon");
var Spinner_1 = require("../Spinner");
var input_1 = require("../../utils/input");
var FileInput = styled_1.default.input(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: none;\n"], ["\n  display: none;\n"])));
var Remove = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  cursor: pointer;\n  line-height: 1;\n"], ["\n  cursor: pointer;\n  line-height: 1;\n"])));
function getFiles(target, files) {
    if (files === void 0) { files = []; }
    target.push.apply(target, files);
    return target;
}
var FileSelectInt = /** @class */ (function (_super) {
    __extends(FileSelectInt, _super);
    function FileSelectInt(props) {
        var _this = _super.call(this, props) || this;
        _this.addFileEntries = function (ev) {
            var _a = _this.props, multiple = _a.multiple, form = _a.form, _b = _a.name, name = _b === void 0 ? '' : _b;
            var files = ev.target.files;
            if (!_this.state.controlled) {
                if (form) {
                    form.change({
                        name: name,
                        value: getFiles(multiple ? _this.state.value.slice() : [], files),
                    });
                }
                else {
                    _this.setState(function (prevState) { return ({
                        value: getFiles(multiple ? prevState.value.slice() : [], files),
                        previews: [],
                    }); }, function () { return _this.notifyChanges(_this.state.value); });
                }
            }
            else {
                _this.notifyChanges(getFiles(multiple ? _this.state.value.slice() : [], files));
            }
        };
        _this.setInputRef = function (el) {
            _this.fileInput = el;
        };
        _this.openFilePicker = function () {
            var onOpen = _this.props.onOpen;
            var open = true;
            if (typeof onOpen === 'function') {
                onOpen({
                    preventDefault: function () {
                        open = false;
                    },
                });
            }
            if (open && _this.fileInput) {
                _this.fileInput.click();
            }
        };
        var value = props.value || props.defaultValue || [];
        _this.state = {
            value: value,
            controlled: props.value !== undefined,
            previews: [],
            error: props.error,
        };
        return _this;
    }
    FileSelectInt.prototype.componentDidMount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.subscribe(this);
        }
    };
    FileSelectInt.prototype.componentWillUnmount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    };
    FileSelectInt.prototype.UNSAFE_componentWillReceiveProps = function (_a) {
        var _b = _a.value, value = _b === void 0 ? [] : _b, error = _a.error;
        if (this.state.controlled && value && this.state.value !== value) {
            this.setState({
                value: value,
                previews: [],
            });
        }
        this.setState({ error: error });
    };
    FileSelectInt.prototype.removeFileEntry = function (f) {
        var _this = this;
        var _a = this.props, form = _a.form, _b = _a.name, name = _b === void 0 ? '' : _b;
        if (!this.state.controlled) {
            if (form) {
                form.change({
                    name: name,
                    value: this.state.value.filter(function (file) { return f !== file; }),
                });
            }
            else {
                this.setState(function (prevState) { return ({
                    value: prevState.value.filter(function (file) { return f !== file; }),
                    previews: prevState.previews.filter(function (preview) { return preview.file !== f; }),
                }); }, function () { return _this.notifyChanges(_this.state.value); });
            }
        }
        else {
            var files = this.state.value.filter(function (file) { return f !== file; });
            this.notifyChanges(files);
        }
    };
    FileSelectInt.prototype.notifyChanges = function (files) {
        var onChange = this.props.onChange;
        if (typeof onChange === 'function') {
            onChange({
                value: files,
            });
        }
    };
    FileSelectInt.prototype.renderPreview = function (f) {
        var _this = this;
        var preview = this.state.previews.filter(function (preview) { return preview.file === f; })[0];
        if (f.size > 1000000 || !f.type.match(/image/)) {
            return this.renderItem(f);
        }
        if (preview) {
            return (React.createElement(quarks_1.StyledFileImagePreview, { src: preview.data },
                React.createElement(Remove, { onClick: function () { return _this.removeFileEntry(f); } },
                    React.createElement(Icon_1.Icon, { name: "RemoveCircle", size: 1 }))));
        }
        var reader = new FileReader();
        reader.onload = (function (file) { return function () {
            var result = reader.result;
            typeof result === 'string' &&
                _this.setState(function (prevState) { return ({
                    previews: prevState.previews.concat([
                        {
                            file: file,
                            data: result,
                        },
                    ]),
                }); });
        }; })(f);
        reader.readAsDataURL(f);
        return (React.createElement(quarks_1.StyledFileImagePreview, null,
            React.createElement(Spinner_1.Spinner, { size: "small" })));
    };
    FileSelectInt.prototype.renderItem = function (f) {
        var _this = this;
        return (React.createElement(quarks_1.StyledFileItem, { key: f.name, name: f.name },
            React.createElement(Remove, { onClick: function () { return _this.removeFileEntry(f); } },
                React.createElement(Icon_1.Icon, { name: "RemoveCircle", size: 1 }))));
    };
    FileSelectInt.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, disabled = _a.disabled, multiple = _a.multiple, info = _a.info;
        var _b = this.state, value = _b.value, error = _b.error;
        return (React.createElement("div", null,
            React.createElement(Button_1.Button, { onClick: this.openFilePicker, disabled: disabled, buttonStyle: "secondary", type: "button" }, children),
            React.createElement(FileInput, { ref: this.setInputRef, type: "file", multiple: multiple, onChange: this.addFileEntries, value: "" }),
            value && value.length > 0 && (React.createElement(quarks_1.StyledFileList, null, value.map(function (file) { return (_this.props.preview ? _this.renderPreview(file) : _this.renderItem(file)); }))),
            input_1.showInputInfo(error, info)));
    };
    FileSelectInt.inner = {
        get StyledFileImagePreview() { return quarks_1.StyledFileImagePreview; },
        get Remove() { return Remove; },
        get Icon() { return Icon_1.Icon; },
        get Spinner() { return Spinner_1.Spinner; },
        get StyledFileItem() { return quarks_1.StyledFileItem; },
        get Button() { return Button_1.Button; },
        get FileInput() { return FileInput; },
        get StyledFileList() { return quarks_1.StyledFileList; }
    };
    return FileSelectInt;
}(React.Component));
/**
 * A custom field for handling file selection.
 */
exports.FileSelect = withFormContext_1.withFormContext(FileSelectInt);
exports.FileSelect.displayName = 'FileSelect';
var templateObject_1, templateObject_2;
//# sourceMappingURL=data:application/json;base64,