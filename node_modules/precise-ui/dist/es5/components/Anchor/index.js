"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
function getHref(link) {
    if (link !== undefined) {
        if (typeof link !== 'string') {
            var pathname = link.pathname, search = link.search, hash = link.hash;
            var parts = [];
            if (pathname) {
                parts.push(pathname);
            }
            if (search) {
                parts.push('?');
                parts.push(search);
            }
            if (hash) {
                parts.push('#');
                parts.push(hash);
            }
            return parts.join('');
        }
        return link;
    }
    return undefined;
}
var Anchor = /** @class */ (function (_super) {
    __extends(Anchor, _super);
    function Anchor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.clicked = function (e) {
            var _a = _this.props, _b = _a.tagName, tagName = _b === void 0 ? 'a' : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.target, target = _d === void 0 ? '_self' : _d, href = _a.href, to = _a.to, onClick = _a.onClick;
            if (!disabled) {
                if (typeof onClick === 'function') {
                    onClick(e);
                    if (e.defaultPrevented) {
                        return;
                    }
                }
                if (to !== undefined) {
                    var ctx = _this.context;
                    var history_1 = ctx && ctx.router && ctx.router.history;
                    if (history_1) {
                        history_1.push(to);
                    }
                }
                else if (typeof href === 'string') {
                    if (tagName !== 'a') {
                        window.open(href, target);
                    }
                    return;
                }
                else if (tagName === 'button') {
                    return;
                }
            }
            e.preventDefault();
        };
        return _this;
    }
    Anchor.prototype.render = function () {
        var _a = this.props, _b = _a.tagName, tagName = _b === void 0 ? 'a' : _b, _0 = _a.theme, to = _a.to, disabled = _a.disabled, target = _a.target, props = __rest(_a, ["tagName", "theme", "to", "disabled", "target"]);
        if (tagName === 'a' && target) {
            props.target = target;
        }
        return React.createElement(tagName, __assign({ href: getHref(to) || (props.onClick ? '#' : undefined) }, props, { onClick: this.clicked }));
    };
    Anchor.contextTypes = {
        // tslint:disable-next-line
        router: function () { return null; },
    };
    return Anchor;
}(React.PureComponent));
exports.Anchor = Anchor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BbmNob3IvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkJBQStCO0FBMkMvQixTQUFTLE9BQU8sQ0FBQyxJQUEyQztJQUN4RCxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7UUFDcEIsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDbEIsSUFBQSx3QkFBUSxFQUFFLG9CQUFNLEVBQUUsZ0JBQUksQ0FBVTtZQUN4QyxJQUFNLEtBQUssR0FBa0IsRUFBRSxDQUFDO1lBQ2hDLElBQUksUUFBUSxFQUFFO2dCQUNWLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDeEI7WUFDRCxJQUFJLE1BQU0sRUFBRTtnQkFDUixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3RCO1lBQ0QsSUFBSSxJQUFJLEVBQUU7Z0JBQ04sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDaEIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwQjtZQUNELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBQ0Q7SUFBNEIsMEJBQWdDO0lBQTVEO1FBQUEscUVBNENDO1FBdkNXLGFBQU8sR0FBRyxVQUFDLENBQWdDO1lBQ3pDLElBQUEsZ0JBQXFGLEVBQW5GLGVBQWEsRUFBYixrQ0FBYSxFQUFFLGdCQUFnQixFQUFoQixxQ0FBZ0IsRUFBRSxjQUFnQixFQUFoQixxQ0FBZ0IsRUFBRSxjQUFJLEVBQUUsVUFBRSxFQUFFLG9CQUFzQixDQUFDO1lBQzVGLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ1gsSUFBSSxPQUFPLE9BQU8sS0FBSyxVQUFVLEVBQUU7b0JBQy9CLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDWCxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRTt3QkFDcEIsT0FBTztxQkFDVjtpQkFDSjtnQkFDRCxJQUFJLEVBQUUsS0FBSyxTQUFTLEVBQUU7b0JBQ2xCLElBQU0sR0FBRyxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUM7b0JBQ3pCLElBQU0sU0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO29CQUN4RCxJQUFJLFNBQU8sRUFBRTt3QkFDVCxTQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3FCQUNwQjtpQkFDSjtxQkFDSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtvQkFDL0IsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFO3dCQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztxQkFDN0I7b0JBQ0QsT0FBTztpQkFDVjtxQkFDSSxJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUU7b0JBQzNCLE9BQU87aUJBQ1Y7YUFDSjtZQUNELENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUM7O0lBWU4sQ0FBQztJQVhHLHVCQUFNLEdBQU47UUFDSSxJQUFNLGVBQXlFLEVBQXZFLGVBQWEsRUFBYixrQ0FBYSxFQUFFLGFBQVMsRUFBRSxVQUFFLEVBQUUsc0JBQVEsRUFBRSxrQkFBTSxFQUFFLG9FQUF1QixDQUFDO1FBQ2hGLElBQUksT0FBTyxLQUFLLEdBQUcsSUFBSSxNQUFNLEVBQUU7WUFDMUIsS0FBYSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDbEM7UUFDRCxPQUFPLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxhQUM5QixJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFDbkQsS0FBSyxJQUNSLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxJQUN2QixDQUFDO0lBQ1AsQ0FBQztJQTFDTSxtQkFBWSxHQUFHO1FBQ2xCLDJCQUEyQjtRQUMzQixNQUFNLEVBQUUsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJO0tBQ3JCLENBQUM7SUF3Q04sYUFBQztDQUFBLEFBNUNELENBQTRCLEtBQUssQ0FBQyxhQUFhLEdBNEM5QztBQTVDWSx3QkFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0YW5kYXJkUHJvcHMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuZXhwb3J0IGludGVyZmFjZSBBbmNob3JVcmxMb2NhdG9yIHtcbiAgICBwYXRobmFtZT86IHN0cmluZztcbiAgICBzZWFyY2g/OiBzdHJpbmc7XG4gICAgc3RhdGU/OiBhbnk7XG4gICAgaGFzaD86IHN0cmluZztcbiAgICBrZXk/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEFuY2hvclByb3BzIGV4dGVuZHMgU3RhbmRhcmRQcm9wcyB7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY29tcG9uZW50IGFzIGRpc2FibGVkLlxuICAgICAqL1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZWRpcmVjdHMgdG8gdGhlIGdpdmVuIFVSTCBpZiBjbGlja2VkLlxuICAgICAqL1xuICAgIGhyZWY/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUmVkaXJlY3RzIHRvIHRoZSBnaXZlbiBpbnRlcm5hbCBVUkwgaWYgY2xpY2tlZC5cbiAgICAgKi9cbiAgICB0bz86IHN0cmluZyB8IEFuY2hvclVybExvY2F0b3I7XG4gICAgLyoqXG4gICAgICogVGhlIHRhZ05hbWUgdG8gdXNlLCBlLmcuLCBhIG9yIGJ1dHRvbi5cbiAgICAgKiBAZGVmYXVsdCBhXG4gICAgICovXG4gICAgdGFnTmFtZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIG5vdGlmeSBvbmNlIGNsaWNrZWQuXG4gICAgICovXG4gICAgb25DbGljaz8oZTogUmVhY3QuTW91c2VFdmVudDxIVE1MRWxlbWVudD4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFjdGlvbiBsaW5rIGNoaWxkcmVuLlxuICAgICAqL1xuICAgIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlIHwgdm9pZDtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hlcmUgdG8gZGlzcGxheSB0aGUgbGlua2VkIFVSTC5cbiAgICAgKiBBcHBsaWVzIG9ubHkgaW4gY2FzZSBvZiBgYWAgdGFnXG4gICAgICogRGVmYXVsdCBpcyBgX3NlbGZgXG4gICAgICogQGRlZmF1bHQgX3NlbGZcbiAgICAgKi9cbiAgICB0YXJnZXQ/OiAnX3NlbGYnIHwgJ19ibGFuaycgfCAnX3BhcmVudCcgfCAnX3RvcCc7XG59XG5mdW5jdGlvbiBnZXRIcmVmKGxpbms6IHN0cmluZyB8IEFuY2hvclVybExvY2F0b3IgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAobGluayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbGluayAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCB9ID0gbGluaztcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzOiBBcnJheTxzdHJpbmc+ID0gW107XG4gICAgICAgICAgICBpZiAocGF0aG5hbWUpIHtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHBhdGhuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWFyY2gpIHtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKCc/Jyk7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChzZWFyY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc2gpIHtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKCcjJyk7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChoYXNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluaztcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBjbGFzcyBBbmNob3IgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PEFuY2hvclByb3BzPiB7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHJvdXRlcjogKCkgPT4gbnVsbCxcbiAgICB9O1xuICAgIHByaXZhdGUgY2xpY2tlZCA9IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxFbGVtZW50PikgPT4ge1xuICAgICAgICBjb25zdCB7IHRhZ05hbWUgPSAnYScsIGRpc2FibGVkID0gZmFsc2UsIHRhcmdldCA9ICdfc2VsZicsIGhyZWYsIHRvLCBvbkNsaWNrIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBvbkNsaWNrKGUpO1xuICAgICAgICAgICAgICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0byAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICAgICAgICAgIGNvbnN0IGhpc3RvcnkgPSBjdHggJiYgY3R4LnJvdXRlciAmJiBjdHgucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgICAgICAgaWYgKGhpc3RvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgaHJlZiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFnTmFtZSAhPT0gJ2EnKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGhyZWYsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRhZ05hbWUgPT09ICdidXR0b24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyB0YWdOYW1lID0gJ2EnLCB0aGVtZTogXzAsIHRvLCBkaXNhYmxlZCwgdGFyZ2V0LCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKHRhZ05hbWUgPT09ICdhJyAmJiB0YXJnZXQpIHtcbiAgICAgICAgICAgIChwcm9wcyBhcyBhbnkpLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCh0YWdOYW1lLCB7XG4gICAgICAgICAgICBocmVmOiBnZXRIcmVmKHRvKSB8fCAocHJvcHMub25DbGljayA/ICcjJyA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuY2xpY2tlZCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19