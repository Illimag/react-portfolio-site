import * as React from 'react';
import { AccordionTableProps } from './AccordionTable.types.part';
import { AccordionCard } from '../AccordionCard';
export interface AccordionTableCardState {
    /**
     * Currently selected rows indices.
     */
    selectedIndexes: Array<number>;
    /**
     * Determines if the accordion table component is controlled from the outside or not.
     */
    controlled: boolean;
}
export declare class AccordionTableCard<T> extends React.Component<AccordionTableProps<T>, AccordionTableCardState> {
    constructor(props: AccordionTableProps<T>);
    static getDerivedStateFromProps(props: AccordionTableProps<any>, state: AccordionTableCardState): AccordionTableCardState | {
        selectedIndexes: number[];
    };
    private handleClick;
    private renderItem;
    private getHeader;
    private renderItemProps;
    private renderItemProp;
    render(): React.ReactNode;
    static inner: {
        readonly StyledListItem: import("styled-components").StyledComponent<React.FunctionComponent<import("../ListItem").ListItemProps> & {
            inner: {
                readonly StyledListItem: import("styled-components").StyledComponent<"li", import("../..").PreciseTheme, import("../ListItem").ListItemProps, never>;
            };
        }, import("../..").PreciseTheme, {}, never>;
        readonly AccordionCard: typeof AccordionCard;
        readonly PropContainer: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
        readonly PropName: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
        readonly PropValue: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
        readonly PlaceholderContainer: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, {}, never>;
    };
}
