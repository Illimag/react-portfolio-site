import * as React from 'react';
import { IconProps } from '../Icon';
import { AccordionTableProps } from './AccordionTable.types.part';
export interface AccordionTableBasicState {
    selectedIndex: Array<number>;
    expandedGroups: Array<any>;
    controlledIndex: boolean;
    controlledGroups: boolean;
}
interface AccordionTableItemProps {
    active?: boolean;
}
interface StyledArrowProps extends IconProps {
    isRotated: boolean;
}
export declare class AccordionTableBasic<T> extends React.Component<AccordionTableProps<T>, AccordionTableBasicState> {
    static defaultProps: {
        multiple: boolean;
        noValueGroupLabel: string;
    };
    constructor(props: AccordionTableProps<T>);
    static getDerivedStateFromProps(props: AccordionTableProps<any>, state: AccordionTableBasicState): {
        selectedIndex: number[];
        expandedGroups: any[] | undefined;
        controlledIndex: boolean;
        controlledGroups: boolean;
    };
    private getGroupItems;
    private handleClick;
    private toggleGroup;
    private groupRenderer;
    private getGroupByValue;
    /**
     * helper method to check if an element is included in an array.
     * This method has special handling for arrays of arrays. In this case normal strict equality checking (===)
     * wouldn't work.
     */
    private static arrayIncludes;
    private rowRenderer;
    private cellRenderer;
    private getColumns;
    render(): JSX.Element;
    static inner: {
        readonly AccordionTableRow: React.FunctionComponent<import("../AccordionTableRow").AccordionTableRowProps> & {
            inner: {
                readonly StyledAccordionTableRow: import("styled-components").StyledComponent<"tr", import("../..").PreciseTheme, import("../AccordionTableRow").AccordionTableRowProps, never>;
            };
        };
        readonly GroupTableCell: import("styled-components").StyledComponent<"td", import("../..").PreciseTheme, {}, never>;
        readonly StyledIcon: import("styled-components").StyledComponent<React.FunctionComponent<StyledArrowProps> & {
            inner: {
                readonly Icon: React.FunctionComponent<IconProps> & {
                    inner: {
                        readonly StyledIcon: import("styled-components").StyledComponent<"i", import("../..").PreciseTheme, {}, never>;
                    };
                };
            };
        }, import("../..").PreciseTheme, StyledArrowProps, never>;
        readonly StyledTableRowCollapse: import("styled-components").StyledComponent<"tr", import("../..").PreciseTheme, AccordionTableItemProps, never>;
        readonly StyledDetailsContainer: import("styled-components").StyledComponent<"td", import("../..").PreciseTheme, {}, never>;
        readonly StyledCollapseAnimator: import("styled-components").StyledComponent<"div", import("../..").PreciseTheme, AccordionTableItemProps, never>;
        readonly StyledTable: import("styled-components").StyledComponent<import("../Table").TableType, import("../..").PreciseTheme, {}, never>;
    };
}
export {};
