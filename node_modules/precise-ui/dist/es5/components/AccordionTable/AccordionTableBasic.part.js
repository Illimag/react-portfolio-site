"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var remCalc_1 = require("../../utils/remCalc");
var Table_1 = require("../Table");
var TableShared_part_1 = require("../Table/TableShared.part");
var Icon_1 = require("../Icon");
var AccordionTableRow_1 = require("../AccordionTableRow");
var indexHelper_1 = require("./helpers/indexHelper");
var distance_1 = require("../../distance");
var textStyles_1 = require("../../textStyles");
var animationDuration = '0.3s';
var animationFunction = 'cubic-bezier(0, 0, 0.25, 1)';
var StyledTable = styled_1.default(Table_1.Table)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  th,\n  td {\n    padding-right: ", ";\n    padding-left: ", ";\n  }\n"], ["\n  th,\n  td {\n    padding-right: ", ";\n    padding-left: ", ";\n  }\n"])), distance_1.distance.medium, distance_1.distance.medium);
var StyledTableRowCollapse = styled_1.default.tr(styled_1.themed(function (_a) {
    var theme = _a.theme, active = _a.active;
    return styled_1.css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      border: ", ";\n      ", "\n    "], ["\n      border: ", ";\n      ", "\n    "])), active ? "1px solid " + theme.ui5 : 'none', !active ? 'display: none;' : '');
}));
var StyledCollapseAnimator = styled_1.default('div')(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  transition: all ", " ", ";\n  max-height: ", ";\n  opacity: ", ";\n"], ["\n  transition: all ", " ", ";\n  max-height: ", ";\n  opacity: ", ";\n"])), animationDuration, animationFunction, function (_a) {
    var active = _a.active;
    return (active ? '10000px' : '0');
}, function (_a) {
    var active = _a.active;
    return (active ? '1' : '0');
});
var GroupTableCell = styled_1.default.td(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  ", "\n\n  padding-left: 0.5em !important;\n"], ["\n  ", "\n\n  padding-left: 0.5em !important;\n"])), textStyles_1.getFontStyle({ weight: 'bold' }));
var StyledDetailsContainer = styled_1.default.td(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  /*\n    AccordionTable is a Table abstraction.\n    Table has default paddings for it's cells.\n    Expanded AccordionTable row is a container and should not have any paddings.\n  */\n  padding: 0 !important;\n"], ["\n  /*\n    AccordionTable is a Table abstraction.\n    Table has default paddings for it's cells.\n    Expanded AccordionTable row is a container and should not have any paddings.\n  */\n  padding: 0 !important;\n"])));
var StyledIconInt = Object.assign((function (_a) {
    var _0 = _a.isRotated, props = __rest(_a, ["isRotated"]);
    return React.createElement(Icon_1.Icon, __assign({}, props));
}), { inner: {
        get Icon() { return Icon_1.Icon; }
    } });
var StyledIcon = styled_1.default(StyledIconInt)(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  display: block;\n  font-size: ", ";\n  height: 18px;\n  width: 18px;\n  transition: transform ", " ", ";\n  transform: ", ";\n"], ["\n  display: block;\n  font-size: ", ";\n  height: 18px;\n  width: 18px;\n  transition: transform ", " ", ";\n  transform: ", ";\n"])), remCalc_1.remCalc('18px'), animationDuration, animationFunction, function (_a) {
    var isRotated = _a.isRotated;
    return "rotate(" + (isRotated ? 90 : 0) + "deg)";
});
function defaultGroupRenderer(e) {
    return (React.createElement(React.Fragment, null,
        e.group ? e.group.toString() : e.group,
        " (",
        e.items.length,
        ")"));
}
var AccordionTableBasic = /** @class */ (function (_super) {
    __extends(AccordionTableBasic, _super);
    function AccordionTableBasic(props) {
        var _this = _super.call(this, props) || this;
        _this.getGroupByValue = function (rowData) {
            var _a = _this.props, groupBy = _a.groupBy, noValueGroupLabel = _a.noValueGroupLabel;
            if (groupBy) {
                var rowValue = rowData[groupBy];
                if (rowValue || rowValue === 0) {
                    if (Array.isArray(rowValue) && rowValue.length === 0) {
                        return noValueGroupLabel;
                    }
                    else {
                        return rowValue;
                    }
                }
                else {
                    return noValueGroupLabel;
                }
            }
            return undefined;
        };
        _this.rowRenderer = function (_a) {
            var cells = _a.cells, index = _a.index, data = _a.data, key = _a.key, state = _a.state;
            var _b = _this.props, detailsRenderer = _b.detailsRenderer, rowRenderer = _b.rowRenderer, theme = _b.theme, arrowToggle = _b.arrowToggle;
            var _c = _this.state, selectedIndex = _c.selectedIndex, expandedGroups = _c.expandedGroups;
            var _d = state.groupedRows, groupedRows = _d === void 0 ? [] : _d;
            var active = indexHelper_1.hasIndex(selectedIndex, index);
            var count = React.Children.count(cells);
            var col = _this.getGroupByValue(data);
            var open = !(col || col === 0) || AccordionTableBasic.arrayIncludes(col, expandedGroups);
            var renderData = { cells: cells, index: index, data: data, active: active, key: key, state: state };
            var isNewGroup = (col || col === 0) && !AccordionTableBasic.arrayIncludes(col, groupedRows);
            if (isNewGroup) {
                state.groupedRows = groupedRows.concat([col]);
            }
            return (React.createElement(React.Fragment, { key: key },
                isNewGroup && _this.groupRenderer(col, count, open),
                open && (React.createElement(React.Fragment, null,
                    (rowRenderer && rowRenderer(renderData)) || (React.createElement(AccordionTableRow_1.AccordionTableRow, { active: active, clickable: !arrowToggle, onClick: function () { return _this.handleClick(index, data); }, theme: theme }, cells)),
                    React.createElement(StyledTableRowCollapse, { active: active },
                        React.createElement(StyledDetailsContainer, { colSpan: count },
                            React.createElement(StyledCollapseAnimator, { active: active }, active && detailsRenderer && detailsRenderer({ index: index, data: data }))))))));
        };
        _this.cellRenderer = function (e) {
            var row = e.row, data = e.data;
            if (e.column === 0) {
                return (React.createElement(StyledIcon, { isRotated: indexHelper_1.hasIndex(_this.state.selectedIndex, row), name: "KeyboardArrowRight", onClick: function () { return data && _this.handleClick(row, data); } }));
            }
            var cellRenderer = _this.props.cellRenderer;
            return typeof cellRenderer === 'function' ? cellRenderer(e) : TableShared_part_1.defaultCellRenderer(e);
        };
        var controlledDetails = props.selectedIndex !== undefined;
        var controlledGroups = Array.isArray(props.expandedGroups);
        _this.state = {
            selectedIndex: indexHelper_1.normalizeIndex(props.selectedIndex),
            controlledIndex: controlledDetails,
            controlledGroups: controlledGroups,
            expandedGroups: controlledGroups ? props.expandedGroups || [] : [],
        };
        return _this;
    }
    AccordionTableBasic.getDerivedStateFromProps = function (props, state) {
        var selectedIndex = props.selectedIndex, expandedGroups = props.expandedGroups;
        var newIndex = state.controlledIndex && selectedIndex !== undefined;
        var newGroups = state.controlledGroups && expandedGroups !== undefined;
        if (newIndex || newGroups) {
            return __assign({}, state, { selectedIndex: newIndex ? indexHelper_1.normalizeIndex(selectedIndex) : state.selectedIndex, expandedGroups: newGroups ? expandedGroups : state.expandedGroups });
        }
        return state;
    };
    AccordionTableBasic.prototype.getGroupItems = function (data, groupBy, group) {
        var noValueGroupLabel = this.props.noValueGroupLabel;
        if (groupBy) {
            if (group === noValueGroupLabel) {
                return data.filter(function (m) {
                    var value = m[groupBy];
                    // the number '0' shouldn't be in the no-value-group.
                    if (typeof value === 'number' && value === 0) {
                        return false;
                    }
                    else {
                        // empty arrays should be in the no-value-group
                        return !value || (Array.isArray(value) && value.length === 0);
                    }
                });
            }
            else {
                return data.filter(function (m) {
                    var value = m[groupBy];
                    if (value === group) {
                        return true;
                    }
                    else {
                        // special handling for arrays is needed because '===' doesn't work for arrays
                        if (Array.isArray(value) && Array.isArray(group)) {
                            return value.toString() === group.toString();
                        }
                        else {
                            return false;
                        }
                    }
                });
            }
        }
        return [];
    };
    AccordionTableBasic.prototype.handleClick = function (target, data) {
        var _a = this.props, onChange = _a.onChange, multiple = _a.multiple;
        var _b = this.state, controlledIndex = _b.controlledIndex, selectedIndex = _b.selectedIndex;
        var nextIndexes = indexHelper_1.toggleIndex(selectedIndex, target, multiple);
        if (typeof onChange === 'function') {
            onChange({
                selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,
                previousIndex: multiple ? selectedIndex : selectedIndex[0] !== undefined ? selectedIndex[0] : -1,
                data: data,
            });
        }
        if (!controlledIndex) {
            this.setState({
                selectedIndex: nextIndexes,
            });
        }
    };
    AccordionTableBasic.prototype.toggleGroup = function (group) {
        var _a = this.props, data = _a.data, onToggleGroup = _a.onToggleGroup, groupBy = _a.groupBy;
        var _b = this.state, expandedGroups = _b.expandedGroups, controlledGroups = _b.controlledGroups;
        if (typeof onToggleGroup === 'function') {
            onToggleGroup({
                group: group,
                type: 'expand',
                items: this.getGroupItems(data, groupBy, group),
            });
        }
        if (!controlledGroups) {
            if (expandedGroups.indexOf(group) !== -1) {
                this.setState({
                    expandedGroups: expandedGroups.filter(function (m) { return m !== group; }),
                });
            }
            else {
                this.setState({
                    expandedGroups: expandedGroups.concat([group]),
                });
            }
        }
    };
    AccordionTableBasic.prototype.groupRenderer = function (group, count, expanded) {
        var _this = this;
        var _a = this.props, theme = _a.theme, _b = _a.groupRenderer, groupRenderer = _b === void 0 ? defaultGroupRenderer : _b, data = _a.data, groupBy = _a.groupBy;
        var items = this.getGroupItems(data, groupBy, group);
        return (React.createElement(React.Fragment, null,
            React.createElement(AccordionTableRow_1.AccordionTableRow, { clickable: true, onClick: function () { return _this.toggleGroup(group); }, theme: theme },
                React.createElement(GroupTableCell, null,
                    React.createElement(StyledIcon, { isRotated: expanded, name: "KeyboardArrowRight" })),
                React.createElement(GroupTableCell, { colSpan: count - 1 }, groupRenderer({ expanded: expanded, group: group, items: items }))),
            React.createElement(StyledTableRowCollapse, null)));
    };
    /**
     * helper method to check if an element is included in an array.
     * This method has special handling for arrays of arrays. In this case normal strict equality checking (===)
     * wouldn't work.
     */
    AccordionTableBasic.arrayIncludes = function (element, arr) {
        return ((Array.isArray(element) ? JSON.stringify(arr).indexOf(JSON.stringify(element)) : arr.indexOf(element)) !== -1);
    };
    AccordionTableBasic.prototype.getColumns = function () {
        var _a = this.props, data = _a.data, columns = _a.columns, indexed = _a.indexed;
        if (columns || (data && data.length)) {
            var cols = {
                '': {
                    header: '',
                    width: remCalc_1.remCalc('50px'),
                    sortable: false,
                },
            };
            if (indexed) {
                cols['#'] = {
                    header: '#',
                    sortable: false,
                };
            }
            var keys = Object.keys(columns || data[0]);
            return keys.reduce(function (acc, key) {
                acc[key] = columns ? columns[key] : key;
                return acc;
            }, cols);
        }
        return {};
    };
    AccordionTableBasic.prototype.render = function () {
        var _a = this.props, _0 = _a.detailsRenderer, _1 = _a.columns, _2 = _a.indexed, _3 = _a.groupRenderer, _4 = _a.expandedGroups, _5 = _a.onToggleGroup, _6 = _a.openLabel, _7 = _a.closeLabel, _8 = _a.multiple, props = __rest(_a, ["detailsRenderer", "columns", "indexed", "groupRenderer", "expandedGroups", "onToggleGroup", "openLabel", "closeLabel", "multiple"]);
        return (React.createElement(StyledTable, __assign({}, props, { mode: "table", columns: this.getColumns(), rowRenderer: this.rowRenderer, cellRenderer: this.cellRenderer })));
    };
    AccordionTableBasic.defaultProps = {
        multiple: false,
        noValueGroupLabel: '—',
    };
    AccordionTableBasic.inner = {
        get AccordionTableRow() { return AccordionTableRow_1.AccordionTableRow; },
        get GroupTableCell() { return GroupTableCell; },
        get StyledIcon() { return StyledIcon; },
        get StyledTableRowCollapse() { return StyledTableRowCollapse; },
        get StyledDetailsContainer() { return StyledDetailsContainer; },
        get StyledCollapseAnimator() { return StyledCollapseAnimator; },
        get StyledTable() { return StyledTable; }
    };
    return AccordionTableBasic;
}(React.Component));
exports.AccordionTableBasic = AccordionTableBasic;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=data:application/json;base64,