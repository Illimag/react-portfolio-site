"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var indexHelper_1 = require("./helpers/indexHelper");
var TableShared_part_1 = require("../Table/TableShared.part");
var TableCard_part_1 = require("../Table/TableCard.part");
var AccordionCard_1 = require("../AccordionCard");
var ListItem_1 = require("../ListItem");
var List_1 = require("../List");
var distance_1 = require("../../distance");
var textStyles_1 = require("../../textStyles");
var PropContainer = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  margin-bottom: ", ";\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n"], ["\n  margin-bottom: ", ";\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n"])), distance_1.distance.medium);
var PropName = styled_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), textStyles_1.getFontStyle({ size: 'xSmall' }));
var PropValue = styled_1.default.div(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), textStyles_1.getFontStyle({ weight: 'medium' }));
var PlaceholderContainer = styled_1.default.div(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  text-align: center;\n"], ["\n  text-align: center;\n"])));
var StyledList = styled_1.default(List_1.List)(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  overflow: visible;\n"], ["\n  overflow: visible;\n"])));
var StyledListItem = styled_1.default(ListItem_1.ListItem)(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  padding: 0;\n  margin-bottom: ", ";\n  border: none;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n"], ["\n  padding: 0;\n  margin-bottom: ", ";\n  border: none;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n"])), distance_1.distance.xlarge);
var AccordionTableCardHost = Object.assign((function (props) { return React.createElement(StyledList, __assign({}, props)); }), { inner: {
        get StyledList() { return StyledList; }
    } });
var AccordionTableCard = /** @class */ (function (_super) {
    __extends(AccordionTableCard, _super);
    function AccordionTableCard(props) {
        var _this = _super.call(this, props) || this;
        _this.renderItem = function (_a) {
            var item = _a.item, index = _a.index, open = _a.open, keys = _a.keys, closeLabel = _a.closeLabel, openLabel = _a.openLabel;
            var _b = _this.props, detailsRenderer = _b.detailsRenderer, theme = _b.theme;
            return (React.createElement(StyledListItem, { theme: theme, key: index },
                React.createElement(AccordionCard_1.AccordionCard, { openLabel: openLabel, closeLabel: closeLabel, theme: theme, header: _this.renderItemProps(item, keys, index), opened: open, onActionClick: function () { return _this.handleClick(index, item); } }, open && detailsRenderer && detailsRenderer({ data: item, index: index }))));
        };
        _this.state = {
            selectedIndexes: indexHelper_1.normalizeIndex(props.selectedIndex),
            controlled: props.selectedIndex !== undefined,
        };
        return _this;
    }
    AccordionTableCard.getDerivedStateFromProps = function (props, state) {
        var selectedIndex = props.selectedIndex;
        if (state.controlled && selectedIndex !== undefined) {
            return {
                selectedIndexes: indexHelper_1.normalizeIndex(props.selectedIndex),
            };
        }
        return state;
    };
    AccordionTableCard.prototype.handleClick = function (target, data) {
        var _a = this.props, onChange = _a.onChange, multiple = _a.multiple;
        var _b = this.state, controlled = _b.controlled, selectedIndexes = _b.selectedIndexes;
        var nextIndexes = indexHelper_1.toggleIndex(selectedIndexes, target, multiple);
        if (typeof onChange === 'function') {
            onChange({
                selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,
                previousIndex: multiple ? selectedIndexes : selectedIndexes[0] !== undefined ? selectedIndexes[0] : -1,
                data: data,
            });
        }
        if (!controlled) {
            this.setState({
                selectedIndexes: nextIndexes,
            });
        }
    };
    AccordionTableCard.prototype.getHeader = function (key) {
        var columns = this.props.columns;
        if (columns) {
            var column = columns[key];
            return typeof column === 'string' ? column : column.header;
        }
        return key;
    };
    AccordionTableCard.prototype.renderItemProps = function (item, keys, row) {
        var _this = this;
        return keys.map(function (key, index) { return _this.renderItemProp(key, item[key], index, row); });
    };
    AccordionTableCard.prototype.renderItemProp = function (key, propValue, index, row) {
        var _a = this.props.cellRenderer, cellRenderer = _a === void 0 ? TableShared_part_1.defaultCellRenderer : _a;
        var propKey = this.getHeader(key);
        return (React.createElement(PropContainer, { key: index },
            React.createElement(PropName, null, propKey),
            React.createElement(PropValue, null, cellRenderer({
                row: row,
                column: index,
                key: key,
                value: propValue,
                render: TableShared_part_1.defaultCellRenderer,
            }))));
    };
    AccordionTableCard.prototype.render = function () {
        var _this = this;
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, columns = _a.columns, placeholder = _a.placeholder, theme = _a.theme, _c = _a.cardRenderer, cardRenderer = _c === void 0 ? this.renderItem : _c, _d = _a.bodyRenderer, bodyRenderer = _d === void 0 ? TableCard_part_1.defaultBodyRenderer : _d, openLabel = _a.openLabel, closeLabel = _a.closeLabel, props = __rest(_a, ["data", "columns", "placeholder", "theme", "cardRenderer", "bodyRenderer", "openLabel", "closeLabel"]);
        var keys = Object.keys(columns || data[0] || {});
        var rows = data.length === 0
            ? placeholder
                ? [
                    React.createElement(StyledListItem, { theme: theme, key: 0 },
                        React.createElement(PlaceholderContainer, { theme: theme }, placeholder)),
                ]
                : []
            : data.map(function (item, index) { return cardRenderer({
                item: item,
                index: index,
                open: indexHelper_1.hasIndex(_this.state.selectedIndexes, index),
                keys: keys,
                openLabel: openLabel,
                closeLabel: closeLabel,
            }); });
        return bodyRenderer({
            rows: rows,
            mode: 'card',
            props: __assign({ theme: theme, borderless: true }, props),
            table: AccordionTableCardHost,
        });
    };
    AccordionTableCard.inner = {
        get StyledListItem() { return StyledListItem; },
        get AccordionCard() { return AccordionCard_1.AccordionCard; },
        get PropContainer() { return PropContainer; },
        get PropName() { return PropName; },
        get PropValue() { return PropValue; },
        get PlaceholderContainer() { return PlaceholderContainer; }
    };
    return AccordionTableCard;
}(React.Component));
exports.AccordionTableCard = AccordionTableCard;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWNjb3JkaW9uVGFibGVDYXJkLnBhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BY2NvcmRpb25UYWJsZS9BY2NvcmRpb25UYWJsZUNhcmQucGFydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkJBQStCO0FBQy9CLDZDQUF3QztBQUN4QyxxREFBOEU7QUFFOUUsOERBQWdFO0FBQ2hFLDBEQUE4RDtBQUM5RCxrREFBaUQ7QUFDakQsd0NBQXVDO0FBQ3ZDLGdDQUErQjtBQUMvQiwyQ0FBMEM7QUFDMUMsK0NBQWdEO0FBV2hELElBQU0sYUFBYSxHQUFHLGdCQUFNLENBQUMsR0FBRywrSUFBQyxxQkFDZCxFQUFlLHFEQUtqQyxLQUxrQixtQkFBUSxDQUFDLE1BQU0sQ0FLakMsQ0FBQztBQUNGLElBQU0sUUFBUSxHQUFHLGdCQUFNLENBQUMsR0FBRywrRUFBQyxNQUN4QixFQUFnQyxJQUNuQyxLQURHLHlCQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FDbkMsQ0FBQztBQUNGLElBQU0sU0FBUyxHQUFHLGdCQUFNLENBQUMsR0FBRywrRUFBQyxNQUN6QixFQUFrQyxJQUNyQyxLQURHLHlCQUFZLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FDckMsQ0FBQztBQUNGLElBQU0sb0JBQW9CLEdBQUcsZ0JBQU0sQ0FBQyxHQUFHLDhGQUFDLDJCQUV2QyxJQUFBLENBQUM7QUFDRixJQUFNLFVBQVUsR0FBRyxnQkFBTSxDQUFDLFdBQUksQ0FBQyw2RkFBQywwQkFFL0IsSUFBQSxDQUFDO0FBQ0YsSUFBTSxjQUFjLEdBQUcsZ0JBQU0sQ0FBQyxtQkFBUSxDQUFDLCtLQUFDLG9DQUVyQixFQUFlLHNFQU1qQyxLQU5rQixtQkFBUSxDQUFDLE1BQU0sQ0FNakMsQ0FBQztBQUlGLElB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YixLQUFLLENBQ1g7WUFDRCxLQUFLLEVBQUUsc0JBQXNCO1NBQ2hDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTSx3QkFBSyxHQUFHO1FBQ1gsSUFBSSxjQUFjLEtBQUssT0FBTyxjQUF1QyxDQUFDLENBQUMsQ0FBQztRQUN4RSxJQUFJLGFBQWEsS0FBSyxPQUFPLDZCQUFxQyxDQUFDLENBQUMsQ0FBQztRQUNyRSxJQUFJLGFBQWEsS0FBSyxPQUFPLGFBQXFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLElBQUksUUFBUSxLQUFLLE9BQU8sUUFBMkIsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxTQUFTLEtBQUssT0FBTyxTQUE2QixDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLG9CQUFvQixLQUFLLE9BQU8sb0JBQW1ELENBQUMsQ0FBQyxDQUFDO0tBQzdGLENBQUM7SUFDTix5QkFBQztDQUFBLEFBM0dELENBQTJDLEtBQUssQ0FBQyxTQUFTLEdBMkd6RDtBQTNHWSxnREFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uLy4uL3V0aWxzL3N0eWxlZCc7XG5pbXBvcnQgeyBub3JtYWxpemVJbmRleCwgdG9nZ2xlSW5kZXgsIGhhc0luZGV4IH0gZnJvbSAnLi9oZWxwZXJzL2luZGV4SGVscGVyJztcbmltcG9ydCB7IEFjY29yZGlvblRhYmxlUHJvcHMsIEFjY29yZGlvblRhYmxlQ2FyZFJlbmRlcmVyRXZlbnQgfSBmcm9tICcuL0FjY29yZGlvblRhYmxlLnR5cGVzLnBhcnQnO1xuaW1wb3J0IHsgZGVmYXVsdENlbGxSZW5kZXJlciB9IGZyb20gJy4uL1RhYmxlL1RhYmxlU2hhcmVkLnBhcnQnO1xuaW1wb3J0IHsgZGVmYXVsdEJvZHlSZW5kZXJlciB9IGZyb20gJy4uL1RhYmxlL1RhYmxlQ2FyZC5wYXJ0JztcbmltcG9ydCB7IEFjY29yZGlvbkNhcmQgfSBmcm9tICcuLi9BY2NvcmRpb25DYXJkJztcbmltcG9ydCB7IExpc3RJdGVtIH0gZnJvbSAnLi4vTGlzdEl0ZW0nO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gJy4uL0xpc3QnO1xuaW1wb3J0IHsgZGlzdGFuY2UgfSBmcm9tICcuLi8uLi9kaXN0YW5jZSc7XG5pbXBvcnQgeyBnZXRGb250U3R5bGUgfSBmcm9tICcuLi8uLi90ZXh0U3R5bGVzJztcbmV4cG9ydCBpbnRlcmZhY2UgQWNjb3JkaW9uVGFibGVDYXJkU3RhdGUge1xuICAgIC8qKlxuICAgICAqIEN1cnJlbnRseSBzZWxlY3RlZCByb3dzIGluZGljZXMuXG4gICAgICovXG4gICAgc2VsZWN0ZWRJbmRleGVzOiBBcnJheTxudW1iZXI+O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdGhlIGFjY29yZGlvbiB0YWJsZSBjb21wb25lbnQgaXMgY29udHJvbGxlZCBmcm9tIHRoZSBvdXRzaWRlIG9yIG5vdC5cbiAgICAgKi9cbiAgICBjb250cm9sbGVkOiBib29sZWFuO1xufVxuY29uc3QgUHJvcENvbnRhaW5lciA9IHN0eWxlZC5kaXYgYFxuICBtYXJnaW4tYm90dG9tOiAke2Rpc3RhbmNlLm1lZGl1bX07XG5cbiAgJjpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xuICB9XG5gO1xuY29uc3QgUHJvcE5hbWUgPSBzdHlsZWQuZGl2IGBcbiAgJHtnZXRGb250U3R5bGUoeyBzaXplOiAneFNtYWxsJyB9KX1cbmA7XG5jb25zdCBQcm9wVmFsdWUgPSBzdHlsZWQuZGl2IGBcbiAgJHtnZXRGb250U3R5bGUoeyB3ZWlnaHQ6ICdtZWRpdW0nIH0pfVxuYDtcbmNvbnN0IFBsYWNlaG9sZGVyQ29udGFpbmVyID0gc3R5bGVkLmRpdiBgXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbmA7XG5jb25zdCBTdHlsZWRMaXN0ID0gc3R5bGVkKExpc3QpIGBcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG5gO1xuY29uc3QgU3R5bGVkTGlzdEl0ZW0gPSBzdHlsZWQoTGlzdEl0ZW0pIGBcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luLWJvdHRvbTogJHtkaXN0YW5jZS54bGFyZ2V9O1xuICBib3JkZXI6IG5vbmU7XG5cbiAgJjpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xuICB9XG5gO1xuaW50ZXJmYWNlIEFjY29yZGlvblRhYmxlQ2FyZEhvc3RQcm9wcyB7XG4gICAgYm9yZGVybGVzczogYm9vbGVhbjtcbn1cbmNvbnN0IEFjY29yZGlvblRhYmxlQ2FyZEhvc3QgPSBPYmplY3QuYXNzaWduKCgocHJvcHMgPT4gPFN0eWxlZExpc3Qgey4uLnByb3BzfS8+KSBhcyBSZWFjdC5TRkM8QWNjb3JkaW9uVGFibGVDYXJkSG9zdFByb3BzPiksIHsgaW5uZXI6IHtcbiAgICAgICAgZ2V0IFN0eWxlZExpc3QoKSB7IHJldHVybiBTdHlsZWRMaXN0IGFzIHR5cGVvZiBTdHlsZWRMaXN0OyB9XG4gICAgfSB9KTtcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25UYWJsZUNhcmQ8VD4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8QWNjb3JkaW9uVGFibGVQcm9wczxUPiwgQWNjb3JkaW9uVGFibGVDYXJkU3RhdGU+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogQWNjb3JkaW9uVGFibGVQcm9wczxUPikge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzZWxlY3RlZEluZGV4ZXM6IG5vcm1hbGl6ZUluZGV4KHByb3BzLnNlbGVjdGVkSW5kZXgpLFxuICAgICAgICAgICAgY29udHJvbGxlZDogcHJvcHMuc2VsZWN0ZWRJbmRleCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzOiBBY2NvcmRpb25UYWJsZVByb3BzPGFueT4sIHN0YXRlOiBBY2NvcmRpb25UYWJsZUNhcmRTdGF0ZSkge1xuICAgICAgICBjb25zdCB7IHNlbGVjdGVkSW5kZXggfSA9IHByb3BzO1xuICAgICAgICBpZiAoc3RhdGUuY29udHJvbGxlZCAmJiBzZWxlY3RlZEluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleGVzOiBub3JtYWxpemVJbmRleChwcm9wcy5zZWxlY3RlZEluZGV4KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgICBwcml2YXRlIGhhbmRsZUNsaWNrKHRhcmdldDogbnVtYmVyLCBkYXRhOiBUKSB7XG4gICAgICAgIGNvbnN0IHsgb25DaGFuZ2UsIG11bHRpcGxlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7IGNvbnRyb2xsZWQsIHNlbGVjdGVkSW5kZXhlcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ZXMgPSB0b2dnbGVJbmRleChzZWxlY3RlZEluZGV4ZXMsIHRhcmdldCwgbXVsdGlwbGUpO1xuICAgICAgICBpZiAodHlwZW9mIG9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkNoYW5nZSh7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogbXVsdGlwbGUgPyBuZXh0SW5kZXhlcyA6IG5leHRJbmRleGVzWzBdICE9PSB1bmRlZmluZWQgPyBuZXh0SW5kZXhlc1swXSA6IC0xLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzSW5kZXg6IG11bHRpcGxlID8gc2VsZWN0ZWRJbmRleGVzIDogc2VsZWN0ZWRJbmRleGVzWzBdICE9PSB1bmRlZmluZWQgPyBzZWxlY3RlZEluZGV4ZXNbMF0gOiAtMSxcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb250cm9sbGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEluZGV4ZXM6IG5leHRJbmRleGVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSByZW5kZXJJdGVtID0gKHsgaXRlbSwgaW5kZXgsIG9wZW4sIGtleXMsIGNsb3NlTGFiZWwsIG9wZW5MYWJlbCB9OiBBY2NvcmRpb25UYWJsZUNhcmRSZW5kZXJlckV2ZW50PFQ+KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZGV0YWlsc1JlbmRlcmVyLCB0aGVtZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuICg8U3R5bGVkTGlzdEl0ZW0gdGhlbWU9e3RoZW1lfSBrZXk9e2luZGV4fT5cbiAgICAgICAgPEFjY29yZGlvbkNhcmQgb3BlbkxhYmVsPXtvcGVuTGFiZWx9IGNsb3NlTGFiZWw9e2Nsb3NlTGFiZWx9IHRoZW1lPXt0aGVtZX0gaGVhZGVyPXt0aGlzLnJlbmRlckl0ZW1Qcm9wcyhpdGVtLCBrZXlzLCBpbmRleCl9IG9wZW5lZD17b3Blbn0gb25BY3Rpb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVDbGljayhpbmRleCwgaXRlbSl9PlxuICAgICAgICAgIHtvcGVuICYmIGRldGFpbHNSZW5kZXJlciAmJiBkZXRhaWxzUmVuZGVyZXIoeyBkYXRhOiBpdGVtLCBpbmRleCB9KX1cbiAgICAgICAgPC9BY2NvcmRpb25DYXJkPlxuICAgICAgPC9TdHlsZWRMaXN0SXRlbT4pO1xuICAgIH07XG4gICAgcHJpdmF0ZSBnZXRIZWFkZXIoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgeyBjb2x1bW5zIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoY29sdW1ucykge1xuICAgICAgICAgICAgY29uc3QgY29sdW1uID0gY29sdW1uc1trZXldO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBjb2x1bW4gPT09ICdzdHJpbmcnID8gY29sdW1uIDogY29sdW1uLmhlYWRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICBwcml2YXRlIHJlbmRlckl0ZW1Qcm9wcyhpdGVtOiBULCBrZXlzOiBBcnJheTxzdHJpbmc+LCByb3c6IG51bWJlcikge1xuICAgICAgICByZXR1cm4ga2V5cy5tYXAoKGtleSwgaW5kZXgpID0+IHRoaXMucmVuZGVySXRlbVByb3Aoa2V5LCBpdGVtW2tleV0sIGluZGV4LCByb3cpKTtcbiAgICB9XG4gICAgcHJpdmF0ZSByZW5kZXJJdGVtUHJvcChrZXk6IHN0cmluZywgcHJvcFZhbHVlOiBhbnksIGluZGV4OiBudW1iZXIsIHJvdzogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgY2VsbFJlbmRlcmVyID0gZGVmYXVsdENlbGxSZW5kZXJlciB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgcHJvcEtleSA9IHRoaXMuZ2V0SGVhZGVyKGtleSk7XG4gICAgICAgIHJldHVybiAoPFByb3BDb250YWluZXIga2V5PXtpbmRleH0+XG4gICAgICAgIDxQcm9wTmFtZT57cHJvcEtleX08L1Byb3BOYW1lPlxuICAgICAgICA8UHJvcFZhbHVlPlxuICAgICAgICAgIHtjZWxsUmVuZGVyZXIoe1xuICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgY29sdW1uOiBpbmRleCxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wVmFsdWUsXG4gICAgICAgICAgICByZW5kZXI6IGRlZmF1bHRDZWxsUmVuZGVyZXIsXG4gICAgICAgIH0pfVxuICAgICAgICA8L1Byb3BWYWx1ZT5cbiAgICAgIDwvUHJvcENvbnRhaW5lcj4pO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSA9IFtdLCBjb2x1bW5zLCBwbGFjZWhvbGRlciwgdGhlbWUsIGNhcmRSZW5kZXJlciA9IHRoaXMucmVuZGVySXRlbSwgYm9keVJlbmRlcmVyID0gZGVmYXVsdEJvZHlSZW5kZXJlciwgb3BlbkxhYmVsLCBjbG9zZUxhYmVsLCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGNvbHVtbnMgfHwgZGF0YVswXSB8fCB7fSk7XG4gICAgICAgIGNvbnN0IHJvd3MgPSBkYXRhLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgPyBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTGlzdEl0ZW0gdGhlbWU9e3RoZW1lfSBrZXk9ezB9PlxuICAgICAgICAgICAgICAgIDxQbGFjZWhvbGRlckNvbnRhaW5lciB0aGVtZT17dGhlbWV9PntwbGFjZWhvbGRlcn08L1BsYWNlaG9sZGVyQ29udGFpbmVyPlxuICAgICAgICAgICAgICA8L1N0eWxlZExpc3RJdGVtPixcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgOiBbXVxuICAgICAgICAgICAgOiBkYXRhLm1hcCgoaXRlbSwgaW5kZXgpID0+IGNhcmRSZW5kZXJlcih7XG4gICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICBvcGVuOiBoYXNJbmRleCh0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXhlcywgaW5kZXgpLFxuICAgICAgICAgICAgICAgIGtleXMsXG4gICAgICAgICAgICAgICAgb3BlbkxhYmVsLFxuICAgICAgICAgICAgICAgIGNsb3NlTGFiZWwsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBib2R5UmVuZGVyZXIoe1xuICAgICAgICAgICAgcm93cyxcbiAgICAgICAgICAgIG1vZGU6ICdjYXJkJyxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgdGhlbWUsXG4gICAgICAgICAgICAgICAgYm9yZGVybGVzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWJsZTogQWNjb3JkaW9uVGFibGVDYXJkSG9zdCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBpbm5lciA9IHtcbiAgICAgICAgZ2V0IFN0eWxlZExpc3RJdGVtKCkgeyByZXR1cm4gU3R5bGVkTGlzdEl0ZW0gYXMgdHlwZW9mIFN0eWxlZExpc3RJdGVtOyB9LFxuICAgICAgICBnZXQgQWNjb3JkaW9uQ2FyZCgpIHsgcmV0dXJuIEFjY29yZGlvbkNhcmQgYXMgdHlwZW9mIEFjY29yZGlvbkNhcmQ7IH0sXG4gICAgICAgIGdldCBQcm9wQ29udGFpbmVyKCkgeyByZXR1cm4gUHJvcENvbnRhaW5lciBhcyB0eXBlb2YgUHJvcENvbnRhaW5lcjsgfSxcbiAgICAgICAgZ2V0IFByb3BOYW1lKCkgeyByZXR1cm4gUHJvcE5hbWUgYXMgdHlwZW9mIFByb3BOYW1lOyB9LFxuICAgICAgICBnZXQgUHJvcFZhbHVlKCkgeyByZXR1cm4gUHJvcFZhbHVlIGFzIHR5cGVvZiBQcm9wVmFsdWU7IH0sXG4gICAgICAgIGdldCBQbGFjZWhvbGRlckNvbnRhaW5lcigpIHsgcmV0dXJuIFBsYWNlaG9sZGVyQ29udGFpbmVyIGFzIHR5cGVvZiBQbGFjZWhvbGRlckNvbnRhaW5lcjsgfVxuICAgIH07XG59XG4iXX0=