"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var styled_1 = require("../../utils/styled");
var TextField_1 = require("../TextField");
var withFormContext_1 = require("../../hoc/withFormContext");
var InteractiveList_1 = require("../InteractiveList");
var AutocompleteWrapper = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  position: relative;\n  width: 100%;\n"], ["\n  position: relative;\n  width: 100%;\n"])));
var StyledInteractiveList = styled_1.default(InteractiveList_1.InteractiveList)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  position: static;\n"], ["\n  position: static;\n"])));
var StyledAutosuggestWrapper = styled_1.default.ul(styled_1.themed(function (_a) {
    var direction = _a.direction, _b = _a.theme, ui1 = _b.ui1, ui4 = _b.ui4;
    return styled_1.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      list-style: none;\n      width: 100%;\n      box-sizing: border-box;\n      box-shadow: none;\n      margin: 0;\n      padding: 0;\n      background: ", ";\n      border: 1px solid ", ";\n      ", ";\n      max-height: 50vh;\n      position: absolute;\n      top: ", ";\n      transform: translateY(", "%);\n      overflow-y: auto;\n      z-index: 100;\n    "], ["\n      list-style: none;\n      width: 100%;\n      box-sizing: border-box;\n      box-shadow: none;\n      margin: 0;\n      padding: 0;\n      background: ", ";\n      border: 1px solid ", ";\n      ",
        ";\n      max-height: 50vh;\n      position: absolute;\n      top: ", ";\n      transform: translateY(", "%);\n      overflow-y: auto;\n      z-index: 100;\n    "])), ui1, ui4, direction === InteractiveList_1.InteractiveListDirection.normal
        ? 'border-top-color: transparent'
        : 'border-bottom-color: transparent', direction === InteractiveList_1.InteractiveListDirection.normal ? '100%' : '0px', direction === InteractiveList_1.InteractiveListDirection.normal ? 0 : -100);
}));
function defaultSuggestionRenderer(suggestion) {
    var value = String(suggestion);
    return {
        content: value,
        key: value,
    };
}
function defaultInputRenderer(props) {
    return React.createElement(TextField_1.TextField, __assign({}, props));
}
var NotOpenComponent = React.createElement(React.Fragment, null);
var AutosuggestWrapper = Object.assign((function (_a) {
    var _0 = _a.border, open = _a.open, props = __rest(_a, ["border", "open"]);
    return open ? React.createElement(StyledAutosuggestWrapper, __assign({}, props)) : NotOpenComponent;
}), { inner: {
        get StyledAutosuggestWrapper() { return StyledAutosuggestWrapper; }
    } });
AutosuggestWrapper.displayName = 'AutosuggestWrapper';
var AutocompleteInt = /** @class */ (function (_super) {
    __extends(AutocompleteInt, _super);
    function AutocompleteInt(props) {
        var _this = _super.call(this, props) || this;
        _this.handleKeyDown = function (e) {
            var keyCode = e.keyCode;
            switch (keyCode) {
                case 40 /* down */:
                case 38 /* up */:
                    e.preventDefault();
                    var open_1 = _this.state.open;
                    open_1 &&
                        _this.setState(function () { return ({
                            listFocus: true,
                            focus: false,
                        }); });
                    break;
            }
        };
        _this.handleListChange = function (e) {
            var _a = _this.props.suggestions, suggestions = _a === void 0 ? [] : _a;
            var index = e.value[0];
            var suggestion = suggestions[index];
            _this.handle(suggestion);
        };
        _this.show = function () {
            _this.setState({ open: true });
        };
        _this.hide = function () {
            _this.setState(function () { return ({ open: false }); }, _this.props.onBlur);
        };
        _this.handleFocus = function () {
            var onFocus = _this.props.onFocus;
            cancelAnimationFrame(_this.delayedBlur);
            _this.show();
            _this.setState(function () { return ({ focus: true, listFocus: false }); });
            typeof onFocus === 'function' && onFocus();
        };
        _this.handleBlur = function () {
            cancelAnimationFrame(_this.delayedBlur);
            _this.delayedBlur = requestAnimationFrame(function () {
                _this.setState(function () { return ({
                    focus: false,
                    listFocus: false,
                }); }, _this.hide);
            });
        };
        _this.changed = function (e) {
            _this.updateValue(e.value);
        };
        _this.setNode = function (node) {
            _this._element = node;
            var inputRef = _this.props.inputRef;
            typeof inputRef === 'function' && inputRef(node);
        };
        _this.state = {
            controlled: props.value !== undefined,
            value: props.value || props.defaultValue || '',
            open: false,
            listFocus: false,
            focus: false,
            error: props.error,
        };
        return _this;
    }
    AutocompleteInt.prototype.UNSAFE_componentWillReceiveProps = function (_a) {
        var _b = _a.value, value = _b === void 0 ? '' : _b, error = _a.error;
        if (this.state.controlled) {
            this.setState({ value: value });
        }
        this.setState({ error: error });
    };
    AutocompleteInt.prototype.componentDidMount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.subscribe(this);
        }
    };
    AutocompleteInt.prototype.componentWillUnmount = function () {
        var form = this.props.form;
        var controlled = this.state.controlled;
        if (!controlled && form) {
            form.unsubscribe(this);
        }
    };
    AutocompleteInt.prototype.updateValue = function (value, suggestionSelected) {
        if (suggestionSelected === void 0) { suggestionSelected = false; }
        var _a = this.props, onChange = _a.onChange, _b = _a.name, name = _b === void 0 ? '' : _b, form = _a.form;
        if (!this.state.controlled) {
            form ? form.change({ name: name, value: value }) : this.setState({ value: value });
        }
        suggestionSelected ? this.hide() : this.show();
        typeof onChange === 'function' && onChange({ value: value });
    };
    AutocompleteInt.prototype.handle = function (suggestion) {
        var _a = this.props, getSuggestionValue = _a.getSuggestionValue, onSuggestionSelected = _a.onSuggestionSelected;
        if (typeof getSuggestionValue === 'function') {
            var value = getSuggestionValue(suggestion);
            this.updateValue(value, true);
        }
        else if (typeof suggestion === 'string') {
            this.updateValue(suggestion, true);
        }
        typeof onSuggestionSelected === 'function' && onSuggestionSelected({ value: suggestion });
    };
    AutocompleteInt.prototype.render = function () {
        var _a = this.props, _b = _a.suggestions, suggestions = _b === void 0 ? [] : _b, noSuggestionsMessage = _a.noSuggestionsMessage, _c = _a.renderSuggestion, renderSuggestion = _c === void 0 ? defaultSuggestionRenderer : _c, _d = _a.inputRenderer, inputRenderer = _d === void 0 ? defaultInputRenderer : _d, _1 = _a.getSuggestionValue, _2 = _a.onChange, _3 = _a.children, _4 = _a.onBlur, _5 = _a.onFocus, _6 = _a.defaultValue, _7 = _a.inputRef, _8 = _a.onSuggestionSelected, info = _a.info, props = __rest(_a, ["suggestions", "noSuggestionsMessage", "renderSuggestion", "inputRenderer", "getSuggestionValue", "onChange", "children", "onBlur", "onFocus", "defaultValue", "inputRef", "onSuggestionSelected", "info"]);
        var _e = this.state, open = _e.open, listFocus = _e.listFocus, value = _e.value, error = _e.error;
        var isListOpen = open && (!!suggestions.length || !!noSuggestionsMessage);
        return (React.createElement(AutocompleteWrapper, { onKeyDown: this.handleKeyDown, onFocus: this.handleFocus, onBlur: this.handleBlur },
            inputRenderer(__assign({}, props, { clearable: true, info: isListOpen ? undefined : info, onChange: this.changed, inputRef: this.setNode, value: value,
                error: error })),
            React.createElement(StyledInteractiveList, { data: suggestions.length ? suggestions.map(renderSuggestion) : [{ key: 'default', content: noSuggestionsMessage }], disabled: suggestions.length === 0, customWrapper: AutosuggestWrapper, focus: listFocus, onChange: this.handleListChange, autoPosition: true, open: isListOpen }),
            isListOpen && info && React.createElement("div", null, info)));
    };
    AutocompleteInt.inner = {
        get AutocompleteWrapper() { return AutocompleteWrapper; },
        get StyledInteractiveList() { return StyledInteractiveList; }
    };
    return AutocompleteInt;
}(React.Component));
/**
 * Extends a TextField with autocompletion capabilities.
 */
exports.Autocomplete = withFormContext_1.withFormContext(AutocompleteInt);
exports.Autocomplete.displayName = 'Autocomplete';
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=data:application/json;base64,