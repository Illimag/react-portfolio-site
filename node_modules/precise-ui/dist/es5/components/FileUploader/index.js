"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var eventManager_1 = require("../../utils/eventManager");
var Dropzone_1 = require("../Dropzone");
var FileUploaderDetails_1 = require("../FileUploaderDetails");
var helpers_1 = require("./helpers");
var UploadData = /** @class */ (function () {
    function UploadData(events) {
        var _this = this;
        this.filesChanged = function (_a) {
            var files = _a.files;
            var filteredFiles = files.filter(function (item) { return item.uploaderId === _this.id; });
            if (filteredFiles.length > 0) {
                var ids = filteredFiles.map(function (item) { return item.fileId; });
                var changed = false;
                for (var _i = 0, _b = _this.files; _i < _b.length; _i++) {
                    var file = _b[_i];
                    var index = ids.indexOf(file.id);
                    if (index !== -1) {
                        var updatedFile = filteredFiles[index];
                        var updatedStatus = helpers_1.getSimpleStatus(updatedFile);
                        var hasChanged = updatedFile.data !== file.data || updatedFile.progress !== file.progress || file.status !== updatedStatus;
                        if (hasChanged) {
                            changed = true;
                            file.data = updatedFile.data;
                            file.progress = updatedFile.progress;
                            file.status = updatedStatus;
                        }
                    }
                }
                if (changed) {
                    _this.emit('change');
                    if (_this.ready) {
                        _this.emit('ready');
                    }
                }
            }
        };
        this.id = helpers_1.generateId();
        this.events = events || eventManager_1.eventManagers[0];
        this.files = [];
        this.notifications = [];
    }
    Object.defineProperty(UploadData.prototype, "completedFiles", {
        get: function () {
            return this.files.filter(function (m) { return m.status === 'complete'; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadData.prototype, "ready", {
        get: function () {
            return this.files.reduce(function (prev, curr) { return prev && (curr.status === 'complete' || curr.status === 'canceled'); }, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadData.prototype, "total", {
        get: function () {
            return this.files.filter(function (file) { return file.status !== 'canceled'; }).length;
        },
        enumerable: true,
        configurable: true
    });
    UploadData.prototype.commit = function (cb) {
        var _this = this;
        var handler = function () { return cb(_this.completedFiles); };
        if (this.ready) {
            handler();
        }
        else {
            this.once('ready', handler);
        }
    };
    UploadData.prototype.once = function (type, cb) {
        var _this = this;
        var handler = function () {
            _this.off(type, handler);
            cb();
        };
        this.on(type, handler);
    };
    UploadData.prototype.on = function (type, cb) {
        if (this.notifications.length === 0) {
            this.connect();
        }
        this.notifications.push({ type: type, cb: cb });
    };
    UploadData.prototype.off = function (type, cb) {
        for (var i = this.notifications.length; i--;) {
            var notification = this.notifications[i];
            if (notification.type === type && notification.cb === cb) {
                this.notifications.splice(i, 1);
            }
        }
        if (this.notifications.length === 0) {
            this.disconnect();
        }
    };
    UploadData.prototype.connect = function () {
        var em = this.events;
        em.on(FileUploaderDetails_1.FileUploadActions.uploadProgress, this.filesChanged);
        em.on(FileUploaderDetails_1.FileUploadActions.uploadFailure, this.filesChanged);
        em.on(FileUploaderDetails_1.FileUploadActions.uploadSuccess, this.filesChanged);
    };
    UploadData.prototype.disconnect = function () {
        var em = this.events;
        em.off(FileUploaderDetails_1.FileUploadActions.uploadProgress, this.filesChanged);
        em.off(FileUploaderDetails_1.FileUploadActions.uploadFailure, this.filesChanged);
        em.off(FileUploaderDetails_1.FileUploadActions.uploadSuccess, this.filesChanged);
        em.emit(FileUploaderDetails_1.FileUploadActions.clearUploads, this.id);
    };
    UploadData.prototype.emit = function (type) {
        for (var _i = 0, _a = this.notifications; _i < _a.length; _i++) {
            var notification = _a[_i];
            if (notification.type === type) {
                notification.cb();
            }
        }
    };
    UploadData.prototype.push = function (files) {
        /**
         * TODO:
         * Update `FileSelect` component to assign generated id
         * to a file to enable multiple selection of the same file
         */
        var names = this.files.map(function (item) { return (item.status !== 'canceled' ? item.name : ''); });
        var newUploadFiles = [];
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
            var file = files_1[_i];
            if (names.indexOf(file.name) === -1) {
                var id = helpers_1.generateId();
                var added = new Date();
                var data = {};
                newUploadFiles.push({
                    name: file.name,
                    fileId: id,
                    content: file,
                    type: file.type,
                    uploaderId: this.id,
                    timestamp: added,
                    data: data,
                });
                this.files.push({
                    id: id,
                    added: added,
                    status: 'new',
                    data: data,
                    name: file.name,
                    progress: 0,
                    type: file.type,
                });
            }
        }
        if (newUploadFiles.length) {
            this.emit('change');
            this.events.emit(FileUploaderDetails_1.FileUploadActions.startUpload, { files: newUploadFiles });
        }
    };
    return UploadData;
}());
exports.UploadData = UploadData;
/**
 * The file uploader component that passes selected files to global uploader. Should be used with `FileUploaderDetails` component.
 */
var FileUploader = /** @class */ (function (_super) {
    __extends(FileUploader, _super);
    function FileUploader(props) {
        var _this = _super.call(this, props) || this;
        _this.emitChange = function () {
            var onChange = _this.props.onChange;
            if (typeof onChange === 'function') {
                var _a = _this.data, files = _a.files, ready = _a.ready, total = _a.total;
                onChange({
                    files: files.map(function (file) { return ({
                        data: file.data,
                        id: file.id,
                        name: file.name,
                        progress: file.progress,
                        state: file.status,
                        type: file.type,
                    }); }),
                    ready: ready,
                    total: total,
                });
            }
        };
        _this.filesAdded = function (e) {
            _this.data.push(e.value);
        };
        _this.fileSelect = function (e) {
            var multiple = _this.props.multiple;
            var _a = _this.data, files = _a.files, events = _a.events;
            var notCanceledFiles = files.filter(function (file) { return file.status !== 'canceled'; });
            if (!multiple && notCanceledFiles.length === 1) {
                var completedFiles = notCanceledFiles.filter(function (file) { return file.status === 'complete'; });
                if (completedFiles.length === 0) {
                    e.preventDefault();
                    events.emit(FileUploaderDetails_1.FileUploadActions.showUploads, {});
                }
            }
        };
        var _a = props.data, data = _a === void 0 ? new UploadData() : _a;
        _this.data = data;
        return _this;
    }
    FileUploader.prototype.componentDidMount = function () {
        this.data.on('change', this.emitChange);
    };
    FileUploader.prototype.componentWillUnmount = function () {
        this.data.off('change', this.emitChange);
    };
    FileUploader.prototype.render = function () {
        var _a = this.props, multiple = _a.multiple, message = _a.message, children = _a.children, showFileList = _a.showFileList;
        var additionalProps = !showFileList ? { value: [] } : {};
        return (React.createElement(Dropzone_1.Dropzone, __assign({ multiple: multiple, onChange: this.filesAdded, onOpen: this.fileSelect, message: message }, additionalProps), children));
    };
    FileUploader.inner = {
        get Dropzone() { return Dropzone_1.Dropzone; }
    };
    return FileUploader;
}(React.Component));
exports.FileUploader = FileUploader;
//# sourceMappingURL=data:application/json;base64,