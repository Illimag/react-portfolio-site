"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenSizeList = stringLiteralArray(['small', 'medium', 'large', 'xLarge', 'max']);
// Helper type functions
function stringLiteralArray(val) {
    return val;
}
//# sourceMappingURL=data:application/json;base64,