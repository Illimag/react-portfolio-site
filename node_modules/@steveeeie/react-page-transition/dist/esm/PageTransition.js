var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { memo } from 'react';
import { Transition, TransitionGroup } from 'react-transition-group';
import { animations } from './animations';
import { presets } from './presets';
import { PageTransitionGroup } from './PageTransitionGroup';
import { PageTransitionWrapper } from './PageTransitionWrapper';
function PageTransition(_a) {
    var children = _a.children, enterAnimationOverride = _a.enterAnimation, exitAnimationOverride = _a.exitAnimation, preset = _a.preset, transitionKey = _a.transitionKey, rest = __rest(_a, ["children", "enterAnimation", "exitAnimation", "preset", "transitionKey"]);
    var selectEnterAnimation = function () {
        if (enterAnimationOverride) {
            if (typeof enterAnimationOverride === 'string') {
                return animations[enterAnimationOverride];
            }
            return __assign(__assign({}, animations[enterAnimationOverride.name]), { delay: enterAnimationOverride.delay, onTop: enterAnimationOverride.onTop });
        }
        if (preset) {
            return __assign(__assign({}, animations[presets[preset].enter.name]), { delay: presets[preset].enter.delay, onTop: presets[preset].enter.onTop });
        }
        return 'rotateSlideIn';
    };
    var selectExitAnimation = function () {
        if (exitAnimationOverride) {
            if (typeof exitAnimationOverride === 'string') {
                return animations[exitAnimationOverride];
            }
            return __assign(__assign({}, animations[exitAnimationOverride.name]), { delay: exitAnimationOverride.delay, onTop: exitAnimationOverride.onTop });
        }
        if (preset) {
            return __assign(__assign({}, animations[presets[preset].exit.name]), { delay: presets[preset].exit.delay, onTop: presets[preset].exit.onTop });
        }
        return 'rotateSlideIn';
    };
    var enterAnimation = selectEnterAnimation();
    var exitAnimation = selectExitAnimation();
    var timeout = Math.max(enterAnimation.duration, exitAnimation.duration);
    return (React.createElement(PageTransitionGroup, __assign({}, rest),
        React.createElement(TransitionGroup, { component: null },
            React.createElement(Transition, { key: transitionKey, timeout: timeout }, function (state) { return (React.createElement(PageTransitionWrapper, { enterAnimation: enterAnimation, exitAnimation: exitAnimation, state: state }, children)); }))));
}
export default memo(PageTransition);
