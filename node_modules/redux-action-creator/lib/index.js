'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.actionCreator = actionCreator;
exports.asyncActionCreator = asyncActionCreator;
exports.asyncRoute = asyncRoute;
exports.createTypes = createTypes;
exports.createRouteTypes = createRouteTypes;
exports.async = async;

var _normalizr = require('normalizr');

var _detectNode = require('detect-node');

var _detectNode2 = _interopRequireDefault(_detectNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var SUCCESS = 'SUCCESS';
var FAIL = 'FAIL';

function filterPayload(props, payload) {
  return props.reduce(function (filteredPayload, prop) {
    filteredPayload[prop] = payload[prop];
    return filteredPayload;
  }, {});
}

function actionCreator(type) {
  for (var _len = arguments.length, props = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    props[_key - 1] = arguments[_key];
  }

  return function (payload) {
    return { type: type, payload: filterPayload(props, payload) };
  };
}

function executeAsyncAction(type, payload, helpers, config, dispatchExtraConfigProperies, dispatch, args) {
  if (typeof config === 'function') config = { action: config }; // eslint-disable-line no-param-reassign

  var _config = config,
      client = _config.client,
      server = _config.server,
      schema = _config.schema,
      rest = _objectWithoutProperties(_config, ['client', 'server', 'schema']);

  var action = config.action || (_detectNode2.default ? server : client);
  var extra = dispatchExtraConfigProperies ? rest : {};
  return action.apply(undefined, [payload, _extends({}, helpers, { dispatch: dispatch })].concat(_toConsumableArray(args))).then(function (response) {
    return dispatch(_extends({
      type: type + '_' + SUCCESS,
      payload: payload,
      response: schema ? (0, _normalizr.normalize)(response, schema) : response
    }, extra));
  }, function (error) {
    return dispatch(_extends({ type: type + '_' + FAIL, payload: payload, error: error }, extra));
  });
}

function asyncActionCreator(type) {
  for (var _len2 = arguments.length, propsAndConfig = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    propsAndConfig[_key2 - 1] = arguments[_key2];
  }

  var config = propsAndConfig.pop();

  var _ref = typeof config === 'function' ? {} : config,
      client = _ref.client,
      server = _ref.server,
      schema = _ref.schema,
      rest = _objectWithoutProperties(_ref, ['client', 'server', 'schema']);

  return function (payload, helpers) {
    return function (dispatch) {
      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var filteredPayload = filterPayload(propsAndConfig, payload);
      dispatch(_extends({ type: type, payload: filteredPayload }, rest));
      return executeAsyncAction(type, filteredPayload, helpers, config, true, dispatch, args);
    };
  };
}

function asyncRoute(type, path, config, helpers) {
  var client = config.client,
      server = config.server,
      schema = config.schema,
      rest = _objectWithoutProperties(config, ['client', 'server', 'schema']);

  return _defineProperty({}, type, _extends({
    path: path,
    thunk: function thunk(dispatch, getState) {
      var state = getState();
      var payload = state.location.payload;

      return executeAsyncAction(type, payload, helpers, config, false, dispatch, [getState]);
    }
  }, rest));
}

function createTypes(types, namespace) {
  return types.reduce(function (typeMap, type) {
    typeMap[type] = namespace ? namespace + '_' + type : type;
    return typeMap;
  }, {});
}

function createRouteTypes(types) {
  return createTypes(types, 'ROUTES');
}

function async(type) {
  return [type, type + '_' + SUCCESS, type + '_' + FAIL];
}