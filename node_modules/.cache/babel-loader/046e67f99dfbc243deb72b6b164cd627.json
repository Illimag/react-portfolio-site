{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { keyframes } from '../../utils/styled';\nimport { distance } from '../../distance';\nimport { remCalc } from '../../utils/remCalc';\nimport { Notification } from '../Notification';\nconst animationDuration = 200; // ms\n\nconst offsetDistance = 32;\n\nfunction sideMultiplier(position) {\n  switch (position) {\n    case 'bottom-left':\n    case 'top-left':\n      return -1;\n\n    case 'top-right':\n    case 'bottom-right':\n      return 1;\n\n    default:\n      return 0;\n  }\n}\n\nconst InAnimation = startOffset => keyframes`\n  from {\n    opacity: 0;\n    transform: translate(${startOffset}px);\n  }\n  to {\n    opacity: 1;\n    transform: translate(0px);\n  }\n`;\n\nconst OutAnimation = endOffset => keyframes`\n  from {\n    opacity: 1;\n    transform: translate(0px);\n  }\n  to {\n    opacity: 0;\n    transform: translate(${endOffset}px);\n  }\n`;\n\nconst StyledNotification = styled(Notification)`\n  opacity: 0;\n  animation: ${props => props.closing ? OutAnimation(sideMultiplier(props.position) * offsetDistance) : InAnimation(sideMultiplier(props.position) * offsetDistance)}\n    ${animationDuration / 1000}s ease-in-out forwards;\n`;\nexport class ToastNotification extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onCloseHandler = () => {\n      this.close();\n      return false;\n    };\n\n    this.close = () => {\n      const {\n        onClose\n      } = this.props;\n      this.setState({\n        closing: true\n      }, () => {\n        this.closeId = setTimeout(() => {\n          if (typeof onClose === 'function') {\n            onClose();\n          }\n        }, animationDuration);\n      });\n    };\n\n    this.state = {\n      closing: false\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    const {\n      autoClose\n    } = this.props;\n\n    if (autoClose) {\n      this.autoCloseId = setTimeout(this.close, autoClose);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.closeId) {\n      clearTimeout(this.closeId);\n    }\n\n    if (this.autoCloseId) {\n      clearTimeout(this.autoCloseId);\n    }\n  }\n\n  render() {\n    const {\n      closing\n    } = this.state;\n\n    const _a = this.props,\n          {\n      autoClose: _0,\n      events: _1,\n      id: _2,\n      onClose: _4,\n      position\n    } = _a,\n          other = __rest(_a, [\"autoClose\", \"events\", \"id\", \"onClose\", \"position\"]);\n\n    const toastTheme = {\n      notificationPadding: `${distance.small} ${distance.small} ${distance.medium}`,\n      notificationBorderWidth: `0 0 0 5px`,\n      notificationTextFontSize: remCalc('12px'),\n      notificationTextLineHeight: `14px`,\n      notificationIconMarginRight: distance.small\n    };\n    return React.createElement(StyledNotification, Object.assign({\n      position: position,\n      closing: closing,\n      theme: toastTheme,\n      onClose: this.onCloseHandler\n    }, other));\n  }\n\n}\nToastNotification.inner = {\n  get StyledNotification() {\n    return StyledNotification;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Notifications/ToastNotification.part.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { keyframes } from '../../utils/styled';\nimport { distance } from '../../distance';\nimport { remCalc } from '../../utils/remCalc';\nimport { Notification, NotificationProps } from '../Notification';\nimport { NotificationOption, NotificationsPosition } from './types';\nexport type ToastNotificationProps = NotificationOption & NotificationProps;\nexport interface ToastNotificationState {\n    closing: boolean;\n}\nconst animationDuration = 200; // ms\nconst offsetDistance = 32;\nfunction sideMultiplier(position?: NotificationsPosition) {\n    switch (position) {\n        case 'bottom-left':\n        case 'top-left':\n            return -1;\n        case 'top-right':\n        case 'bottom-right':\n            return 1;\n        default:\n            return 0;\n    }\n}\nconst InAnimation = (startOffset: number) => keyframes `\n  from {\n    opacity: 0;\n    transform: translate(${startOffset}px);\n  }\n  to {\n    opacity: 1;\n    transform: translate(0px);\n  }\n`;\nconst OutAnimation = (endOffset: number) => keyframes `\n  from {\n    opacity: 1;\n    transform: translate(0px);\n  }\n  to {\n    opacity: 0;\n    transform: translate(${endOffset}px);\n  }\n`;\ninterface StyledNotificationProps {\n    closing: boolean;\n    position?: NotificationsPosition;\n}\nconst StyledNotification = styled(Notification)<StyledNotificationProps> `\n  opacity: 0;\n  animation: ${props => props.closing\n    ? OutAnimation(sideMultiplier(props.position) * offsetDistance)\n    : InAnimation(sideMultiplier(props.position) * offsetDistance)}\n    ${animationDuration / 1000}s ease-in-out forwards;\n`;\nexport class ToastNotification extends React.Component<ToastNotificationProps, ToastNotificationState> {\n    private autoCloseId: any;\n    private closeId: any;\n    constructor(props: ToastNotificationProps) {\n        super(props);\n        this.state = {\n            closing: false,\n        };\n    }\n    UNSAFE_componentWillMount() {\n        const { autoClose } = this.props;\n        if (autoClose) {\n            this.autoCloseId = setTimeout(this.close, autoClose);\n        }\n    }\n    componentWillUnmount() {\n        if (this.closeId) {\n            clearTimeout(this.closeId);\n        }\n        if (this.autoCloseId) {\n            clearTimeout(this.autoCloseId);\n        }\n    }\n    private onCloseHandler = () => {\n        this.close();\n        return false;\n    };\n    private close = () => {\n        const { onClose } = this.props;\n        this.setState({ closing: true }, () => {\n            this.closeId = setTimeout(() => {\n                if (typeof onClose === 'function') {\n                    onClose();\n                }\n            }, animationDuration);\n        });\n    };\n    render() {\n        const { closing } = this.state;\n        const { autoClose: _0, events: _1, id: _2, onClose: _4, position, ...other } = this.props;\n        const toastTheme = {\n            notificationPadding: `${distance.small} ${distance.small} ${distance.medium}`,\n            notificationBorderWidth: `0 0 0 5px`,\n            notificationTextFontSize: remCalc('12px'),\n            notificationTextLineHeight: `14px`,\n            notificationIconMarginRight: distance.small,\n        };\n        return (<StyledNotification position={position} closing={closing} theme={toastTheme} onClose={this.onCloseHandler} {...other}/>);\n    }\n    static inner = {\n        get StyledNotification() { return StyledNotification as typeof StyledNotification; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}