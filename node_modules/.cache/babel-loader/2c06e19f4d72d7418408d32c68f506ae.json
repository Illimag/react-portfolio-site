{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nimport { normalizeIndex, toggleIndex, hasIndex } from './helpers/indexHelper';\nimport { defaultCellRenderer } from '../Table/TableShared.part';\nimport { defaultBodyRenderer } from '../Table/TableCard.part';\nimport { AccordionCard } from '../AccordionCard';\nimport { ListItem } from '../ListItem';\nimport { List } from '../List';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nconst PropContainer = styled.div`\n  margin-bottom: ${distance.medium};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\nconst PropName = styled.div`\n  ${getFontStyle({\n  size: 'xSmall'\n})}\n`;\nconst PropValue = styled.div`\n  ${getFontStyle({\n  weight: 'medium'\n})}\n`;\nconst PlaceholderContainer = styled.div`\n  text-align: center;\n`;\nconst StyledList = styled(List)`\n  overflow: visible;\n`;\nconst StyledListItem = styled(ListItem)`\n  padding: 0;\n  margin-bottom: ${distance.xlarge};\n  border: none;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\nconst AccordionTableCardHost = Object.assign(props => React.createElement(StyledList, Object.assign({}, props)), {\n  inner: {\n    get StyledList() {\n      return StyledList;\n    }\n\n  }\n});\nexport class AccordionTableCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderItem = ({\n      item,\n      index,\n      open,\n      keys,\n      closeLabel,\n      openLabel\n    }) => {\n      const {\n        detailsRenderer,\n        theme\n      } = this.props;\n      return React.createElement(StyledListItem, {\n        theme: theme,\n        key: index\n      }, React.createElement(AccordionCard, {\n        openLabel: openLabel,\n        closeLabel: closeLabel,\n        theme: theme,\n        header: this.renderItemProps(item, keys, index),\n        opened: open,\n        onActionClick: () => this.handleClick(index, item)\n      }, open && detailsRenderer && detailsRenderer({\n        data: item,\n        index\n      })));\n    };\n\n    this.state = {\n      selectedIndexes: normalizeIndex(props.selectedIndex),\n      controlled: props.selectedIndex !== undefined\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      selectedIndex\n    } = props;\n\n    if (state.controlled && selectedIndex !== undefined) {\n      return {\n        selectedIndexes: normalizeIndex(props.selectedIndex)\n      };\n    }\n\n    return state;\n  }\n\n  handleClick(target, data) {\n    const {\n      onChange,\n      multiple\n    } = this.props;\n    const {\n      controlled,\n      selectedIndexes\n    } = this.state;\n    const nextIndexes = toggleIndex(selectedIndexes, target, multiple);\n\n    if (typeof onChange === 'function') {\n      onChange({\n        selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,\n        previousIndex: multiple ? selectedIndexes : selectedIndexes[0] !== undefined ? selectedIndexes[0] : -1,\n        data\n      });\n    }\n\n    if (!controlled) {\n      this.setState({\n        selectedIndexes: nextIndexes\n      });\n    }\n  }\n\n  getHeader(key) {\n    const {\n      columns\n    } = this.props;\n\n    if (columns) {\n      const column = columns[key];\n      return typeof column === 'string' ? column : column.header;\n    }\n\n    return key;\n  }\n\n  renderItemProps(item, keys, row) {\n    return keys.map((key, index) => this.renderItemProp(key, item[key], index, row));\n  }\n\n  renderItemProp(key, propValue, index, row) {\n    const {\n      cellRenderer = defaultCellRenderer\n    } = this.props;\n    const propKey = this.getHeader(key);\n    return React.createElement(PropContainer, {\n      key: index\n    }, React.createElement(PropName, null, propKey), React.createElement(PropValue, null, cellRenderer({\n      row,\n      column: index,\n      key,\n      value: propValue,\n      render: defaultCellRenderer\n    })));\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      data = [],\n      columns,\n      placeholder,\n      theme,\n      cardRenderer = this.renderItem,\n      bodyRenderer = defaultBodyRenderer,\n      openLabel,\n      closeLabel\n    } = _a,\n          props = __rest(_a, [\"data\", \"columns\", \"placeholder\", \"theme\", \"cardRenderer\", \"bodyRenderer\", \"openLabel\", \"closeLabel\"]);\n\n    const keys = Object.keys(columns || data[0] || {});\n    const rows = data.length === 0 ? placeholder ? [React.createElement(StyledListItem, {\n      theme: theme,\n      key: 0\n    }, React.createElement(PlaceholderContainer, {\n      theme: theme\n    }, placeholder))] : [] : data.map((item, index) => cardRenderer({\n      item,\n      index,\n      open: hasIndex(this.state.selectedIndexes, index),\n      keys,\n      openLabel,\n      closeLabel\n    }));\n    return bodyRenderer({\n      rows,\n      mode: 'card',\n      props: Object.assign({\n        theme,\n        borderless: true\n      }, props),\n      table: AccordionTableCardHost\n    });\n  }\n\n}\nAccordionTableCard.inner = {\n  get StyledListItem() {\n    return StyledListItem;\n  },\n\n  get AccordionCard() {\n    return AccordionCard;\n  },\n\n  get PropContainer() {\n    return PropContainer;\n  },\n\n  get PropName() {\n    return PropName;\n  },\n\n  get PropValue() {\n    return PropValue;\n  },\n\n  get PlaceholderContainer() {\n    return PlaceholderContainer;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/AccordionTable/AccordionTableCard.part.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { normalizeIndex, toggleIndex, hasIndex } from './helpers/indexHelper';\nimport { AccordionTableProps, AccordionTableCardRendererEvent } from './AccordionTable.types.part';\nimport { defaultCellRenderer } from '../Table/TableShared.part';\nimport { defaultBodyRenderer } from '../Table/TableCard.part';\nimport { AccordionCard } from '../AccordionCard';\nimport { ListItem } from '../ListItem';\nimport { List } from '../List';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nexport interface AccordionTableCardState {\n    /**\n     * Currently selected rows indices.\n     */\n    selectedIndexes: Array<number>;\n    /**\n     * Determines if the accordion table component is controlled from the outside or not.\n     */\n    controlled: boolean;\n}\nconst PropContainer = styled.div `\n  margin-bottom: ${distance.medium};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\nconst PropName = styled.div `\n  ${getFontStyle({ size: 'xSmall' })}\n`;\nconst PropValue = styled.div `\n  ${getFontStyle({ weight: 'medium' })}\n`;\nconst PlaceholderContainer = styled.div `\n  text-align: center;\n`;\nconst StyledList = styled(List) `\n  overflow: visible;\n`;\nconst StyledListItem = styled(ListItem) `\n  padding: 0;\n  margin-bottom: ${distance.xlarge};\n  border: none;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\ninterface AccordionTableCardHostProps {\n    borderless: boolean;\n}\nconst AccordionTableCardHost = Object.assign(((props => <StyledList {...props}/>) as React.SFC<AccordionTableCardHostProps>), { inner: {\n        get StyledList() { return StyledList as typeof StyledList; }\n    } });\nexport class AccordionTableCard<T> extends React.Component<AccordionTableProps<T>, AccordionTableCardState> {\n    constructor(props: AccordionTableProps<T>) {\n        super(props);\n        this.state = {\n            selectedIndexes: normalizeIndex(props.selectedIndex),\n            controlled: props.selectedIndex !== undefined,\n        };\n    }\n    static getDerivedStateFromProps(props: AccordionTableProps<any>, state: AccordionTableCardState) {\n        const { selectedIndex } = props;\n        if (state.controlled && selectedIndex !== undefined) {\n            return {\n                selectedIndexes: normalizeIndex(props.selectedIndex),\n            };\n        }\n        return state;\n    }\n    private handleClick(target: number, data: T) {\n        const { onChange, multiple } = this.props;\n        const { controlled, selectedIndexes } = this.state;\n        const nextIndexes = toggleIndex(selectedIndexes, target, multiple);\n        if (typeof onChange === 'function') {\n            onChange({\n                selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,\n                previousIndex: multiple ? selectedIndexes : selectedIndexes[0] !== undefined ? selectedIndexes[0] : -1,\n                data,\n            });\n        }\n        if (!controlled) {\n            this.setState({\n                selectedIndexes: nextIndexes,\n            });\n        }\n    }\n    private renderItem = ({ item, index, open, keys, closeLabel, openLabel }: AccordionTableCardRendererEvent<T>) => {\n        const { detailsRenderer, theme } = this.props;\n        return (<StyledListItem theme={theme} key={index}>\n        <AccordionCard openLabel={openLabel} closeLabel={closeLabel} theme={theme} header={this.renderItemProps(item, keys, index)} opened={open} onActionClick={() => this.handleClick(index, item)}>\n          {open && detailsRenderer && detailsRenderer({ data: item, index })}\n        </AccordionCard>\n      </StyledListItem>);\n    };\n    private getHeader(key: string) {\n        const { columns } = this.props;\n        if (columns) {\n            const column = columns[key];\n            return typeof column === 'string' ? column : column.header;\n        }\n        return key;\n    }\n    private renderItemProps(item: T, keys: Array<string>, row: number) {\n        return keys.map((key, index) => this.renderItemProp(key, item[key], index, row));\n    }\n    private renderItemProp(key: string, propValue: any, index: number, row: number) {\n        const { cellRenderer = defaultCellRenderer } = this.props;\n        const propKey = this.getHeader(key);\n        return (<PropContainer key={index}>\n        <PropName>{propKey}</PropName>\n        <PropValue>\n          {cellRenderer({\n            row,\n            column: index,\n            key,\n            value: propValue,\n            render: defaultCellRenderer,\n        })}\n        </PropValue>\n      </PropContainer>);\n    }\n    render() {\n        const { data = [], columns, placeholder, theme, cardRenderer = this.renderItem, bodyRenderer = defaultBodyRenderer, openLabel, closeLabel, ...props } = this.props;\n        const keys = Object.keys(columns || data[0] || {});\n        const rows = data.length === 0\n            ? placeholder\n                ? [\n                    <StyledListItem theme={theme} key={0}>\n                <PlaceholderContainer theme={theme}>{placeholder}</PlaceholderContainer>\n              </StyledListItem>,\n                ]\n                : []\n            : data.map((item, index) => cardRenderer({\n                item,\n                index,\n                open: hasIndex(this.state.selectedIndexes, index),\n                keys,\n                openLabel,\n                closeLabel,\n            }));\n        return bodyRenderer({\n            rows,\n            mode: 'card',\n            props: {\n                theme,\n                borderless: true,\n                ...props,\n            },\n            table: AccordionTableCardHost,\n        });\n    }\n    static inner = {\n        get StyledListItem() { return StyledListItem as typeof StyledListItem; },\n        get AccordionCard() { return AccordionCard as typeof AccordionCard; },\n        get PropContainer() { return PropContainer as typeof PropContainer; },\n        get PropName() { return PropName as typeof PropName; },\n        get PropValue() { return PropValue as typeof PropValue; },\n        get PlaceholderContainer() { return PlaceholderContainer as typeof PlaceholderContainer; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}