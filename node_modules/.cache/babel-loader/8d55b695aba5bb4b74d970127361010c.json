{"ast":null,"code":"import * as React from 'react';\nimport { purpleRed } from '../../colors';\nimport { Icon } from '../Icon';\nimport { IconLink } from '../IconLink';\nimport { StyledIconContainer } from '../../quarks';\nexport var InputIcon = Object.assign(function (_ref) {\n  var disabled = _ref.disabled,\n      clearable = _ref.clearable,\n      hasValue = _ref.hasValue,\n      error = _ref.error,\n      theme = _ref.theme,\n      defaultIcon = _ref.defaultIcon,\n      onClear = _ref.onClear,\n      _onClick = _ref.onClick;\n  return !disabled && clearable && hasValue ? React.createElement(StyledIconContainer, {\n    onClick: function onClick() {\n      onClear && onClear();\n      _onClick && _onClick();\n    }\n  }, React.createElement(IconLink, {\n    icon: \"Close\"\n  })) : error ? React.createElement(StyledIconContainer, {\n    onClick: _onClick\n  }, React.createElement(Icon, {\n    name: \"Error\",\n    color: theme ? theme.inputError : purpleRed,\n    size: \"22px\"\n  })) : defaultIcon ? React.createElement(StyledIconContainer, {\n    onClick: _onClick\n  }, defaultIcon) : //tslint:disable-next-line\n  null;\n}, {\n  inner: {\n    get StyledIconContainer() {\n      return StyledIconContainer;\n    },\n\n    get IconLink() {\n      return IconLink;\n    },\n\n    get Icon() {\n      return Icon;\n    }\n\n  }\n});","map":{"version":3,"sources":["../../../../src/components/InputIcon/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,SAAT,QAA0B,cAA1B;AACA,SAAS,IAAT,QAAqB,SAArB;AACA,SAAS,QAAT,QAAyB,aAAzB;AACA,SAAS,mBAAT,QAAoC,cAApC;AAWA,OAAO,IAAM,SAAS,GAAG,MAAM,CAAC,MAAP,CAAgB;AAAA,MAAG,QAAH,QAAG,QAAH;AAAA,MAAa,SAAb,QAAa,SAAb;AAAA,MAAwB,QAAxB,QAAwB,QAAxB;AAAA,MAAkC,KAAlC,QAAkC,KAAlC;AAAA,MAAyC,KAAzC,QAAyC,KAAzC;AAAA,MAAgD,WAAhD,QAAgD,WAAhD;AAAA,MAA6D,OAA7D,QAA6D,OAA7D;AAAA,MAAsE,QAAtE,QAAsE,OAAtE;AAAA,SAAqF,CAAC,QAAD,IAAa,SAAb,IAA0B,QAA1B,GAAsC,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB;AAAC,IAAA,OAAO,EAAE,mBAAK;AACnM,MAAA,OAAO,IAAI,OAAO,EAAlB;AACA,MAAA,QAAO,IAAI,QAAO,EAAlB;AACH;AAHuL,GAApB,EAI9J,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,IAAA,IAAI,EAAC;AAAN,GAAT,CAJ8J,CAAtC,GAKhG,KAAK,GAAI,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB;AAAC,IAAA,OAAO,EAAE;AAAV,GAApB,EACjC,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,IAAA,IAAI,EAAC,OAAN;AAAc,IAAA,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,UAAT,GAAsB,SAAhD;AAA2D,IAAA,IAAI,EAAC;AAAhE,GAAL,CADiC,CAAJ,GAEL,WAAW,GAAI,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB;AAAC,IAAA,OAAO,EAAE;AAAV,GAApB,EAAwC,WAAxC,CAAJ,GAAkF;AACvH,MARqC;AAAA,CAAhB,EAQgB;AAAE,EAAA,KAAK,EAAE;AAC1C,QAAI,mBAAJ,GAAuB;AAAK,aAAO,mBAAP;AAA2D,KAD7C;;AAE1C,QAAI,QAAJ,GAAY;AAAK,aAAO,QAAP;AAAqC,KAFZ;;AAG1C,QAAI,IAAJ,GAAQ;AAAK,aAAO,IAAP;AAA6B;;AAHA;AAAT,CARhB,CAAlB","sourcesContent":["import * as React from 'react';\nimport { PreciseTheme } from '../../common';\nimport { purpleRed } from '../../colors';\nimport { Icon } from '../Icon';\nimport { IconLink } from '../IconLink';\nimport { StyledIconContainer } from '../../quarks';\nexport interface InputIconProps {\n    disabled?: boolean;\n    clearable?: boolean;\n    error?: React.ReactChild;\n    hasValue?: boolean;\n    theme?: PreciseTheme;\n    defaultIcon?: React.ReactChild;\n    onClear?(): void;\n    onClick?(): void;\n}\nexport const InputIcon = Object.assign(((({ disabled, clearable, hasValue, error, theme, defaultIcon, onClear, onClick, }) => !disabled && clearable && hasValue ? (<StyledIconContainer onClick={() => {\n    onClear && onClear();\n    onClick && onClick();\n}}>\n      <IconLink icon=\"Close\"/>\n    </StyledIconContainer>) : error ? (<StyledIconContainer onClick={onClick}>\n      <Icon name=\"Error\" color={theme ? theme.inputError : purpleRed} size=\"22px\"/>\n    </StyledIconContainer>) : defaultIcon ? (<StyledIconContainer onClick={onClick}>{defaultIcon}</StyledIconContainer>) : //tslint:disable-next-line\n    null) as React.SFC<InputIconProps>), { inner: {\n        get StyledIconContainer() { return StyledIconContainer as typeof StyledIconContainer; },\n        get IconLink() { return IconLink as typeof IconLink; },\n        get Icon() { return Icon as typeof Icon; }\n    } });\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}