{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { keyframes, css } from '../../utils/styled';\nimport { Headline } from '../Headline';\nimport { white, cyan, dark, grey6 } from '../../colors';\nimport { Blocker } from '../Blocker';\nimport { CloseButton } from '../CloseButton';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nconst openAnimationDuration = 300;\nconst closeAnimationDuration = 200;\nconst blockerAnimationDuration = 200;\n\nconst InAnimation = startOffset => keyframes`\n  from {\n    opacity: 0;\n    transform: translate(0, ${startOffset}px);\n  }\n  to {\n    opacity: 1;\n    transform: translate(0px);\n  }\n`;\n\nconst OutAnimation = () => keyframes`\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n`;\n\nconst BlockerInAnimation = () => keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nconst StyledModal = styled('div')(({\n  width,\n  closing\n}) => css`\n    outline: none;\n    color: ${dark};\n    ${width ? `width: ${width}` : 'max-width: 500px'};\n    margin: ${distance.xlarge} auto;\n    display: flex;\n    align-items: center;\n    min-height: calc(100% - (${distance.xlarge} * 2));\n    animation: ${closing ? OutAnimation() : InAnimation(-72)}\n      ${closing ? closeAnimationDuration : openAnimationDuration}ms cubic-bezier(0, 0, 0.25, 1);\n    animation-fill-mode: forwards;\n\n    @media screen and (max-width: ${width || '500px'}) {\n      width: 100%;\n      min-height: 100%;\n      margin: 0;\n      align-items: stretch;\n    }\n  `);\nconst StyledBlocker = styled(Blocker)(({\n  closing\n}) => css`\n    animation: ${closing ? OutAnimation() : BlockerInAnimation()} ${blockerAnimationDuration}ms\n      cubic-bezier(0, 0, 0.25, 1);\n    animation-fill-mode: forwards;\n  `);\nconst ModalContent = styled.div(({\n  minHeight\n}) => `\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    background: ${white};\n    box-shadow: 0 12px 24px 0 rgba(0, 0, 0, 0.1);\n    border-top: 4px solid ${cyan};\n    width: 100%;\n    ${minHeight ? `min-height: ${minHeight}` : ''};\n  `);\nconst ModalLabel = styled.span`\n  ${getFontStyle({\n  size: 'small'\n})}\n\n  padding-bottom: ${distance.small};\n`;\nconst StyledModalBody = styled.div`\n  ${getFontStyle({\n  size: 'medium',\n  weight: 'regular'\n})}\n\n  text-align: left;\n  padding: 0 ${distance.xxlarge} ${distance.xxlarge};\n  margin-bottom: auto;\n`;\nconst StyledModalHeader = styled.div`\n  margin-bottom: ${distance.medium};\n  padding: ${distance.xxlarge} ${distance.xxlarge} 0;\n`;\nconst StyledModalFooter = styled.div`\n  background: ${grey6};\n  padding: ${distance.large} ${distance.xxlarge};\n  text-align: right;\n`;\n/**\n * A simple modal dialog for requiring user interaction.\n */\n\nexport class Modal extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.closeBackground = () => {\n      this.closeFrom('background');\n    };\n\n    this.closeButton = () => {\n      this.closeFrom('button');\n    };\n\n    this.state = {\n      closing: false\n    };\n  }\n\n  closeFrom(origin) {\n    const {\n      onClose,\n      onBeforeClose\n    } = this.props;\n    const closeEvent = {\n      origin\n    };\n    this.callOnBeforeCloseHandler(onBeforeClose, closeEvent).then(closePermitted => {\n      if (!closePermitted) {\n        return;\n      }\n\n      this.setState({\n        closing: true\n      }, () => setTimeout(() => {\n        if (typeof onClose === 'function') {\n          onClose(closeEvent);\n        }\n\n        this.setState({\n          closing: false\n        });\n      }, closeAnimationDuration));\n    });\n  }\n\n  callOnBeforeCloseHandler(onBeforeClose, closeEvent) {\n    if (typeof onBeforeClose !== 'function') {\n      return Promise.resolve(true);\n    }\n\n    const canClose = onBeforeClose(closeEvent);\n    return Promise.resolve(canClose);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      onBeforeClose: _0,\n      children,\n      onClose,\n      open = false,\n      minHeight\n    } = _a,\n          rest = __rest(_a, [\"onBeforeClose\", \"children\", \"onClose\", \"open\", \"minHeight\"]);\n\n    const canClose = typeof onClose === 'function';\n    const {\n      closing\n    } = this.state;\n    return open && React.createElement(StyledBlocker, {\n      closing: closing,\n      onClose: this.closeBackground\n    }, React.createElement(StyledModal, Object.assign({\n      tabIndex: 0,\n      closing: closing\n    }, rest), React.createElement(ModalContent, {\n      minHeight: minHeight\n    }, children, canClose && React.createElement(CloseButton, {\n      onClick: this.closeButton\n    }))));\n  }\n\n}\nModal.inner = {\n  get StyledBlocker() {\n    return StyledBlocker;\n  },\n\n  get StyledModal() {\n    return StyledModal;\n  },\n\n  get ModalContent() {\n    return ModalContent;\n  },\n\n  get CloseButton() {\n    return CloseButton;\n  }\n\n};\n/**\n * Styles the body of a modal dialog.\n */\n\nexport const ModalBody = Object.assign(props => React.createElement(StyledModalBody, Object.assign({}, props)), {\n  inner: {\n    get StyledModalBody() {\n      return StyledModalBody;\n    }\n\n  }\n});\nModalBody.displayName = 'ModalBody';\n/**\n * Styles the header of a modal dialog\n */\n\nexport const ModalHeader = Object.assign(_a => {\n  var {\n    title,\n    label\n  } = _a,\n      rest = __rest(_a, [\"title\", \"label\"]);\n\n  return React.createElement(StyledModalHeader, Object.assign({}, rest), label && React.createElement(ModalLabel, null, label), title && React.createElement(Headline, {\n    level: 2\n  }, title));\n}, {\n  inner: {\n    get StyledModalHeader() {\n      return StyledModalHeader;\n    },\n\n    get ModalLabel() {\n      return ModalLabel;\n    },\n\n    get Headline() {\n      return Headline;\n    }\n\n  }\n});\nModalHeader.displayName = 'ModalHeader';\n/**\n * Styles the footer of a modal dialog.\n */\n\nexport const ModalFooter = Object.assign(props => React.createElement(StyledModalFooter, Object.assign({}, props)), {\n  inner: {\n    get StyledModalFooter() {\n      return StyledModalFooter;\n    }\n\n  }\n});\nModalFooter.displayName = 'ModalFooter';","map":{"version":3,"sources":["../../../../src/components/Modal/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { keyframes, css } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { Headline } from '../Headline';\nimport { white, cyan, dark, grey6 } from '../../colors';\nimport { Blocker, BlockerProps } from '../Blocker';\nimport { CloseButton } from '../CloseButton';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nexport type ModalCloseOrigin = 'button' | 'background';\nexport interface ModalCloseEvent {\n    origin: ModalCloseOrigin;\n}\ntype onBeforeCloseHandler = (e: ModalCloseEvent) => boolean | Promise<boolean>;\nexport interface ModalProps extends StandardProps {\n    /**\n     * Sets the content of the modal dialog.\n     */\n    children?: React.ReactNode;\n    /**\n     * Determines if the modal is currently open or not.\n     */\n    open?: boolean;\n    /**\n     * Event triggered before the modal is actually closed by the user.\n     */\n    onBeforeClose?: onBeforeCloseHandler;\n    /**\n     * Event triggered when the modal should be closed by the user.\n     */\n    onClose?(e: ModalCloseEvent): void;\n    /**\n     * When specified, default max-width of 500px will be overridden\n     * @deprecated Please define through styled components and ${Modal.inner.ModalContent}\n     */\n    width?: string;\n    /**\n     * Specify the minimal height for the modal container\n     * @deprecated Please define through styled components and ${Modal.inner.StyledModal}\n     */\n    minHeight?: string;\n}\nexport interface ModalHeaderProps extends StandardProps {\n    /**\n     * @ignore\n     */\n    children?: void;\n    /**\n     * The title of the modal dialog.\n     */\n    title?: string;\n    /**\n     * The label (above title) of the dialog.\n     */\n    label?: string;\n}\nconst openAnimationDuration = 300;\nconst closeAnimationDuration = 200;\nconst blockerAnimationDuration = 200;\nconst InAnimation = (startOffset: number) => keyframes `\n  from {\n    opacity: 0;\n    transform: translate(0, ${startOffset}px);\n  }\n  to {\n    opacity: 1;\n    transform: translate(0px);\n  }\n`;\nconst OutAnimation = () => keyframes `\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n`;\nconst BlockerInAnimation = () => keyframes `\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\nexport interface ModalProps {\n    width?: string;\n}\nexport interface StyledModalProps extends ModalProps {\n    closing: boolean;\n}\nconst StyledModal = styled('div')<StyledModalProps>(({ width, closing }) => css `\n    outline: none;\n    color: ${dark};\n    ${width ? `width: ${width}` : 'max-width: 500px'};\n    margin: ${distance.xlarge} auto;\n    display: flex;\n    align-items: center;\n    min-height: calc(100% - (${distance.xlarge} * 2));\n    animation: ${closing ? OutAnimation() : InAnimation(-72)}\n      ${closing ? closeAnimationDuration : openAnimationDuration}ms cubic-bezier(0, 0, 0.25, 1);\n    animation-fill-mode: forwards;\n\n    @media screen and (max-width: ${width || '500px'}) {\n      width: 100%;\n      min-height: 100%;\n      margin: 0;\n      align-items: stretch;\n    }\n  `);\nexport interface StyledBlockerProps extends BlockerProps {\n    closing: boolean;\n}\nconst StyledBlocker = styled(Blocker)<StyledBlockerProps>(({ closing }) => css `\n    animation: ${closing ? OutAnimation() : BlockerInAnimation()} ${blockerAnimationDuration}ms\n      cubic-bezier(0, 0, 0.25, 1);\n    animation-fill-mode: forwards;\n  `);\nexport interface ModalContentProps {\n    minHeight?: string;\n}\nconst ModalContent = styled.div<ModalContentProps>(({ minHeight }) => `\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    background: ${white};\n    box-shadow: 0 12px 24px 0 rgba(0, 0, 0, 0.1);\n    border-top: 4px solid ${cyan};\n    width: 100%;\n    ${minHeight ? `min-height: ${minHeight}` : ''};\n  `);\nconst ModalLabel = styled.span `\n  ${getFontStyle({ size: 'small' })}\n\n  padding-bottom: ${distance.small};\n`;\nconst StyledModalBody = styled.div `\n  ${getFontStyle({ size: 'medium', weight: 'regular' })}\n\n  text-align: left;\n  padding: 0 ${distance.xxlarge} ${distance.xxlarge};\n  margin-bottom: auto;\n`;\nconst StyledModalHeader = styled.div `\n  margin-bottom: ${distance.medium};\n  padding: ${distance.xxlarge} ${distance.xxlarge} 0;\n`;\nconst StyledModalFooter = styled.div `\n  background: ${grey6};\n  padding: ${distance.large} ${distance.xxlarge};\n  text-align: right;\n`;\ninterface ModalState {\n    closing: boolean;\n}\n/**\n * A simple modal dialog for requiring user interaction.\n */\nexport class Modal extends React.PureComponent<ModalProps, ModalState> {\n    constructor(props: ModalProps) {\n        super(props);\n        this.state = {\n            closing: false,\n        };\n    }\n    private closeFrom(origin: ModalCloseOrigin) {\n        const { onClose, onBeforeClose } = this.props;\n        const closeEvent = { origin };\n        this.callOnBeforeCloseHandler(onBeforeClose, closeEvent).then(closePermitted => {\n            if (!closePermitted) {\n                return;\n            }\n            this.setState({ closing: true }, () => setTimeout(() => {\n                if (typeof onClose === 'function') {\n                    onClose(closeEvent);\n                }\n                this.setState({ closing: false });\n            }, closeAnimationDuration));\n        });\n    }\n    private callOnBeforeCloseHandler(onBeforeClose: onBeforeCloseHandler | undefined, closeEvent: ModalCloseEvent) {\n        if (typeof onBeforeClose !== 'function') {\n            return Promise.resolve(true);\n        }\n        const canClose = onBeforeClose(closeEvent);\n        return Promise.resolve(canClose);\n    }\n    private closeBackground = () => {\n        this.closeFrom('background');\n    };\n    private closeButton = () => {\n        this.closeFrom('button');\n    };\n    render() {\n        const { onBeforeClose: _0, children, onClose, open = false, minHeight, ...rest } = this.props;\n        const canClose = typeof onClose === 'function';\n        const { closing } = this.state;\n        return (open && (<StyledBlocker closing={closing} onClose={this.closeBackground}>\n          <StyledModal tabIndex={0} closing={closing} {...rest}>\n            <ModalContent minHeight={minHeight}>\n              {children}\n              {canClose && <CloseButton onClick={this.closeButton}/>}\n            </ModalContent>\n          </StyledModal>\n        </StyledBlocker>));\n    }\n    static inner = {\n        get StyledBlocker() { return StyledBlocker as typeof StyledBlocker; },\n        get StyledModal() { return StyledModal as typeof StyledModal; },\n        get ModalContent() { return ModalContent as typeof ModalContent; },\n        get CloseButton() { return CloseButton as typeof CloseButton; }\n    };\n}\n/**\n * Styles the body of a modal dialog.\n */\nexport const ModalBody = Object.assign(((props => (<StyledModalBody {...props}/>)) as React.FC<StandardProps & {\n    children: React.ReactNode;\n}>), { inner: {\n        get StyledModalBody() { return StyledModalBody as typeof StyledModalBody; }\n    } });\nModalBody.displayName = 'ModalBody';\n/**\n * Styles the header of a modal dialog\n */\nexport const ModalHeader = Object.assign(((({ title, label, ...rest }) => (<StyledModalHeader {...rest}>\n    {label && <ModalLabel>{label}</ModalLabel>}\n    {title && <Headline level={2}>{title}</Headline>}\n  </StyledModalHeader>)) as React.SFC<ModalHeaderProps>), { inner: {\n        get StyledModalHeader() { return StyledModalHeader as typeof StyledModalHeader; },\n        get ModalLabel() { return ModalLabel as typeof ModalLabel; },\n        get Headline() { return Headline as typeof Headline; }\n    } });\nModalHeader.displayName = 'ModalHeader';\n/**\n * Styles the footer of a modal dialog.\n */\nexport const ModalFooter = Object.assign(((props => <StyledModalFooter {...props}/>) as React.SFC<StandardProps>), { inner: {\n        get StyledModalFooter() { return StyledModalFooter as typeof StyledModalFooter; }\n    } });\nModalFooter.displayName = 'ModalFooter';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}