{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { withFormContext } from '../../hoc';\nimport { distance } from '../../distance';\nimport { IndicatorKnob } from '../IndicatorKnob';\nimport { getFontStyle } from '../../textStyles';\nimport { InputNotification } from '../InputNotification';\nimport { PaddedContainer } from '../PaddedContainer';\nconst transitionDuration = '0.3s';\nconst transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';\nconst ToggleContainer = styled('div')`\n  ${getFontStyle({\n  size: 'medium'\n})};\n  position: relative;\n  display: inline-block;\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n  color: ${themed(props => props.theme.text1)};\n`;\nconst ToggleBoxWrapper = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n  padding: ${distance.xsmall} 0;\n`;\nconst StyledInput = styled.input`\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\nconst ToggleBox = styled('div')`\n  outline: 0;\n  display: block;\n  width: ${distance.xxlarge};\n  height: ${distance.medium};\n  border-radius: ${distance.small};\n  position: relative;\n  background: ${themed(props => props.theme.ui4)};\n  transition: all ${transitionDuration} ${transitionEase};\n`;\nconst StyledLabel = styled.label`\n  display: block;\n  margin-bottom: ${distance.small};\n`;\nconst StyledDesc = styled.span`\n  display: inline-block;\n  margin-left: ${distance.small};\n  vertical-align: middle;\n`;\nconst IndicatorKnobStyle = {\n  transform: 'translate(0, -50%)'\n};\n\nclass ToggleInt extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleOnClick = e => {\n      this.changeValue();\n      e.preventDefault();\n    };\n\n    this.handleCheckboxChange = () => {\n      this.changeValue();\n    };\n\n    this.handleCheckboxFocus = () => {\n      this.setState({\n        focused: true\n      });\n    };\n\n    this.handleCheckboxBlur = () => {\n      this.setState({\n        focused: false\n      });\n    };\n\n    this.state = {\n      controlled: typeof props.value !== 'undefined',\n      value: props.value || props.defaultValue || false,\n      focused: false,\n      error: props.error\n    };\n  }\n\n  componentDidMount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.subscribe(this);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.unsubscribe(this);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps({\n    value = false,\n    error\n  }) {\n    if (this.state.controlled) {\n      this.setState({\n        value\n      });\n    }\n\n    this.setState({\n      error\n    });\n  }\n\n  changeValue() {\n    const {\n      onChange,\n      disabled,\n      form,\n      name = ''\n    } = this.props;\n\n    if (!disabled) {\n      const {\n        controlled,\n        value\n      } = this.state;\n      const status = !value;\n\n      if (!controlled) {\n        if (form) {\n          form.change({\n            name,\n            value: status\n          });\n        } else {\n          this.setState({\n            value: status\n          });\n        }\n      }\n\n      if (typeof onChange === 'function') {\n        onChange({\n          value: status\n        });\n      }\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      disabled,\n      theme,\n      value: _0,\n      defaultValue: _1,\n      onChange: _2,\n      onInput: _3,\n      info,\n      label\n    } = _a,\n          props = __rest(_a, [\"children\", \"disabled\", \"theme\", \"value\", \"defaultValue\", \"onChange\", \"onInput\", \"info\", \"label\"]);\n\n    const {\n      value,\n      focused,\n      error\n    } = this.state;\n    const containerProps = Object.assign({}, props, {\n      theme,\n      onClick: this.handleOnClick,\n      disabled\n    });\n    const boxProps = {\n      checked: value,\n      theme\n    };\n    return React.createElement(ToggleContainer, Object.assign({}, containerProps), label && React.createElement(StyledLabel, {\n      theme: theme\n    }, label), React.createElement(ToggleBoxWrapper, null, React.createElement(StyledInput, {\n      checked: value,\n      onChange: this.handleCheckboxChange,\n      onFocus: this.handleCheckboxFocus,\n      onBlur: this.handleCheckboxBlur\n    }), React.createElement(ToggleBox, Object.assign({}, boxProps), React.createElement(IndicatorKnob, {\n      style: IndicatorKnobStyle,\n      x: value ? 0.5 : 0,\n      active: value,\n      focus: focused,\n      disabled: containerProps.disabled,\n      animate: true\n    }))), children && React.createElement(StyledDesc, null, children), (error || info) && React.createElement(PaddedContainer, {\n      top: \"xsmall\",\n      bottom: \"xsmall\"\n    }, React.createElement(InputNotification, {\n      error: error,\n      info: info\n    })));\n  }\n\n}\n\nToggleInt.inner = {\n  get ToggleContainer() {\n    return ToggleContainer;\n  },\n\n  get StyledLabel() {\n    return StyledLabel;\n  },\n\n  get ToggleBoxWrapper() {\n    return ToggleBoxWrapper;\n  },\n\n  get StyledInput() {\n    return StyledInput;\n  },\n\n  get ToggleBox() {\n    return ToggleBox;\n  },\n\n  get IndicatorKnob() {\n    return IndicatorKnob;\n  },\n\n  get StyledDesc() {\n    return StyledDesc;\n  },\n\n  get PaddedContainer() {\n    return PaddedContainer;\n  },\n\n  get InputNotification() {\n    return InputNotification;\n  }\n\n};\n/**\n * The toggle component displays a button to toggle a checked state.\n */\n\nexport const Toggle = withFormContext(ToggleInt);\nToggle.displayName = 'Toggle';","map":{"version":3,"sources":["../../../../src/components/Toggle/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { InputProps, InputChangeEvent } from '../../common';\nimport { withFormContext, FormContextProps } from '../../hoc';\nimport { distance } from '../../distance';\nimport { IndicatorKnob } from '../IndicatorKnob';\nimport { getFontStyle } from '../../textStyles';\nimport { InputNotification } from '../InputNotification';\nimport { PaddedContainer } from '../PaddedContainer';\nexport type ToggleChangeEvent = InputChangeEvent<boolean>;\nexport interface ToggleProps extends InputProps<boolean> {\n    /**\n     * Sets the text of label.\n     * @default ''\n     */\n    label?: React.ReactChild;\n    /**\n     * The content of the toggle button.\n     */\n    children?: React.ReactNode;\n}\nexport interface ToggleState {\n    value: boolean;\n    error?: React.ReactChild;\n    controlled: boolean;\n    focused: boolean;\n}\ninterface ToggleContainerProps {\n    disabled?: boolean;\n}\ninterface ToggleBoxProps {\n    checked: boolean;\n    theme: any;\n}\nconst transitionDuration = '0.3s';\nconst transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';\nconst ToggleContainer = styled('div')<ToggleContainerProps> `\n  ${getFontStyle({ size: 'medium' })};\n  position: relative;\n  display: inline-block;\n  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n  color: ${themed(props => props.theme.text1)};\n`;\nconst ToggleBoxWrapper = styled.div `\n  display: inline-block;\n  vertical-align: middle;\n  padding: ${distance.xsmall} 0;\n`;\nconst StyledInput = styled.input `\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\nconst ToggleBox = styled('div')<ToggleBoxProps> `\n  outline: 0;\n  display: block;\n  width: ${distance.xxlarge};\n  height: ${distance.medium};\n  border-radius: ${distance.small};\n  position: relative;\n  background: ${themed(props => props.theme.ui4)};\n  transition: all ${transitionDuration} ${transitionEase};\n`;\nconst StyledLabel = styled.label `\n  display: block;\n  margin-bottom: ${distance.small};\n`;\nconst StyledDesc = styled.span `\n  display: inline-block;\n  margin-left: ${distance.small};\n  vertical-align: middle;\n`;\nconst IndicatorKnobStyle: React.CSSProperties = {\n    transform: 'translate(0, -50%)',\n};\nclass ToggleInt extends React.PureComponent<ToggleProps & FormContextProps, ToggleState> {\n    constructor(props: ToggleProps) {\n        super(props);\n        this.state = {\n            controlled: typeof props.value !== 'undefined',\n            value: props.value || props.defaultValue || false,\n            focused: false,\n            error: props.error,\n        };\n    }\n    componentDidMount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    UNSAFE_componentWillReceiveProps({ value = false, error }: ToggleProps) {\n        if (this.state.controlled) {\n            this.setState({ value });\n        }\n        this.setState({ error });\n    }\n    private changeValue() {\n        const { onChange, disabled, form, name = '' } = this.props;\n        if (!disabled) {\n            const { controlled, value } = this.state;\n            const status = !value;\n            if (!controlled) {\n                if (form) {\n                    form.change({\n                        name,\n                        value: status,\n                    });\n                }\n                else {\n                    this.setState({\n                        value: status,\n                    });\n                }\n            }\n            if (typeof onChange === 'function') {\n                onChange({\n                    value: status,\n                });\n            }\n        }\n    }\n    private handleOnClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.changeValue();\n        e.preventDefault();\n    };\n    private handleCheckboxChange = () => {\n        this.changeValue();\n    };\n    private handleCheckboxFocus = () => {\n        this.setState({\n            focused: true,\n        });\n    };\n    private handleCheckboxBlur = () => {\n        this.setState({\n            focused: false,\n        });\n    };\n    render() {\n        const { children, disabled, theme, value: _0, defaultValue: _1, onChange: _2, onInput: _3, info, label, ...props } = this.props;\n        const { value, focused, error } = this.state;\n        const containerProps = {\n            ...props,\n            theme,\n            onClick: this.handleOnClick,\n            disabled,\n        };\n        const boxProps = {\n            checked: value,\n            theme,\n        };\n        return (<ToggleContainer {...containerProps}>\n        {label && <StyledLabel theme={theme}>{label}</StyledLabel>}\n        <ToggleBoxWrapper>\n          <StyledInput checked={value} onChange={this.handleCheckboxChange} onFocus={this.handleCheckboxFocus} onBlur={this.handleCheckboxBlur}/>\n          <ToggleBox {...boxProps}>\n            <IndicatorKnob style={IndicatorKnobStyle} x={value ? 0.5 : 0} active={value} focus={focused} disabled={containerProps.disabled} animate/>\n          </ToggleBox>\n        </ToggleBoxWrapper>\n        {children && <StyledDesc>{children}</StyledDesc>}\n        {(error || info) && (<PaddedContainer top=\"xsmall\" bottom=\"xsmall\">\n            <InputNotification error={error} info={info}/>\n          </PaddedContainer>)}\n      </ToggleContainer>);\n    }\n    static inner = {\n        get ToggleContainer() { return ToggleContainer as typeof ToggleContainer; },\n        get StyledLabel() { return StyledLabel as typeof StyledLabel; },\n        get ToggleBoxWrapper() { return ToggleBoxWrapper as typeof ToggleBoxWrapper; },\n        get StyledInput() { return StyledInput as typeof StyledInput; },\n        get ToggleBox() { return ToggleBox as typeof ToggleBox; },\n        get IndicatorKnob() { return IndicatorKnob as typeof IndicatorKnob; },\n        get StyledDesc() { return StyledDesc as typeof StyledDesc; },\n        get PaddedContainer() { return PaddedContainer as typeof PaddedContainer; },\n        get InputNotification() { return InputNotification as typeof InputNotification; }\n    };\n}\n/**\n * The toggle component displays a button to toggle a checked state.\n */\nexport const Toggle = withFormContext(ToggleInt);\nToggle.displayName = 'Toggle';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}