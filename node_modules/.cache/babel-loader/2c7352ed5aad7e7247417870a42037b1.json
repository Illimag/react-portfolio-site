{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../utils/styled';\nimport { distance } from '../distance';\nimport { purpleRed } from '../colors';\nimport { remCalc } from '../utils/remCalc';\nconst TextFieldBoxWithLabelWrapper = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-flow: column-reverse;\n  height: 100%;\n  position: relative;\n  min-width: 0;\n  margin: auto;\n`;\nconst TextFieldLabel = styled.label`\n  height: 100%;\n`;\nconst TextFieldLabelText = styled('span')`\n  display: block;\n  font-size: ${remCalc('12px')};\n  line-height: ${remCalc('16px')};\n  max-width: 66.66%;\n  box-sizing: border-box;\n  cursor: text;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  transform-origin: left bottom;\n  transform: ${props => props.active || props.filled ? 'none' : 'translate(0, 0.85rem) scale(1.33)'};\n  color: ${themed(({\n  theme,\n  active,\n  filled,\n  error\n}) => error ? purpleRed : active || filled ? theme.ui0 : theme.text2)};\n  transition: all 0.2s;\n  position: absolute;\n  top: 0;\n  left: ${distance.medium};\n  right: 0;\n  padding-top: ${distance.small};\n  background: ${themed(({\n  multiline,\n  theme\n}) => multiline ? theme.ui2 : 'transparent')};\n\n  > span {\n    display: ${props => props.active || props.filled ? 'none' : ''};\n    transition: inherit;\n  }\n`;\nexport const StyledInputRow = Object.assign(_a => {\n  var {\n    children,\n    label,\n    focused = false,\n    error = false,\n    placeholder = '',\n    hasValue = false,\n    multiline = false\n  } = _a,\n      props = __rest(_a, [\"children\", \"label\", \"focused\", \"error\", \"placeholder\", \"hasValue\", \"multiline\"]);\n\n  return React.createElement(TextFieldBoxWithLabelWrapper, Object.assign({}, props), label !== undefined ? React.createElement(TextFieldLabel, null, children, React.createElement(TextFieldLabelText, {\n    active: focused,\n    filled: !focused && hasValue,\n    error: error,\n    multiline: multiline\n  }, label, placeholder.length > 0 && React.createElement(\"span\", null, \" \\u2014 \", placeholder))) : children);\n}, {\n  inner: {\n    get TextFieldBoxWithLabelWrapper() {\n      return TextFieldBoxWithLabelWrapper;\n    },\n\n    get TextFieldLabel() {\n      return TextFieldLabel;\n    },\n\n    get TextFieldLabelText() {\n      return TextFieldLabelText;\n    }\n\n  }\n});","map":{"version":3,"sources":["../../../src/quarks/StyledInputRow.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,MAAjB,QAA+B,iBAA/B;AACA,SAAS,QAAT,QAAyB,aAAzB;AACA,SAAS,SAAT,QAA0B,WAA1B;AACA,SAAS,OAAT,QAAwB,kBAAxB;AACA,MAAM,4BAA4B,GAAG,MAAM,CAAC,GAAI;;;;;;;;CAAhD;AASA,MAAM,cAAc,GAAG,MAAM,CAAC,KAAM;;CAApC;AASA,MAAM,kBAAkB,GAAG,MAAM,CAAC,MAAD,CAA8B;;eAEhD,OAAO,CAAC,MAAD,CAAQ;iBACb,OAAO,CAAC,MAAD,CAAQ;;;;;;;;eAQjB,KAAK,IAAK,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,MAAtB,GAA+B,MAA/B,GAAwC,mCAAoC;WAC1F,MAAM,CAAC,CAAC;AAAE,EAAA,KAAF;AAAS,EAAA,MAAT;AAAiB,EAAA,MAAjB;AAAyB,EAAA;AAAzB,CAAD,KAAsC,KAAK,GAAG,SAAH,GAAe,MAAM,IAAI,MAAV,GAAmB,KAAK,CAAC,GAAzB,GAA+B,KAAK,CAAC,KAAhG,CAAsG;;;;UAI7G,QAAQ,CAAC,MAAM;;iBAER,QAAQ,CAAC,KAAK;gBACf,MAAM,CAAC,CAAC;AAAE,EAAA,SAAF;AAAa,EAAA;AAAb,CAAD,KAA2B,SAAS,GAAG,KAAK,CAAC,GAAT,GAAe,aAApD,CAAmE;;;eAG1E,KAAK,IAAK,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,MAAtB,GAA+B,MAA/B,GAAwC,EAAG;;;CAtBpE;AAkCA,OAAO,MAAM,cAAc,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAAyH;MAAxH;AAAE,IAAA,QAAF;AAAY,IAAA,KAAZ;AAAmB,IAAA,OAAO,GAAG,KAA7B;AAAoC,IAAA,KAAK,GAAG,KAA5C;AAAmD,IAAA,WAAW,GAAG,EAAjE;AAAqE,IAAA,QAAQ,GAAG,KAAhF;AAAuF,IAAA,SAAS,GAAG;AAAnG,MAAwG,E;MAAE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,UAAA,EAAA,OAAA,EAAA,SAAA,EAAA,OAAA,EAAA,aAAA,EAAA,UAAA,EAAA,WAAA,CAAA,C;;AAAe,SAAC,KAAA,CAAA,aAAA,CAAC,4BAAD,EAA6B,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAA7B,EACpK,KAAK,KAAK,SAAV,GAAuB,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,IAAf,EACnB,QADmB,EAEpB,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAmB;AAAC,IAAA,MAAM,EAAE,OAAT;AAAkB,IAAA,MAAM,EAAE,CAAC,OAAD,IAAY,QAAtC;AAAgD,IAAA,KAAK,EAAE,KAAvD;AAA8D,IAAA,SAAS,EAAE;AAAzE,GAAnB,EACG,KADH,EAEG,WAAW,CAAC,MAAZ,GAAqB,CAArB,IAA0B,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,E,UAAA,EAAU,WAAV,CAF7B,CAFoB,CAAvB,GAMuB,QAP6I,CAAD;AAQtI,CARJ,EAQ0C;AAAE,EAAA,KAAK,EAAE;AACzE,QAAI,4BAAJ,GAAgC;AAAK,aAAO,4BAAP;AAA6E,KADzC;;AAEzE,QAAI,cAAJ,GAAkB;AAAK,aAAO,cAAP;AAAiD,KAFC;;AAGzE,QAAI,kBAAJ,GAAsB;AAAK,aAAO,kBAAP;AAAyD;;AAHX;AAAT,CAR1C,CAAvB","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../utils/styled';\nimport { distance } from '../distance';\nimport { purpleRed } from '../colors';\nimport { remCalc } from '../utils/remCalc';\nconst TextFieldBoxWithLabelWrapper = styled.div `\n  flex-grow: 1;\n  display: flex;\n  flex-flow: column-reverse;\n  height: 100%;\n  position: relative;\n  min-width: 0;\n  margin: auto;\n`;\nconst TextFieldLabel = styled.label `\n  height: 100%;\n`;\nexport interface TextFieldLabelProps {\n    active: boolean;\n    filled: boolean;\n    error: boolean;\n    multiline: boolean;\n}\nconst TextFieldLabelText = styled('span')<TextFieldLabelProps> `\n  display: block;\n  font-size: ${remCalc('12px')};\n  line-height: ${remCalc('16px')};\n  max-width: 66.66%;\n  box-sizing: border-box;\n  cursor: text;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  transform-origin: left bottom;\n  transform: ${props => (props.active || props.filled ? 'none' : 'translate(0, 0.85rem) scale(1.33)')};\n  color: ${themed(({ theme, active, filled, error }) => error ? purpleRed : active || filled ? theme.ui0 : theme.text2)};\n  transition: all 0.2s;\n  position: absolute;\n  top: 0;\n  left: ${distance.medium};\n  right: 0;\n  padding-top: ${distance.small};\n  background: ${themed(({ multiline, theme }) => (multiline ? theme.ui2 : 'transparent'))};\n\n  > span {\n    display: ${props => (props.active || props.filled ? 'none' : '')};\n    transition: inherit;\n  }\n`;\nexport interface StyledInputRowProps extends React.HTMLAttributes<HTMLDivElement> {\n    focused?: boolean;\n    error?: boolean;\n    placeholder?: string;\n    label?: React.ReactChild;\n    hasValue?: boolean;\n    multiline?: boolean;\n}\nexport const StyledInputRow = Object.assign(((({ children, label, focused = false, error = false, placeholder = '', hasValue = false, multiline = false, ...props }) => (<TextFieldBoxWithLabelWrapper {...props}>\n    {label !== undefined ? (<TextFieldLabel>\n        {children}\n        <TextFieldLabelText active={focused} filled={!focused && hasValue} error={error} multiline={multiline}>\n          {label}\n          {placeholder.length > 0 && <span> â€” {placeholder}</span>}\n        </TextFieldLabelText>\n      </TextFieldLabel>) : (children)}\n  </TextFieldBoxWithLabelWrapper>)) as React.SFC<StyledInputRowProps>), { inner: {\n        get TextFieldBoxWithLabelWrapper() { return TextFieldBoxWithLabelWrapper as typeof TextFieldBoxWithLabelWrapper; },\n        get TextFieldLabel() { return TextFieldLabel as typeof TextFieldLabel; },\n        get TextFieldLabelText() { return TextFieldLabelText as typeof TextFieldLabelText; }\n    } });\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}