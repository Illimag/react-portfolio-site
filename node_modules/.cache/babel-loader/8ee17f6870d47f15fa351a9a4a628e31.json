{"ast":null,"code":"import * as React from 'react';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\n/**\n * Wraps the component in a responsive construct that is sensitive to the size changes of its\n * container.\n * @param Component The component to be sensitive to its container dimensions.\n * @returns A component that can use the `dimensions` prop.\n */\n\nexport function withResponsive(Component) {\n  return withInner(class Responsive extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.sizeChanged = () => {\n        const {\n          width,\n          height\n        } = this.getDimension();\n\n        if (width !== this.state.width || height !== this.state.height) {\n          this.setState({\n            width,\n            height\n          });\n        }\n      };\n\n      this.orientationChanged = () => this.setState({\n        angle: screen.orientation && screen.orientation.angle || 0\n      });\n\n      this.setNode = node => this.node = node;\n\n      const screenWithOrientaion = screen;\n      this.state = {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        angle: screenWithOrientaion.orientation && screenWithOrientaion.orientation.angle || 0\n      };\n    }\n\n    componentDidMount() {\n      window.addEventListener('resize', this.sizeChanged);\n      window.addEventListener('orientationchange', this.orientationChanged);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.sizeChanged);\n      window.removeEventListener('orientationchange', this.orientationChanged);\n    }\n\n    getDimension() {\n      if (this.node) {\n        const boundingClientRect = this.node.getBoundingClientRect();\n        return {\n          width: boundingClientRect.width,\n          height: boundingClientRect.height\n        };\n      } else {\n        const {\n          innerWidth,\n          innerHeight\n        } = window;\n        return {\n          width: innerWidth,\n          height: innerHeight\n        };\n      }\n    }\n\n    render() {\n      const additionalProps = {\n        innerRef: this.setNode,\n        dimensions: this.state\n      };\n      const props = Object.assign({}, this.props, additionalProps);\n      return React.createElement(Component, Object.assign({}, props));\n    }\n\n  }, {\n    Component\n  });\n}","map":{"version":3,"sources":["../../../src/hoc/withResponsive.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,SAAT,QAA0B,uCAA1B;AAqBA;;;;;;;AAMA,OAAM,SAAU,cAAV,CAAkE,SAAlE,EAAwG;AAC1G,SAAO,SAAS,CAAC,MAAM,UAAN,SAAyB,KAAK,CAAC,SAA/B,CAA0E;AAEvF,IAAA,WAAA,CAAY,KAAZ,EAAyB;AACrB,YAAM,KAAN;;AAoCJ,WAAA,WAAA,GAAc,MAAK;AACf,cAAM;AAAE,UAAA,KAAF;AAAS,UAAA;AAAT,YAAoB,KAAK,YAAL,EAA1B;;AACA,YAAI,KAAK,KAAK,KAAK,KAAL,CAAW,KAArB,IAA8B,MAAM,KAAK,KAAK,KAAL,CAAW,MAAxD,EAAgE;AAC5D,eAAK,QAAL,CAAc;AACV,YAAA,KADU;AAEV,YAAA;AAFU,WAAd;AAIH;AACJ,OARD;;AASA,WAAA,kBAAA,GAAqB,MAAM,KAAK,QAAL,CAAc;AACrC,QAAA,KAAK,EAAG,MAAM,CAAC,WAAP,IAAsB,MAAM,CAAC,WAAP,CAAmB,KAA1C,IAAoD;AADtB,OAAd,CAA3B;;AAGA,WAAA,OAAA,GAAW,IAAD,IAA+B,KAAK,IAAL,GAAY,IAArD;;AA/CI,YAAM,oBAAoB,GAAG,MAA7B;AAKA,WAAK,KAAL,GAAa;AACT,QAAA,KAAK,EAAE,MAAM,CAAC,UADL;AAET,QAAA,MAAM,EAAE,MAAM,CAAC,WAFN;AAGT,QAAA,KAAK,EAAG,oBAAoB,CAAC,WAArB,IAAoC,oBAAoB,CAAC,WAArB,CAAiC,KAAtE,IAAgF;AAH9E,OAAb;AAKH;;AACD,IAAA,iBAAiB,GAAA;AACb,MAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,KAAK,WAAvC;AACA,MAAA,MAAM,CAAC,gBAAP,CAAwB,mBAAxB,EAA6C,KAAK,kBAAlD;AACH;;AACD,IAAA,oBAAoB,GAAA;AAChB,MAAA,MAAM,CAAC,mBAAP,CAA2B,QAA3B,EAAqC,KAAK,WAA1C;AACA,MAAA,MAAM,CAAC,mBAAP,CAA2B,mBAA3B,EAAgD,KAAK,kBAArD;AACH;;AACD,IAAA,YAAY,GAAA;AACR,UAAI,KAAK,IAAT,EAAe;AACX,cAAM,kBAAkB,GAAG,KAAK,IAAL,CAAU,qBAAV,EAA3B;AACA,eAAO;AACH,UAAA,KAAK,EAAE,kBAAkB,CAAC,KADvB;AAEH,UAAA,MAAM,EAAE,kBAAkB,CAAC;AAFxB,SAAP;AAIH,OAND,MAOK;AACD,cAAM;AAAE,UAAA,UAAF;AAAc,UAAA;AAAd,YAA8B,MAApC;AACA,eAAO;AACH,UAAA,KAAK,EAAE,UADJ;AAEH,UAAA,MAAM,EAAE;AAFL,SAAP;AAIH;AACJ;;AAcD,IAAA,MAAM,GAAA;AACF,YAAM,eAAe,GAA6B;AAC9C,QAAA,QAAQ,EAAE,KAAK,OAD+B;AAE9C,QAAA,UAAU,EAAE,KAAK;AAF6B,OAAlD;AAIA,YAAM,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,KAAK,KAAb,EAAuB,eAAvB,CAAX;AACA,aAAO,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAV,CAAP;AACH;;AA3DsF,GAA3E,EA4Db;AAAE,IAAA;AAAF,GA5Da,CAAhB;AA6DH","sourcesContent":["import * as React from 'react';\nimport { RefProps } from '../common';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\nexport interface ResponsiveComponentProps extends RefProps {\n    /**\n     * The dimensions values container\n     */\n    dimensions?: ResponsiveComponentState;\n}\nexport interface ResponsiveComponentState {\n    /**\n     * The width of the container in pixels.\n     */\n    width: number;\n    /**\n     * The height of the container in pixels.\n     */\n    height: number;\n    /**\n     * The current screen rotation in degrees.\n     */\n    angle: number;\n}\n/**\n * Wraps the component in a responsive construct that is sensitive to the size changes of its\n * container.\n * @param Component The component to be sensitive to its container dimensions.\n * @returns A component that can use the `dimensions` prop.\n */\nexport function withResponsive<TProps extends ResponsiveComponentProps>(Component: React.ComponentType<TProps>): React.ComponentClass<TProps> {\n    return withInner(class Responsive extends React.Component<TProps, ResponsiveComponentState> {\n        node: HTMLElement | null;\n        constructor(props: TProps) {\n            super(props);\n            const screenWithOrientaion = screen as {\n                orientation?: {\n                    angle: number;\n                };\n            };\n            this.state = {\n                width: window.innerWidth,\n                height: window.innerHeight,\n                angle: (screenWithOrientaion.orientation && screenWithOrientaion.orientation.angle) || 0,\n            };\n        }\n        componentDidMount() {\n            window.addEventListener('resize', this.sizeChanged);\n            window.addEventListener('orientationchange', this.orientationChanged);\n        }\n        componentWillUnmount() {\n            window.removeEventListener('resize', this.sizeChanged);\n            window.removeEventListener('orientationchange', this.orientationChanged);\n        }\n        getDimension() {\n            if (this.node) {\n                const boundingClientRect = this.node.getBoundingClientRect();\n                return {\n                    width: boundingClientRect.width,\n                    height: boundingClientRect.height,\n                };\n            }\n            else {\n                const { innerWidth, innerHeight } = window;\n                return {\n                    width: innerWidth,\n                    height: innerHeight,\n                };\n            }\n        }\n        sizeChanged = () => {\n            const { width, height } = this.getDimension();\n            if (width !== this.state.width || height !== this.state.height) {\n                this.setState({\n                    width,\n                    height,\n                });\n            }\n        };\n        orientationChanged = () => this.setState({\n            angle: (screen.orientation && screen.orientation.angle) || 0,\n        });\n        setNode = (node: HTMLElement | null) => (this.node = node);\n        render() {\n            const additionalProps: ResponsiveComponentProps = {\n                innerRef: this.setNode,\n                dimensions: this.state,\n            };\n            const props = { ...this.props, ...additionalProps };\n            return <Component {...props}/>;\n        }\n    }, { Component });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}