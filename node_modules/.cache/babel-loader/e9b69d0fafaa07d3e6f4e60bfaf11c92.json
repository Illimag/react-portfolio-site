{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { Spinner } from '../Spinner';\nimport styled, { themed } from '../../utils/styled'; // Wrapper used only in case when preloader enabled\n\nconst StyledImageWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  flex: 1 1 auto;\n  box-sizing: border-box;\n`;\nconst StyledImage = styled.img`\n  margin: 0;\n  padding: 0;\n  border: 0;\n  display: inline-block;\n  vertical-align: middle;\n  max-width: 100%;\n  height: auto;\n  border-style: none;\n`;\nconst StyledError = styled.span`\n  background: ${themed(props => props.theme.inputError)};\n  color: ${themed(props => props.theme.text7)};\n  font-family: inherit;\n`;\n/**\n * Image component is meant to be a simple wrapper for standard DOM `img` element.\n * Component is fluid by default, meaning that it has max-width: 100% and height: auto,\n * so that it scales with it's parent.\n */\n\nexport class Image extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'idle'\n    };\n  }\n\n  componentDidMount() {\n    const {\n      preload,\n      src\n    } = this.props;\n\n    if (preload) {\n      const image = document.createElement('img');\n\n      image.onload = () => this.setState({\n        status: 'loaded'\n      });\n\n      image.onerror = () => this.setState({\n        status: 'error'\n      });\n\n      image.src = src;\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      preload,\n      src,\n      alt,\n      preloader,\n      error\n    } = _a,\n          rest = __rest(_a, [\"children\", \"preload\", \"src\", \"alt\", \"preloader\", \"error\"]);\n\n    const {\n      status\n    } = this.state;\n    return preload ? React.createElement(StyledImageWrapper, null, (() => {\n      switch (status) {\n        case 'loaded':\n          return React.createElement(StyledImage, Object.assign({\n            src: src,\n            alt: alt\n          }, rest));\n\n        case 'error':\n          return error || React.createElement(StyledError, null, \"Error loading image from \", src, \".\");\n\n        case 'loading':\n        case 'idle':\n        default:\n          return preloader || React.createElement(Spinner, null);\n      }\n    })()) : React.createElement(StyledImage, Object.assign({\n      src: src,\n      alt: alt\n    }, rest));\n  }\n\n}\nImage.inner = {\n  get StyledImageWrapper() {\n    return StyledImageWrapper;\n  },\n\n  get StyledImage() {\n    return StyledImage;\n  },\n\n  get StyledError() {\n    return StyledError;\n  },\n\n  get Spinner() {\n    return Spinner;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Image/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Spinner } from '../Spinner';\nimport styled, { themed } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nexport type Status = 'idle' | 'loading' | 'loaded' | 'error';\nexport interface ImageProps extends StandardProps {\n    /**\n     * @ignore\n     */\n    children?: void;\n    /**\n     * This attribute defines the alternative text describing the image.\n     * Users will see this text displayed if the image URL is wrong,\n     * the image is not in one of the supported formats, or if the image is not yet downloaded.\n     */\n    alt: string;\n    /**\n     * When specified, image will be preloaded and the preloader shown during the preloading.\n     * Default is false.\n     * @default false\n     */\n    preload?: boolean;\n    /**\n     * The image URL. This attribute is mandatory for the <Image> component.\n     */\n    src: string;\n    /**\n     * Custom preloader component to indicate loading.\n     */\n    preloader?: React.ReactChild;\n    /**\n     * Custom error component that is displayed when the loading fails.\n     */\n    error?: React.ReactChild;\n}\nexport interface ImageState {\n    status: Status;\n}\n// Wrapper used only in case when preloader enabled\nconst StyledImageWrapper = styled.div `\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  flex: 1 1 auto;\n  box-sizing: border-box;\n`;\nconst StyledImage = styled.img `\n  margin: 0;\n  padding: 0;\n  border: 0;\n  display: inline-block;\n  vertical-align: middle;\n  max-width: 100%;\n  height: auto;\n  border-style: none;\n`;\nconst StyledError = styled.span `\n  background: ${themed(props => props.theme.inputError)};\n  color: ${themed(props => props.theme.text7)};\n  font-family: inherit;\n`;\n/**\n * Image component is meant to be a simple wrapper for standard DOM `img` element.\n * Component is fluid by default, meaning that it has max-width: 100% and height: auto,\n * so that it scales with it's parent.\n */\nexport class Image extends React.Component<ImageProps, ImageState> {\n    constructor(props: ImageProps) {\n        super(props);\n        this.state = {\n            status: 'idle',\n        };\n    }\n    componentDidMount() {\n        const { preload, src } = this.props;\n        if (preload) {\n            const image = document.createElement('img');\n            image.onload = () => this.setState({ status: 'loaded' });\n            image.onerror = () => this.setState({ status: 'error' });\n            image.src = src;\n        }\n    }\n    render() {\n        const { children, preload, src, alt, preloader, error, ...rest } = this.props;\n        const { status } = this.state;\n        return preload ? (<StyledImageWrapper>\n        {(() => {\n            switch (status) {\n                case 'loaded':\n                    return <StyledImage src={src} alt={alt} {...rest}/>;\n                case 'error':\n                    return error || <StyledError>Error loading image from {src}.</StyledError>;\n                case 'loading':\n                case 'idle':\n                default:\n                    return preloader || <Spinner />;\n            }\n        })()}\n      </StyledImageWrapper>) : (<StyledImage src={src} alt={alt} {...rest}/>);\n    }\n    static inner = {\n        get StyledImageWrapper() { return StyledImageWrapper as typeof StyledImageWrapper; },\n        get StyledImage() { return StyledImage as typeof StyledImage; },\n        get StyledError() { return StyledError as typeof StyledError; },\n        get Spinner() { return Spinner as typeof Spinner; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}