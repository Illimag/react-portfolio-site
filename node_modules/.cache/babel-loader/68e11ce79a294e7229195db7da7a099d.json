{"ast":null,"code":"import _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\n/**\n * Wraps the component in a responsive construct that is sensitive to the size changes of its\n * container.\n * @param Component The component to be sensitive to its container dimensions.\n * @returns A component that can use the `dimensions` prop.\n */\n\nexport function withResponsive(Component) {\n  return withInner( /*#__PURE__*/function (_React$Component) {\n    _inherits(Responsive, _React$Component);\n\n    var _super = _createSuper(Responsive);\n\n    function Responsive(props) {\n      var _this;\n\n      _classCallCheck(this, Responsive);\n\n      _this = _super.call(this, props);\n\n      _this.sizeChanged = function () {\n        var _this$getDimension = _this.getDimension(),\n            width = _this$getDimension.width,\n            height = _this$getDimension.height;\n\n        if (width !== _this.state.width || height !== _this.state.height) {\n          _this.setState({\n            width: width,\n            height: height\n          });\n        }\n      };\n\n      _this.orientationChanged = function () {\n        return _this.setState({\n          angle: screen.orientation && screen.orientation.angle || 0\n        });\n      };\n\n      _this.setNode = function (node) {\n        return _this.node = node;\n      };\n\n      var screenWithOrientaion = screen;\n      _this.state = {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        angle: screenWithOrientaion.orientation && screenWithOrientaion.orientation.angle || 0\n      };\n      return _this;\n    }\n\n    _createClass(Responsive, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        window.addEventListener('resize', this.sizeChanged);\n        window.addEventListener('orientationchange', this.orientationChanged);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        window.removeEventListener('resize', this.sizeChanged);\n        window.removeEventListener('orientationchange', this.orientationChanged);\n      }\n    }, {\n      key: \"getDimension\",\n      value: function getDimension() {\n        if (this.node) {\n          var boundingClientRect = this.node.getBoundingClientRect();\n          return {\n            width: boundingClientRect.width,\n            height: boundingClientRect.height\n          };\n        } else {\n          var _window = window,\n              innerWidth = _window.innerWidth,\n              innerHeight = _window.innerHeight;\n          return {\n            width: innerWidth,\n            height: innerHeight\n          };\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var additionalProps = {\n          innerRef: this.setNode,\n          dimensions: this.state\n        };\n        var props = Object.assign({}, this.props, additionalProps);\n        return React.createElement(Component, Object.assign({}, props));\n      }\n    }]);\n\n    return Responsive;\n  }(React.Component), {\n    Component: Component\n  });\n}","map":{"version":3,"sources":["../../../src/hoc/withResponsive.tsx"],"names":[],"mappings":";;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,SAAT,QAA0B,uCAA1B;AAqBA;;;;;;;AAMA,OAAM,SAAU,cAAV,CAAkE,SAAlE,EAAwG;AAC1G,SAAO,SAAS;AAAA;;AAAA;;AAEZ,wBAAY,KAAZ,EAAyB;AAAA;;AAAA;;AACrB,gCAAM,KAAN;;AAoCJ,YAAA,WAAA,GAAc,YAAK;AAAA,iCACW,MAAK,YAAL,EADX;AAAA,YACP,KADO,sBACP,KADO;AAAA,YACA,MADA,sBACA,MADA;;AAEf,YAAI,KAAK,KAAK,MAAK,KAAL,CAAW,KAArB,IAA8B,MAAM,KAAK,MAAK,KAAL,CAAW,MAAxD,EAAgE;AAC5D,gBAAK,QAAL,CAAc;AACV,YAAA,KAAK,EAAL,KADU;AAEV,YAAA,MAAM,EAAN;AAFU,WAAd;AAIH;AACJ,OARD;;AASA,YAAA,kBAAA,GAAqB;AAAA,eAAM,MAAK,QAAL,CAAc;AACrC,UAAA,KAAK,EAAG,MAAM,CAAC,WAAP,IAAsB,MAAM,CAAC,WAAP,CAAmB,KAA1C,IAAoD;AADtB,SAAd,CAAN;AAAA,OAArB;;AAGA,YAAA,OAAA,GAAU,UAAC,IAAD;AAAA,eAA+B,MAAK,IAAL,GAAY,IAA3C;AAAA,OAAV;;AA/CI,UAAM,oBAAoB,GAAG,MAA7B;AAKA,YAAK,KAAL,GAAa;AACT,QAAA,KAAK,EAAE,MAAM,CAAC,UADL;AAET,QAAA,MAAM,EAAE,MAAM,CAAC,WAFN;AAGT,QAAA,KAAK,EAAG,oBAAoB,CAAC,WAArB,IAAoC,oBAAoB,CAAC,WAArB,CAAiC,KAAtE,IAAgF;AAH9E,OAAb;AAPqB;AAYxB;;AAdW;AAAA;AAAA,0CAeK;AACb,QAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,KAAK,WAAvC;AACA,QAAA,MAAM,CAAC,gBAAP,CAAwB,mBAAxB,EAA6C,KAAK,kBAAlD;AACH;AAlBW;AAAA;AAAA,6CAmBQ;AAChB,QAAA,MAAM,CAAC,mBAAP,CAA2B,QAA3B,EAAqC,KAAK,WAA1C;AACA,QAAA,MAAM,CAAC,mBAAP,CAA2B,mBAA3B,EAAgD,KAAK,kBAArD;AACH;AAtBW;AAAA;AAAA,qCAuBA;AACR,YAAI,KAAK,IAAT,EAAe;AACX,cAAM,kBAAkB,GAAG,KAAK,IAAL,CAAU,qBAAV,EAA3B;AACA,iBAAO;AACH,YAAA,KAAK,EAAE,kBAAkB,CAAC,KADvB;AAEH,YAAA,MAAM,EAAE,kBAAkB,CAAC;AAFxB,WAAP;AAIH,SAND,MAOK;AAAA,wBACmC,MADnC;AAAA,cACO,UADP,WACO,UADP;AAAA,cACmB,WADnB,WACmB,WADnB;AAED,iBAAO;AACH,YAAA,KAAK,EAAE,UADJ;AAEH,YAAA,MAAM,EAAE;AAFL,WAAP;AAIH;AACJ;AAtCW;AAAA;AAAA,+BAoDN;AACF,YAAM,eAAe,GAA6B;AAC9C,UAAA,QAAQ,EAAE,KAAK,OAD+B;AAE9C,UAAA,UAAU,EAAE,KAAK;AAF6B,SAAlD;AAIA,YAAM,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,KAAK,KAAb,EAAuB,eAAvB,CAAX;AACA,eAAO,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAV,CAAP;AACH;AA3DW;;AAAA;AAAA,IAA0B,KAAK,CAAC,SAAhC,GA4Db;AAAE,IAAA,SAAS,EAAT;AAAF,GA5Da,CAAhB;AA6DH","sourcesContent":["import * as React from 'react';\nimport { RefProps } from '../common';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\nexport interface ResponsiveComponentProps extends RefProps {\n    /**\n     * The dimensions values container\n     */\n    dimensions?: ResponsiveComponentState;\n}\nexport interface ResponsiveComponentState {\n    /**\n     * The width of the container in pixels.\n     */\n    width: number;\n    /**\n     * The height of the container in pixels.\n     */\n    height: number;\n    /**\n     * The current screen rotation in degrees.\n     */\n    angle: number;\n}\n/**\n * Wraps the component in a responsive construct that is sensitive to the size changes of its\n * container.\n * @param Component The component to be sensitive to its container dimensions.\n * @returns A component that can use the `dimensions` prop.\n */\nexport function withResponsive<TProps extends ResponsiveComponentProps>(Component: React.ComponentType<TProps>): React.ComponentClass<TProps> {\n    return withInner(class Responsive extends React.Component<TProps, ResponsiveComponentState> {\n        node: HTMLElement | null;\n        constructor(props: TProps) {\n            super(props);\n            const screenWithOrientaion = screen as {\n                orientation?: {\n                    angle: number;\n                };\n            };\n            this.state = {\n                width: window.innerWidth,\n                height: window.innerHeight,\n                angle: (screenWithOrientaion.orientation && screenWithOrientaion.orientation.angle) || 0,\n            };\n        }\n        componentDidMount() {\n            window.addEventListener('resize', this.sizeChanged);\n            window.addEventListener('orientationchange', this.orientationChanged);\n        }\n        componentWillUnmount() {\n            window.removeEventListener('resize', this.sizeChanged);\n            window.removeEventListener('orientationchange', this.orientationChanged);\n        }\n        getDimension() {\n            if (this.node) {\n                const boundingClientRect = this.node.getBoundingClientRect();\n                return {\n                    width: boundingClientRect.width,\n                    height: boundingClientRect.height,\n                };\n            }\n            else {\n                const { innerWidth, innerHeight } = window;\n                return {\n                    width: innerWidth,\n                    height: innerHeight,\n                };\n            }\n        }\n        sizeChanged = () => {\n            const { width, height } = this.getDimension();\n            if (width !== this.state.width || height !== this.state.height) {\n                this.setState({\n                    width,\n                    height,\n                });\n            }\n        };\n        orientationChanged = () => this.setState({\n            angle: (screen.orientation && screen.orientation.angle) || 0,\n        });\n        setNode = (node: HTMLElement | null) => (this.node = node);\n        render() {\n            const additionalProps: ResponsiveComponentProps = {\n                innerRef: this.setNode,\n                dimensions: this.state,\n            };\n            const props = { ...this.props, ...additionalProps };\n            return <Component {...props}/>;\n        }\n    }, { Component });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}