{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { withResponsive } from '../../hoc/withResponsive';\nimport { Container, Content, Header, Headers, OverflowItems } from './ContentSwitch.part';\nimport { OverflowMenu } from '../OverflowMenu';\nimport { Icon } from '../Icon';\nconst defaultOrientation = 'horizontal';\nconst overflowButtonWidth = 50;\nconst ContentSwitchInt = Object.assign(_a => {\n  var {\n    orientation = defaultOrientation,\n    children,\n    theme,\n    headers,\n    activeIndex,\n    onSelect\n  } = _a,\n      rest = __rest(_a, [\"orientation\", \"children\", \"theme\", \"headers\", \"activeIndex\", \"onSelect\"]);\n\n  const [overflowItems, setOverflowItems] = React.useState([]);\n  const containerRef = React.createRef();\n  const headerRef = React.createRef();\n  React.useLayoutEffect(() => {\n    if (headerRef.current && containerRef.current && orientation === 'horizontal') {\n      const {\n        offsetWidth: containerWidth\n      } = containerRef.current;\n      const headerNodesWidth = Array.from(headerRef.current.childNodes).map(node => node.offsetWidth);\n      const headersUlWidth = headerNodesWidth.reduce((acc, cur) => acc += cur, 0);\n\n      if (headersUlWidth > containerWidth) {\n        const overflowItems = [];\n        let visibleItemsWidth = overflowButtonWidth;\n        headerNodesWidth.forEach((nodeWidth, index) => {\n          visibleItemsWidth += nodeWidth;\n\n          if (visibleItemsWidth > containerWidth) {\n            overflowItems.push(headers[index]);\n          }\n        });\n        setOverflowItems(overflowItems);\n      }\n    }\n\n    return () => setOverflowItems([]);\n  }, [headerRef.current, containerRef.current, orientation]);\n  return React.createElement(Container, Object.assign({\n    theme: theme\n  }, rest, {\n    ref: containerRef\n  }), React.createElement(Headers, {\n    theme: theme,\n    orientation: orientation,\n    ref: headerRef\n  }, headers.slice(0, headers.length - overflowItems.length).map((element, index) => React.createElement(Header, {\n    theme: theme,\n    key: `head-${index}`,\n    active: index === activeIndex,\n    onClick: () => onSelect(index),\n    orientation: orientation\n  }, element)), overflowItems.length > 0 && React.createElement(OverflowMenu, {\n    key: \"overflowButton\",\n    items: overflowItems.map((element, index, {\n      length\n    }) => React.createElement(OverflowItems, {\n      onClick: () => onSelect(headers.length - length + index)\n    }, element)),\n    button: React.createElement(Header, null, React.createElement(Icon, {\n      name: \"MoreVert\"\n    }))\n  })), React.createElement(Content, {\n    theme: theme\n  }, children));\n}, {\n  inner: {\n    get Container() {\n      return Container;\n    },\n\n    get Headers() {\n      return Headers;\n    },\n\n    get Header() {\n      return Header;\n    },\n\n    get OverflowMenu() {\n      return OverflowMenu;\n    },\n\n    get Content() {\n      return Content;\n    }\n\n  }\n});\nexport const ResponsiveSwitchPanel = withResponsive(ContentSwitchInt);","map":{"version":3,"sources":["../../../../src/components/ContentSwitch/ResponsiveSwitchPanel.part.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,cAAT,QAA+B,0BAA/B;AACA,SAAS,SAAT,EAAoB,OAApB,EAA6B,MAA7B,EAAqC,OAArC,EAA8C,aAA9C,QAAmE,sBAAnE;AAEA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,IAAT,QAAqB,SAArB;AACA,MAAM,kBAAkB,GAA6B,YAArD;AACA,MAAM,mBAAmB,GAAG,EAA5B;AACA,MAAM,gBAAgB,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAAmG;MAAlG;AAAE,IAAA,WAAW,GAAG,kBAAhB;AAAoC,IAAA,QAApC;AAA8C,IAAA,KAA9C;AAAqD,IAAA,OAArD;AAA8D,IAAA,WAA9D;AAA2E,IAAA;AAA3E,MAAmF,E;MAAE,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,aAAA,EAAA,UAAA,EAAA,OAAA,EAAA,SAAA,EAAA,aAAA,EAAA,UAAA,CAAA,C;;AAC3H,QAAM,CAAC,aAAD,EAAgB,gBAAhB,IAAoC,KAAK,CAAC,QAAN,CAA+B,EAA/B,CAA1C;AACA,QAAM,YAAY,GAAG,KAAK,CAAC,SAAN,EAArB;AACA,QAAM,SAAS,GAAG,KAAK,CAAC,SAAN,EAAlB;AACA,EAAA,KAAK,CAAC,eAAN,CAAsB,MAAK;AACvB,QAAI,SAAS,CAAC,OAAV,IAAqB,YAAY,CAAC,OAAlC,IAA6C,WAAW,KAAK,YAAjE,EAA+E;AAC3E,YAAM;AAAE,QAAA,WAAW,EAAE;AAAf,UAAkC,YAAY,CAAC,OAArD;AACA,YAAM,gBAAgB,GAAG,KAAK,CAAC,IAAN,CAAW,SAAS,CAAC,OAAV,CAAkB,UAA7B,EAAyC,GAAzC,CAA8C,IAAD,IAAyB,IAAI,CAAC,WAA3E,CAAzB;AACA,YAAM,cAAc,GAAG,gBAAgB,CAAC,MAAjB,CAAwB,CAAC,GAAD,EAAM,GAAN,KAAe,GAAG,IAAI,GAA9C,EAAoD,CAApD,CAAvB;;AACA,UAAI,cAAc,GAAG,cAArB,EAAqC;AACjC,cAAM,aAAa,GAAmB,EAAtC;AACA,YAAI,iBAAiB,GAAG,mBAAxB;AACA,QAAA,gBAAgB,CAAC,OAAjB,CAAyB,CAAC,SAAD,EAAY,KAAZ,KAAqB;AAC1C,UAAA,iBAAiB,IAAI,SAArB;;AACA,cAAI,iBAAiB,GAAG,cAAxB,EAAwC;AACpC,YAAA,aAAa,CAAC,IAAd,CAAmB,OAAO,CAAC,KAAD,CAA1B;AACH;AACJ,SALD;AAMA,QAAA,gBAAgB,CAAC,aAAD,CAAhB;AACH;AACJ;;AACD,WAAO,MAAM,gBAAgB,CAAC,EAAD,CAA7B;AACH,GAlBD,EAkBG,CAAC,SAAS,CAAC,OAAX,EAAoB,YAAY,CAAC,OAAjC,EAA0C,WAA1C,CAlBH;AAmBA,SAAQ,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE;AAAR,GAAA,EAAmB,IAAnB,EAAuB;AAAE,IAAA,GAAG,EAAE;AAAP,GAAvB,CAAV,EACN,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ;AAAC,IAAA,KAAK,EAAE,KAAR;AAAe,IAAA,WAAW,EAAE,WAA5B;AAAyC,IAAA,GAAG,EAAE;AAA9C,GAAR,EACG,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,OAAO,CAAC,MAAR,GAAiB,aAAa,CAAC,MAAhD,EAAwD,GAAxD,CAA4D,CAAC,OAAD,EAAU,KAAV,KAAqB,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,IAAA,KAAK,EAAE,KAAR;AAAe,IAAA,GAAG,EAAE,QAAQ,KAAK,EAAjC;AAAqC,IAAA,MAAM,EAAE,KAAK,KAAK,WAAvD;AAAoE,IAAA,OAAO,EAAE,MAAM,QAAQ,CAAC,KAAD,CAA3F;AAAoG,IAAA,WAAW,EAAE;AAAjH,GAAP,EAC7E,OAD6E,CAAjF,CADH,EAIG,aAAa,CAAC,MAAd,GAAuB,CAAvB,IAA6B,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,IAAA,GAAG,EAAC,gBAAL;AAAsB,IAAA,KAAK,EAAE,aAAa,CAAC,GAAd,CAAkB,CAAC,OAAD,EAAU,KAAV,EAAiB;AAAE,MAAA;AAAF,KAAjB,KAAiC,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AAAC,MAAA,OAAO,EAAE,MAAM,QAAQ,CAAC,OAAO,CAAC,MAAR,GAAiB,MAAjB,GAA0B,KAA3B;AAAxB,KAAd,EAA0E,OAA1E,CAAnD,CAA7B;AAAsL,IAAA,MAAM,EAAE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO,IAAP,EACjO,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,MAAA,IAAI,EAAC;AAAN,KAAL,CADiO;AAA9L,GAAb,CAJhC,CADM,EASN,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ;AAAC,IAAA,KAAK,EAAE;AAAR,GAAR,EAAwB,QAAxB,CATM,CAAR;AAWH,CAlCwB,EAkCe;AAAE,EAAA,KAAK,EAAE;AACzC,QAAI,SAAJ,GAAa;AAAK,aAAO,SAAP;AAAuC,KADhB;;AAEzC,QAAI,OAAJ,GAAW;AAAK,aAAO,OAAP;AAAmC,KAFV;;AAGzC,QAAI,MAAJ,GAAU;AAAK,aAAO,MAAP;AAAiC,KAHP;;AAIzC,QAAI,YAAJ,GAAgB;AAAK,aAAO,YAAP;AAA6C,KAJzB;;AAKzC,QAAI,OAAJ,GAAW;AAAK,aAAO,OAAP;AAAmC;;AALV;AAAT,CAlCf,CAAzB;AA8CA,OAAO,MAAM,qBAAqB,GAAiC,cAAc,CAAC,gBAAD,CAA1E","sourcesContent":["import * as React from 'react';\nimport { withResponsive } from '../../hoc/withResponsive';\nimport { Container, Content, Header, Headers, OverflowItems } from './ContentSwitch.part';\nimport { ContentSwitchOrientation, ContentSwitchPropsInt } from './ContentSwitchTypes.part';\nimport { OverflowMenu } from '../OverflowMenu';\nimport { Icon } from '../Icon';\nconst defaultOrientation: ContentSwitchOrientation = 'horizontal';\nconst overflowButtonWidth = 50;\nconst ContentSwitchInt = Object.assign(((({ orientation = defaultOrientation, children, theme, headers, activeIndex, onSelect, ...rest }) => {\n    const [overflowItems, setOverflowItems] = React.useState<typeof headers>([]);\n    const containerRef = React.createRef<HTMLDivElement>();\n    const headerRef = React.createRef<HTMLUListElement>();\n    React.useLayoutEffect(() => {\n        if (headerRef.current && containerRef.current && orientation === 'horizontal') {\n            const { offsetWidth: containerWidth } = containerRef.current;\n            const headerNodesWidth = Array.from(headerRef.current.childNodes).map((node: HTMLLIElement) => node.offsetWidth);\n            const headersUlWidth = headerNodesWidth.reduce((acc, cur) => (acc += cur), 0);\n            if (headersUlWidth > containerWidth) {\n                const overflowItems: typeof headers = [];\n                let visibleItemsWidth = overflowButtonWidth;\n                headerNodesWidth.forEach((nodeWidth, index) => {\n                    visibleItemsWidth += nodeWidth;\n                    if (visibleItemsWidth > containerWidth) {\n                        overflowItems.push(headers[index]);\n                    }\n                });\n                setOverflowItems(overflowItems);\n            }\n        }\n        return () => setOverflowItems([]);\n    }, [headerRef.current, containerRef.current, orientation]);\n    return (<Container theme={theme} {...rest} ref={containerRef}>\n      <Headers theme={theme} orientation={orientation} ref={headerRef}>\n        {headers.slice(0, headers.length - overflowItems.length).map((element, index) => (<Header theme={theme} key={`head-${index}`} active={index === activeIndex} onClick={() => onSelect(index)} orientation={orientation}>\n            {element}\n          </Header>))}\n        {overflowItems.length > 0 && (<OverflowMenu key=\"overflowButton\" items={overflowItems.map((element, index, { length }) => (<OverflowItems onClick={() => onSelect(headers.length - length + index)}>{element}</OverflowItems>))} button={<Header>\n                <Icon name=\"MoreVert\"/>\n              </Header>}/>)}\n      </Headers>\n      <Content theme={theme}>{children}</Content>\n    </Container>);\n}) as React.FC<ContentSwitchPropsInt>), { inner: {\n        get Container() { return Container as typeof Container; },\n        get Headers() { return Headers as typeof Headers; },\n        get Header() { return Header as typeof Header; },\n        get OverflowMenu() { return OverflowMenu as typeof OverflowMenu; },\n        get Content() { return Content as typeof Content; }\n    } });\nexport interface ResponsiveContentSwitchProps extends React.FC<ContentSwitchPropsInt> {\n    (props: ContentSwitchPropsInt & {\n        children?: React.ReactNode;\n    }, context?: any): JSX.Element;\n}\nexport const ResponsiveSwitchPanel: ResponsiveContentSwitchProps = withResponsive(ContentSwitchInt) as any;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}