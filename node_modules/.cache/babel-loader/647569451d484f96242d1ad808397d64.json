{"ast":null,"code":"import * as React from 'react';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\n/**\n * Provides automatic validation for a wrapped component.\n * @param validate The validation function.\n * @returns A constructor function taking a component to be wrapped with the validation.\n */\n\nexport function withValidation(validate) {\n  return Component => {\n    return withInner(class Validator extends React.PureComponent {\n      constructor(props) {\n        super(props);\n\n        this.validate = e => {\n          const {\n            onChange,\n            onError,\n            onSuccess\n          } = this.props;\n          const error = validate(e);\n\n          if (error !== this.state.error) {\n            const notify = error ? onError : onSuccess;\n            this.setState({\n              error\n            });\n\n            if (typeof notify === 'function') {\n              notify();\n            }\n          }\n\n          if (typeof onChange === 'function') {\n            onChange(e);\n          }\n        };\n\n        this.state = {\n          error: undefined\n        };\n      }\n\n      render() {\n        const {\n          error = this.props.error\n        } = this.state;\n        return React.createElement(Component, Object.assign({}, this.props, {\n          error: error,\n          onChange: this.validate\n        }));\n      }\n\n    }, {\n      Component\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/hoc/withValidation.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,SAAT,QAA0B,uCAA1B;AAkBA;;;;;;AAKA,OAAM,SAAU,cAAV,CAAqC,QAArC,EAA8F;AAChG,SAAmD,SAA5C,IAAsF;AACzF,WAAO,SAAS,CAAC,MAAM,SAAN,SAAwB,KAAK,CAAC,aAA9B,CAAoF;AACjG,MAAA,WAAA,CAAY,KAAZ,EAA0C;AACtC,cAAM,KAAN;;AAKJ,aAAA,QAAA,GAAY,CAAD,IAAkB;AACzB,gBAAM;AAAE,YAAA,QAAF;AAAY,YAAA,OAAZ;AAAqB,YAAA;AAArB,cAAmC,KAAK,KAA9C;AACA,gBAAM,KAAK,GAAG,QAAQ,CAAC,CAAD,CAAtB;;AACA,cAAI,KAAK,KAAK,KAAK,KAAL,CAAW,KAAzB,EAAgC;AAC5B,kBAAM,MAAM,GAAG,KAAK,GAAG,OAAH,GAAa,SAAjC;AACA,iBAAK,QAAL,CAAc;AACV,cAAA;AADU,aAAd;;AAGA,gBAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,cAAA,MAAM;AACT;AACJ;;AACD,cAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAChC,YAAA,QAAQ,CAAC,CAAD,CAAR;AACH;AACJ,SAfD;;AAJI,aAAK,KAAL,GAAa;AACT,UAAA,KAAK,EAAE;AADE,SAAb;AAGH;;AAiBD,MAAA,MAAM,GAAA;AACF,cAAM;AAAE,UAAA,KAAK,GAAG,KAAK,KAAL,CAAW;AAArB,YAA+B,KAAK,KAA1C;AACA,eAAO,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAK,KAAV,EAAe;AAAE,UAAA,KAAK,EAAE,KAAT;AAAgB,UAAA,QAAQ,EAAE,KAAK;AAA/B,SAAf,CAAV,CAAP;AACH;;AA1BgG,KAArF,EA2Bb;AAAE,MAAA;AAAF,KA3Ba,CAAhB;AA4BH,GA7BD;AA8BH","sourcesContent":["import * as React from 'react';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\nexport interface BaseInputProps<TEventArgs> {\n    /**\n     * Event emitted once the value changes.\n     */\n    onChange?(e: TEventArgs): void;\n    /**\n     * The currently displayed error message.\n     */\n    error?: React.ReactChild;\n}\nexport interface ValidatorProps {\n    onSuccess?(): void;\n    onError?(): void;\n}\nexport interface ValidatorState {\n    error: React.ReactChild | undefined;\n}\n/**\n * Provides automatic validation for a wrapped component.\n * @param validate The validation function.\n * @returns A constructor function taking a component to be wrapped with the validation.\n */\nexport function withValidation<TEventArgs>(validate: (e: TEventArgs) => React.ReactChild | undefined) {\n    return <TProps extends BaseInputProps<TEventArgs>>(Component: React.ComponentType<TProps>) => {\n        return withInner(class Validator extends React.PureComponent<TProps & ValidatorProps, ValidatorState> {\n            constructor(props: TProps & ValidatorProps) {\n                super(props);\n                this.state = {\n                    error: undefined,\n                };\n            }\n            validate = (e: TEventArgs) => {\n                const { onChange, onError, onSuccess } = this.props;\n                const error = validate(e);\n                if (error !== this.state.error) {\n                    const notify = error ? onError : onSuccess;\n                    this.setState({\n                        error,\n                    });\n                    if (typeof notify === 'function') {\n                        notify();\n                    }\n                }\n                if (typeof onChange === 'function') {\n                    onChange(e);\n                }\n            };\n            render() {\n                const { error = this.props.error } = this.state;\n                return <Component {...this.props} error={error} onChange={this.validate}/>;\n            }\n        }, { Component });\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}