{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { keyframes, themed } from '../../utils/styled';\nimport { distance } from '../../distance';\nimport { remCalc } from '../../utils/remCalc';\n\nfunction strToSize(size) {\n  switch (size) {\n    case 'x-small':\n      return 5;\n\n    case 'small':\n      return 7;\n\n    case 'large':\n      return 12;\n\n    case 'x-large':\n      return 15;\n  }\n\n  return 10;\n}\n\nfunction strToFontSize(size) {\n  return remCalc(size === 'x-small' ? '12px' : '14px');\n}\n\nconst SpinnerAnimation = keyframes`\n  25% {\n    transform: translateX(2.625em) rotate(-90deg) scale(0.5);\n    -webkit-transform: translateX(2.625em) rotate(-90deg) scale(0.5);\n  } 50% {\n    transform: translateX(2.625em) translateY(2.625em) rotate(-179deg);\n    -webkit-transform: translateX(2.625em) translateY(2.625em) rotate(-179deg);\n  } 50.1% {\n    transform: translateX(2.625em) translateY(2.625em) rotate(-180deg);\n    -webkit-transform: translateX(2.625em) translateY(2.625em) rotate(-180deg);\n  } 75% {\n    transform: translateX(0px) translateY(2.625em) rotate(-270deg) scale(0.5);\n    -webkit-transform: translateX(0px) translateY(2.625em) rotate(-270deg) scale(0.5);\n  } 100% {\n    transform: rotate(-360deg);\n    -webkit-transform: rotate(-360deg);\n  }\n`;\nconst SpinningContainer = styled.div`\n  text-align: center;\n  visibility: ${props => props.hidden ? 'hidden' : 'visible'};\n`;\nconst SpinningLabel = styled('label')`\n  color: ${themed(props => props.theme.text6)};\n  display: ${props => strToSize(props.size) >= 20 ? 'block' : 'inline-block'};\n  margin: ${distance.xsmall};\n  color: ${themed(props => props.theme.textDisabled)};\n  font-size: ${props => strToFontSize(props.size)};\n`;\nconst Cubes = styled.div`\n  width: ${props => strToSize(props.size) * 4.6}px;\n  height: ${props => strToSize(props.size) * 4.6}px;\n  position: relative;\n  font-size: ${props => strToSize(props.size)}px;\n  margin: auto;\n`;\nconst Cube0 = styled.div`\n  background-color: #141e8c;\n  width: 2em;\n  height: 2em;\n  position: absolute;\n  top: 0;\n  left: 0;\n  animation: ${SpinnerAnimation} 1.8s infinite ease-in-out;\n`;\nconst Cube1 = styled(Cube0)`\n  animation-delay: -0.9s;\n`;\n/**\n * The spinner component displays a loading spinner optionally equipped with a label text.\n */\n\nexport const Spinner = Object.assign(_a => {\n  var {\n    theme,\n    size = 'medium',\n    children\n  } = _a,\n      props = __rest(_a, [\"theme\", \"size\", \"children\"]);\n\n  const spinningProps = {\n    theme,\n    size,\n    hidden: props.hidden\n  };\n  return React.createElement(SpinningContainer, Object.assign({}, props), React.createElement(Cubes, Object.assign({}, spinningProps), React.createElement(Cube0, null), React.createElement(Cube1, null)), children && React.createElement(SpinningLabel, Object.assign({}, spinningProps), children));\n}, {\n  inner: {\n    get SpinningContainer() {\n      return SpinningContainer;\n    },\n\n    get Cubes() {\n      return Cubes;\n    },\n\n    get Cube0() {\n      return Cube0;\n    },\n\n    get Cube1() {\n      return Cube1;\n    },\n\n    get SpinningLabel() {\n      return SpinningLabel;\n    }\n\n  }\n});\nSpinner.displayName = 'Spinner';","map":{"version":3,"sources":["../../../../src/components/Spinner/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { keyframes, themed } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { distance } from '../../distance';\nimport { remCalc } from '../../utils/remCalc';\nexport type SpinnerSize = 'x-small' | 'small' | 'medium' | 'large' | 'x-large';\nexport interface SpinnerProps extends StandardProps {\n    /**\n     * The size of the spinner, where medium is the default size.\n     * @default medium\n     */\n    size?: SpinnerSize;\n    /**\n     * Determines if the spinner should be hidden.\n     */\n    hidden?: boolean;\n    /**\n     * Sets the spinner's label, if any.\n     */\n    children?: React.ReactNode;\n}\nfunction strToSize(size?: string) {\n    switch (size) {\n        case 'x-small':\n            return 5;\n        case 'small':\n            return 7;\n        case 'large':\n            return 12;\n        case 'x-large':\n            return 15;\n    }\n    return 10;\n}\nfunction strToFontSize(size?: string) {\n    return remCalc(size === 'x-small' ? '12px' : '14px');\n}\nconst SpinnerAnimation = keyframes `\n  25% {\n    transform: translateX(2.625em) rotate(-90deg) scale(0.5);\n    -webkit-transform: translateX(2.625em) rotate(-90deg) scale(0.5);\n  } 50% {\n    transform: translateX(2.625em) translateY(2.625em) rotate(-179deg);\n    -webkit-transform: translateX(2.625em) translateY(2.625em) rotate(-179deg);\n  } 50.1% {\n    transform: translateX(2.625em) translateY(2.625em) rotate(-180deg);\n    -webkit-transform: translateX(2.625em) translateY(2.625em) rotate(-180deg);\n  } 75% {\n    transform: translateX(0px) translateY(2.625em) rotate(-270deg) scale(0.5);\n    -webkit-transform: translateX(0px) translateY(2.625em) rotate(-270deg) scale(0.5);\n  } 100% {\n    transform: rotate(-360deg);\n    -webkit-transform: rotate(-360deg);\n  }\n`;\nconst SpinningContainer = styled.div<{\n    hidden?: boolean;\n}> `\n  text-align: center;\n  visibility: ${props => (props.hidden ? 'hidden' : 'visible')};\n`;\nexport interface SpinningLabelProps {\n    size?: string;\n}\nconst SpinningLabel = styled('label')<SpinningLabelProps> `\n  color: ${themed(props => props.theme.text6)};\n  display: ${props => (strToSize(props.size) >= 20 ? 'block' : 'inline-block')};\n  margin: ${distance.xsmall};\n  color: ${themed(props => props.theme.textDisabled)};\n  font-size: ${props => strToFontSize(props.size)};\n`;\nconst Cubes = styled.div<{\n    size?: string;\n}> `\n  width: ${props => strToSize(props.size) * 4.6}px;\n  height: ${props => strToSize(props.size) * 4.6}px;\n  position: relative;\n  font-size: ${props => strToSize(props.size)}px;\n  margin: auto;\n`;\nconst Cube0 = styled.div `\n  background-color: #141e8c;\n  width: 2em;\n  height: 2em;\n  position: absolute;\n  top: 0;\n  left: 0;\n  animation: ${SpinnerAnimation} 1.8s infinite ease-in-out;\n`;\nconst Cube1 = styled(Cube0) `\n  animation-delay: -0.9s;\n`;\n/**\n * The spinner component displays a loading spinner optionally equipped with a label text.\n */\nexport const Spinner = Object.assign(((({ theme, size = 'medium', children, ...props }) => {\n    const spinningProps = { theme, size, hidden: props.hidden };\n    return (<SpinningContainer {...props}>\n      <Cubes {...spinningProps}>\n        <Cube0 />\n        <Cube1 />\n      </Cubes>\n      {children && <SpinningLabel {...spinningProps}>{children}</SpinningLabel>}\n    </SpinningContainer>);\n}) as React.SFC<SpinnerProps>), { inner: {\n        get SpinningContainer() { return SpinningContainer as typeof SpinningContainer; },\n        get Cubes() { return Cubes as typeof Cubes; },\n        get Cube0() { return Cube0 as typeof Cube0; },\n        get Cube1() { return Cube1 as typeof Cube1; },\n        get SpinningLabel() { return SpinningLabel as typeof SpinningLabel; }\n    } });\nSpinner.displayName = 'Spinner';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}