{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { InteractiveListDirection } from './InteractiveList.types.part';\nimport { Icon } from '../Icon';\nimport { Checkbox } from '../Checkbox';\nimport { pacificBlue, transparent } from '../../colors';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nconst InteractiveListContainer = styled.div`\n  position: relative;\n  outline: none;\n`;\nconst ListWrapper = styled('ul')(themed(({\n  open,\n  border,\n  direction,\n  theme: {\n    ui4\n  }\n}) => css`\n      display: ${open ? 'block' : 'none'};\n      list-style: none;\n      width: 100%;\n      position: relative;\n      transform: translateY(${direction === InteractiveListDirection.normal ? 0 : -100}%);\n      box-sizing: border-box;\n      box-shadow: none;\n      margin: 0;\n      padding: 0;\n      background: ${transparent};\n      border: 1px solid ${border === 0\n/* none */\n? transparent : ui4};\n      ${direction === InteractiveListDirection.normal ? 'border-top: none' : 'border-bottom: none'};\n      max-height: 100%;\n      overflow-y: auto;\n      z-index: 100;\n    `));\nconst ListItem = styled.li(themed(({\n  hovered,\n  theme: {\n    ui3,\n    text2\n  },\n  disabled\n}) => css`\n      ${getFontStyle({\n  size: 'medium'\n})}\n      \n      background: ${hovered ? ui3 : transparent};\n      color: ${text2};\n      list-style: none;\n      box-sizing: border-box;\n      opacity: ${disabled ? '0.5' : '1.0'};\n      cursor: ${disabled ? 'not-allowed' : 'pointer'};\n      display: block;\n      width: 100%;\n      height: auto;\n      position: relative;\n\n      a {\n        color: inherit;\n        display: block;\n        text-decoration: none;\n\n        &:hover {\n          text-decoration: none;\n        }\n      }\n    `));\nconst ListItemInnerContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst ListItemContent = styled.div`\n  width: 100%;\n`;\nconst ListItemContentPadding = styled('div')`\n  padding: ${props => props.condensed ? `${distance.small} ${distance.medium}` : distance.medium};\n  ${props => props.showTick ? 'padding-right: 0;' : ''};\n`;\nconst ListItemContentComponentPadding = styled('div')`\n  > * {\n    padding: ${props => props.condensed ? `${distance.small} ${distance.medium}` : distance.medium};\n    ${props => props.showTick ? 'padding-right: 0;' : ''};\n  }\n`;\nconst StyledCheckbox = styled(Checkbox)`\n  display: block;\n`;\nconst ListItemIconPadding = styled('div')`\n  padding: 0 ${distance.medium};\n\n  i {\n    display: block;\n  }\n`;\nconst ListDivider = styled.hr`\n  margin: ${distance.xsmall} ${distance.small};\n  border: none;\n  border-top: 1px solid ${themed(props => props.theme.textDisabled)};\n`;\nconst ListHeader = styled.span`\n  ${getFontStyle({\n  size: 'medium'\n})}\n  \n  padding: ${distance.medium} ${distance.small};\n  width: 100%;\n  display: block;\n  height: auto;\n  min-height: 1em;\n  box-sizing: border-box;\n  color: ${themed(props => props.theme.primary)};\n`;\n\nfunction getChosen(selected, multiple) {\n  if (multiple) {\n    return Array.isArray(selected) ? selected : [selected];\n  } else {\n    return [Array.isArray(selected) ? selected[0] : selected];\n  }\n}\n\nfunction getIndices(data, selected, multiple) {\n  const chosen = getChosen(selected, multiple);\n  const indices = [];\n\n  for (let i = 0; i < data.length; i++) {\n    const item = data[i];\n\n    if (!item) {\n      continue;\n    }\n\n    const key = typeof item === 'string' ? item : item.key;\n\n    if (chosen.indexOf(key) !== -1) {\n      indices.push(i);\n    }\n  }\n\n  if (!multiple && indices.length > 1) {\n    indices.splice(1);\n  }\n\n  return indices;\n}\n\nfunction autoSelect(element) {\n  const child = element && element.querySelector('a');\n\n  if (child) {\n    child.click();\n  }\n}\n\nexport class InteractiveListInt extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.selects = [];\n    this.elements = [];\n\n    this.defaultHandleClickOutside = () => {\n      const {\n        open,\n        onBlur\n      } = this.props;\n\n      if (open) {\n        if (typeof onBlur === 'function') {\n          onBlur();\n        }\n\n        this.setState({\n          selected: undefined\n        });\n      }\n    };\n\n    this.handleClickOutside = () => {\n      if (this.props.open) {\n        this.props.onClickOutside ? this.props.onClickOutside() : this.defaultHandleClickOutside();\n      }\n    };\n\n    this.control = e => {\n      const {\n        data,\n        onBlur,\n        disabled,\n        onKeyDown\n      } = this.props;\n\n      if (!disabled) {\n        const {\n          selected\n        } = this.state;\n\n        if (typeof onKeyDown === 'function') {\n          onKeyDown(e);\n        }\n\n        switch (e.keyCode) {\n          case 40\n          /* down */\n          :\n            this.setState({\n              selected: this.getNext(selected === undefined ? 0 : (selected + 1) % data.length, 1)\n            });\n            break;\n\n          case 38\n          /* up */\n          :\n            this.setState({\n              selected: this.getNext(((selected || data.length) - 1) % data.length, -1)\n            });\n            break;\n\n          case 36\n          /* home */\n          :\n            this.setState({\n              selected: this.getNext(0, 1)\n            });\n            break;\n\n          case 35\n          /* end */\n          :\n            this.setState({\n              selected: this.getNext(data.length - 1, -1)\n            });\n            break;\n\n          case 13\n          /* enter */\n          :\n          case 32\n          /* space */\n          :\n            if (typeof selected === 'number') {\n              autoSelect(this.elements[selected]);\n            }\n\n            this.done();\n            break;\n\n          case 27\n          /* escape */\n          :\n            if (typeof onBlur === 'function') {\n              onBlur();\n            }\n\n            break;\n\n          default:\n            this.jumpTo(e.key.toLowerCase());\n            return;\n        }\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    this.getItemDetails = item => {\n      let key = '';\n      let content;\n\n      if (typeof item === 'string') {\n        key = item;\n        content = item;\n      } else {\n        key = item.key;\n        content = item.content || item.key;\n      }\n\n      return {\n        key,\n        content\n      };\n    };\n\n    this.createSingleItem = (item, index) => {\n      const {\n        key,\n        content\n      } = this.getItemDetails(item);\n      return this.createItem(key, index, content);\n    };\n\n    this.createMultipleItem = (item, index) => {\n      const {\n        disabledItems\n      } = this.props;\n      const {\n        value\n      } = this.state;\n      const {\n        key,\n        content\n      } = this.getItemDetails(item);\n      const isItemDisabled = disabledItems && disabledItems.indexOf(key) !== -1;\n      const newContent = React.createElement(StyledCheckbox, {\n        value: value.indexOf(index) >= 0,\n        disabled: isItemDisabled\n      }, content);\n      return this.createItem(key, index, newContent);\n    };\n\n    this.done = () => {\n      const {\n        multiple,\n        onChange,\n        disabled,\n        data,\n        disabledItems = []\n      } = this.props;\n      const {\n        value,\n        controlled,\n        selected\n      } = this.state;\n      const item = data && selected !== undefined && data[selected];\n      const key = item && this.getItemDetails(item).key;\n      const isItemDisabled = key && disabledItems.indexOf(key) !== -1;\n\n      if (!disabled && !isItemDisabled && selected !== undefined) {\n        const newValue = multiple ? value.indexOf(selected) === -1 ? [...value, selected] : value.filter(i => i !== selected) : [selected];\n\n        if (!controlled) {\n          this.setState({\n            value: newValue\n          });\n        }\n\n        if (typeof onChange === 'function') {\n          onChange({\n            value: newValue\n          });\n        }\n      }\n    };\n\n    this.setNode = ref => {\n      this.interactiveList = ref;\n    };\n\n    const value = props.value || props.defaultValue || [];\n    this.state = {\n      value: props.indices || getIndices(props.data || [], value, props.multiple),\n      controlled: props.indices !== undefined || props.value !== undefined,\n      selected: undefined,\n      direction: props.direction || InteractiveListDirection.normal\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      open,\n      autoPosition,\n      focus\n    } = this.props;\n\n    if (this.state.controlled) {\n      const {\n        indices,\n        value,\n        data = [],\n        multiple\n      } = nextProps;\n      this.setState({\n        value: indices || getIndices(data, value || [], multiple)\n      });\n    }\n\n    const componentIsNotFocused = nextProps.focus !== focus || this.interactiveList && document.activeElement !== this.interactiveList;\n\n    if (componentIsNotFocused && nextProps.focus) {\n      if (open && nextProps.open) {\n        this.interactiveList && this.interactiveList.focus();\n        this.setState({\n          selected: 0\n        });\n      }\n    }\n\n    if (autoPosition && !open && nextProps.open && this.interactiveList) {\n      const windowHeight = window.innerHeight;\n      const {\n        top\n      } = this.interactiveList.getBoundingClientRect();\n\n      if (top > windowHeight / 2) {\n        this.setState(() => ({\n          direction: InteractiveListDirection.reverse\n        }));\n      } else {\n        this.setState(() => ({\n          direction: InteractiveListDirection.normal\n        }));\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      open,\n      autoFocus\n    } = this.props;\n\n    if (open && autoFocus && this.interactiveList) {\n      this.interactiveList.focus();\n    }\n  }\n\n  getNext(proposed, dir) {\n    const {\n      data\n    } = this.props;\n    const max = data.length;\n\n    for (let i = 0; i < max; i++) {\n      const item = data[proposed];\n\n      if (!item) {\n        continue;\n      }\n\n      if (typeof item === 'string' || item.type !== 'divider' && item.type !== 'header') {\n        return proposed;\n      }\n\n      proposed += dir;\n\n      if (proposed < 0) {\n        proposed = max - 1;\n      } else if (proposed === max) {\n        proposed = 0;\n      }\n    }\n\n    return 0;\n  }\n\n  jumpTo(part) {\n    const {\n      data\n    } = this.props;\n    const {\n      selected\n    } = this.state;\n    const start = selected ? selected === data.length - 1 ? 0 : selected : 0;\n    let index = start;\n\n    for (let i = start; i < start + data.length; i++, index = i === data.length ? 0 : index + 1) {\n      const item = data[index];\n\n      if (!item) {\n        continue;\n      }\n\n      const lookup = typeof item === 'string' ? item : item.searchText || item.content || item.key;\n\n      if (typeof lookup === 'string' && lookup.substr(0, part.length).toLowerCase() === part && selected !== index) {\n        this.setState({\n          selected: index\n        });\n        break;\n      }\n    }\n  }\n\n  createItem(key, index, content) {\n    const {\n      value,\n      selected\n    } = this.state;\n    const {\n      disabled,\n      showTick = false,\n      multiple = false,\n      condensed = false,\n      disabledItems\n    } = this.props;\n    const isItemDisabled = disabledItems && disabledItems.indexOf(key) !== -1;\n    const isHovered = !disabled && selected === index;\n    const isSelected = value.indexOf(index) >= 0;\n    const selects = this.selects;\n    const ContentWrapper = typeof content === 'string' ? ListItemContentPadding : ListItemContentComponentPadding;\n\n    if (selects[index] === undefined) {\n      selects[index] = () => this.select(index);\n    }\n\n    return React.createElement(ListItem, {\n      key: `${key}-${index}`,\n      onClick: this.done,\n      onMouseMove: selects[index],\n      selected: isSelected,\n      hovered: isHovered,\n      disabled: isItemDisabled,\n      ref: node => {\n        this.elements[index] = node;\n\n        if (isHovered && node) {\n          const parent = node.parentElement;\n\n          if (parent) {\n            const height = parent.clientHeight;\n            const position = parent.scrollTop;\n            const y0 = node.offsetTop - position;\n            const y1 = y0 + node.offsetHeight - height;\n\n            if (y0 < 0) {\n              parent.scrollTop = node.offsetTop;\n            } else if (y1 > 0) {\n              parent.scrollTop += y1;\n            }\n          }\n        }\n      }\n    }, React.createElement(ListItemInnerContainer, null, React.createElement(ListItemContent, null, React.createElement(ContentWrapper, {\n      condensed: condensed,\n      showTick: isSelected && showTick\n    }, content)), isSelected && !multiple && showTick && React.createElement(ListItemIconPadding, {\n      condensed: condensed\n    }, React.createElement(Icon, {\n      name: \"Check\",\n      color: pacificBlue,\n      size: 1.375\n    }))));\n  }\n\n  select(index) {\n    const {\n      disabled\n    } = this.props;\n\n    if (!disabled && this.state.selected !== index) {\n      this.setState({\n        selected: index\n      });\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      onChange: _0,\n      indices: _1,\n      disabled: _2,\n      onKeyDown: _3,\n      onClickOutside: _4,\n      data = [],\n      theme,\n      borderless = false,\n      children,\n      multiple = false,\n      open = false,\n      onBlur,\n      customWrapper,\n      onClick\n    } = _a,\n          props = __rest(_a, [\"onChange\", \"indices\", \"disabled\", \"onKeyDown\", \"onClickOutside\", \"data\", \"theme\", \"borderless\", \"children\", \"multiple\", \"open\", \"onBlur\", \"customWrapper\", \"onClick\"]);\n\n    const border = borderless ? 0\n    /* none */\n    : 1\n    /* normal */\n    ;\n    const createItem = multiple ? this.createMultipleItem : this.createSingleItem;\n    const Wrapper = customWrapper || ListWrapper;\n    return React.createElement(InteractiveListContainer, Object.assign({\n      ref: this.setNode\n    }, open ? {\n      tabIndex: 0\n    } : undefined, {\n      onKeyDown: this.control\n    }, props), React.createElement(Wrapper, {\n      open: open,\n      border: border,\n      direction: this.state.direction,\n      onClick: onClick\n    }, open && data.map((item, index) => {\n      if (item) {\n        if (typeof item !== 'string') {\n          switch (item.type) {\n            case 'divider':\n              return React.createElement(ListDivider, {\n                key: item.key\n              });\n\n            case 'header':\n              return React.createElement(ListHeader, {\n                key: item.key\n              }, item.content || item.key);\n          }\n        }\n\n        return createItem(item, index);\n      }\n\n      return undefined;\n    })));\n  }\n\n}\nInteractiveListInt.inner = {\n  get StyledCheckbox() {\n    return StyledCheckbox;\n  },\n\n  get ListItem() {\n    return ListItem;\n  },\n\n  get ListItemInnerContainer() {\n    return ListItemInnerContainer;\n  },\n\n  get ListItemContent() {\n    return ListItemContent;\n  },\n\n  get ListItemIconPadding() {\n    return ListItemIconPadding;\n  },\n\n  get Icon() {\n    return Icon;\n  },\n\n  get InteractiveListContainer() {\n    return InteractiveListContainer;\n  },\n\n  get ListDivider() {\n    return ListDivider;\n  },\n\n  get ListHeader() {\n    return ListHeader;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/InteractiveList/InteractiveListInt.part.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { InteractiveListWrapperProps, InteractiveListDirection, InteractiveListBorderType, InteractiveListItem, InteractiveListProps, InteractiveListState, } from './InteractiveList.types.part';\nimport { Icon } from '../Icon';\nimport { Checkbox } from '../Checkbox';\nimport { KeyCodes } from '../../utils/keyCodes';\nimport { pacificBlue, transparent } from '../../colors';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\ninterface ListItemProps {\n    selected: boolean;\n    hovered: boolean;\n    disabled?: boolean;\n    onClick?(e: React.MouseEvent): void;\n    onMouseMove?(e: React.MouseEvent): void;\n}\ninterface ListItemContentProps {\n    condensed: boolean;\n    showTick: boolean;\n}\ninterface ListItemIconProps {\n    condensed: boolean;\n}\nconst InteractiveListContainer = styled.div `\n  position: relative;\n  outline: none;\n`;\nconst ListWrapper = styled('ul')<InteractiveListWrapperProps>(themed(({ open, border, direction, theme: { ui4 } }) => css `\n      display: ${open ? 'block' : 'none'};\n      list-style: none;\n      width: 100%;\n      position: relative;\n      transform: translateY(${direction === InteractiveListDirection.normal ? 0 : -100}%);\n      box-sizing: border-box;\n      box-shadow: none;\n      margin: 0;\n      padding: 0;\n      background: ${transparent};\n      border: 1px solid ${border === InteractiveListBorderType.none ? transparent : ui4};\n      ${direction === InteractiveListDirection.normal ? 'border-top: none' : 'border-bottom: none'};\n      max-height: 100%;\n      overflow-y: auto;\n      z-index: 100;\n    `));\nconst ListItem = styled.li<ListItemProps>(themed(({ hovered, theme: { ui3, text2 }, disabled }) => css `\n      ${getFontStyle({ size: 'medium' })}\n      \n      background: ${hovered ? ui3 : transparent};\n      color: ${text2};\n      list-style: none;\n      box-sizing: border-box;\n      opacity: ${disabled ? '0.5' : '1.0'};\n      cursor: ${disabled ? 'not-allowed' : 'pointer'};\n      display: block;\n      width: 100%;\n      height: auto;\n      position: relative;\n\n      a {\n        color: inherit;\n        display: block;\n        text-decoration: none;\n\n        &:hover {\n          text-decoration: none;\n        }\n      }\n    `));\nconst ListItemInnerContainer = styled.div `\n  display: flex;\n  align-items: center;\n`;\nconst ListItemContent = styled.div `\n  width: 100%;\n`;\nconst ListItemContentPadding = styled('div')<ListItemContentProps> `\n  padding: ${props => (props.condensed ? `${distance.small} ${distance.medium}` : distance.medium)};\n  ${props => (props.showTick ? 'padding-right: 0;' : '')};\n`;\nconst ListItemContentComponentPadding = styled('div')<ListItemContentProps> `\n  > * {\n    padding: ${props => (props.condensed ? `${distance.small} ${distance.medium}` : distance.medium)};\n    ${props => (props.showTick ? 'padding-right: 0;' : '')};\n  }\n`;\nconst StyledCheckbox = styled(Checkbox) `\n  display: block;\n`;\nconst ListItemIconPadding = styled('div')<ListItemIconProps> `\n  padding: 0 ${distance.medium};\n\n  i {\n    display: block;\n  }\n`;\nconst ListDivider = styled.hr `\n  margin: ${distance.xsmall} ${distance.small};\n  border: none;\n  border-top: 1px solid ${themed(props => props.theme.textDisabled)};\n`;\nconst ListHeader = styled.span `\n  ${getFontStyle({ size: 'medium' })}\n  \n  padding: ${distance.medium} ${distance.small};\n  width: 100%;\n  display: block;\n  height: auto;\n  min-height: 1em;\n  box-sizing: border-box;\n  color: ${themed(props => props.theme.primary)};\n`;\nfunction getChosen(selected: string | Array<string>, multiple?: boolean) {\n    if (multiple) {\n        return Array.isArray(selected) ? selected : [selected];\n    }\n    else {\n        return [Array.isArray(selected) ? selected[0] : selected];\n    }\n}\nfunction getIndices(data: Array<InteractiveListItem | undefined>, selected: string | Array<string>, multiple?: boolean) {\n    const chosen = getChosen(selected, multiple);\n    const indices: Array<number> = [];\n    for (let i = 0; i < data.length; i++) {\n        const item = data[i];\n        if (!item) {\n            continue;\n        }\n        const key = typeof item === 'string' ? item : item.key;\n        if (chosen.indexOf(key) !== -1) {\n            indices.push(i);\n        }\n    }\n    if (!multiple && indices.length > 1) {\n        indices.splice(1);\n    }\n    return indices;\n}\nfunction autoSelect(element: HTMLElement) {\n    const child = element && element.querySelector('a');\n    if (child) {\n        child.click();\n    }\n}\nexport class InteractiveListInt extends React.PureComponent<InteractiveListProps, InteractiveListState> {\n    private readonly selects: Array<() => void> = [];\n    private readonly elements: Array<HTMLElement> = [];\n    private interactiveList: HTMLElement | null;\n    constructor(props: InteractiveListProps) {\n        super(props);\n        const value = props.value || props.defaultValue || [];\n        this.state = {\n            value: props.indices || getIndices(props.data || [], value, props.multiple),\n            controlled: props.indices !== undefined || props.value !== undefined,\n            selected: undefined,\n            direction: props.direction || InteractiveListDirection.normal,\n        };\n    }\n    private defaultHandleClickOutside = () => {\n        const { open, onBlur } = this.props;\n        if (open) {\n            if (typeof onBlur === 'function') {\n                onBlur();\n            }\n            this.setState({\n                selected: undefined,\n            });\n        }\n    };\n    handleClickOutside = () => {\n        if (this.props.open) {\n            this.props.onClickOutside ? this.props.onClickOutside() : this.defaultHandleClickOutside();\n        }\n    };\n    UNSAFE_componentWillReceiveProps(nextProps: InteractiveListProps) {\n        const { open, autoPosition, focus } = this.props;\n        if (this.state.controlled) {\n            const { indices, value, data = [], multiple } = nextProps;\n            this.setState({\n                value: indices || getIndices(data, value || [], multiple),\n            });\n        }\n        const componentIsNotFocused = nextProps.focus !== focus || (this.interactiveList && document.activeElement !== this.interactiveList);\n        if (componentIsNotFocused && nextProps.focus) {\n            if (open && nextProps.open) {\n                this.interactiveList && this.interactiveList.focus();\n                this.setState({\n                    selected: 0,\n                });\n            }\n        }\n        if (autoPosition && !open && nextProps.open && this.interactiveList) {\n            const windowHeight = window.innerHeight;\n            const { top } = this.interactiveList.getBoundingClientRect();\n            if (top > windowHeight / 2) {\n                this.setState(() => ({\n                    direction: InteractiveListDirection.reverse,\n                }));\n            }\n            else {\n                this.setState(() => ({\n                    direction: InteractiveListDirection.normal,\n                }));\n            }\n        }\n    }\n    componentDidUpdate() {\n        const { open, autoFocus } = this.props;\n        if (open && autoFocus && this.interactiveList) {\n            this.interactiveList.focus();\n        }\n    }\n    private getNext(proposed: number, dir: number) {\n        const { data } = this.props;\n        const max = data.length;\n        for (let i = 0; i < max; i++) {\n            const item = data[proposed];\n            if (!item) {\n                continue;\n            }\n            if (typeof item === 'string' || (item.type !== 'divider' && item.type !== 'header')) {\n                return proposed;\n            }\n            proposed += dir;\n            if (proposed < 0) {\n                proposed = max - 1;\n            }\n            else if (proposed === max) {\n                proposed = 0;\n            }\n        }\n        return 0;\n    }\n    private jumpTo(part: string) {\n        const { data } = this.props;\n        const { selected } = this.state;\n        const start = selected ? (selected === data.length - 1 ? 0 : selected) : 0;\n        let index = start;\n        for (let i = start; i < start + data.length; i++, index = i === data.length ? 0 : index + 1) {\n            const item = data[index];\n            if (!item) {\n                continue;\n            }\n            const lookup = typeof item === 'string' ? item : item.searchText || item.content || item.key;\n            if (typeof lookup === 'string' && lookup.substr(0, part.length).toLowerCase() === part && selected !== index) {\n                this.setState({\n                    selected: index,\n                });\n                break;\n            }\n        }\n    }\n    private control = (e: React.KeyboardEvent<HTMLElement>) => {\n        const { data, onBlur, disabled, onKeyDown } = this.props;\n        if (!disabled) {\n            const { selected } = this.state;\n            if (typeof onKeyDown === 'function') {\n                onKeyDown(e);\n            }\n            switch (e.keyCode) {\n                case KeyCodes.down:\n                    this.setState({\n                        selected: this.getNext(selected === undefined ? 0 : (selected + 1) % data.length, 1),\n                    });\n                    break;\n                case KeyCodes.up:\n                    this.setState({\n                        selected: this.getNext(((selected || data.length) - 1) % data.length, -1),\n                    });\n                    break;\n                case KeyCodes.home:\n                    this.setState({\n                        selected: this.getNext(0, 1),\n                    });\n                    break;\n                case KeyCodes.end:\n                    this.setState({\n                        selected: this.getNext(data.length - 1, -1),\n                    });\n                    break;\n                case KeyCodes.enter:\n                case KeyCodes.space:\n                    if (typeof selected === 'number') {\n                        autoSelect(this.elements[selected]);\n                    }\n                    this.done();\n                    break;\n                case KeyCodes.escape:\n                    if (typeof onBlur === 'function') {\n                        onBlur();\n                    }\n                    break;\n                default:\n                    this.jumpTo(e.key.toLowerCase());\n                    return;\n            }\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    };\n    private getItemDetails = (item: InteractiveListItem) => {\n        let key = '';\n        let content: React.ReactChild;\n        if (typeof item === 'string') {\n            key = item;\n            content = item;\n        }\n        else {\n            key = item.key;\n            content = item.content || item.key;\n        }\n        return {\n            key,\n            content,\n        };\n    };\n    private createSingleItem = (item: InteractiveListItem, index: number) => {\n        const { key, content } = this.getItemDetails(item);\n        return this.createItem(key, index, content);\n    };\n    private createMultipleItem = (item: InteractiveListItem, index: number) => {\n        const { disabledItems } = this.props;\n        const { value } = this.state;\n        const { key, content } = this.getItemDetails(item);\n        const isItemDisabled = disabledItems && disabledItems.indexOf(key) !== -1;\n        const newContent = (<StyledCheckbox value={value.indexOf(index) >= 0} disabled={isItemDisabled}>\n        {content}\n      </StyledCheckbox>);\n        return this.createItem(key, index, newContent);\n    };\n    private done = () => {\n        const { multiple, onChange, disabled, data, disabledItems = [] } = this.props;\n        const { value, controlled, selected } = this.state;\n        const item = data && selected !== undefined && data[selected];\n        const key = item && this.getItemDetails(item).key;\n        const isItemDisabled = key && disabledItems.indexOf(key) !== -1;\n        if (!disabled && !isItemDisabled && selected !== undefined) {\n            const newValue = multiple\n                ? value.indexOf(selected) === -1\n                    ? [...value, selected]\n                    : value.filter(i => i !== selected)\n                : [selected];\n            if (!controlled) {\n                this.setState({\n                    value: newValue,\n                });\n            }\n            if (typeof onChange === 'function') {\n                onChange({\n                    value: newValue,\n                });\n            }\n        }\n    };\n    private createItem(key: string, index: number, content: React.ReactChild) {\n        const { value, selected } = this.state;\n        const { disabled, showTick = false, multiple = false, condensed = false, disabledItems } = this.props;\n        const isItemDisabled = disabledItems && disabledItems.indexOf(key) !== -1;\n        const isHovered = !disabled && selected === index;\n        const isSelected = value.indexOf(index) >= 0;\n        const selects = this.selects;\n        const ContentWrapper = typeof content === 'string' ? ListItemContentPadding : ListItemContentComponentPadding;\n        if (selects[index] === undefined) {\n            selects[index] = () => this.select(index);\n        }\n        return (<ListItem key={`${key}-${index}`} onClick={this.done} onMouseMove={selects[index]} selected={isSelected} hovered={isHovered} disabled={isItemDisabled} ref={(node: HTMLLIElement) => {\n            this.elements[index] = node;\n            if (isHovered && node) {\n                const parent = node.parentElement;\n                if (parent) {\n                    const height = parent.clientHeight;\n                    const position = parent.scrollTop;\n                    const y0 = node.offsetTop - position;\n                    const y1 = y0 + node.offsetHeight - height;\n                    if (y0 < 0) {\n                        parent.scrollTop = node.offsetTop;\n                    }\n                    else if (y1 > 0) {\n                        parent.scrollTop += y1;\n                    }\n                }\n            }\n        }}>\n        <ListItemInnerContainer>\n          <ListItemContent>\n            <ContentWrapper condensed={condensed} showTick={isSelected && showTick}>\n              {content}\n            </ContentWrapper>\n          </ListItemContent>\n          {isSelected && !multiple && showTick && (<ListItemIconPadding condensed={condensed}>\n              <Icon name=\"Check\" color={pacificBlue} size={1.375}/>\n            </ListItemIconPadding>)}\n        </ListItemInnerContainer>\n      </ListItem>);\n    }\n    private select(index: number) {\n        const { disabled } = this.props;\n        if (!disabled && this.state.selected !== index) {\n            this.setState({\n                selected: index,\n            });\n        }\n    }\n    private setNode = (ref: HTMLElement | null) => {\n        this.interactiveList = ref;\n    };\n    render() {\n        const { onChange: _0, indices: _1, disabled: _2, onKeyDown: _3, onClickOutside: _4, data = [], theme, borderless = false, children, multiple = false, open = false, onBlur, customWrapper, onClick, ...props } = this.props;\n        const border = borderless ? InteractiveListBorderType.none : InteractiveListBorderType.normal;\n        const createItem = multiple ? this.createMultipleItem : this.createSingleItem;\n        const Wrapper = customWrapper || ListWrapper;\n        return (<InteractiveListContainer ref={this.setNode} {...(open ? { tabIndex: 0 } : undefined)} onKeyDown={this.control} {...props}>\n        <Wrapper open={open} border={border} direction={this.state.direction} onClick={onClick}>\n          {open &&\n            data.map((item, index) => {\n                if (item) {\n                    if (typeof item !== 'string') {\n                        switch (item.type) {\n                            case 'divider':\n                                return <ListDivider key={item.key}/>;\n                            case 'header':\n                                return <ListHeader key={item.key}>{item.content || item.key}</ListHeader>;\n                        }\n                    }\n                    return createItem(item, index);\n                }\n                return undefined;\n            })}\n        </Wrapper>\n      </InteractiveListContainer>);\n    }\n    static inner = {\n        get StyledCheckbox() { return StyledCheckbox as typeof StyledCheckbox; },\n        get ListItem() { return ListItem as typeof ListItem; },\n        get ListItemInnerContainer() { return ListItemInnerContainer as typeof ListItemInnerContainer; },\n        get ListItemContent() { return ListItemContent as typeof ListItemContent; },\n        get ListItemIconPadding() { return ListItemIconPadding as typeof ListItemIconPadding; },\n        get Icon() { return Icon as typeof Icon; },\n        get InteractiveListContainer() { return InteractiveListContainer as typeof InteractiveListContainer; },\n        get ListDivider() { return ListDivider as typeof ListDivider; },\n        get ListHeader() { return ListHeader as typeof ListHeader; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}