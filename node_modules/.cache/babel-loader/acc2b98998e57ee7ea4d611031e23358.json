{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nconst BasicBadge = styled.div`\n  position: relative;\n  border-radius: 0.25em;\n  text-align: center;\n`;\nconst FilledBadge = styled(BasicBadge)`\n  color: ${themed(({\n  theme\n}) => theme.badgeBackground)};\n  background: ${themed(({\n  theme\n}) => theme.badgeColor)};\n`;\nconst NormalBadge = styled(BasicBadge)`\n  ${getFontStyle({\n  size: 'xSmall'\n})}\n  display: inline-block;\n  color: ${themed(({\n  theme\n}) => theme.badgeColor)};\n  background: ${themed(({\n  theme\n}) => theme.badgeBackground)};\n  min-width: 2em;\n  padding: 0 ${distance.xsmall};\n  border: solid 1px ${themed(({\n  theme\n}) => theme.badgeColor)};\n`;\n/**\n * The badge component is a simple informative display.\n */\n\nexport const Badge = Object.assign(_a => {\n  var {\n    fill = false\n  } = _a,\n      props = __rest(_a, [\"fill\"]);\n\n  return fill ? React.createElement(FilledBadge, Object.assign({}, props)) : React.createElement(NormalBadge, Object.assign({}, props));\n}, {\n  inner: {\n    get FilledBadge() {\n      return FilledBadge;\n    },\n\n    get NormalBadge() {\n      return NormalBadge;\n    }\n\n  }\n});\nBadge.displayName = 'Badge';","map":{"version":3,"sources":["../../../../src/components/Badge/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,MAAjB,QAA+B,oBAA/B;AAEA,SAAS,QAAT,QAAyB,gBAAzB;AACA,SAAS,YAAT,QAA6B,kBAA7B;AAaA,MAAM,UAAU,GAAG,MAAM,CAAC,GAAI;;;;CAA9B;AAKA,MAAM,WAAW,GAAG,MAAM,CAAC,UAAD,CAAa;WAC5B,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,eAAtB,CAAsC;gBACvC,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,UAAtB,CAAiC;CAFvD;AAIA,MAAM,WAAW,GAAG,MAAM,CAAC,UAAD,CAAa;IACnC,YAAY,CAAC;AAAE,EAAA,IAAI,EAAE;AAAR,CAAD,CAAoB;;WAEzB,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,UAAtB,CAAiC;gBAClC,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,eAAtB,CAAsC;;eAE7C,QAAQ,CAAC,MAAM;sBACR,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,UAAtB,CAAiC;CAP7D;AASA;;;;AAGA,OAAO,MAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAA+B;MAA9B;AAAE,IAAA,IAAI,GAAG;AAAT,MAAc,E;MAAE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,C;;AAAe,SAAA,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAZ,CAAH,GAA+B,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAZ,CAAnC;AAA4D,CAA5G,EAAyI;AAAE,EAAA,KAAK,EAAE;AAC/J,QAAI,WAAJ,GAAe;AAAK,aAAO,WAAP;AAA2C,KADgG;;AAE/J,QAAI,WAAJ,GAAe;AAAK,aAAO,WAAP;AAA2C;;AAFgG;AAAT,CAAzI,CAAd;AAIP,KAAK,CAAC,WAAN,GAAoB,OAApB","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nexport interface BadgeProps extends StandardProps {\n    /**\n     * The content of the badge to display.\n     */\n    children?: React.ReactNode;\n    /**\n     * Sets the mode to a filling badge. Useful together with the `Avatar`.\n     * By default false.\n     * @default false\n     */\n    fill?: boolean;\n}\nconst BasicBadge = styled.div `\n  position: relative;\n  border-radius: 0.25em;\n  text-align: center;\n`;\nconst FilledBadge = styled(BasicBadge) `\n  color: ${themed(({ theme }) => theme.badgeBackground)};\n  background: ${themed(({ theme }) => theme.badgeColor)};\n`;\nconst NormalBadge = styled(BasicBadge) `\n  ${getFontStyle({ size: 'xSmall' })}\n  display: inline-block;\n  color: ${themed(({ theme }) => theme.badgeColor)};\n  background: ${themed(({ theme }) => theme.badgeBackground)};\n  min-width: 2em;\n  padding: 0 ${distance.xsmall};\n  border: solid 1px ${themed(({ theme }) => theme.badgeColor)};\n`;\n/**\n * The badge component is a simple informative display.\n */\nexport const Badge = Object.assign(((({ fill = false, ...props }) => fill ? <FilledBadge {...props}/> : <NormalBadge {...props}/>) as React.SFC<BadgeProps>), { inner: {\n        get FilledBadge() { return FilledBadge as typeof FilledBadge; },\n        get NormalBadge() { return NormalBadge as typeof NormalBadge; }\n    } });\nBadge.displayName = 'Badge';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}