{"ast":null,"code":"export class SimpleEventManager {\n  constructor() {\n    this.eventListeners = {};\n  }\n\n  on(type, callback) {\n    const callbacks = this.eventListeners[type] || [];\n    this.eventListeners[type] = [...callbacks, callback];\n  }\n\n  off(type, callback) {\n    const callbacks = this.eventListeners[type] || [];\n    this.eventListeners[type] = callbacks.filter(cb => cb !== callback);\n  }\n\n  emit(type, arg) {\n    const callbacks = this.eventListeners[type] || [];\n\n    for (const callback of callbacks) {\n      setTimeout(() => callback.call(this, arg), 0);\n    }\n  }\n\n}\nexport const eventManagers = [new SimpleEventManager()];\nexport function setDefaultEventManager(events) {\n  eventManagers.splice(0, 1, events);\n}","map":{"version":3,"sources":["../../../src/utils/eventManager.ts"],"names":[],"mappings":"AAcA,OAAM,MAAO,kBAAP,CAAyB;AAA/B,EAAA,WAAA,GAAA;AACmB,SAAA,cAAA,GAAiC,EAAjC;AAmBlB;;AAjBC,EAAA,EAAE,CAAI,IAAJ,EAAkB,QAAlB,EAA4C;AAC5C,UAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,IAApB,KAA6B,EAA/C;AACA,SAAK,cAAL,CAAoB,IAApB,IAA4B,CAAC,GAAG,SAAJ,EAAe,QAAf,CAA5B;AACD;;AAED,EAAA,GAAG,CAAI,IAAJ,EAAkB,QAAlB,EAA4C;AAC7C,UAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,IAApB,KAA6B,EAA/C;AACA,SAAK,cAAL,CAAoB,IAApB,IAA4B,SAAS,CAAC,MAAV,CAAiB,EAAE,IAAI,EAAE,KAAK,QAA9B,CAA5B;AACD;;AAED,EAAA,IAAI,CAAI,IAAJ,EAAkB,GAAlB,EAAwB;AAC1B,UAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,IAApB,KAA6B,EAA/C;;AAEA,SAAK,MAAM,QAAX,IAAuB,SAAvB,EAAkC;AAChC,MAAA,UAAU,CAAC,MAAM,QAAQ,CAAC,IAAT,CAAc,IAAd,EAAoB,GAApB,CAAP,EAAiC,CAAjC,CAAV;AACD;AACF;;AAnB4B;AAsB/B,OAAO,MAAM,aAAa,GAAwB,CAAC,IAAI,kBAAJ,EAAD,CAA3C;AAEP,OAAM,SAAU,sBAAV,CAAiC,MAAjC,EAAqD;AACzD,EAAA,aAAa,CAAC,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,MAA3B;AACD","sourcesContent":["export interface Callback {\n  (arg: any): void;\n}\n\nexport interface EventListeners {\n  [event: string]: Array<Callback>;\n}\n\nexport interface EventManager {\n  on(type: string, callback: Callback): void;\n  off(type: string, callback: Callback): void;\n  emit<T>(type: string, arg: T): void;\n}\n\nexport class SimpleEventManager implements EventManager {\n  private readonly eventListeners: EventListeners = {};\n\n  on<T>(type: string, callback: (arg: T) => void) {\n    const callbacks = this.eventListeners[type] || [];\n    this.eventListeners[type] = [...callbacks, callback];\n  }\n\n  off<T>(type: string, callback: (arg: T) => void) {\n    const callbacks = this.eventListeners[type] || [];\n    this.eventListeners[type] = callbacks.filter(cb => cb !== callback);\n  }\n\n  emit<T>(type: string, arg: T) {\n    const callbacks = this.eventListeners[type] || [];\n\n    for (const callback of callbacks) {\n      setTimeout(() => callback.call(this, arg), 0);\n    }\n  }\n}\n\nexport const eventManagers: Array<EventManager> = [new SimpleEventManager()];\n\nexport function setDefaultEventManager(events: EventManager) {\n  eventManagers.splice(0, 1, events);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}