{"ast":null,"code":"import * as React from 'react';\nimport styled from '../../utils/styled';\n\nfunction getExpandingContainerHeight(status, expandedHeight, collapsedHeight) {\n  if (!expandedHeight) {\n    return '0';\n  }\n\n  switch (status) {\n    case 'entering':\n      return `${expandedHeight}px`;\n\n    case 'entered':\n      return 'auto';\n\n    case 'exitingStart':\n      return `${expandedHeight}px`;\n\n    case 'exiting':\n    default:\n      return `${collapsedHeight || '0'}`;\n  }\n}\n\nconst ExpandingContainer = styled('div')(({\n  status,\n  expandedHeight,\n  collapsedHeight,\n  timeout\n}) => `\n    overflow: hidden;\n    transition-duration: ${timeout}ms;\n    height: ${getExpandingContainerHeight(status, expandedHeight, collapsedHeight)}\n  `);\n/**\n * A functional expander component for expanding / collapsing content.\n */\n\nexport class Expander extends React.Component {\n  constructor(props) {\n    super(props);\n    this.wrapperRef = React.createRef();\n\n    this.setContainer = ref => {\n      this.rootContainer = ref;\n    };\n\n    this.state = {\n      status: 'unmounted'\n    };\n  }\n\n  componentDidMount() {\n    this.handleChange();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      expand\n    } = this.props;\n    const {\n      status\n    } = this.state;\n\n    if (prevProps.expand !== expand || prevState.status !== status) {\n      this.handleChange();\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearTimer();\n  }\n\n  handleChange() {\n    const {\n      expand\n    } = this.props;\n    const {\n      status\n    } = this.state;\n\n    if (expand) {\n      if (status === 'unmounted') {\n        this.setState({\n          status: 'mounted'\n        });\n      } else if (status !== 'entering' && status !== 'entered') {\n        this.performEnter();\n      }\n    } else {\n      if (status === 'entering' || status === 'entered') {\n        this.performExit();\n      }\n    }\n  }\n\n  performEnter() {\n    this.setState({\n      status: 'entering'\n    }, () => this.setDelayedStatus('entered'));\n  }\n\n  performExit() {\n    const {\n      unmountOnExit\n    } = this.props;\n    this.setState({\n      status: 'exitingStart'\n    }, () => this.setState({\n      status: 'exiting'\n    }, () => this.setDelayedStatus(unmountOnExit ? 'unmounted' : 'exited')));\n  }\n\n  clearTimer() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  setDelayedStatus(status) {\n    const {\n      timeout = 0\n    } = this.props;\n    this.clearTimer();\n    this.timer = setTimeout(() => {\n      this.setState({\n        status\n      });\n    }, timeout);\n  }\n\n  render() {\n    const {\n      status\n    } = this.state;\n    const {\n      children,\n      collapsedHeight,\n      timeout = 0\n    } = this.props;\n    const contentRef = this.wrapperRef.current;\n\n    if (status !== 'unmounted') {\n      return React.createElement(ExpandingContainer, {\n        ref: this.setContainer,\n        expandedHeight: contentRef ? contentRef.clientHeight : undefined,\n        collapsedHeight: collapsedHeight,\n        status: status,\n        timeout: timeout,\n        style: {\n          minHeight: collapsedHeight\n        }\n      }, React.createElement(\"div\", {\n        ref: this.wrapperRef\n      }, children));\n    }\n\n    return false;\n  }\n\n}\nExpander.inner = {\n  get ExpandingContainer() {\n    return ExpandingContainer;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Expander/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,oBAAnB;;AAiCA,SAAS,2BAAT,CAAqC,MAArC,EAAgE,cAAhE,EAAyF,eAAzF,EAAiH;AAC7G,MAAI,CAAC,cAAL,EAAqB;AACjB,WAAO,GAAP;AACH;;AACD,UAAQ,MAAR;AACI,SAAK,UAAL;AACI,aAAO,GAAG,cAAc,IAAxB;;AACJ,SAAK,SAAL;AACI,aAAO,MAAP;;AACJ,SAAK,cAAL;AACI,aAAO,GAAG,cAAc,IAAxB;;AACJ,SAAK,SAAL;AACA;AACI,aAAO,GAAG,eAAe,IAAI,GAAG,EAAhC;AATR;AAWH;;AACD,MAAM,kBAAkB,GAAG,MAAM,CAAC,KAAD,CAAN,CAAuC,CAAC;AAAE,EAAA,MAAF;AAAU,EAAA,cAAV;AAA0B,EAAA,eAA1B;AAA2C,EAAA;AAA3C,CAAD,KAA0D;;2BAEjG,OAAO;cACpB,2BAA2B,CAAC,MAAD,EAAS,cAAT,EAAyB,eAAzB,CAAyC;GAHvD,CAA3B;AAKA;;;;AAGA,OAAM,MAAO,QAAP,SAAwB,KAAK,CAAC,SAA9B,CAAqE;AAIvE,EAAA,WAAA,CAAY,KAAZ,EAAgC;AAC5B,UAAM,KAAN;AAJI,SAAA,UAAA,GAAa,KAAK,CAAC,SAAN,EAAb;;AAuDA,SAAA,YAAA,GAAgB,GAAD,IAA+B;AAClD,WAAK,aAAL,GAAqB,GAArB;AACH,KAFO;;AAlDJ,SAAK,KAAL,GAAa;AACT,MAAA,MAAM,EAAE;AADC,KAAb;AAGH;;AACD,EAAA,iBAAiB,GAAA;AACb,SAAK,YAAL;AACH;;AACD,EAAA,kBAAkB,CAAC,SAAD,EAA2B,SAA3B,EAAmD;AACjE,UAAM;AAAE,MAAA;AAAF,QAAa,KAAK,KAAxB;AACA,UAAM;AAAE,MAAA;AAAF,QAAa,KAAK,KAAxB;;AACA,QAAI,SAAS,CAAC,MAAV,KAAqB,MAArB,IAA+B,SAAS,CAAC,MAAV,KAAqB,MAAxD,EAAgE;AAC5D,WAAK,YAAL;AACH;AACJ;;AACD,EAAA,oBAAoB,GAAA;AAChB,SAAK,UAAL;AACH;;AACO,EAAA,YAAY,GAAA;AAChB,UAAM;AAAE,MAAA;AAAF,QAAa,KAAK,KAAxB;AACA,UAAM;AAAE,MAAA;AAAF,QAAa,KAAK,KAAxB;;AACA,QAAI,MAAJ,EAAY;AACR,UAAI,MAAM,KAAK,WAAf,EAA4B;AACxB,aAAK,QAAL,CAAc;AACV,UAAA,MAAM,EAAE;AADE,SAAd;AAGH,OAJD,MAKK,IAAI,MAAM,KAAK,UAAX,IAAyB,MAAM,KAAK,SAAxC,EAAmD;AACpD,aAAK,YAAL;AACH;AACJ,KATD,MAUK;AACD,UAAI,MAAM,KAAK,UAAX,IAAyB,MAAM,KAAK,SAAxC,EAAmD;AAC/C,aAAK,WAAL;AACH;AACJ;AACJ;;AACO,EAAA,YAAY,GAAA;AAChB,SAAK,QAAL,CAAc;AACV,MAAA,MAAM,EAAE;AADE,KAAd,EAEG,MAAM,KAAK,gBAAL,CAAsB,SAAtB,CAFT;AAGH;;AACO,EAAA,WAAW,GAAA;AACf,UAAM;AAAE,MAAA;AAAF,QAAoB,KAAK,KAA/B;AACA,SAAK,QAAL,CAAc;AAAE,MAAA,MAAM,EAAE;AAAV,KAAd,EAA0C,MAAM,KAAK,QAAL,CAAc;AAAE,MAAA,MAAM,EAAE;AAAV,KAAd,EAAqC,MAAM,KAAK,gBAAL,CAAsB,aAAa,GAAG,WAAH,GAAiB,QAApD,CAA3C,CAAhD;AACH;;AACO,EAAA,UAAU,GAAA;AACd,QAAI,KAAK,KAAT,EAAgB;AACZ,MAAA,YAAY,CAAC,KAAK,KAAN,CAAZ;AACH;AACJ;;AAIO,EAAA,gBAAgB,CAAC,MAAD,EAAyB;AAC7C,UAAM;AAAE,MAAA,OAAO,GAAG;AAAZ,QAAkB,KAAK,KAA7B;AACA,SAAK,UAAL;AACA,SAAK,KAAL,GAAa,UAAU,CAAC,MAAK;AACzB,WAAK,QAAL,CAAc;AACV,QAAA;AADU,OAAd;AAGH,KAJsB,EAIpB,OAJoB,CAAvB;AAKH;;AACD,EAAA,MAAM,GAAA;AACF,UAAM;AAAE,MAAA;AAAF,QAAa,KAAK,KAAxB;AACA,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA,eAAZ;AAA6B,MAAA,OAAO,GAAG;AAAvC,QAA6C,KAAK,KAAxD;AACA,UAAM,UAAU,GAAG,KAAK,UAAL,CAAgB,OAAnC;;AACA,QAAI,MAAM,KAAK,WAAf,EAA4B;AACxB,aAAQ,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAmB;AAAC,QAAA,GAAG,EAAE,KAAK,YAAX;AAAyB,QAAA,cAAc,EAAE,UAAU,GAAG,UAAU,CAAC,YAAd,GAA6B,SAAhF;AAA2F,QAAA,eAAe,EAAE,eAA5G;AAA6H,QAAA,MAAM,EAAE,MAArI;AAA6I,QAAA,OAAO,EAAE,OAAtJ;AAA+J,QAAA,KAAK,EAAE;AAAE,UAAA,SAAS,EAAE;AAAb;AAAtK,OAAnB,EACV,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,GAAG,EAAE,KAAK;AAAf,OAAA,EAA4B,QAA5B,CADU,CAAR;AAGH;;AACD,WAAO,KAAP;AACH;;AA9EsE;AA+EhE,QAAA,CAAA,KAAA,GAAQ;AACX,MAAI,kBAAJ,GAAsB;AAAK,WAAO,kBAAP;AAAyD;;AADzE,CAAR","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nexport interface ExpanderProps {\n    /**\n     * The timeout to be used for transitioning.\n     * @default 0\n     */\n    timeout?: number;\n    /**\n     * If `true`, the component will transition in.\n     * @default false\n     */\n    expand?: boolean;\n    /**\n     * The height of the container when collapsed.\n     * @default `0px`\n     */\n    collapsedHeight?: string;\n    /**\n     * Optionally unmount the expandable container\n     * @default false\n     */\n    unmountOnExit?: boolean;\n}\nexport type TransitionStatus = 'unmounted' | 'mounted' | 'exited' | 'entering' | 'entered' | 'exiting' | 'exitingStart';\nexport interface ExpanderState {\n    status?: TransitionStatus;\n}\nexport interface ExpandingContainerProps {\n    expandedHeight?: number;\n    collapsedHeight?: string;\n    status?: TransitionStatus;\n    timeout: number;\n}\nfunction getExpandingContainerHeight(status?: TransitionStatus, expandedHeight?: number, collapsedHeight?: string) {\n    if (!expandedHeight) {\n        return '0';\n    }\n    switch (status) {\n        case 'entering':\n            return `${expandedHeight}px`;\n        case 'entered':\n            return 'auto';\n        case 'exitingStart':\n            return `${expandedHeight}px`;\n        case 'exiting':\n        default:\n            return `${collapsedHeight || '0'}`;\n    }\n}\nconst ExpandingContainer = styled('div')<ExpandingContainerProps>(({ status, expandedHeight, collapsedHeight, timeout }) => `\n    overflow: hidden;\n    transition-duration: ${timeout}ms;\n    height: ${getExpandingContainerHeight(status, expandedHeight, collapsedHeight)}\n  `);\n/**\n * A functional expander component for expanding / collapsing content.\n */\nexport class Expander extends React.Component<ExpanderProps, ExpanderState> {\n    private wrapperRef = React.createRef<HTMLDivElement>();\n    private rootContainer: HTMLDivElement | null;\n    private timer: any;\n    constructor(props: ExpanderProps) {\n        super(props);\n        this.state = {\n            status: 'unmounted',\n        };\n    }\n    componentDidMount() {\n        this.handleChange();\n    }\n    componentDidUpdate(prevProps: ExpanderProps, prevState: ExpanderState) {\n        const { expand } = this.props;\n        const { status } = this.state;\n        if (prevProps.expand !== expand || prevState.status !== status) {\n            this.handleChange();\n        }\n    }\n    componentWillUnmount() {\n        this.clearTimer();\n    }\n    private handleChange() {\n        const { expand } = this.props;\n        const { status } = this.state;\n        if (expand) {\n            if (status === 'unmounted') {\n                this.setState({\n                    status: 'mounted',\n                });\n            }\n            else if (status !== 'entering' && status !== 'entered') {\n                this.performEnter();\n            }\n        }\n        else {\n            if (status === 'entering' || status === 'entered') {\n                this.performExit();\n            }\n        }\n    }\n    private performEnter() {\n        this.setState({\n            status: 'entering',\n        }, () => this.setDelayedStatus('entered'));\n    }\n    private performExit() {\n        const { unmountOnExit } = this.props;\n        this.setState({ status: 'exitingStart' }, () => this.setState({ status: 'exiting' }, () => this.setDelayedStatus(unmountOnExit ? 'unmounted' : 'exited')));\n    }\n    private clearTimer() {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n    }\n    private setContainer = (ref: HTMLDivElement | null) => {\n        this.rootContainer = ref;\n    };\n    private setDelayedStatus(status: TransitionStatus) {\n        const { timeout = 0 } = this.props;\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.setState({\n                status,\n            });\n        }, timeout);\n    }\n    render() {\n        const { status } = this.state;\n        const { children, collapsedHeight, timeout = 0 } = this.props;\n        const contentRef = this.wrapperRef.current;\n        if (status !== 'unmounted') {\n            return (<ExpandingContainer ref={this.setContainer} expandedHeight={contentRef ? contentRef.clientHeight : undefined} collapsedHeight={collapsedHeight} status={status} timeout={timeout} style={{ minHeight: collapsedHeight }}>\n          <div ref={this.wrapperRef}>{children}</div>\n        </ExpandingContainer>);\n        }\n        return false;\n    }\n    static inner = {\n        get ExpandingContainer() { return ExpandingContainer as typeof ExpandingContainer; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}