{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport memoize from 'memoize-one';\nimport { debounce } from '../../utils';\nimport { TagBuilder } from '../TagBuilder';\nimport { Autocomplete } from '../Autocomplete';\nexport class AutocompleteTagBuilderInt extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.removeValueByIndex = index => {\n      const {\n        value\n      } = this.state;\n      const keys = Array.from(value.keys());\n      index = index >= 0 ? index : keys.length + index;\n\n      if (index >= 0 && index < keys.length) {\n        value.splice(index, 1);\n        const newValue = [...value];\n        this.updateValue(newValue);\n      }\n    };\n\n    this.getTagsArray = memoize(value => {\n      return value.map(x => this.getSuggestionValue(x));\n    });\n\n    this.tagRemoveHandler = index => {\n      this.removeValueByIndex(index);\n    };\n\n    this.suggestionSelectedHandler = e => {\n      this.addSuggestion(e.value);\n    };\n\n    this.inputChangeHandler = e => {\n      this.changeInputValue(e.value);\n    };\n\n    this.inputRefHandler = node => {\n      this._inputNode = node;\n    };\n\n    this.tagBuilderRenderer = inputProps => {\n      const {\n        disabled,\n        tagRenderer,\n        borderless = false\n      } = this.props;\n      const {\n        value\n      } = this.state;\n\n      const {\n        onChange,\n        value: inputValue\n      } = inputProps,\n            restProps = __rest(inputProps, [\"onChange\", \"value\"]);\n\n      const tagBuilderValue = this.getTagsArray(value);\n      return React.createElement(TagBuilder, Object.assign({}, restProps, {\n        disabled: disabled,\n        inputValue: inputValue,\n        onInput: onChange,\n        value: tagBuilderValue,\n        tagRenderer: tagRenderer,\n        borderless: borderless,\n        onBeforeTagRemove: this.tagRemoveHandler\n      }));\n    };\n\n    const {\n      value: nullableValue,\n      defaultValue,\n      onInputChange,\n      inputValue,\n      delay = 0\n    } = this.props;\n    const value = nullableValue || defaultValue || [];\n    this.state = {\n      value: value,\n      inputValue: inputValue || '',\n      controlled: props.value !== undefined || inputValue !== undefined\n    };\n    this._fireOnInputChange = debounce(value => {\n      onInputChange && onInputChange({\n        value\n      });\n    }, delay);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.state.controlled) {\n      const {\n        value,\n        inputValue\n      } = nextProps;\n      this.setState({\n        value: value || [],\n        inputValue: inputValue || ''\n      });\n    }\n  }\n\n  componentDidMount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.subscribe(this);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.unsubscribe(this);\n    }\n  }\n\n  addSuggestion(suggestion) {\n    const {\n      value\n    } = this.state;\n    const key = this.getSuggestionKey(suggestion);\n    const suggestionAlreadyAdded = value.some(x => this.getSuggestionKey(x) === key);\n\n    if (!suggestionAlreadyAdded) {\n      const newValue = [...value];\n      newValue.push(suggestion);\n      this.updateValue(newValue);\n    }\n\n    this.changeInputValue('');\n  }\n\n  updateValue(newValue) {\n    const {\n      onChange,\n      name = '',\n      form\n    } = this.props;\n\n    if (!this.state.controlled) {\n      if (form) {\n        form.change({\n          name,\n          value: newValue\n        });\n      } else {\n        this.setState({\n          value: newValue\n        });\n      }\n    }\n\n    if (this._inputNode) {\n      this._inputNode.focus();\n    }\n\n    if (typeof onChange === 'function') {\n      onChange({\n        value: newValue\n      });\n    }\n  }\n\n  changeInputValue(newValue) {\n    if (!this.state.controlled) {\n      this.setState({\n        inputValue: newValue\n      });\n    }\n\n    this._fireOnInputChange(newValue);\n  }\n\n  getSuggestionValue(item) {\n    const {\n      getSuggestionValue\n    } = this.props;\n\n    if (typeof item === 'string') {\n      return item;\n    } else if (typeof getSuggestionValue === 'function') {\n      return getSuggestionValue(item);\n    } else {\n      throw new Error('Get suggestion value should be specified');\n    }\n  }\n\n  getSuggestionKey(item) {\n    const {\n      getSuggestionKey\n    } = this.props;\n\n    if (typeof item === 'string') {\n      return item;\n    } else if (typeof getSuggestionKey === 'function') {\n      return getSuggestionKey(item);\n    } else {\n      throw new Error('Get suggestion key should be specified');\n    }\n  }\n\n  defaultSuggestionRenderer(suggestion) {\n    return {\n      content: this.getSuggestionValue(suggestion),\n      key: this.getSuggestionKey(suggestion)\n    };\n  }\n\n  render() {\n    const {\n      suggestions = [],\n      noSuggestionsMessage,\n      disabled,\n      renderSuggestion = item => this.defaultSuggestionRenderer(item),\n      label,\n      placeholder,\n      info,\n      borderless = false,\n      error,\n      onBlur,\n      onFocus\n    } = this.props;\n    const {\n      inputValue\n    } = this.state;\n    return React.createElement(Autocomplete, {\n      noSuggestionsMessage: noSuggestionsMessage,\n      suggestions: suggestions,\n      inputRenderer: this.tagBuilderRenderer,\n      renderSuggestion: renderSuggestion,\n      disabled: disabled,\n      value: inputValue,\n      onChange: this.inputChangeHandler,\n      onSuggestionSelected: this.suggestionSelectedHandler,\n      inputRef: this.inputRefHandler,\n      label: label,\n      placeholder: placeholder,\n      info: info,\n      error: error,\n      borderless: borderless,\n      onBlur: onBlur,\n      onFocus: onFocus\n    });\n  }\n\n}\nAutocompleteTagBuilderInt.inner = {\n  get TagBuilder() {\n    return TagBuilder;\n  },\n\n  get Autocomplete() {\n    return Autocomplete;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/AutocompleteTagBuilder/AutocompleteTagBuilder.int.part.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport memoize from 'memoize-one';\nimport { FormContextProps } from '../../hoc/withFormContext';\nimport { InputChangeEvent } from '../../common';\nimport { AutocompleteTagBuilderProps, AutocompleteTagBuilderState } from './AutocompleteTagBuilder.types.part';\nimport { debounce } from '../../utils';\nimport { TagBuilder } from '../TagBuilder';\nimport { Autocomplete, AutocompleteInputProps, AutosuggestSelectEvent } from '../Autocomplete';\nexport class AutocompleteTagBuilderInt<T> extends React.Component<AutocompleteTagBuilderProps<T> & FormContextProps, AutocompleteTagBuilderState<T>> {\n    private _fireOnInputChange: (q: string) => void;\n    private _inputNode: HTMLElement | null;\n    public constructor(props: AutocompleteTagBuilderProps<T>) {\n        super(props);\n        const { value: nullableValue, defaultValue, onInputChange, inputValue, delay = 0 } = this.props;\n        const value = nullableValue || defaultValue || [];\n        this.state = {\n            value: value,\n            inputValue: inputValue || '',\n            controlled: props.value !== undefined || inputValue !== undefined,\n        };\n        this._fireOnInputChange = debounce((value: string) => {\n            onInputChange && onInputChange({ value });\n        }, delay);\n    }\n    public UNSAFE_componentWillReceiveProps(nextProps: AutocompleteTagBuilderProps<T>) {\n        if (this.state.controlled) {\n            const { value, inputValue } = nextProps;\n            this.setState({\n                value: value || [],\n                inputValue: inputValue || '',\n            });\n        }\n    }\n    public componentDidMount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    public componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    private addSuggestion(suggestion: T) {\n        const { value } = this.state;\n        const key = this.getSuggestionKey(suggestion);\n        const suggestionAlreadyAdded = value.some(x => this.getSuggestionKey(x) === key);\n        if (!suggestionAlreadyAdded) {\n            const newValue = [...value];\n            newValue.push(suggestion);\n            this.updateValue(newValue);\n        }\n        this.changeInputValue('');\n    }\n    private removeValueByIndex = (index: number) => {\n        const { value } = this.state;\n        const keys = Array.from(value.keys());\n        index = index >= 0 ? index : keys.length + index;\n        if (index >= 0 && index < keys.length) {\n            value.splice(index, 1);\n            const newValue = [...value];\n            this.updateValue(newValue);\n        }\n    };\n    private updateValue(newValue: Array<T>) {\n        const { onChange, name = '', form } = this.props;\n        if (!this.state.controlled) {\n            if (form) {\n                form.change({\n                    name,\n                    value: newValue,\n                });\n            }\n            else {\n                this.setState({\n                    value: newValue,\n                });\n            }\n        }\n        if (this._inputNode) {\n            this._inputNode.focus();\n        }\n        if (typeof onChange === 'function') {\n            onChange({ value: newValue });\n        }\n    }\n    private changeInputValue(newValue: string) {\n        if (!this.state.controlled) {\n            this.setState({\n                inputValue: newValue,\n            });\n        }\n        this._fireOnInputChange(newValue);\n    }\n    private getSuggestionValue(item: T) {\n        const { getSuggestionValue } = this.props;\n        if (typeof item === 'string') {\n            return item;\n        }\n        else if (typeof getSuggestionValue === 'function') {\n            return getSuggestionValue(item);\n        }\n        else {\n            throw new Error('Get suggestion value should be specified');\n        }\n    }\n    private getSuggestionKey(item: T) {\n        const { getSuggestionKey } = this.props;\n        if (typeof item === 'string') {\n            return item;\n        }\n        else if (typeof getSuggestionKey === 'function') {\n            return getSuggestionKey(item);\n        }\n        else {\n            throw new Error('Get suggestion key should be specified');\n        }\n    }\n    private getTagsArray = memoize((value: Array<T>) => {\n        return value.map(x => this.getSuggestionValue(x));\n    });\n    private defaultSuggestionRenderer(suggestion: T) {\n        return {\n            content: this.getSuggestionValue(suggestion),\n            key: this.getSuggestionKey(suggestion),\n        };\n    }\n    private tagRemoveHandler = (index: number) => {\n        this.removeValueByIndex(index);\n    };\n    private suggestionSelectedHandler = (e: AutosuggestSelectEvent<T>) => {\n        this.addSuggestion(e.value);\n    };\n    private inputChangeHandler = (e: InputChangeEvent<string>) => {\n        this.changeInputValue(e.value);\n    };\n    private inputRefHandler = (node: HTMLElement | null) => {\n        this._inputNode = node;\n    };\n    private tagBuilderRenderer = (inputProps: AutocompleteInputProps) => {\n        const { disabled, tagRenderer, borderless = false } = this.props;\n        const { value } = this.state;\n        const { onChange, value: inputValue, ...restProps } = inputProps;\n        const tagBuilderValue = this.getTagsArray(value);\n        return (<TagBuilder {...restProps} disabled={disabled} inputValue={inputValue} onInput={onChange} value={tagBuilderValue} tagRenderer={tagRenderer} borderless={borderless} onBeforeTagRemove={this.tagRemoveHandler}/>);\n    };\n    public render() {\n        const { suggestions = [], noSuggestionsMessage, disabled, renderSuggestion = (item: T) => this.defaultSuggestionRenderer(item), label, placeholder, info, borderless = false, error, onBlur, onFocus, } = this.props;\n        const { inputValue } = this.state;\n        return (<Autocomplete noSuggestionsMessage={noSuggestionsMessage} suggestions={suggestions} inputRenderer={this.tagBuilderRenderer} renderSuggestion={renderSuggestion} disabled={disabled} value={inputValue} onChange={this.inputChangeHandler} onSuggestionSelected={this.suggestionSelectedHandler} inputRef={this.inputRefHandler} label={label} placeholder={placeholder} info={info} error={error} borderless={borderless} onBlur={onBlur} onFocus={onFocus}/>);\n    }\n    static inner = {\n        get TagBuilder() { return TagBuilder as typeof TagBuilder; },\n        get Autocomplete() { return Autocomplete as typeof Autocomplete; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}