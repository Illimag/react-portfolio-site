{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { InputError } from '../InputError';\nimport { InputInfo } from '../InputInfo';\n/**\n * Input notification component.\n * Shows InputError and InputInfo either error or info provided.\n */\n\nexport var InputNotification = Object.assign(function (_a) {\n  var error = _a.error,\n      info = _a.info,\n      rest = __rest(_a, [\"error\", \"info\"]);\n\n  if (error) {\n    if (typeof error === 'string') {\n      return React.createElement(InputError, Object.assign({}, rest), error);\n    }\n\n    return React.createElement(React.Fragment, null, error);\n  } else if (info) {\n    if (typeof info === 'string') {\n      return React.createElement(InputInfo, Object.assign({}, rest), info);\n    }\n\n    return React.createElement(React.Fragment, null, info);\n  } // tslint:disable-next-line\n\n\n  return null;\n}, {\n  inner: {\n    get InputError() {\n      return InputError;\n    },\n\n    get InputInfo() {\n      return InputInfo;\n    }\n\n  }\n});","map":{"version":3,"sources":["../../../../src/components/InputNotification/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,UAAT,QAA4C,eAA5C;AACA,SAAS,SAAT,QAA0C,cAA1C;AAKA;;;;;AAIA,OAAO,IAAM,iBAAiB,GAAG,MAAM,CAAC,MAAP,CAAgB,UAAC,EAAD,EAA6B;AAAA,MAA1B,KAA0B,GAAf,EAAe,CAA1B,KAA0B;AAAA,MAAnB,IAAmB,GAAf,EAAe,CAAnB,IAAmB;AAAA,MAAb,IAAa,GAAb,MAAA,CAAA,EAAA,EAAA,CAAA,OAAA,EAAA,MAAA,CAAA,CAAa;;AAC1E,MAAI,KAAJ,EAAW;AACP,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAO,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,IAAL,CAAX,EAAuB,KAAvB,CAAP;AACH;;AACD,WAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,KAAH,CAAP;AACH,GALD,MAMK,IAAI,IAAJ,EAAU;AACX,QAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC1B,aAAO,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,IAAL,CAAV,EAAsB,IAAtB,CAAP;AACH;;AACD,WAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,IAAH,CAAP;AACH,GAZyE,CAa1E;;;AACA,SAAO,IAAP;AACH,CAfgC,EAeQ;AAAE,EAAA,KAAK,EAAE;AAC1C,QAAI,UAAJ,GAAc;AAAK,aAAO,UAAP;AAAyC,KADlB;;AAE1C,QAAI,SAAJ,GAAa;AAAK,aAAO,SAAP;AAAuC;;AAFf;AAAT,CAfR,CAA1B","sourcesContent":["import * as React from 'react';\nimport { InputError, InputErrorProps } from '../InputError';\nimport { InputInfo, InputInfoProps } from '../InputInfo';\nexport interface InputNotificationProps extends InputErrorProps, InputInfoProps {\n    error?: React.ReactNode;\n    info?: React.ReactNode;\n}\n/**\n * Input notification component.\n * Shows InputError and InputInfo either error or info provided.\n */\nexport const InputNotification = Object.assign(((({ error, info, ...rest }) => {\n    if (error) {\n        if (typeof error === 'string') {\n            return <InputError {...rest}>{error}</InputError>;\n        }\n        return <>{error}</>;\n    }\n    else if (info) {\n        if (typeof info === 'string') {\n            return <InputInfo {...rest}>{info}</InputInfo>;\n        }\n        return <>{info}</>;\n    }\n    // tslint:disable-next-line\n    return null;\n}) as React.FC<InputNotificationProps>), { inner: {\n        get InputError() { return InputError as typeof InputError; },\n        get InputInfo() { return InputInfo as typeof InputInfo; }\n    } });\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}