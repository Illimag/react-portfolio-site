{"ast":null,"code":"import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { StyledFileImagePreview, StyledFileItem, StyledFileList } from '../../quarks';\nimport { withFormContext } from '../../hoc/withFormContext';\nimport { Button } from '../Button';\nimport { Icon } from '../Icon';\nimport { Spinner } from '../Spinner';\nimport { showInputInfo } from '../../utils/input';\nconst FileInput = styled.input`\n  display: none;\n`;\nconst Remove = styled.div`\n  cursor: pointer;\n  line-height: 1;\n`;\n\nfunction getFiles(target, files = []) {\n  target.push(...files);\n  return target;\n}\n\nclass FileSelectInt extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addFileEntries = ev => {\n      const {\n        multiple,\n        form,\n        name = ''\n      } = this.props;\n      const files = ev.target.files;\n\n      if (!this.state.controlled) {\n        if (form) {\n          form.change({\n            name,\n            value: getFiles(multiple ? [...this.state.value] : [], files)\n          });\n        } else {\n          this.setState(prevState => ({\n            value: getFiles(multiple ? [...prevState.value] : [], files),\n            previews: []\n          }), () => this.notifyChanges(this.state.value));\n        }\n      } else {\n        this.notifyChanges(getFiles(multiple ? [...this.state.value] : [], files));\n      }\n    };\n\n    this.setInputRef = el => {\n      this.fileInput = el;\n    };\n\n    this.openFilePicker = () => {\n      const {\n        onOpen\n      } = this.props;\n      let open = true;\n\n      if (typeof onOpen === 'function') {\n        onOpen({\n          preventDefault() {\n            open = false;\n          }\n\n        });\n      }\n\n      if (open && this.fileInput) {\n        this.fileInput.click();\n      }\n    };\n\n    const value = props.value || props.defaultValue || [];\n    this.state = {\n      value,\n      controlled: props.value !== undefined,\n      previews: [],\n      error: props.error\n    };\n  }\n\n  componentDidMount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.subscribe(this);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.unsubscribe(this);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps({\n    value = [],\n    error\n  }) {\n    if (this.state.controlled && value && this.state.value !== value) {\n      this.setState({\n        value,\n        previews: []\n      });\n    }\n\n    this.setState({\n      error\n    });\n  }\n\n  removeFileEntry(f) {\n    const {\n      form,\n      name = ''\n    } = this.props;\n\n    if (!this.state.controlled) {\n      if (form) {\n        form.change({\n          name,\n          value: this.state.value.filter(file => f !== file)\n        });\n      } else {\n        this.setState(prevState => ({\n          value: prevState.value.filter(file => f !== file),\n          previews: prevState.previews.filter(preview => preview.file !== f)\n        }), () => this.notifyChanges(this.state.value));\n      }\n    } else {\n      const files = this.state.value.filter(file => f !== file);\n      this.notifyChanges(files);\n    }\n  }\n\n  notifyChanges(files) {\n    const {\n      onChange\n    } = this.props;\n\n    if (typeof onChange === 'function') {\n      onChange({\n        value: files\n      });\n    }\n  }\n\n  renderPreview(f) {\n    const preview = this.state.previews.filter(preview => preview.file === f)[0];\n\n    if (f.size > 1000000 || !f.type.match(/image/)) {\n      return this.renderItem(f);\n    }\n\n    if (preview) {\n      return React.createElement(StyledFileImagePreview, {\n        src: preview.data\n      }, React.createElement(Remove, {\n        onClick: () => this.removeFileEntry(f)\n      }, React.createElement(Icon, {\n        name: \"RemoveCircle\",\n        size: 1\n      })));\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = (file => () => {\n      const result = reader.result;\n      typeof result === 'string' && this.setState(prevState => ({\n        previews: [...prevState.previews, {\n          file,\n          data: result\n        }]\n      }));\n    })(f);\n\n    reader.readAsDataURL(f);\n    return React.createElement(StyledFileImagePreview, null, React.createElement(Spinner, {\n      size: \"small\"\n    }));\n  }\n\n  renderItem(f) {\n    return React.createElement(StyledFileItem, {\n      key: f.name,\n      name: f.name\n    }, React.createElement(Remove, {\n      onClick: () => this.removeFileEntry(f)\n    }, React.createElement(Icon, {\n      name: \"RemoveCircle\",\n      size: 1\n    })));\n  }\n\n  render() {\n    const {\n      children,\n      disabled,\n      multiple,\n      info\n    } = this.props;\n    const {\n      value,\n      error\n    } = this.state;\n    return React.createElement(\"div\", null, React.createElement(Button, {\n      onClick: this.openFilePicker,\n      disabled: disabled,\n      buttonStyle: \"secondary\",\n      type: \"button\"\n    }, children), React.createElement(FileInput, {\n      ref: this.setInputRef,\n      type: \"file\",\n      multiple: multiple,\n      onChange: this.addFileEntries,\n      value: \"\"\n    }), value && value.length > 0 && React.createElement(StyledFileList, null, value.map(file => this.props.preview ? this.renderPreview(file) : this.renderItem(file))), showInputInfo(error, info));\n  }\n\n}\n\nFileSelectInt.inner = {\n  get StyledFileImagePreview() {\n    return StyledFileImagePreview;\n  },\n\n  get Remove() {\n    return Remove;\n  },\n\n  get Icon() {\n    return Icon;\n  },\n\n  get Spinner() {\n    return Spinner;\n  },\n\n  get StyledFileItem() {\n    return StyledFileItem;\n  },\n\n  get Button() {\n    return Button;\n  },\n\n  get FileInput() {\n    return FileInput;\n  },\n\n  get StyledFileList() {\n    return StyledFileList;\n  }\n\n};\n/**\n * A custom field for handling file selection.\n */\n\nexport const FileSelect = withFormContext(FileSelectInt);\nFileSelect.displayName = 'FileSelect';","map":{"version":3,"sources":["../../../../src/components/FileSelect/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { FileImagePreview, StyledFileImagePreview, StyledFileItem, StyledFileList } from '../../quarks';\nimport { FormContextProps, withFormContext } from '../../hoc/withFormContext';\nimport { InputChangeEvent, InputProps } from '../../common';\nimport { Button } from '../Button';\nimport { Icon } from '../Icon';\nimport { Spinner } from '../Spinner';\nimport { showInputInfo } from '../../utils/input';\nexport type FileSelectChangeEvent = InputChangeEvent<Array<File>>;\nexport interface FileSelectOpenEvent {\n    preventDefault(): void;\n}\nexport interface FileSelectProps extends InputProps<Array<File>> {\n    /**\n     * Show preview instead of file list.\n     */\n    preview?: boolean;\n    /**\n     * Allow selecting multiple files.\n     */\n    multiple?: boolean;\n    /**\n     * The content of the fileselect.\n     */\n    children?: React.ReactNode;\n    /**\n     * Event fired when the file picker should be opened.\n     */\n    onOpen?(e: FileSelectOpenEvent): void;\n}\nexport interface FileSelectState {\n    value: Array<File>;\n    error?: React.ReactChild;\n    controlled: boolean;\n    previews: Array<FileImagePreview>;\n}\nconst FileInput = styled.input `\n  display: none;\n`;\nconst Remove = styled.div `\n  cursor: pointer;\n  line-height: 1;\n`;\nfunction getFiles(target: Array<File>, files: any = []) {\n    target.push(...files);\n    return target;\n}\nclass FileSelectInt extends React.Component<FileSelectProps & FormContextProps, FileSelectState> {\n    private fileInput: HTMLInputElement | null;\n    constructor(props: FileSelectProps) {\n        super(props);\n        const value = props.value || props.defaultValue || [];\n        this.state = {\n            value,\n            controlled: props.value !== undefined,\n            previews: [],\n            error: props.error,\n        };\n    }\n    componentDidMount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    UNSAFE_componentWillReceiveProps({ value = [], error }: FileSelectProps) {\n        if (this.state.controlled && value && this.state.value !== value) {\n            this.setState({\n                value,\n                previews: [],\n            });\n        }\n        this.setState({ error });\n    }\n    private addFileEntries = (ev: React.ChangeEvent<HTMLInputElement>) => {\n        const { multiple, form, name = '' } = this.props;\n        const files = ev.target.files;\n        if (!this.state.controlled) {\n            if (form) {\n                form.change({\n                    name,\n                    value: getFiles(multiple ? [...this.state.value] : [], files),\n                });\n            }\n            else {\n                this.setState(prevState => ({\n                    value: getFiles(multiple ? [...prevState.value] : [], files),\n                    previews: [],\n                }), () => this.notifyChanges(this.state.value));\n            }\n        }\n        else {\n            this.notifyChanges(getFiles(multiple ? [...this.state.value] : [], files));\n        }\n    };\n    private removeFileEntry(f: File) {\n        const { form, name = '' } = this.props;\n        if (!this.state.controlled) {\n            if (form) {\n                form.change({\n                    name,\n                    value: this.state.value.filter(file => f !== file),\n                });\n            }\n            else {\n                this.setState(prevState => ({\n                    value: prevState.value.filter(file => f !== file),\n                    previews: prevState.previews.filter(preview => preview.file !== f),\n                }), () => this.notifyChanges(this.state.value));\n            }\n        }\n        else {\n            const files = this.state.value.filter(file => f !== file);\n            this.notifyChanges(files);\n        }\n    }\n    private notifyChanges(files: Array<File>) {\n        const { onChange } = this.props;\n        if (typeof onChange === 'function') {\n            onChange({\n                value: files,\n            });\n        }\n    }\n    private renderPreview(f: File) {\n        const preview = this.state.previews.filter(preview => preview.file === f)[0];\n        if (f.size > 1000000 || !f.type.match(/image/)) {\n            return this.renderItem(f);\n        }\n        if (preview) {\n            return (<StyledFileImagePreview src={preview.data}>\n          <Remove onClick={() => this.removeFileEntry(f)}>\n            <Icon name=\"RemoveCircle\" size={1}/>\n          </Remove>\n        </StyledFileImagePreview>);\n        }\n        const reader = new FileReader();\n        reader.onload = (file => () => {\n            const result = reader.result;\n            typeof result === 'string' &&\n                this.setState(prevState => ({\n                    previews: [\n                        ...prevState.previews,\n                        {\n                            file,\n                            data: result,\n                        },\n                    ],\n                }));\n        })(f);\n        reader.readAsDataURL(f);\n        return (<StyledFileImagePreview>\n        <Spinner size=\"small\"/>\n      </StyledFileImagePreview>);\n    }\n    private renderItem(f: File) {\n        return (<StyledFileItem key={f.name} name={f.name}>\n        <Remove onClick={() => this.removeFileEntry(f)}>\n          <Icon name=\"RemoveCircle\" size={1}/>\n        </Remove>\n      </StyledFileItem>);\n    }\n    private setInputRef = (el: HTMLInputElement) => {\n        this.fileInput = el;\n    };\n    private openFilePicker = () => {\n        const { onOpen } = this.props;\n        let open = true;\n        if (typeof onOpen === 'function') {\n            onOpen({\n                preventDefault() {\n                    open = false;\n                },\n            });\n        }\n        if (open && this.fileInput) {\n            this.fileInput.click();\n        }\n    };\n    render() {\n        const { children, disabled, multiple, info } = this.props;\n        const { value, error } = this.state;\n        return (<div>\n        <Button onClick={this.openFilePicker} disabled={disabled} buttonStyle=\"secondary\" type=\"button\">\n          {children}\n        </Button>\n        <FileInput ref={this.setInputRef} type=\"file\" multiple={multiple} onChange={this.addFileEntries} value=\"\"/>\n        {value && value.length > 0 && (<StyledFileList>\n            {value.map(file => (this.props.preview ? this.renderPreview(file) : this.renderItem(file)))}\n          </StyledFileList>)}\n        {showInputInfo(error, info)}\n      </div>);\n    }\n    static inner = {\n        get StyledFileImagePreview() { return StyledFileImagePreview as typeof StyledFileImagePreview; },\n        get Remove() { return Remove as typeof Remove; },\n        get Icon() { return Icon as typeof Icon; },\n        get Spinner() { return Spinner as typeof Spinner; },\n        get StyledFileItem() { return StyledFileItem as typeof StyledFileItem; },\n        get Button() { return Button as typeof Button; },\n        get FileInput() { return FileInput as typeof FileInput; },\n        get StyledFileList() { return StyledFileList as typeof StyledFileList; }\n    };\n}\n/**\n * A custom field for handling file selection.\n */\nexport const FileSelect = withFormContext(FileSelectInt);\nFileSelect.displayName = 'FileSelect';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}