{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as colors from '../../colors';\nimport styled from '../../utils/styled';\nimport { RadioButton } from '../RadioButton';\nimport { StyledTileIcon } from '../../quarks/StyledTileIcon';\nimport { getFontStyle } from '../../textStyles';\nconst Tile = styled(RadioButton)`\n  cursor: pointer;\n  position: relative;\n  display: inline-block;\n  width: 96px;\n  height: 96px;\n  padding: 8px;\n  overflow: hidden;\n  margin: 10px !important;\n  user-select: none;\n  color: ${colors.black};\n  background: ${colors.grey7};\n  ${props => props.checked ? `outline: ${colors.cyan} solid 4px;` : ''};\n\n  &:hover {\n    ${props => !props.checked ? `outline: rgba(29, 29, 29, 0.1) solid 4px;` : ''};\n  }\n`;\nconst TileTitle = styled.span`\n  ${getFontStyle({\n  size: 'small',\n  weight: 'medium'\n})}\n\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  z-index: 2;\n`;\nexport class MetroRadioTile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.change = e => {\n      const {\n        onChange\n      } = this.props;\n\n      if (!this.state.controlled) {\n        this.setState({\n          checked: e.value\n        });\n      }\n\n      if (typeof onChange === 'function') {\n        onChange(e);\n      }\n    };\n\n    this.state = {\n      controlled: props.value !== undefined,\n      checked: props.value || props.defaultValue || false\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props) {\n    if (this.state.controlled) {\n      this.setState({\n        checked: props.value || false\n      });\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      image,\n      title\n    } = _a,\n          props = __rest(_a, [\"image\", \"title\"]);\n\n    const {\n      checked\n    } = this.state;\n    return React.createElement(Tile, Object.assign({\n      onChange: this.change,\n      checked: checked\n    }, props), image && React.createElement(StyledTileIcon, {\n      src: image,\n      width: \"50px\",\n      height: \"50px\"\n    }), title && React.createElement(TileTitle, null, title));\n  }\n\n}\nMetroRadioTile.inner = {\n  get Tile() {\n    return Tile;\n  },\n\n  get StyledTileIcon() {\n    return StyledTileIcon;\n  },\n\n  get TileTitle() {\n    return TileTitle;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/MetroRadioTile/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,cAAxB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AACA,SAAS,WAAT,QAAsE,gBAAtE;AACA,SAAS,cAAT,QAA+B,6BAA/B;AACA,SAAS,YAAT,QAA6B,kBAA7B;AACA,MAAM,IAAI,GAAG,MAAM,CAAC,WAAD,CAEhB;;;;;;;;;;WAUQ,MAAM,CAAC,KAAK;gBACP,MAAM,CAAC,KAAK;IACxB,KAAK,IAAK,KAAK,CAAC,OAAN,GAAgB,YAAY,MAAM,CAAC,IAAI,aAAvC,GAAuD,EAAG;;;MAGlE,KAAK,IAAK,CAAC,KAAK,CAAC,OAAP,GAAiB,2CAAjB,GAA+D,EAAG;;CAjBlF;AAoBA,MAAM,SAAS,GAAG,MAAM,CAAC,IAAK;IAC1B,YAAY,CAAC;AAAE,EAAA,IAAI,EAAE,OAAR;AAAiB,EAAA,MAAM,EAAE;AAAzB,CAAD,CAAqC;;;;;;;;;;CADrD;AA0BA,OAAM,MAAO,cAAP,SAA8B,KAAK,CAAC,SAApC,CAAuF;AACzF,EAAA,WAAA,CAAY,KAAZ,EAAsC;AAClC,UAAM,KAAN;;AAaI,SAAA,MAAA,GAAU,CAAD,IAA8B;AAC3C,YAAM;AAAE,QAAA;AAAF,UAAe,KAAK,KAA1B;;AACA,UAAI,CAAC,KAAK,KAAL,CAAW,UAAhB,EAA4B;AACxB,aAAK,QAAL,CAAc;AACV,UAAA,OAAO,EAAE,CAAC,CAAC;AADD,SAAd;AAGH;;AACD,UAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAChC,QAAA,QAAQ,CAAC,CAAD,CAAR;AACH;AACJ,KAVO;;AAZJ,SAAK,KAAL,GAAa;AACT,MAAA,UAAU,EAAE,KAAK,CAAC,KAAN,KAAgB,SADnB;AAET,MAAA,OAAO,EAAE,KAAK,CAAC,KAAN,IAAe,KAAK,CAAC,YAArB,IAAqC;AAFrC,KAAb;AAIH;;AACD,EAAA,gCAAgC,CAAC,KAAD,EAA2B;AACvD,QAAI,KAAK,KAAL,CAAW,UAAf,EAA2B;AACvB,WAAK,QAAL,CAAc;AACV,QAAA,OAAO,EAAE,KAAK,CAAC,KAAN,IAAe;AADd,OAAd;AAGH;AACJ;;AAYD,EAAA,MAAM,GAAA;AACF,UAAM,EAAA,GAAA,KAAA,KAAN;AAAA,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,QAAc,EAApB;AAAA,UAAsB,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,OAAA,EAAA,OAAA,CAAA,CAAtB;;AACA,UAAM;AAAE,MAAA;AAAF,QAAc,KAAK,KAAzB;AACA,WAAQ,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK,MAAA,CAAA,MAAA,CAAA;AAAC,MAAA,QAAQ,EAAE,KAAK,MAAhB;AAAwB,MAAA,OAAO,EAAE;AAAjC,KAAA,EAA8C,KAA9C,CAAL,EACP,KAAK,IAAI,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AAAC,MAAA,GAAG,EAAE,KAAN;AAAa,MAAA,KAAK,EAAC,MAAnB;AAA0B,MAAA,MAAM,EAAC;AAAjC,KAAf,CADF,EAEP,KAAK,IAAI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,IAAV,EAAY,KAAZ,CAFF,CAAR;AAIH;;AAjCwF;AAkClF,cAAA,CAAA,KAAA,GAAQ;AACX,MAAI,IAAJ,GAAQ;AAAK,WAAO,IAAP;AAA6B,GAD/B;;AAEX,MAAI,cAAJ,GAAkB;AAAK,WAAO,cAAP;AAAiD,GAF7D;;AAGX,MAAI,SAAJ,GAAa;AAAK,WAAO,SAAP;AAAuC;;AAH9C,CAAR","sourcesContent":["import * as React from 'react';\nimport * as colors from '../../colors';\nimport styled from '../../utils/styled';\nimport { RadioButton, RadioButtonChangeEvent, RadioButtonProps } from '../RadioButton';\nimport { StyledTileIcon } from '../../quarks/StyledTileIcon';\nimport { getFontStyle } from '../../textStyles';\nconst Tile = styled(RadioButton)<{\n    checked: boolean;\n}> `\n  cursor: pointer;\n  position: relative;\n  display: inline-block;\n  width: 96px;\n  height: 96px;\n  padding: 8px;\n  overflow: hidden;\n  margin: 10px !important;\n  user-select: none;\n  color: ${colors.black};\n  background: ${colors.grey7};\n  ${props => (props.checked ? `outline: ${colors.cyan} solid 4px;` : '')};\n\n  &:hover {\n    ${props => (!props.checked ? `outline: rgba(29, 29, 29, 0.1) solid 4px;` : '')};\n  }\n`;\nconst TileTitle = styled.span `\n  ${getFontStyle({ size: 'small', weight: 'medium' })}\n\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  z-index: 2;\n`;\nexport interface MetroRadioTileProps extends RadioButtonProps {\n    /**\n     * The source URL of an icon, if used. The icon is scaled to max. 50px of the tile.\n     */\n    image?: string;\n    /**\n     * The title of the tile, if anything.\n     */\n    title?: string;\n}\nexport interface MetroRadioTileState {\n    checked: boolean;\n    controlled: boolean;\n}\nexport class MetroRadioTile extends React.Component<MetroRadioTileProps, MetroRadioTileState> {\n    constructor(props: MetroRadioTileProps) {\n        super(props);\n        this.state = {\n            controlled: props.value !== undefined,\n            checked: props.value || props.defaultValue || false,\n        };\n    }\n    UNSAFE_componentWillReceiveProps(props: MetroRadioTileProps) {\n        if (this.state.controlled) {\n            this.setState({\n                checked: props.value || false,\n            });\n        }\n    }\n    private change = (e: RadioButtonChangeEvent) => {\n        const { onChange } = this.props;\n        if (!this.state.controlled) {\n            this.setState({\n                checked: e.value,\n            });\n        }\n        if (typeof onChange === 'function') {\n            onChange(e);\n        }\n    };\n    render() {\n        const { image, title, ...props } = this.props;\n        const { checked } = this.state;\n        return (<Tile onChange={this.change} checked={checked} {...props}>\n        {image && <StyledTileIcon src={image} width=\"50px\" height=\"50px\"/>}\n        {title && <TileTitle>{title}</TileTitle>}\n      </Tile>);\n    }\n    static inner = {\n        get Tile() { return Tile as typeof Tile; },\n        get StyledTileIcon() { return StyledTileIcon as typeof StyledTileIcon; },\n        get TileTitle() { return TileTitle as typeof TileTitle; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}