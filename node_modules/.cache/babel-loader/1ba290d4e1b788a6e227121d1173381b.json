{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { distance } from '../../distance';\nimport { ocean, midnight } from '../../colors';\nconst transitionDuration = '0.3s';\nconst transitionDurationBorder = '0.2s';\nconst transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';\nconst Indicator = styled('div')`\n  width: ${distance.large};\n  height: ${distance.large};\n  position: absolute;\n  border: ${themed(props => props.disabled || !props.focus ? 'none' : `${distance.xsmall} solid ${props.active ? midnight : props.theme.text1}`)};\n  border-radius: 50%;\n  background: ${themed(props => props.disabled ? props.theme.ui3 : props.active ? props.theme.ui0 : props.theme.text2)};\n  transform: translate(-50%, -50%);\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n  box-sizing: border-box;\n  transition: background ${transitionDuration} ${transitionEase},\n    border ${transitionDurationBorder} ${transitionEase}\n      ${props => props.animate ? `, left ${transitionDuration} ${transitionEase}` : ''};\n\n  &:hover {\n    border: ${themed(props => props.disabled ? 'none' : `${distance.xsmall} solid ${props.active ? ocean : props.theme.ui5}`)};\n  }\n`;\n\nfunction percent(value) {\n  return typeof value === 'number' ? `${value * 100}%` : '50%';\n}\n/**\n * The indicator knob is a button like component that is placed in a container to indicate a position.\n */\n\n\nexport const IndicatorKnob = Object.assign(_a => {\n  var {\n    x,\n    y,\n    color,\n    style\n  } = _a,\n      props = __rest(_a, [\"x\", \"y\", \"color\", \"style\"]);\n\n  return React.createElement(Indicator, Object.assign({\n    style: Object.assign({}, style, {\n      left: percent(x),\n      top: percent(y),\n      backgroundColor: color\n    })\n  }, props));\n}, {\n  inner: {\n    get Indicator() {\n      return Indicator;\n    }\n\n  }\n});\nIndicatorKnob.displayName = 'IndicatorKnob';","map":{"version":3,"sources":["../../../../src/components/IndicatorKnob/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,MAAjB,QAA+B,oBAA/B;AAEA,SAAS,QAAT,QAAyB,gBAAzB;AACA,SAAS,KAAT,EAAgB,QAAhB,QAAgC,cAAhC;AAOA,MAAM,kBAAkB,GAAG,MAA3B;AACA,MAAM,wBAAwB,GAAG,MAAjC;AACA,MAAM,cAAc,GAAG,6BAAvB;AACA,MAAM,SAAS,GAAG,MAAM,CAAC,KAAD,CAAwB;WACrC,QAAQ,CAAC,KAAK;YACb,QAAQ,CAAC,KAAK;;YAEd,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,QAAN,IAAkB,CAAC,KAAK,CAAC,KAAzB,GAAiC,MAAjC,GAA0C,GAAG,QAAQ,CAAC,MAAM,UAAU,KAAK,CAAC,MAAN,GAAe,QAAf,GAA0B,KAAK,CAAC,KAAN,CAAY,KAAK,EAA3H,CAA8H;;gBAEhI,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,KAAN,CAAY,GAA7B,GAAmC,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,KAAN,CAAY,GAA3B,GAAiC,KAAK,CAAC,KAAN,CAAY,KAA1F,CAAgG;;YAE1G,KAAK,IAAK,KAAK,CAAC,QAAN,GAAiB,aAAjB,GAAiC,SAAU;;2BAEtC,kBAAkB,IAAI,cAAc;aAClD,wBAAwB,IAAI,cAAc;QAC/C,KAAK,IAAK,KAAK,CAAC,OAAN,GAAgB,UAAU,kBAAkB,IAAI,cAAc,EAA9D,GAAmE,EAAG;;;cAG1E,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,QAAN,GAAiB,MAAjB,GAA0B,GAAG,QAAQ,CAAC,MAAM,UAAU,KAAK,CAAC,MAAN,GAAe,KAAf,GAAuB,KAAK,CAAC,KAAN,CAAY,GAAG,EAAtG,CAAyG;;CAf7H;;AAkBA,SAAS,OAAT,CAAiB,KAAjB,EAA+B;AAC3B,SAAO,OAAO,KAAP,KAAiB,QAAjB,GAA4B,GAAG,KAAK,GAAG,GAAG,GAA1C,GAAgD,KAAvD;AACH;AAyCD;;;;;AAGA,OAAO,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAAqC;MAApC;AAAE,IAAA,CAAF;AAAK,IAAA,CAAL;AAAQ,IAAA,KAAR;AAAe,IAAA;AAAf,MAAoB,E;MAAE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,OAAA,CAAA,C;;AAAe,SAAC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC7F,KAD6F,EACxF;AACR,MAAA,IAAI,EAAE,OAAO,CAAC,CAAD,CADL;AAER,MAAA,GAAG,EAAE,OAAO,CAAC,CAAD,CAFJ;AAGR,MAAA,eAAe,EAAE;AAHT,KADwF;AAAN,GAAA,EAKvF,KALuF,CAAV,CAAD;AAKnE,CALa,EAKwB;AAAE,EAAA,KAAK,EAAE;AACtD,QAAI,SAAJ,GAAa;AAAK,aAAO,SAAP;AAAuC;;AADH;AAAT,CALxB,CAAtB;AAQP,aAAa,CAAC,WAAd,GAA4B,eAA5B","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { distance } from '../../distance';\nimport { ocean, midnight } from '../../colors';\ninterface IndicatorProps {\n    active?: boolean;\n    disabled?: boolean;\n    animate?: boolean;\n    focus?: boolean;\n}\nconst transitionDuration = '0.3s';\nconst transitionDurationBorder = '0.2s';\nconst transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';\nconst Indicator = styled('div')<IndicatorProps> `\n  width: ${distance.large};\n  height: ${distance.large};\n  position: absolute;\n  border: ${themed(props => props.disabled || !props.focus ? 'none' : `${distance.xsmall} solid ${props.active ? midnight : props.theme.text1}`)};\n  border-radius: 50%;\n  background: ${themed(props => props.disabled ? props.theme.ui3 : props.active ? props.theme.ui0 : props.theme.text2)};\n  transform: translate(-50%, -50%);\n  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n  box-sizing: border-box;\n  transition: background ${transitionDuration} ${transitionEase},\n    border ${transitionDurationBorder} ${transitionEase}\n      ${props => (props.animate ? `, left ${transitionDuration} ${transitionEase}` : '')};\n\n  &:hover {\n    border: ${themed(props => props.disabled ? 'none' : `${distance.xsmall} solid ${props.active ? ocean : props.theme.ui5}`)};\n  }\n`;\nfunction percent(value?: number) {\n    return typeof value === 'number' ? `${value * 100}%` : '50%';\n}\nexport interface IndicatorKnobProps extends StandardProps {\n    /**\n     * @ignore\n     */\n    children?: void;\n    /**\n     * Indicates the x position of the knob in the 0 to 1 range. By default 0.5.\n     * @default 0.5\n     */\n    x?: number;\n    /**\n     * Indicates the y position of the knob in the 0 to 1 range. By default 0.5.\n     * @default 0.5\n     */\n    y?: number;\n    /**\n     * Sets the background color of the knob.\n     */\n    color?: string;\n    /**\n     * Sets the indicator as active.\n     * @default false\n     */\n    active?: boolean;\n    /**\n     * Sets the indicator as focused.\n     * @default false\n     */\n    focus?: boolean;\n    /**\n     * Sets the indicator as disabled, i.e., not movable.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * Animate the position of the indicator\n     * @default false\n     */\n    animate?: boolean;\n}\n/**\n * The indicator knob is a button like component that is placed in a container to indicate a position.\n */\nexport const IndicatorKnob = Object.assign(((({ x, y, color, style, ...props }) => (<Indicator style={{\n    ...style,\n    left: percent(x),\n    top: percent(y),\n    backgroundColor: color,\n}} {...props}/>)) as React.SFC<IndicatorKnobProps>), { inner: {\n        get Indicator() { return Indicator as typeof Indicator; }\n    } });\nIndicatorKnob.displayName = 'IndicatorKnob';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}