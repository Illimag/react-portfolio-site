{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { remCalc } from '../../utils/remCalc';\nimport { Table } from '../Table';\nimport { defaultCellRenderer } from '../Table/TableShared.part';\nimport { Icon } from '../Icon';\nimport { AccordionTableRow } from '../AccordionTableRow';\nimport { normalizeIndex, toggleIndex, hasIndex } from './helpers/indexHelper';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nconst animationDuration = '0.3s';\nconst animationFunction = 'cubic-bezier(0, 0, 0.25, 1)';\nconst StyledTable = styled(Table)`\n  th,\n  td {\n    padding-right: ${distance.medium};\n    padding-left: ${distance.medium};\n  }\n`;\nconst StyledTableRowCollapse = styled.tr(themed(({\n  theme,\n  active\n}) => css`\n      border: ${active ? `1px solid ${theme.ui5}` : 'none'};\n      ${!active ? 'display: none;' : ''}\n    `));\nconst StyledCollapseAnimator = styled('div')`\n  transition: all ${animationDuration} ${animationFunction};\n  max-height: ${({\n  active\n}) => active ? '10000px' : '0'};\n  opacity: ${({\n  active\n}) => active ? '1' : '0'};\n`;\nconst GroupTableCell = styled.td`\n  ${getFontStyle({\n  weight: 'bold'\n})}\n\n  padding-left: 0.5em !important;\n`;\nconst StyledDetailsContainer = styled.td`\n  /*\n    AccordionTable is a Table abstraction.\n    Table has default paddings for it's cells.\n    Expanded AccordionTable row is a container and should not have any paddings.\n  */\n  padding: 0 !important;\n`;\nconst StyledIconInt = Object.assign(_a => {\n  var {\n    isRotated: _0\n  } = _a,\n      props = __rest(_a, [\"isRotated\"]);\n\n  return React.createElement(Icon, Object.assign({}, props));\n}, {\n  inner: {\n    get Icon() {\n      return Icon;\n    }\n\n  }\n});\nconst StyledIcon = styled(StyledIconInt)`\n  display: block;\n  font-size: ${remCalc('18px')};\n  height: 18px;\n  width: 18px;\n  transition: transform ${animationDuration} ${animationFunction};\n  transform: ${({\n  isRotated\n}) => `rotate(${isRotated ? 90 : 0}deg)`};\n`;\n\nfunction defaultGroupRenderer(e) {\n  return React.createElement(React.Fragment, null, e.group ? e.group.toString() : e.group, \" (\", e.items.length, \")\");\n}\n\nexport class AccordionTableBasic extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getGroupByValue = rowData => {\n      const {\n        groupBy,\n        noValueGroupLabel\n      } = this.props;\n\n      if (groupBy) {\n        const rowValue = rowData[groupBy];\n\n        if (rowValue || rowValue === 0) {\n          if (Array.isArray(rowValue) && rowValue.length === 0) {\n            return noValueGroupLabel;\n          } else {\n            return rowValue;\n          }\n        } else {\n          return noValueGroupLabel;\n        }\n      }\n\n      return undefined;\n    };\n\n    this.rowRenderer = ({\n      cells,\n      index,\n      data,\n      key,\n      state\n    }) => {\n      const {\n        detailsRenderer,\n        rowRenderer,\n        theme,\n        arrowToggle\n      } = this.props;\n      const {\n        selectedIndex,\n        expandedGroups\n      } = this.state;\n      const {\n        groupedRows = []\n      } = state;\n      const active = hasIndex(selectedIndex, index);\n      const count = React.Children.count(cells);\n      const col = this.getGroupByValue(data);\n      const open = !(col || col === 0) || AccordionTableBasic.arrayIncludes(col, expandedGroups);\n      const renderData = {\n        cells,\n        index,\n        data,\n        active,\n        key,\n        state\n      };\n      const isNewGroup = (col || col === 0) && !AccordionTableBasic.arrayIncludes(col, groupedRows);\n\n      if (isNewGroup) {\n        state.groupedRows = [...groupedRows, col];\n      }\n\n      return React.createElement(React.Fragment, {\n        key: key\n      }, isNewGroup && this.groupRenderer(col, count, open), open && React.createElement(React.Fragment, null, rowRenderer && rowRenderer(renderData) || React.createElement(AccordionTableRow, {\n        active: active,\n        clickable: !arrowToggle,\n        onClick: () => this.handleClick(index, data),\n        theme: theme\n      }, cells), React.createElement(StyledTableRowCollapse, {\n        active: active\n      }, React.createElement(StyledDetailsContainer, {\n        colSpan: count\n      }, React.createElement(StyledCollapseAnimator, {\n        active: active\n      }, active && detailsRenderer && detailsRenderer({\n        index,\n        data\n      }))))));\n    };\n\n    this.cellRenderer = e => {\n      const {\n        row,\n        data\n      } = e;\n\n      if (e.column === 0) {\n        return React.createElement(StyledIcon, {\n          isRotated: hasIndex(this.state.selectedIndex, row),\n          name: \"KeyboardArrowRight\",\n          onClick: () => data && this.handleClick(row, data)\n        });\n      }\n\n      const {\n        cellRenderer\n      } = this.props;\n      return typeof cellRenderer === 'function' ? cellRenderer(e) : defaultCellRenderer(e);\n    };\n\n    const controlledDetails = props.selectedIndex !== undefined;\n    const controlledGroups = Array.isArray(props.expandedGroups);\n    this.state = {\n      selectedIndex: normalizeIndex(props.selectedIndex),\n      controlledIndex: controlledDetails,\n      controlledGroups: controlledGroups,\n      expandedGroups: controlledGroups ? props.expandedGroups || [] : []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      selectedIndex,\n      expandedGroups\n    } = props;\n    const newIndex = state.controlledIndex && selectedIndex !== undefined;\n    const newGroups = state.controlledGroups && expandedGroups !== undefined;\n\n    if (newIndex || newGroups) {\n      return Object.assign({}, state, {\n        selectedIndex: newIndex ? normalizeIndex(selectedIndex) : state.selectedIndex,\n        expandedGroups: newGroups ? expandedGroups : state.expandedGroups\n      });\n    }\n\n    return state;\n  }\n\n  getGroupItems(data, groupBy, group) {\n    const {\n      noValueGroupLabel\n    } = this.props;\n\n    if (groupBy) {\n      if (group === noValueGroupLabel) {\n        return data.filter(m => {\n          const value = m[groupBy]; // the number '0' shouldn't be in the no-value-group.\n\n          if (typeof value === 'number' && value === 0) {\n            return false;\n          } else {\n            // empty arrays should be in the no-value-group\n            return !value || Array.isArray(value) && value.length === 0;\n          }\n        });\n      } else {\n        return data.filter(m => {\n          const value = m[groupBy];\n\n          if (value === group) {\n            return true;\n          } else {\n            // special handling for arrays is needed because '===' doesn't work for arrays\n            if (Array.isArray(value) && Array.isArray(group)) {\n              return value.toString() === group.toString();\n            } else {\n              return false;\n            }\n          }\n        });\n      }\n    }\n\n    return [];\n  }\n\n  handleClick(target, data) {\n    const {\n      onChange,\n      multiple\n    } = this.props;\n    const {\n      controlledIndex,\n      selectedIndex\n    } = this.state;\n    const nextIndexes = toggleIndex(selectedIndex, target, multiple);\n\n    if (typeof onChange === 'function') {\n      onChange({\n        selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,\n        previousIndex: multiple ? selectedIndex : selectedIndex[0] !== undefined ? selectedIndex[0] : -1,\n        data\n      });\n    }\n\n    if (!controlledIndex) {\n      this.setState({\n        selectedIndex: nextIndexes\n      });\n    }\n  }\n\n  toggleGroup(group) {\n    const {\n      data,\n      onToggleGroup,\n      groupBy\n    } = this.props;\n    const {\n      expandedGroups,\n      controlledGroups\n    } = this.state;\n\n    if (typeof onToggleGroup === 'function') {\n      onToggleGroup({\n        group,\n        type: 'expand',\n        items: this.getGroupItems(data, groupBy, group)\n      });\n    }\n\n    if (!controlledGroups) {\n      if (expandedGroups.indexOf(group) !== -1) {\n        this.setState({\n          expandedGroups: expandedGroups.filter(m => m !== group)\n        });\n      } else {\n        this.setState({\n          expandedGroups: [...expandedGroups, group]\n        });\n      }\n    }\n  }\n\n  groupRenderer(group, count, expanded) {\n    const {\n      theme,\n      groupRenderer = defaultGroupRenderer,\n      data,\n      groupBy\n    } = this.props;\n    const items = this.getGroupItems(data, groupBy, group);\n    return React.createElement(React.Fragment, null, React.createElement(AccordionTableRow, {\n      clickable: true,\n      onClick: () => this.toggleGroup(group),\n      theme: theme\n    }, React.createElement(GroupTableCell, null, React.createElement(StyledIcon, {\n      isRotated: expanded,\n      name: \"KeyboardArrowRight\"\n    })), React.createElement(GroupTableCell, {\n      colSpan: count - 1\n    }, groupRenderer({\n      expanded,\n      group,\n      items\n    }))), React.createElement(StyledTableRowCollapse, null));\n  }\n  /**\n   * helper method to check if an element is included in an array.\n   * This method has special handling for arrays of arrays. In this case normal strict equality checking (===)\n   * wouldn't work.\n   */\n\n\n  static arrayIncludes(element, arr) {\n    return (Array.isArray(element) ? JSON.stringify(arr).indexOf(JSON.stringify(element)) : arr.indexOf(element)) !== -1;\n  }\n\n  getColumns() {\n    const {\n      data,\n      columns,\n      indexed\n    } = this.props;\n\n    if (columns || data && data.length) {\n      const cols = {\n        '': {\n          header: '',\n          width: remCalc('50px'),\n          sortable: false\n        }\n      };\n\n      if (indexed) {\n        cols['#'] = {\n          header: '#',\n          sortable: false\n        };\n      }\n\n      const keys = Object.keys(columns || data[0]);\n      return keys.reduce((acc, key) => {\n        acc[key] = columns ? columns[key] : key;\n        return acc;\n      }, cols);\n    }\n\n    return {};\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      detailsRenderer: _0,\n      columns: _1,\n      indexed: _2,\n      groupRenderer: _3,\n      expandedGroups: _4,\n      onToggleGroup: _5,\n      openLabel: _6,\n      closeLabel: _7,\n      multiple: _8\n    } = _a,\n          props = __rest(_a, [\"detailsRenderer\", \"columns\", \"indexed\", \"groupRenderer\", \"expandedGroups\", \"onToggleGroup\", \"openLabel\", \"closeLabel\", \"multiple\"]);\n\n    return React.createElement(StyledTable, Object.assign({}, props, {\n      mode: \"table\",\n      columns: this.getColumns(),\n      rowRenderer: this.rowRenderer,\n      cellRenderer: this.cellRenderer\n    }));\n  }\n\n}\nAccordionTableBasic.defaultProps = {\n  multiple: false,\n  noValueGroupLabel: '—'\n};\nAccordionTableBasic.inner = {\n  get AccordionTableRow() {\n    return AccordionTableRow;\n  },\n\n  get GroupTableCell() {\n    return GroupTableCell;\n  },\n\n  get StyledIcon() {\n    return StyledIcon;\n  },\n\n  get StyledTableRowCollapse() {\n    return StyledTableRowCollapse;\n  },\n\n  get StyledDetailsContainer() {\n    return StyledDetailsContainer;\n  },\n\n  get StyledCollapseAnimator() {\n    return StyledCollapseAnimator;\n  },\n\n  get StyledTable() {\n    return StyledTable;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/AccordionTable/AccordionTableBasic.part.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { remCalc } from '../../utils/remCalc';\nimport { Table, TableRowEvent } from '../Table';\nimport { defaultCellRenderer } from '../Table/TableShared.part';\nimport { Icon, IconProps } from '../Icon';\nimport { AccordionTableRow } from '../AccordionTableRow';\nimport { AccordionTableProps, AccordionGroupRenderEvent } from './AccordionTable.types.part';\nimport { normalizeIndex, toggleIndex, hasIndex } from './helpers/indexHelper';\nimport { distance } from '../../distance';\nimport { TableCellRenderEvent } from '../Table/Table.types.part';\nimport { getFontStyle } from '../../textStyles';\nexport interface AccordionTableBasicState {\n    selectedIndex: Array<number>;\n    expandedGroups: Array<any>;\n    controlledIndex: boolean;\n    controlledGroups: boolean;\n}\ninterface AccordionTableItemProps {\n    active?: boolean;\n}\ninterface StyledArrowProps extends IconProps {\n    isRotated: boolean;\n}\nconst animationDuration = '0.3s';\nconst animationFunction = 'cubic-bezier(0, 0, 0.25, 1)';\nconst StyledTable = styled(Table) `\n  th,\n  td {\n    padding-right: ${distance.medium};\n    padding-left: ${distance.medium};\n  }\n`;\nconst StyledTableRowCollapse = styled.tr<AccordionTableItemProps>(themed(({ theme, active }) => css `\n      border: ${active ? `1px solid ${theme.ui5}` : 'none'};\n      ${!active ? 'display: none;' : ''}\n    `));\nconst StyledCollapseAnimator = styled('div')<AccordionTableItemProps> `\n  transition: all ${animationDuration} ${animationFunction};\n  max-height: ${({ active }) => (active ? '10000px' : '0')};\n  opacity: ${({ active }) => (active ? '1' : '0')};\n`;\nconst GroupTableCell = styled.td `\n  ${getFontStyle({ weight: 'bold' })}\n\n  padding-left: 0.5em !important;\n`;\nconst StyledDetailsContainer = styled.td `\n  /*\n    AccordionTable is a Table abstraction.\n    Table has default paddings for it's cells.\n    Expanded AccordionTable row is a container and should not have any paddings.\n  */\n  padding: 0 !important;\n`;\nconst StyledIconInt = Object.assign(((({ isRotated: _0, ...props }) => <Icon {...props}/>) as React.SFC<StyledArrowProps>), { inner: {\n        get Icon() { return Icon as typeof Icon; }\n    } });\nconst StyledIcon = styled(StyledIconInt)<StyledArrowProps> `\n  display: block;\n  font-size: ${remCalc('18px')};\n  height: 18px;\n  width: 18px;\n  transition: transform ${animationDuration} ${animationFunction};\n  transform: ${({ isRotated }) => `rotate(${isRotated ? 90 : 0}deg)`};\n`;\nfunction defaultGroupRenderer<T>(e: AccordionGroupRenderEvent<T>): React.ReactChild {\n    return (<>\n      {e.group ? e.group.toString() : e.group} ({e.items.length})\n    </>);\n}\nexport class AccordionTableBasic<T> extends React.Component<AccordionTableProps<T>, AccordionTableBasicState> {\n    static defaultProps = {\n        multiple: false,\n        noValueGroupLabel: '—',\n    };\n    constructor(props: AccordionTableProps<T>) {\n        super(props);\n        const controlledDetails = props.selectedIndex !== undefined;\n        const controlledGroups = Array.isArray(props.expandedGroups);\n        this.state = {\n            selectedIndex: normalizeIndex(props.selectedIndex),\n            controlledIndex: controlledDetails,\n            controlledGroups: controlledGroups,\n            expandedGroups: controlledGroups ? props.expandedGroups || [] : [],\n        };\n    }\n    static getDerivedStateFromProps(props: AccordionTableProps<any>, state: AccordionTableBasicState) {\n        const { selectedIndex, expandedGroups } = props;\n        const newIndex = state.controlledIndex && selectedIndex !== undefined;\n        const newGroups = state.controlledGroups && expandedGroups !== undefined;\n        if (newIndex || newGroups) {\n            return {\n                ...state,\n                selectedIndex: newIndex ? normalizeIndex(selectedIndex) : state.selectedIndex,\n                expandedGroups: newGroups ? expandedGroups : state.expandedGroups,\n            };\n        }\n        return state;\n    }\n    private getGroupItems<T>(data: Array<T>, groupBy?: keyof T, group?: any) {\n        const { noValueGroupLabel } = this.props;\n        if (groupBy) {\n            if (group === noValueGroupLabel) {\n                return data.filter(m => {\n                    const value = m[groupBy];\n                    // the number '0' shouldn't be in the no-value-group.\n                    if (typeof value === 'number' && value === 0) {\n                        return false;\n                    }\n                    else {\n                        // empty arrays should be in the no-value-group\n                        return !value || (Array.isArray(value) && value.length === 0);\n                    }\n                });\n            }\n            else {\n                return data.filter(m => {\n                    const value = m[groupBy];\n                    if (value === group) {\n                        return true;\n                    }\n                    else {\n                        // special handling for arrays is needed because '===' doesn't work for arrays\n                        if (Array.isArray(value) && Array.isArray(group)) {\n                            return value.toString() === group.toString();\n                        }\n                        else {\n                            return false;\n                        }\n                    }\n                });\n            }\n        }\n        return [];\n    }\n    private handleClick(target: number, data: T) {\n        const { onChange, multiple } = this.props;\n        const { controlledIndex, selectedIndex } = this.state;\n        const nextIndexes = toggleIndex(selectedIndex, target, multiple);\n        if (typeof onChange === 'function') {\n            onChange({\n                selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,\n                previousIndex: multiple ? selectedIndex : selectedIndex[0] !== undefined ? selectedIndex[0] : -1,\n                data,\n            });\n        }\n        if (!controlledIndex) {\n            this.setState({\n                selectedIndex: nextIndexes,\n            });\n        }\n    }\n    private toggleGroup(group: any) {\n        const { data, onToggleGroup, groupBy } = this.props;\n        const { expandedGroups, controlledGroups } = this.state;\n        if (typeof onToggleGroup === 'function') {\n            onToggleGroup({\n                group,\n                type: 'expand',\n                items: this.getGroupItems(data, groupBy, group),\n            });\n        }\n        if (!controlledGroups) {\n            if (expandedGroups.indexOf(group) !== -1) {\n                this.setState({\n                    expandedGroups: expandedGroups.filter(m => m !== group),\n                });\n            }\n            else {\n                this.setState({\n                    expandedGroups: [...expandedGroups, group],\n                });\n            }\n        }\n    }\n    private groupRenderer(group: any, count: number, expanded: boolean) {\n        const { theme, groupRenderer = defaultGroupRenderer, data, groupBy } = this.props;\n        const items = this.getGroupItems(data, groupBy, group);\n        return (<>\n        <AccordionTableRow clickable onClick={() => this.toggleGroup(group)} theme={theme}>\n          <GroupTableCell>\n            <StyledIcon isRotated={expanded} name=\"KeyboardArrowRight\"/>\n          </GroupTableCell>\n          <GroupTableCell colSpan={count - 1}>{groupRenderer({ expanded, group, items })}</GroupTableCell>\n        </AccordionTableRow>\n        <StyledTableRowCollapse />\n      </>);\n    }\n    private getGroupByValue = (rowData: any) => {\n        const { groupBy, noValueGroupLabel } = this.props;\n        if (groupBy) {\n            const rowValue = rowData[groupBy];\n            if (rowValue || rowValue === 0) {\n                if (Array.isArray(rowValue) && rowValue.length === 0) {\n                    return noValueGroupLabel;\n                }\n                else {\n                    return rowValue;\n                }\n            }\n            else {\n                return noValueGroupLabel;\n            }\n        }\n        return undefined;\n    };\n    /**\n     * helper method to check if an element is included in an array.\n     * This method has special handling for arrays of arrays. In this case normal strict equality checking (===)\n     * wouldn't work.\n     */\n    private static arrayIncludes<E>(element: E, arr: Array<E>): boolean {\n        return ((Array.isArray(element) ? JSON.stringify(arr).indexOf(JSON.stringify(element)) : arr.indexOf(element)) !== -1);\n    }\n    private rowRenderer = ({ cells, index, data, key, state }: TableRowEvent<T>) => {\n        const { detailsRenderer, rowRenderer, theme, arrowToggle } = this.props;\n        const { selectedIndex, expandedGroups } = this.state;\n        const { groupedRows = [] } = state;\n        const active = hasIndex(selectedIndex, index);\n        const count = React.Children.count(cells);\n        const col = this.getGroupByValue(data);\n        const open = !(col || col === 0) || AccordionTableBasic.arrayIncludes(col, expandedGroups);\n        const renderData = { cells, index, data, active, key, state };\n        const isNewGroup = (col || col === 0) && !AccordionTableBasic.arrayIncludes(col, groupedRows);\n        if (isNewGroup) {\n            state.groupedRows = [...groupedRows, col];\n        }\n        return (<React.Fragment key={key}>\n        {isNewGroup && this.groupRenderer(col, count, open)}\n        {open && (<>\n            {(rowRenderer && rowRenderer(renderData)) || (<AccordionTableRow active={active} clickable={!arrowToggle} onClick={() => this.handleClick(index, data)} theme={theme}>\n                {cells}\n              </AccordionTableRow>)}\n            <StyledTableRowCollapse active={active}>\n              <StyledDetailsContainer colSpan={count}>\n                <StyledCollapseAnimator active={active}>\n                  {active && detailsRenderer && detailsRenderer({ index, data })}\n                </StyledCollapseAnimator>\n              </StyledDetailsContainer>\n            </StyledTableRowCollapse>\n          </>)}\n      </React.Fragment>);\n    };\n    private cellRenderer = (e: TableCellRenderEvent<T>) => {\n        const { row, data } = e;\n        if (e.column === 0) {\n            return (<StyledIcon isRotated={hasIndex(this.state.selectedIndex, row)} name=\"KeyboardArrowRight\" onClick={() => data && this.handleClick(row, data)}/>);\n        }\n        const { cellRenderer } = this.props;\n        return typeof cellRenderer === 'function' ? cellRenderer(e) : defaultCellRenderer(e);\n    };\n    private getColumns() {\n        const { data, columns, indexed } = this.props;\n        if (columns || (data && data.length)) {\n            const cols = {\n                '': {\n                    header: '',\n                    width: remCalc('50px'),\n                    sortable: false,\n                },\n            };\n            if (indexed) {\n                cols['#'] = {\n                    header: '#',\n                    sortable: false,\n                };\n            }\n            const keys = Object.keys(columns || data[0]);\n            return keys.reduce((acc, key) => {\n                acc[key] = columns ? columns[key] : key;\n                return acc;\n            }, cols);\n        }\n        return {};\n    }\n    render() {\n        const { detailsRenderer: _0, columns: _1, indexed: _2, groupRenderer: _3, expandedGroups: _4, onToggleGroup: _5, openLabel: _6, closeLabel: _7, multiple: _8, ...props } = this.props;\n        return (<StyledTable {...props} mode=\"table\" columns={this.getColumns()} rowRenderer={this.rowRenderer} cellRenderer={this.cellRenderer}/>);\n    }\n    static inner = {\n        get AccordionTableRow() { return AccordionTableRow as typeof AccordionTableRow; },\n        get GroupTableCell() { return GroupTableCell as typeof GroupTableCell; },\n        get StyledIcon() { return StyledIcon as typeof StyledIcon; },\n        get StyledTableRowCollapse() { return StyledTableRowCollapse as typeof StyledTableRowCollapse; },\n        get StyledDetailsContainer() { return StyledDetailsContainer as typeof StyledDetailsContainer; },\n        get StyledCollapseAnimator() { return StyledCollapseAnimator as typeof StyledCollapseAnimator; },\n        get StyledTable() { return StyledTable as typeof StyledTable; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}