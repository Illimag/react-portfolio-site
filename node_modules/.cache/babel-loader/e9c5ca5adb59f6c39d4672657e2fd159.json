{"ast":null,"code":"import _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _taggedTemplateLiteral from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  touch-action: \", \";\\n  user-select: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nimport { trackMouse, trackTouch } from '../../utils/interactivity';\nvar Container = styled.div(_templateObject(), function (props) {\n  return props.disabled ? 'auto' : 'none';\n}, function (props) {\n  return props.disabled ? 'auto' : 'none';\n});\n/**\n * The interactive surface provides a component that reacts on touch (or click) interactivity.\n */\n\nexport var InteractiveSurface = /*#__PURE__*/function (_React$Component) {\n  _inherits(InteractiveSurface, _React$Component);\n\n  var _super = _createSuper(InteractiveSurface);\n\n  function InteractiveSurface() {\n    var _this;\n\n    _classCallCheck(this, InteractiveSurface);\n\n    _this = _super.apply(this, arguments);\n    _this.mounted = false;\n    _this.moved = false;\n\n    _this.updateValue = function (x, y, active, rect, moved) {\n      var canceled = true;\n\n      if (_this.mounted) {\n        var onChange = _this.props.onChange;\n        _this.moved = _this.moved || moved;\n\n        if (typeof onChange === 'function') {\n          onChange({\n            x: x,\n            y: y,\n            moved: _this.moved,\n            active: active,\n            rect: rect,\n            release: function release() {\n              canceled = false;\n            }\n          });\n        }\n      }\n\n      return canceled;\n    };\n\n    _this.changeValue = function (e) {\n      var disabled = _this.props.disabled;\n      _this.moved = false;\n\n      if (!disabled) {\n        trackMouse(e, _this.updateValue);\n      }\n    };\n\n    _this.preventValue = function (e) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          opaque = _this$props.opaque;\n\n      if (!disabled && !opaque && _this.moved) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    };\n\n    _this.changeTouchValue = function (e) {\n      var disabled = _this.props.disabled;\n      _this.moved = false;\n\n      if (!disabled) {\n        trackTouch(e, _this.updateValue);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(InteractiveSurface, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.mounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          disabled = _a.disabled,\n          _0 = _a.onChange,\n          _1 = _a.opaque,\n          props = __rest(_a, [\"children\", \"disabled\", \"onChange\", \"opaque\"]);\n\n      return React.createElement(Container, Object.assign({}, props, {\n        onMouseDownCapture: this.changeValue,\n        onClickCapture: this.preventValue,\n        onTouchStartCapture: this.changeTouchValue\n      }), children);\n    }\n  }]);\n\n  return InteractiveSurface;\n}(React.Component);\nInteractiveSurface.inner = {\n  get Container() {\n    return Container;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/InteractiveSurface/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { trackMouse, trackTouch } from '../../utils/interactivity';\nexport interface InteractiveSurfaceChangeEvent {\n    /**\n     * Relative horizontal coordinate (0 to 1).\n     */\n    x: number;\n    /**\n     * Relative vertical coordinate (0 to 1).\n     */\n    y: number;\n    /**\n     * Gets if the dragging is currently active.\n     */\n    active: boolean;\n    /**\n     * Gets if any move was detected up until now.\n     */\n    moved: boolean;\n    /**\n     * Gets the associated absolute dimensions.\n     */\n    rect: ClientRect;\n    /**\n     * Releases the drag handler from the surface.\n     */\n    release(): void;\n}\nexport interface InteractiveSurfaceProps extends StandardProps {\n    /**\n     * Event that is fired once interaction with the component is happening.\n     */\n    onChange?(e: InteractiveSurfaceChangeEvent): void;\n    /**\n     * Determines if interactivity is disabled, i.e., touch etc. behaves as a scroll.\n     */\n    disabled?: boolean;\n    /**\n     * Passes the event capturing on to children, such that links etc. can be clicked.\n     */\n    opaque?: boolean;\n    /**\n     * The content of the container.\n     */\n    children?: React.ReactNode;\n}\nconst Container = styled.div<InteractiveSurfaceProps> `\n  position: relative;\n  touch-action: ${props => (props.disabled ? 'auto' : 'none')};\n  user-select: ${props => (props.disabled ? 'auto' : 'none')};\n`;\n/**\n * The interactive surface provides a component that reacts on touch (or click) interactivity.\n */\nexport class InteractiveSurface extends React.Component<InteractiveSurfaceProps> {\n    private mounted = false;\n    private moved = false;\n    UNSAFE_componentWillMount() {\n        this.mounted = true;\n    }\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n    private updateValue = (x: number, y: number, active: boolean, rect: ClientRect, moved: boolean) => {\n        let canceled = true;\n        if (this.mounted) {\n            const { onChange } = this.props;\n            this.moved = this.moved || moved;\n            if (typeof onChange === 'function') {\n                onChange({\n                    x,\n                    y,\n                    moved: this.moved,\n                    active,\n                    rect,\n                    release() {\n                        canceled = false;\n                    },\n                });\n            }\n        }\n        return canceled;\n    };\n    private changeValue = (e: React.MouseEvent<HTMLDivElement>) => {\n        const { disabled } = this.props;\n        this.moved = false;\n        if (!disabled) {\n            trackMouse(e, this.updateValue);\n        }\n    };\n    private preventValue = (e: React.MouseEvent<HTMLDivElement>) => {\n        const { disabled, opaque } = this.props;\n        if (!disabled && !opaque && this.moved) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    };\n    private changeTouchValue = (e: React.TouchEvent<HTMLDivElement>) => {\n        const { disabled } = this.props;\n        this.moved = false;\n        if (!disabled) {\n            trackTouch(e, this.updateValue);\n        }\n    };\n    render() {\n        const { children, disabled, onChange: _0, opaque: _1, ...props } = this.props;\n        return (<Container {...props} onMouseDownCapture={this.changeValue} onClickCapture={this.preventValue} onTouchStartCapture={this.changeTouchValue}>\n        {children}\n      </Container>);\n    }\n    static inner = {\n        get Container() { return Container as typeof Container; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}