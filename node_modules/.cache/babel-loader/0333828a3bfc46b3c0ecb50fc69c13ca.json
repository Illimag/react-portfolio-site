{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { breakpoints } from '../../themes';\nimport { withResponsiveMode } from '../../hoc';\nimport { TabContent, TabHeader, TabHeaders } from '../TabPanel/TabPanel.part';\nimport { DropdownContainer, SlideDownTabs } from '../DropdownPanel/DropdownPanel.part';\nconst TabInt = Object.assign(_a => {\n  var {\n    theme,\n    mode,\n    innerRef,\n    activeIndex = 0,\n    onSelect,\n    headers = [],\n    children\n  } = _a,\n      props = __rest(_a, [\"theme\", \"mode\", \"innerRef\", \"activeIndex\", \"onSelect\", \"headers\", \"children\"]);\n\n  let TabHeaderHolder = false;\n\n  if (mode === 'tab') {\n    TabHeaderHolder = React.createElement(TabHeaders, Object.assign({\n      theme: theme\n    }, props), headers.map((text, index) => React.createElement(TabHeader, {\n      theme: theme,\n      key: `head-${index}`,\n      active: index === activeIndex,\n      onClick: () => onSelect(index)\n    }, text)));\n  } else if (mode === 'dropdown') {\n    TabHeaderHolder = React.createElement(DropdownContainer, Object.assign({\n      theme: theme\n    }, props), React.createElement(SlideDownTabs, {\n      data: headers.map((content, index) => ({\n        key: `${index}`,\n        content,\n        type: 'item'\n      })),\n      selectedIndex: activeIndex,\n      onChange: onSelect\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    ref: innerRef\n  }, TabHeaderHolder, React.createElement(TabContent, {\n    theme: theme\n  }, children));\n}, {\n  inner: {\n    get TabHeaders() {\n      return TabHeaders;\n    },\n\n    get TabHeader() {\n      return TabHeader;\n    },\n\n    get DropdownContainer() {\n      return DropdownContainer;\n    },\n\n    get SlideDownTabs() {\n      return SlideDownTabs;\n    },\n\n    get TabContent() {\n      return TabContent;\n    }\n\n  }\n});\nexport const ResponsiveTabs = withResponsiveMode(width => !width || width > breakpoints.medium ? 'tab' : 'dropdown')(TabInt);","map":{"version":3,"sources":["../../../../src/components/Tabs/Tabs.part.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,WAAT,QAA4B,cAA5B;AAEA,SAA4B,kBAA5B,QAAsD,WAAtD;AACA,SAAS,UAAT,EAAqB,SAArB,EAAgC,UAAhC,QAAkD,2BAAlD;AACA,SAAS,iBAAT,EAA4B,aAA5B,QAAgE,qCAAhE;AAIA,MAAM,MAAM,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAA2F;MAA1F;AAAE,IAAA,KAAF;AAAS,IAAA,IAAT;AAAe,IAAA,QAAf;AAAyB,IAAA,WAAW,GAAG,CAAvC;AAA0C,IAAA,QAA1C;AAAoD,IAAA,OAAO,GAAG,EAA9D;AAAkE,IAAA;AAAlE,MAA0E,E;MAAE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,EAAA,SAAA,EAAA,UAAA,CAAA,C;;AACxG,MAAI,eAAe,GAAoB,KAAvC;;AACA,MAAI,IAAI,KAAK,KAAb,EAAoB;AAChB,IAAA,eAAe,GAAI,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA;AAAC,MAAA,KAAK,EAAE;AAAR,KAAA,EAAmB,KAAnB,CAAX,EAClB,OAAO,CAAC,GAAR,CAAY,CAAC,IAAD,EAAO,KAAP,KAAkB,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AAAC,MAAA,KAAK,EAAE,KAAR;AAAe,MAAA,GAAG,EAAE,QAAQ,KAAK,EAAjC;AAAqC,MAAA,MAAM,EAAE,KAAK,KAAK,WAAvD;AAAoE,MAAA,OAAO,EAAE,MAAM,QAAQ,CAAC,KAAD;AAA3F,KAAV,EAC1B,IAD0B,CAA9B,CADkB,CAAnB;AAKH,GAND,MAOK,IAAI,IAAI,KAAK,UAAb,EAAyB;AAC1B,IAAA,eAAe,GAAI,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB,MAAA,CAAA,MAAA,CAAA;AAAC,MAAA,KAAK,EAAE;AAAR,KAAA,EAAmB,KAAnB,CAAlB,EACnB,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AAAC,MAAA,IAAI,EAAE,OAAO,CAAC,GAAR,CAAY,CAAC,OAAD,EAAU,KAAV,MAAqB;AAClD,QAAA,GAAG,EAAE,GAAG,KAAK,EADqC;AAElD,QAAA,OAFkD;AAGlD,QAAA,IAAI,EAAE;AAH4C,OAArB,CAAZ,CAAP;AAIQ,MAAA,aAAa,EAAE,WAJvB;AAIoC,MAAA,QAAQ,EAAE;AAJ9C,KAAd,CADmB,CAAnB;AAOH;;AACD,SAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,GAAG,EAAE;AAAV,GAAA,EACL,eADK,EAEN,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,IAAA,KAAK,EAAE;AAAR,GAAX,EAA2B,QAA3B,CAFM,CAAR;AAIH,CAtBc,EAsBwC;AAAE,EAAA,KAAK,EAAE;AACxD,QAAI,UAAJ,GAAc;AAAK,aAAO,UAAP;AAAyC,KADJ;;AAExD,QAAI,SAAJ,GAAa;AAAK,aAAO,SAAP;AAAuC,KAFD;;AAGxD,QAAI,iBAAJ,GAAqB;AAAK,aAAO,iBAAP;AAAuD,KAHzB;;AAIxD,QAAI,aAAJ,GAAiB;AAAK,aAAO,aAAP;AAA+C,KAJb;;AAKxD,QAAI,UAAJ,GAAc;AAAK,aAAO,UAAP;AAAyC;;AALJ;AAAT,CAtBxC,CAAf;AAkCA,OAAO,MAAM,cAAc,GAAuB,kBAAkB,CAAqB,KAAK,IAAI,CAAC,KAAD,IAAU,KAAK,GAAG,WAAW,CAAC,MAA9B,GAAuC,KAAvC,GAA+C,UAA7E,CAAlB,CAA2G,MAA3G,CAA3C","sourcesContent":["import * as React from 'react';\nimport { StandardProps } from '../../common';\nimport { breakpoints } from '../../themes';\nimport { TabControlHolderProps } from '../TabControl';\nimport { ModeProviderProps, withResponsiveMode } from '../../hoc';\nimport { TabContent, TabHeader, TabHeaders } from '../TabPanel/TabPanel.part';\nimport { DropdownContainer, SlideDownTabs, TabHeaderItem } from '../DropdownPanel/DropdownPanel.part';\nexport type TabsMode = 'tab' | 'dropdown';\nexport interface TabIntProps extends StandardProps, ModeProviderProps<TabsMode>, TabControlHolderProps {\n}\nconst TabInt = Object.assign(((({ theme, mode, innerRef, activeIndex = 0, onSelect, headers = [], children, ...props }) => {\n    let TabHeaderHolder: React.ReactNode = false;\n    if (mode === 'tab') {\n        TabHeaderHolder = (<TabHeaders theme={theme} {...props}>\n        {headers.map((text, index) => (<TabHeader theme={theme} key={`head-${index}`} active={index === activeIndex} onClick={() => onSelect(index)}>\n            {text}\n          </TabHeader>))}\n      </TabHeaders>);\n    }\n    else if (mode === 'dropdown') {\n        TabHeaderHolder = (<DropdownContainer theme={theme} {...props}>\n        <SlideDownTabs data={headers.map((content, index) => ({\n            key: `${index}`,\n            content,\n            type: 'item',\n        } as TabHeaderItem))} selectedIndex={activeIndex} onChange={onSelect}/>\n      </DropdownContainer>);\n    }\n    return (<div ref={innerRef}>\n      {TabHeaderHolder}\n      <TabContent theme={theme}>{children}</TabContent>\n    </div>);\n}) as React.FC<React.PropsWithChildren<TabIntProps>>), { inner: {\n        get TabHeaders() { return TabHeaders as typeof TabHeaders; },\n        get TabHeader() { return TabHeader as typeof TabHeader; },\n        get DropdownContainer() { return DropdownContainer as typeof DropdownContainer; },\n        get SlideDownTabs() { return SlideDownTabs as typeof SlideDownTabs; },\n        get TabContent() { return TabContent as typeof TabContent; }\n    } });\nexport interface ResponsiveTabsType extends React.FC<TabIntProps> {\n    (props: TabIntProps & {\n        children?: React.ReactNode;\n    }, context?: any): JSX.Element;\n}\nexport const ResponsiveTabs: ResponsiveTabsType = withResponsiveMode<'tab' | 'dropdown'>(width => !width || width > breakpoints.medium ? 'tab' : 'dropdown')(TabInt) as any;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}