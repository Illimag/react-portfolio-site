{"ast":null,"code":"import _createForOfIteratorHelper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { unit } from './unit';\nimport { stripUnit } from './stripUnit';\n\nfunction calcBasis(myBase) {\n  var myUnit = unit(myBase);\n  var num = stripUnit(myBase); // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n\n  if (myUnit === '%') {\n    return num / 100 * 16;\n  } // Using rem as base allows correct scaling\n\n\n  if (myUnit === 'rem') {\n    return num * 16;\n  }\n\n  return num;\n}\n\nfunction convertArray(input, baseNum) {\n  var output = [];\n\n  var _iterator = _createForOfIteratorHelper(input),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      output.push(\"\".concat(stripUnit(value) / baseNum, \"rem\"));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return output.join(' ');\n}\n/**\n * Converts one or more pixel values into matching rem values.\n * @param values One or more values to convert.\n * @param base The base value to use when calculating the `rem`.\n */\n\n\nexport function remCalc(input, base) {\n  // If no base is defined, defer to the global font size\n  var myBase = base || '16px';\n  var baseNum = calcBasis(myBase);\n\n  if (typeof input === 'string') {\n    return \"\".concat(stripUnit(input) / baseNum, \"rem\");\n  }\n\n  return convertArray(input, baseNum);\n}","map":{"version":3,"sources":["../../../src/utils/remCalc.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,QAArB;AACA,SAAS,SAAT,QAA0B,aAA1B;;AAEA,SAAS,SAAT,CAAmB,MAAnB,EAAiC;AAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAD,CAAnB;AACA,MAAM,GAAG,GAAG,SAAS,CAAC,MAAD,CAArB,CAF+B,CAI/B;AACA;;AACA,MAAI,MAAM,KAAK,GAAf,EAAoB;AAClB,WAAQ,GAAG,GAAG,GAAP,GAAc,EAArB;AACD,GAR8B,CAU/B;;;AACA,MAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,WAAO,GAAG,GAAG,EAAb;AACD;;AAED,SAAO,GAAP;AACD;;AAED,SAAS,YAAT,CAAsB,KAAtB,EAA4C,OAA5C,EAA2D;AACzD,MAAM,MAAM,GAAkB,EAA9B;;AADyD,6CAGrC,KAHqC;AAAA;;AAAA;AAGzD,wDAA2B;AAAA,UAAhB,KAAgB;AACzB,MAAA,MAAM,CAAC,IAAP,WAAe,SAAS,CAAC,KAAD,CAAT,GAAmB,OAAlC;AACD;AALwD;AAAA;AAAA;AAAA;AAAA;;AAOzD,SAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAP;AACD;AAED;;;;;;;AAKA,OAAM,SAAU,OAAV,CAAkB,KAAlB,EAAiD,IAAjD,EAA8D;AAClE;AACA,MAAM,MAAM,GAAG,IAAI,IAAI,MAAvB;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,MAAD,CAAzB;;AAEA,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,qBAAU,SAAS,CAAC,KAAD,CAAT,GAAmB,OAA7B;AACD;;AAED,SAAO,YAAY,CAAC,KAAD,EAAQ,OAAR,CAAnB;AACD","sourcesContent":["import { unit } from './unit';\nimport { stripUnit } from './stripUnit';\n\nfunction calcBasis(myBase: string) {\n  const myUnit = unit(myBase);\n  const num = stripUnit(myBase);\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  if (myUnit === '%') {\n    return (num / 100) * 16;\n  }\n\n  // Using rem as base allows correct scaling\n  if (myUnit === 'rem') {\n    return num * 16;\n  }\n\n  return num;\n}\n\nfunction convertArray(input: Array<string>, baseNum: number) {\n  const output: Array<string> = [];\n\n  for (const value of input) {\n    output.push(`${stripUnit(value) / baseNum}rem`);\n  }\n\n  return output.join(' ');\n}\n\n/**\n * Converts one or more pixel values into matching rem values.\n * @param values One or more values to convert.\n * @param base The base value to use when calculating the `rem`.\n */\nexport function remCalc(input: Array<string> | string, base?: string): string {\n  // If no base is defined, defer to the global font size\n  const myBase = base || '16px';\n  const baseNum = calcBasis(myBase);\n\n  if (typeof input === 'string') {\n    return `${stripUnit(input) / baseNum}rem`;\n  }\n\n  return convertArray(input, baseNum);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}