{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { showInputInfo } from '../../utils/input';\nimport { InputIcon } from '../InputIcon';\nimport { transparent } from '../../colors';\nimport { distance } from '../../distance';\nimport { light } from '../../themes';\nimport { Icon } from '../Icon';\nimport { Responsive } from '../Responsive';\nimport { WindowPopup } from '../WindowPopup';\nimport { InteractiveList, InteractiveListDirection } from '../InteractiveList';\nimport { StyledInputRow, StyledInputBox, getTextFieldBorderType, StyledTagItem, StyledIconContainer } from '../../quarks';\nimport { getFontStyle } from '../../textStyles';\nconst DropdownContainer = styled.div`\n  position: relative;\n  outline: 0;\n`;\nexport const DropdownSelect = styled.div`\n  display: flex;\n`;\nconst DropdownInputBox = styled(StyledInputBox)`\n  border: 1px solid ${themed(({\n  focused,\n  theme: {\n    ui4\n  }\n}) => focused ? ui4 : transparent)};\n`;\nconst DropdownOptionText = styled.div`\n  ${getFontStyle({\n  size: 'medium'\n})}\n  padding: ${props => !props.labelShown ? `${distance.medium}` : `${distance.large} ${distance.medium} ${distance.small}`};\n  margin: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  color: ${themed(({\n  theme,\n  disabled\n}) => disabled ? theme.text3 : theme.text1)};\n  font-family: inherit;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  cursor: ${props => props.disabled ? 'not-allowed' : 'auto'};\n`;\nconst SingleDropdownItem = styled.span`\n  display: inline-block;\n  line-height: normal;\n  border: 0;\n  color: ${themed(props => props.theme.text6)};\n`;\nconst StyledStandardWrapper = styled('ul')`\n  list-style: none;\n  width: 100%;\n  position: absolute;\n  transform: translateY(${props => props.direction === InteractiveListDirection.normal ? 0 : -100}%);\n  box-sizing: border-box;\n  box-shadow: none;\n  margin: 0;\n  padding: 0;\n  background: ${themed(props => props.theme.ui1)};\n  border: 1px solid\n    ${themed(({\n  border,\n  theme: {\n    ui0,\n    ui4\n  }\n}) => border === 0\n/* none */\n? ui0 : ui4)};\n  max-height: 50vh;\n  ${props => props.direction === InteractiveListDirection.normal ? 'border-top-color: transparent' : 'border-bottom-color: transparent'};\n  top: ${props => props.direction === InteractiveListDirection.normal ? -1 : -53}px;\n  overflow-y: auto;\n  z-index: 100;\n`;\nconst StyledLabel = styled.div`\n  padding-left: ${distance.medium};\n`;\nconst DropdownPopup = styled(WindowPopup)`\n  border: 2em solid transparent;\n`; // tslint:disable-next-line\n\nconst NotOpenComponent = null;\nconst StandardWrapper = Object.assign(_a => {\n  var {\n    open\n  } = _a,\n      props = __rest(_a, [\"open\"]);\n\n  return open ? React.createElement(StyledStandardWrapper, Object.assign({}, props)) : NotOpenComponent;\n}, {\n  inner: {\n    get StyledStandardWrapper() {\n      return StyledStandardWrapper;\n    }\n\n  }\n});\nStandardWrapper.displayName = 'StandardWrapper';\n\nconst getMobileWrapper = label => ({\n  onClick,\n  children,\n  open\n}) => open ? React.createElement(DropdownPopup, {\n  onClose: onClick,\n  label: label\n}, children) : NotOpenComponent;\n\nfunction getChosen(selected, multiple) {\n  if (multiple) {\n    return Array.isArray(selected) ? selected : [selected];\n  } else {\n    return [Array.isArray(selected) ? selected[0] : selected];\n  }\n}\n\nfunction getKeys(data, selected) {\n  return selected.map(index => {\n    const item = data[index];\n    return typeof item === 'string' ? item : item.key;\n  });\n}\n\nfunction getIndices(data, selected, multiple) {\n  const chosen = getChosen(selected, multiple);\n  const indices = [];\n\n  for (let i = 0; i < data.length; i++) {\n    const item = data[i];\n    const key = typeof item === 'string' ? item : item.key;\n\n    if (chosen.indexOf(key) !== -1) {\n      indices.push(i);\n    }\n  }\n\n  if (!multiple && indices.length > 1) {\n    indices.splice(1);\n  }\n\n  return indices;\n}\n\nfunction getContent(item) {\n  if (typeof item !== 'string') {\n    return item.content || item.key;\n  }\n\n  return item;\n}\n\nfunction getSingleContent(item, theme) {\n  const key = typeof item === 'string' ? item : item.key;\n  return React.createElement(SingleDropdownItem, {\n    theme: theme,\n    key: key\n  }, getContent(item));\n}\n\nconst MultipleDropdownItem = styled(StyledTagItem)`\n  margin: 0 ${distance.small} 0 0;\n`;\n\nfunction getMultipleContent(item, theme) {\n  const key = typeof item === 'string' ? item : item.key;\n  return React.createElement(MultipleDropdownItem, {\n    theme: theme,\n    key: key\n  }, getContent(item));\n}\n\nexport class DropdownFieldInt extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.show = () => new Promise(resolve => {\n      this.setState({\n        open: true\n      }, resolve);\n    });\n\n    this.hide = () => new Promise(resolve => {\n      this.setState({\n        open: false\n      }, resolve);\n    });\n\n    this.handleClickOutside = this.hide;\n\n    this.toggle = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        onToggle,\n        disabled\n      } = this.props;\n\n      if (!disabled) {\n        const {\n          open\n        } = this.state;\n\n        if (typeof onToggle === 'function') {\n          onToggle({\n            state: open ? 'close' : 'open'\n          });\n        }\n\n        if (open) {\n          yield this.hide();\n        } else {\n          yield this.show();\n        }\n      }\n    });\n\n    this.control = e => {\n      switch (e.keyCode) {\n        case 13\n        /* enter */\n        :\n        case 32\n        /* space */\n        :\n          this.show();\n          break;\n\n        case 27\n        /* escape */\n        :\n          this.hide();\n          break;\n\n        case 38\n        /* up */\n        :\n        case 40\n        /* down */\n        :\n          if (!this.state.open) {\n            this.show();\n          }\n\n          return;\n\n        default:\n          return;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    this.handleMouseDown = e => {\n      this.toggle();\n      e.preventDefault();\n    };\n\n    this.handleChange = ({\n      value\n    }) => {\n      const {\n        controlled\n      } = this.state;\n      const {\n        onChange,\n        data,\n        multiple,\n        form,\n        name = ''\n      } = this.props;\n\n      if (!multiple) {\n        this.hide();\n      }\n\n      if (!controlled) {\n        if (form) {\n          form.change({\n            name,\n            value\n          });\n        } else {\n          this.setState({\n            value: value\n          });\n        }\n      }\n\n      if (typeof onChange === 'function') {\n        onChange({\n          value: value.length ? getKeys(data, value) : []\n        });\n      }\n    };\n\n    this.renderList = screenSize => {\n      const {\n        data = [],\n        theme,\n        disabled,\n        multiple,\n        direction,\n        disabledItems\n      } = this.props;\n      const {\n        open,\n        value\n      } = this.state;\n      const mobile = screenSize === 'small';\n      const wrapper = mobile ? getMobileWrapper(React.createElement(StyledLabel, null, this.props.label)) : StandardWrapper;\n      return React.createElement(InteractiveList, {\n        theme: theme,\n        data: data,\n        multiple: multiple,\n        open: open && !disabled,\n        onChange: this.handleChange,\n        onClick: mobile ? this.toggle : undefined,\n        onBlur: mobile ? undefined : this.hide,\n        onKeyDown: mobile ? this.control : undefined,\n        indices: value,\n        customWrapper: wrapper,\n        onClickOutside: () => {},\n        direction: direction,\n        autoPosition: undefined === direction,\n        disabledItems: disabledItems,\n        autoFocus: true\n      });\n    };\n\n    const data = props.data || [];\n    let value = [];\n\n    if (typeof props.value === 'string' || Array.isArray(props.value)) {\n      value = props.value;\n    } else if (typeof props.defaultValue === 'string' || Array.isArray(props.defaultValue)) {\n      value = props.defaultValue;\n    }\n\n    this.state = {\n      value: getIndices(data, value, props.multiple),\n      open: props.open === true,\n      controlled: props.value !== undefined,\n      error: props.error\n    };\n  }\n\n  componentDidMount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.subscribe(this);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.unsubscribe(this);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps({\n    data = [],\n    value = [],\n    error,\n    multiple\n  }) {\n    const {\n      controlled\n    } = this.state;\n\n    if (controlled) {\n      this.setState({\n        value: getIndices(data, value, multiple)\n      });\n    }\n\n    this.setState({\n      error\n    });\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      borderless,\n      children: _0,\n      value: _1,\n      defaultValue: _2,\n      onInput: _3,\n      data = [],\n      theme,\n      className: classNameProp,\n      label,\n      placeholder,\n      maxSelectedShown = 8,\n      disabled,\n      multiple,\n      info,\n      onChange,\n      disabledItems\n    } = _a,\n          other = __rest(_a, [\"borderless\", \"children\", \"value\", \"defaultValue\", \"onInput\", \"data\", \"theme\", \"className\", \"label\", \"placeholder\", \"maxSelectedShown\", \"disabled\", \"multiple\", \"info\", \"onChange\", \"disabledItems\"]);\n\n    const {\n      open: openState,\n      value,\n      error\n    } = this.state;\n    const open = openState && !disabled;\n    const getContent = multiple ? getMultipleContent : getSingleContent;\n    const hasValue = !!value.length;\n    const border = getTextFieldBorderType(borderless, !!error, open);\n    const items = value.map(i => data[i]);\n    const th = theme || light;\n\n    if (value.length > maxSelectedShown) {\n      const rest = 1 + value.length - maxSelectedShown;\n      items.splice(maxSelectedShown - 1, rest, `+ ${rest}`);\n    }\n\n    return React.createElement(DropdownContainer, Object.assign({}, other), React.createElement(DropdownSelect, {\n      onMouseDown: this.handleMouseDown,\n      tabIndex: 0,\n      onKeyDown: this.control\n    }, React.createElement(DropdownInputBox, {\n      disabled: disabled,\n      hasValue: hasValue,\n      border: border,\n      focused: open,\n      theme: theme\n    }, React.createElement(StyledInputRow, {\n      label: label,\n      placeholder: placeholder,\n      error: !!error,\n      focused: open,\n      hasValue: hasValue\n    }, React.createElement(DropdownOptionText, {\n      labelShown: label !== undefined,\n      disabled: disabled\n    }, hasValue || label ? items.map(item => getContent(item, theme)) : placeholder)), React.createElement(InputIcon, {\n      disabled: disabled,\n      theme: theme,\n      error: error,\n      hasValue: hasValue\n    }), React.createElement(StyledIconContainer, null, React.createElement(Icon, {\n      name: open ? 'KeyboardArrowUp' : 'KeyboardArrowDown',\n      color: disabled ? th.ui4 : th.ui5,\n      size: \"22px\"\n    })))), React.createElement(Responsive, {\n      render: this.renderList\n    }), showInputInfo(error, info));\n  }\n\n}\nDropdownFieldInt.inner = {\n  get StyledLabel() {\n    return StyledLabel;\n  },\n\n  get InteractiveList() {\n    return InteractiveList;\n  },\n\n  get DropdownContainer() {\n    return DropdownContainer;\n  },\n\n  get DropdownSelect() {\n    return DropdownSelect;\n  },\n\n  get DropdownInputBox() {\n    return DropdownInputBox;\n  },\n\n  get StyledInputRow() {\n    return StyledInputRow;\n  },\n\n  get DropdownOptionText() {\n    return DropdownOptionText;\n  },\n\n  get InputIcon() {\n    return InputIcon;\n  },\n\n  get StyledIconContainer() {\n    return StyledIconContainer;\n  },\n\n  get Icon() {\n    return Icon;\n  },\n\n  get Responsive() {\n    return Responsive;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/DropdownField/DropdownFieldInt.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { KeyCodes } from '../../utils/keyCodes';\nimport { showInputInfo } from '../../utils/input';\nimport { ScreenSize } from '../../common';\nimport { InputIcon } from '../InputIcon';\nimport { FormContextProps } from '../../hoc/withFormContext';\nimport { transparent } from '../../colors';\nimport { distance } from '../../distance';\nimport { light } from '../../themes';\nimport { Icon } from '../Icon';\nimport { Responsive } from '../Responsive';\nimport { WindowPopup } from '../WindowPopup';\nimport { InteractiveList, InteractiveListChangeEvent, InteractiveListWrapperProps, InteractiveListDirection, InteractiveListBorderType, } from '../InteractiveList';\nimport { StyledInputRow, StyledInputBox, getTextFieldBorderType, StyledTagItem, StyledIconContainer, } from '../../quarks';\nimport { getFontStyle } from '../../textStyles';\nimport { DropdownFieldItem, DropdownFieldProps } from './DropdownField.types.part';\nconst DropdownContainer = styled.div `\n  position: relative;\n  outline: 0;\n`;\nexport const DropdownSelect = styled.div `\n  display: flex;\n`;\ninterface DropDownOptionsTextProps {\n    labelShown: boolean;\n    disabled?: boolean;\n}\nconst DropdownInputBox = styled(StyledInputBox) `\n  border: 1px solid ${themed(({ focused, theme: { ui4 } }) => (focused ? ui4 : transparent))};\n`;\nconst DropdownOptionText = styled.div<DropDownOptionsTextProps> `\n  ${getFontStyle({ size: 'medium' })}\n  padding: ${props => !props.labelShown ? `${distance.medium}` : `${distance.large} ${distance.medium} ${distance.small}`};\n  margin: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  color: ${themed(({ theme, disabled }) => (disabled ? theme.text3 : theme.text1))};\n  font-family: inherit;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  cursor: ${props => (props.disabled ? 'not-allowed' : 'auto')};\n`;\nconst SingleDropdownItem = styled.span `\n  display: inline-block;\n  line-height: normal;\n  border: 0;\n  color: ${themed(props => props.theme.text6)};\n`;\ninterface StyledStandardWrapperProps {\n    direction: InteractiveListDirection;\n    border: InteractiveListBorderType;\n}\nconst StyledStandardWrapper = styled('ul')<StyledStandardWrapperProps> `\n  list-style: none;\n  width: 100%;\n  position: absolute;\n  transform: translateY(${props => (props.direction === InteractiveListDirection.normal ? 0 : -100)}%);\n  box-sizing: border-box;\n  box-shadow: none;\n  margin: 0;\n  padding: 0;\n  background: ${themed(props => props.theme.ui1)};\n  border: 1px solid\n    ${themed(({ border, theme: { ui0, ui4 } }) => (border === InteractiveListBorderType.none ? ui0 : ui4))};\n  max-height: 50vh;\n  ${props => props.direction === InteractiveListDirection.normal\n    ? 'border-top-color: transparent'\n    : 'border-bottom-color: transparent'};\n  top: ${props => (props.direction === InteractiveListDirection.normal ? -1 : -53)}px;\n  overflow-y: auto;\n  z-index: 100;\n`;\nconst StyledLabel = styled.div `\n  padding-left: ${distance.medium};\n`;\nconst DropdownPopup = styled(WindowPopup) `\n  border: 2em solid transparent;\n`;\n// tslint:disable-next-line\nconst NotOpenComponent = null;\nconst StandardWrapper = Object.assign(((({ open, ...props }) => open ? <StyledStandardWrapper {...props}/> : NotOpenComponent) as React.SFC<InteractiveListWrapperProps>), { inner: {\n        get StyledStandardWrapper() { return StyledStandardWrapper as typeof StyledStandardWrapper; }\n    } });\nStandardWrapper.displayName = 'StandardWrapper';\nconst getMobileWrapper = (label?: React.ReactChild) => ({ onClick, children, open, }: InteractiveListWrapperProps & {\n    children?: React.ReactNode;\n}) => open ? (<DropdownPopup onClose={onClick} label={label}>\n      {children}\n    </DropdownPopup>) : (NotOpenComponent);\nfunction getChosen(selected: string | Array<string>, multiple?: boolean) {\n    if (multiple) {\n        return Array.isArray(selected) ? selected : [selected];\n    }\n    else {\n        return [Array.isArray(selected) ? selected[0] : selected];\n    }\n}\nfunction getKeys(data: Array<string | DropdownFieldItem>, selected: Array<number>) {\n    return selected.map(index => {\n        const item = data[index];\n        return typeof item === 'string' ? item : item.key;\n    });\n}\nfunction getIndices(data: Array<string | DropdownFieldItem>, selected: string | Array<string>, multiple?: boolean) {\n    const chosen = getChosen(selected, multiple);\n    const indices: Array<number> = [];\n    for (let i = 0; i < data.length; i++) {\n        const item = data[i];\n        const key = typeof item === 'string' ? item : item.key;\n        if (chosen.indexOf(key) !== -1) {\n            indices.push(i);\n        }\n    }\n    if (!multiple && indices.length > 1) {\n        indices.splice(1);\n    }\n    return indices;\n}\nfunction getContent(item: string | DropdownFieldItem) {\n    if (typeof item !== 'string') {\n        return item.content || item.key;\n    }\n    return item;\n}\nfunction getSingleContent(item: string | DropdownFieldItem, theme?: any) {\n    const key = typeof item === 'string' ? item : item.key;\n    return (<SingleDropdownItem theme={theme} key={key}>\n      {getContent(item)}\n    </SingleDropdownItem>);\n}\nconst MultipleDropdownItem = styled(StyledTagItem as any) `\n  margin: 0 ${distance.small} 0 0;\n`;\nfunction getMultipleContent(item: string | DropdownFieldItem, theme?: any) {\n    const key = typeof item === 'string' ? item : item.key;\n    return (<MultipleDropdownItem theme={theme} key={key}>\n      {getContent(item)}\n    </MultipleDropdownItem>);\n}\ninterface DropdownState {\n    value: Array<number>;\n    error?: React.ReactChild;\n    open: boolean;\n    controlled: boolean;\n}\nexport class DropdownFieldInt extends React.Component<DropdownFieldProps & FormContextProps, DropdownState> {\n    constructor(props: DropdownFieldProps) {\n        super(props);\n        const data = props.data || [];\n        let value: string | Array<string> = [];\n        if (typeof props.value === 'string' || Array.isArray(props.value)) {\n            value = props.value;\n        }\n        else if (typeof props.defaultValue === 'string' || Array.isArray(props.defaultValue)) {\n            value = props.defaultValue;\n        }\n        this.state = {\n            value: getIndices(data, value, props.multiple),\n            open: props.open === true,\n            controlled: props.value !== undefined,\n            error: props.error,\n        };\n    }\n    componentDidMount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    UNSAFE_componentWillReceiveProps({ data = [], value = [], error, multiple }: DropdownFieldProps) {\n        const { controlled } = this.state;\n        if (controlled) {\n            this.setState({\n                value: getIndices(data, value, multiple),\n            });\n        }\n        this.setState({ error });\n    }\n    private show = () => new Promise(resolve => {\n        this.setState({ open: true }, resolve);\n    });\n    private hide = () => new Promise(resolve => {\n        this.setState({ open: false }, resolve);\n    });\n    handleClickOutside = this.hide;\n    private toggle = async () => {\n        const { onToggle, disabled } = this.props;\n        if (!disabled) {\n            const { open } = this.state;\n            if (typeof onToggle === 'function') {\n                onToggle({\n                    state: open ? 'close' : 'open',\n                });\n            }\n            if (open) {\n                await this.hide();\n            }\n            else {\n                await this.show();\n            }\n        }\n    };\n    private control = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        switch (e.keyCode) {\n            case KeyCodes.enter:\n            case KeyCodes.space:\n                this.show();\n                break;\n            case KeyCodes.escape:\n                this.hide();\n                break;\n            case KeyCodes.up:\n            case KeyCodes.down:\n                if (!this.state.open) {\n                    this.show();\n                }\n                return;\n            default:\n                return;\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    };\n    private handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.toggle();\n        e.preventDefault();\n    };\n    private handleChange = ({ value }: InteractiveListChangeEvent) => {\n        const { controlled } = this.state;\n        const { onChange, data, multiple, form, name = '' } = this.props;\n        if (!multiple) {\n            this.hide();\n        }\n        if (!controlled) {\n            if (form) {\n                form.change({\n                    name,\n                    value,\n                });\n            }\n            else {\n                this.setState({\n                    value: value,\n                });\n            }\n        }\n        if (typeof onChange === 'function') {\n            onChange({\n                value: value.length ? getKeys(data, value) : [],\n            });\n        }\n    };\n    private renderList = (screenSize?: ScreenSize) => {\n        const { data = [], theme, disabled, multiple, direction, disabledItems } = this.props;\n        const { open, value } = this.state;\n        const mobile = screenSize === 'small';\n        const wrapper = mobile ? getMobileWrapper(<StyledLabel>{this.props.label}</StyledLabel>) : StandardWrapper;\n        return (<InteractiveList theme={theme} data={data} multiple={multiple} open={open && !disabled} onChange={this.handleChange} onClick={mobile ? this.toggle : undefined} onBlur={mobile ? undefined : this.hide} onKeyDown={mobile ? this.control : undefined} indices={value} customWrapper={wrapper} onClickOutside={() => { }} direction={direction} autoPosition={undefined === direction} disabledItems={disabledItems} autoFocus/>);\n    };\n    render() {\n        const { borderless, children: _0, value: _1, defaultValue: _2, onInput: _3, data = [], theme, className: classNameProp, label, placeholder, maxSelectedShown = 8, disabled, multiple, info, onChange, disabledItems, ...other } = this.props;\n        const { open: openState, value, error } = this.state;\n        const open = openState && !disabled;\n        const getContent = multiple ? getMultipleContent : getSingleContent;\n        const hasValue = !!value.length;\n        const border = getTextFieldBorderType(borderless, !!error, open);\n        const items = value.map(i => data[i]);\n        const th = theme || light;\n        if (value.length > maxSelectedShown) {\n            const rest = 1 + value.length - maxSelectedShown;\n            items.splice(maxSelectedShown - 1, rest, `+ ${rest}`);\n        }\n        return (<DropdownContainer {...other}>\n        <DropdownSelect onMouseDown={this.handleMouseDown} tabIndex={0} onKeyDown={this.control}>\n          <DropdownInputBox disabled={disabled} hasValue={hasValue} border={border} focused={open} theme={theme}>\n            <StyledInputRow label={label} placeholder={placeholder} error={!!error} focused={open} hasValue={hasValue}>\n              <DropdownOptionText labelShown={label !== undefined} disabled={disabled}>\n                {hasValue || label ? items.map(item => getContent(item, theme)) : placeholder}\n              </DropdownOptionText>\n            </StyledInputRow>\n            <InputIcon disabled={disabled} theme={theme} error={error} hasValue={hasValue}/>\n            <StyledIconContainer>\n              <Icon name={open ? 'KeyboardArrowUp' : 'KeyboardArrowDown'} color={disabled ? th.ui4 : th.ui5} size=\"22px\"/>\n            </StyledIconContainer>\n          </DropdownInputBox>\n        </DropdownSelect>\n        <Responsive render={this.renderList}/>\n        {showInputInfo(error, info)}\n      </DropdownContainer>);\n    }\n    static inner = {\n        get StyledLabel() { return StyledLabel as typeof StyledLabel; },\n        get InteractiveList() { return InteractiveList as typeof InteractiveList; },\n        get DropdownContainer() { return DropdownContainer as typeof DropdownContainer; },\n        get DropdownSelect() { return DropdownSelect as typeof DropdownSelect; },\n        get DropdownInputBox() { return DropdownInputBox as typeof DropdownInputBox; },\n        get StyledInputRow() { return StyledInputRow as typeof StyledInputRow; },\n        get DropdownOptionText() { return DropdownOptionText as typeof DropdownOptionText; },\n        get InputIcon() { return InputIcon as typeof InputIcon; },\n        get StyledIconContainer() { return StyledIconContainer as typeof StyledIconContainer; },\n        get Icon() { return Icon as typeof Icon; },\n        get Responsive() { return Responsive as typeof Responsive; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}