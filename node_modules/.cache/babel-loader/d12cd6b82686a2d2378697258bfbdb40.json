{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { Anchor } from '../Anchor';\nimport { Icon } from '../Icon';\nimport { ocean, midnight } from '../../colors';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nconst StyledAnchor = styled(Anchor)(themed(({\n  display,\n  disabled,\n  theme: {\n    ui0,\n    ui4\n  }\n}) => css`\n      outline: none;\n      text-decoration: none;\n      color: ${disabled ? ui4 : ui0};\n      display: ${display};\n      font-size: 0;\n      vertical-align: middle;\n      cursor: ${disabled ? 'default' : 'pointer'};\n\n      &:hover,\n      &:hover * {\n        color: ${disabled ? ui4 : ocean};\n      }\n\n      &:focus,\n      &:focus * {\n        color: ${disabled ? ui4 : midnight};\n      }\n    `));\nconst StyledIcon = styled(Icon)`\n  color: ${themed(({\n  disabled,\n  iconOnly,\n  theme: {\n    ui0,\n    ui4,\n    ui5\n  }\n}) => disabled ? ui4 : iconOnly ? ui5 : ui0)};\n  display: inline-block;\n  vertical-align: middle;\n`;\nconst AnchorText = styled.span`\n  ${getFontStyle({\n  size: 'medium'\n})}\n\n  display: inline-block;\n  vertical-align: middle;\n  margin-left: ${distance.xsmall};\n`;\n/**\n * The icon link component shows an icon with optional text.\n */\n\nexport const IconLink = Object.assign(_a => {\n  var {\n    icon,\n    theme,\n    disabled,\n    children,\n    block\n  } = _a,\n      other = __rest(_a, [\"icon\", \"theme\", \"disabled\", \"children\", \"block\"]);\n\n  return React.createElement(StyledAnchor, Object.assign({\n    disabled: disabled,\n    display: block ? 'block' : 'inline-block'\n  }, other), icon && React.createElement(StyledIcon, {\n    disabled: disabled,\n    iconOnly: children ? false : true,\n    name: icon,\n    theme: theme,\n    size: '22px'\n  }), children && React.createElement(AnchorText, null, children));\n}, {\n  inner: {\n    get StyledAnchor() {\n      return StyledAnchor;\n    },\n\n    get StyledIcon() {\n      return StyledIcon;\n    },\n\n    get AnchorText() {\n      return AnchorText;\n    }\n\n  }\n});\nIconLink.displayName = 'IconLink';","map":{"version":3,"sources":["../../../../src/components/IconLink/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,MAAjB,EAAyB,GAAzB,QAAoC,oBAApC;AACA,SAAS,MAAT,QAAoC,WAApC;AACA,SAAmB,IAAnB,QAA0C,SAA1C;AACA,SAAS,KAAT,EAAgB,QAAhB,QAAgC,cAAhC;AACA,SAAS,QAAT,QAAyB,gBAAzB;AACA,SAAS,YAAT,QAA6B,kBAA7B;AAmBA,MAAM,YAAY,GAAG,MAAM,CAAC,MAAD,CAAN,CAAkC,MAAM,CAAC,CAAC;AAAE,EAAA,OAAF;AAAW,EAAA,QAAX;AAAqB,EAAA,KAAK,EAAE;AAAE,IAAA,GAAF;AAAO,IAAA;AAAP;AAA5B,CAAD,KAAgD,GAAI;;;eAGnG,QAAQ,GAAG,GAAH,GAAS,GAAG;iBAClB,OAAO;;;gBAGR,QAAQ,GAAG,SAAH,GAAe,SAAS;;;;iBAI/B,QAAQ,GAAG,GAAH,GAAS,KAAK;;;;;iBAKtB,QAAQ,GAAG,GAAH,GAAS,QAAQ;;KAhBmB,CAAxC,CAArB;AAmBA,MAAM,UAAU,GAAG,MAAM,CAAC,IAAD,CAAoC;WAClD,MAAM,CAAC,CAAC;AAAE,EAAA,QAAF;AAAY,EAAA,QAAZ;AAAsB,EAAA,KAAK,EAAE;AAAE,IAAA,GAAF;AAAO,IAAA,GAAP;AAAY,IAAA;AAAZ;AAA7B,CAAD,KAAuD,QAAQ,GAAG,GAAH,GAAS,QAAQ,GAAG,GAAH,GAAS,GAA1F,CAA+F;;;CADhH;AAKA,MAAM,UAAU,GAAG,MAAM,CAAC,IAAK;IAC3B,YAAY,CAAC;AAAE,EAAA,IAAI,EAAE;AAAR,CAAD,CAAoB;;;;iBAInB,QAAQ,CAAC,MAAM;CALhC;AAOA;;;;AAGA,OAAO,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAAyD;MAAxD;AAAE,IAAA,IAAF;AAAQ,IAAA,KAAR;AAAe,IAAA,QAAf;AAAyB,IAAA,QAAzB;AAAmC,IAAA;AAAnC,MAAwC,E;MAAE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,MAAA,EAAA,OAAA,EAAA,UAAA,EAAA,UAAA,EAAA,OAAA,CAAA,C;;AAC/E,SAAQ,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,QAAQ,EAAE,QAAX;AAAqB,IAAA,OAAO,EAAE,KAAK,GAAG,OAAH,GAAa;AAAhD,GAAA,EAAoE,KAApE,CAAb,EACL,IAAI,IAAK,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,IAAA,QAAQ,EAAE,QAAX;AAAqB,IAAA,QAAQ,EAAE,QAAQ,GAAG,KAAH,GAAW,IAAlD;AAAwD,IAAA,IAAI,EAAE,IAA9D;AAAoE,IAAA,KAAK,EAAE,KAA3E;AAAkF,IAAA,IAAI,EAAE;AAAxF,GAAX,CADJ,EAEL,QAAQ,IAAI,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,IAAX,EAAa,QAAb,CAFP,CAAR;AAIH,CALuB,EAKS;AAAE,EAAA,KAAK,EAAE;AAClC,QAAI,YAAJ,GAAgB;AAAK,aAAO,YAAP;AAA6C,KADhC;;AAElC,QAAI,UAAJ,GAAc;AAAK,aAAO,UAAP;AAAyC,KAF1B;;AAGlC,QAAI,UAAJ,GAAc;AAAK,aAAO,UAAP;AAAyC;;AAH1B;AAAT,CALT,CAAjB;AAUP,QAAQ,CAAC,WAAT,GAAuB,UAAvB","sourcesContent":["import * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { Anchor, AnchorProps } from '../Anchor';\nimport { IconName, Icon, IconProps } from '../Icon';\nimport { ocean, midnight } from '../../colors';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nexport interface IconLinkProps extends AnchorProps {\n    /**\n     * Sets the icon link as a block.\n     */\n    block?: boolean;\n    /**\n     * The name of the icon to display.\n     */\n    icon: IconName;\n}\nexport interface StyledAnchorProps {\n    disabled?: boolean;\n    display?: 'block' | 'inline-block';\n}\nexport interface StyledIconProps {\n    disabled?: boolean;\n    iconOnly?: boolean;\n}\nconst StyledAnchor = styled(Anchor)<StyledAnchorProps>(themed(({ display, disabled, theme: { ui0, ui4 } }) => css `\n      outline: none;\n      text-decoration: none;\n      color: ${disabled ? ui4 : ui0};\n      display: ${display};\n      font-size: 0;\n      vertical-align: middle;\n      cursor: ${disabled ? 'default' : 'pointer'};\n\n      &:hover,\n      &:hover * {\n        color: ${disabled ? ui4 : ocean};\n      }\n\n      &:focus,\n      &:focus * {\n        color: ${disabled ? ui4 : midnight};\n      }\n    `));\nconst StyledIcon = styled(Icon)<StyledIconProps & IconProps> `\n  color: ${themed(({ disabled, iconOnly, theme: { ui0, ui4, ui5 } }) => (disabled ? ui4 : iconOnly ? ui5 : ui0))};\n  display: inline-block;\n  vertical-align: middle;\n`;\nconst AnchorText = styled.span `\n  ${getFontStyle({ size: 'medium' })}\n\n  display: inline-block;\n  vertical-align: middle;\n  margin-left: ${distance.xsmall};\n`;\n/**\n * The icon link component shows an icon with optional text.\n */\nexport const IconLink = Object.assign(((({ icon, theme, disabled, children, block, ...other }) => {\n    return (<StyledAnchor disabled={disabled} display={block ? 'block' : 'inline-block'} {...other}>\n      {icon && (<StyledIcon disabled={disabled} iconOnly={children ? false : true} name={icon} theme={theme} size={'22px'}/>)}\n      {children && <AnchorText>{children}</AnchorText>}\n    </StyledAnchor>);\n}) as React.SFC<IconLinkProps>), { inner: {\n        get StyledAnchor() { return StyledAnchor as typeof StyledAnchor; },\n        get StyledIcon() { return StyledIcon as typeof StyledIcon; },\n        get AnchorText() { return AnchorText as typeof AnchorText; }\n    } });\nIconLink.displayName = 'IconLink';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}