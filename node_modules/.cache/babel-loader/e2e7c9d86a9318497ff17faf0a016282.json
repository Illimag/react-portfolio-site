{"ast":null,"code":"import _taggedTemplateLiteral from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: inline-block;\\n  color: \", \";\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  text-decoration: none;\\n  color: \", \";\\n  display: inline-block;\\n  font-size: inherit;\\n  white-space: nowrap;\\n\\n  &:hover {\\n    text-decoration: underline;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { Anchor } from '../Anchor';\nimport { dark } from '../../colors';\nvar StyledLink = styled(Anchor)(_templateObject(), themed(function (props) {\n  return props.theme.ui0;\n}));\nvar StyledText = styled.span(_templateObject2(), dark);\n/**\n * Represents a single Breadcrumb which is a special version of a link.\n */\n\nexport var Breadcrumb = Object.assign(function (props) {\n  var title = props.title,\n      to = props.to,\n      href = props.href,\n      onClick = props.onClick,\n      rest = __rest(props, [\"title\", \"to\", \"href\", \"onClick\"]);\n\n  if (!to && !href && !onClick) {\n    return React.createElement(StyledText, Object.assign({}, rest), title);\n  }\n\n  return React.createElement(StyledLink, Object.assign({}, props), title);\n}, {\n  inner: {\n    get StyledText() {\n      return StyledText;\n    },\n\n    get StyledLink() {\n      return StyledLink;\n    }\n\n  }\n});\nBreadcrumb.displayName = 'Breadcrumb';","map":{"version":3,"sources":["../../../../src/components/Breadcrumb/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,MAAjB,QAA+B,oBAA/B;AACA,SAAS,MAAT,QAAoC,WAApC;AACA,SAAS,IAAT,QAAqB,cAArB;AAWA,IAAM,UAAU,GAAG,MAAM,CAAC,MAAD,CAAT,oBAEL,MAAM,CAAC,UAAA,KAAK;AAAA,SAAI,KAAK,CAAC,KAAN,CAAY,GAAhB;AAAA,CAAN,CAFD,CAAhB;AAWA,IAAM,UAAU,GAAG,MAAM,CAAC,IAAV,qBAEL,IAFK,CAAhB;AAIA;;;;AAGA,OAAO,IAAM,UAAU,GAAG,MAAM,CAAC,MAAP,CAAgB,UAAA,KAAK,EAAG;AAAA,MACtC,KADsC,GACA,KADA,CACtC,KADsC;AAAA,MAC/B,EAD+B,GACA,KADA,CAC/B,EAD+B;AAAA,MAC3B,IAD2B,GACA,KADA,CAC3B,IAD2B;AAAA,MACrB,OADqB,GACA,KADA,CACrB,OADqB;AAAA,MACZ,IADY,GACZ,MAAA,CAAA,KAAA,EAAA,CAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA,SAAA,CAAA,CADY;;AAE9C,MAAI,CAAC,EAAD,IAAO,CAAC,IAAR,IAAgB,CAAC,OAArB,EAA8B;AAC1B,WAAO,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,IAAL,CAAX,EAAuB,KAAvB,CAAP;AACH;;AACD,SAAO,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAX,EAAwB,KAAxB,CAAP;AACH,CANyB,EAMS;AAAE,EAAA,KAAK,EAAE;AACpC,QAAI,UAAJ,GAAc;AAAK,aAAO,UAAP;AAAyC,KADxB;;AAEpC,QAAI,UAAJ,GAAc;AAAK,aAAO,UAAP;AAAyC;;AAFxB;AAAT,CANT,CAAnB;AAUP,UAAU,CAAC,WAAX,GAAyB,YAAzB","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { Anchor, AnchorProps } from '../Anchor';\nimport { dark } from '../../colors';\nexport interface BreadcrumbProps extends AnchorProps {\n    /**\n     * The required title of the breadcrumb link.\n     */\n    title: string;\n    /**\n     * @ignore\n     */\n    children?: void;\n}\nconst StyledLink = styled(Anchor) `\n  text-decoration: none;\n  color: ${themed(props => props.theme.ui0)};\n  display: inline-block;\n  font-size: inherit;\n  white-space: nowrap;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\nconst StyledText = styled.span `\n  display: inline-block;\n  color: ${dark};\n`;\n/**\n * Represents a single Breadcrumb which is a special version of a link.\n */\nexport const Breadcrumb = Object.assign(((props => {\n    const { title, to, href, onClick, ...rest } = props;\n    if (!to && !href && !onClick) {\n        return <StyledText {...rest}>{title}</StyledText>;\n    }\n    return <StyledLink {...props}>{title}</StyledLink>;\n}) as React.SFC<BreadcrumbProps>), { inner: {\n        get StyledText() { return StyledText as typeof StyledText; },\n        get StyledLink() { return StyledLink as typeof StyledLink; }\n    } });\nBreadcrumb.displayName = 'Breadcrumb';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}