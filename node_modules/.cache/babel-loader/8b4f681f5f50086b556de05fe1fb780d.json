{"ast":null,"code":"import styled, { keyframes, css } from '../../utils/styled';\nimport { Blocker } from '../Blocker';\nimport * as React from 'react';\n\nconst InAnimation = () => keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nconst OutAnimation = () => keyframes`\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n`;\n\nconst animationDuration = 500;\nexport const StyledSidebarBlocker = styled(Blocker)(({\n  closing\n}) => css`\n    animation: ${closing ? OutAnimation() : InAnimation()} ${animationDuration}ms;\n    animation-fill-mode: forwards;\n  `);\nexport const SidebarBlocker = Object.assign(props => {\n  const [closed, setClosed] = React.useState(!props.open);\n  React.useEffect(() => {\n    if (props.open) {\n      setClosed(false);\n      return;\n    } else {\n      const timeout = setTimeout(() => setClosed(true), animationDuration);\n      return () => clearTimeout(timeout);\n    }\n  }, [props.open]); //tslint:disable-next-line\n\n  return !closed ? React.createElement(StyledSidebarBlocker, Object.assign({}, props, {\n    closing: !props.open\n  })) : null;\n}, {\n  inner: {\n    get StyledSidebarBlocker() {\n      return StyledSidebarBlocker;\n    }\n\n  }\n});","map":{"version":3,"sources":["../../../../src/components/Sidebar/SidebarBlocker.part.tsx"],"names":[],"mappings":"AAAA,OAAO,MAAP,IAAiB,SAAjB,EAA4B,GAA5B,QAAuC,oBAAvC;AACA,SAAS,OAAT,QAAsC,YAAtC;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;AAIA,MAAM,WAAW,GAAG,MAAM,SAAU;;;;;;;CAApC;;AAQA,MAAM,YAAY,GAAG,MAAM,SAAU;;;;;;;CAArC;;AAQA,MAAM,iBAAiB,GAAG,GAA1B;AACA,OAAO,MAAM,oBAAoB,GAAG,MAAM,CAAC,OAAD,CAAN,CAEjC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAiB,GAAI;iBACP,OAAO,GAAG,YAAY,EAAf,GAAoB,WAAW,EAAE,IAAI,iBAAiB;;GAH1C,CAA7B;AAMP,OAAO,MAAM,cAAc,GAAG,MAAM,CAAC,MAAP,CAAgB,KAAK,IAAG;AAClD,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,KAAK,CAAC,QAAN,CAAe,CAAC,KAAK,CAAC,IAAtB,CAA5B;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAK;AACjB,QAAI,KAAK,CAAC,IAAV,EAAgB;AACZ,MAAA,SAAS,CAAC,KAAD,CAAT;AACA;AACH,KAHD,MAIK;AACD,YAAM,OAAO,GAAG,UAAU,CAAC,MAAM,SAAS,CAAC,IAAD,CAAhB,EAAwB,iBAAxB,CAA1B;AACA,aAAO,MAAM,YAAY,CAAC,OAAD,CAAzB;AACH;AACJ,GATD,EASG,CAAC,KAAK,CAAC,IAAP,CATH,EAFkD,CAYlD;;AACA,SAAO,CAAC,MAAD,GAAU,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAqB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,OAAO,EAAE,CAAC,KAAK,CAAC;AAAlB,GAAV,CAArB,CAAV,GAAqE,IAA5E;AACH,CAd6B,EAcQ;AAAE,EAAA,KAAK,EAAE;AACvC,QAAI,oBAAJ,GAAwB;AAAK,aAAO,oBAAP;AAA6D;;AADnD;AAAT,CAdR,CAAvB","sourcesContent":["import styled, { keyframes, css } from '../../utils/styled';\nimport { Blocker, BlockerProps } from '../Blocker';\nimport * as React from 'react';\nexport interface SidebarBlockerProps extends BlockerProps {\n    open: boolean;\n}\nconst InAnimation = () => keyframes `\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\nconst OutAnimation = () => keyframes `\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n`;\nconst animationDuration = 500;\nexport const StyledSidebarBlocker = styled(Blocker)<{\n    closing: boolean;\n}>(({ closing }) => css `\n    animation: ${closing ? OutAnimation() : InAnimation()} ${animationDuration}ms;\n    animation-fill-mode: forwards;\n  `);\nexport const SidebarBlocker = Object.assign(((props => {\n    const [closed, setClosed] = React.useState(!props.open);\n    React.useEffect(() => {\n        if (props.open) {\n            setClosed(false);\n            return;\n        }\n        else {\n            const timeout = setTimeout(() => setClosed(true), animationDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open]);\n    //tslint:disable-next-line\n    return !closed ? <StyledSidebarBlocker {...props} closing={!props.open}/> : null;\n}) as React.FC<SidebarBlockerProps>), { inner: {\n        get StyledSidebarBlocker() { return StyledSidebarBlocker as typeof StyledSidebarBlocker; }\n    } });\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}