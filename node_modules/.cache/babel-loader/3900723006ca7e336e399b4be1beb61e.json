{"ast":null,"code":"import _taggedTemplateLiteral from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  background-color: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nvar Highlighted = styled.span(_templateObject(), themed(function (props) {\n  return props.theme.highlightColor;\n}));\n/**\n * Validates that the matches provided are valid, if not it will throw an error\n *\n * @param matches\n */\n\nfunction validateMatches(matches) {\n  var lastMatch = -1;\n\n  if (!Array.isArray(matches)) {\n    throw Error(\"match must be an Array of [start, end], but provided \".concat(JSON.stringify(matches)));\n  }\n\n  matches.forEach(function (match) {\n    if (!Array.isArray(match) || match.length !== 2) {\n      throw Error('match must be an Array of [start, end]');\n    }\n\n    if (!Number.isInteger(match[0]) || !Number.isInteger(match[1]) || match[0] < 0 || match[1] < 0) {\n      throw Error('match [start] and [end] must be a positive integers.');\n    }\n\n    if (match[0] >= match[1]) {\n      throw Error('[start] must be lower than [end].');\n    }\n\n    if (match[0] <= lastMatch) {\n      throw Error('match indices cannot overlap.');\n    }\n\n    lastMatch = match[1];\n  });\n}\n/**\n * Highlight component is meant to be a simple component to display text with highlighted search.\n * Component will render a SPAN or series of SPAN with the content and highlights\n */\n\n\nexport var Highlight = Object.assign(function (_ref) {\n  var text = _ref.text,\n      matches = _ref.matches,\n      highlight = _ref.highlight,\n      _ref$ignoreCase = _ref.ignoreCase,\n      ignoreCase = _ref$ignoreCase === void 0 ? true : _ref$ignoreCase,\n      theme = _ref.theme;\n\n  if (!matches && undefined === highlight) {\n    throw new Error('You must set either indices or highlight');\n  }\n\n  if (matches) {\n    validateMatches(matches);\n    var lastMatch = 0;\n    return React.createElement(React.Fragment, null, matches.map(function (match, i) {\n      var r = React.createElement(React.Fragment, {\n        key: i\n      }, React.createElement(\"span\", null, text.substring(lastMatch, match[0])), React.createElement(Highlighted, {\n        theme: theme\n      }, text.substring(match[0], match[1])));\n      lastMatch = match[1];\n      return r;\n    }), React.createElement(\"span\", null, text.substring(lastMatch, text.length)));\n  }\n\n  if (highlight === '') {\n    return React.createElement(React.Fragment, null, text);\n  } // Sanitized the user input to prevent them from using RegEx patterns\n\n\n  var sanitized = highlight && highlight.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  var parts = text.split(new RegExp(\"(\".concat(sanitized, \")\"), ignoreCase ? 'gi' : 'g')).filter(Boolean);\n  return React.createElement(React.Fragment, null, parts.map(function (part, i) {\n    return part.toLowerCase() === (highlight && highlight.toLowerCase()) ? React.createElement(Highlighted, {\n      theme: theme,\n      key: i\n    }, part) : React.createElement(\"span\", {\n      key: i\n    }, part);\n  }));\n}, {\n  inner: {\n    get Highlighted() {\n      return Highlighted;\n    }\n\n  }\n});\nHighlight.displayName = 'Highlight';","map":{"version":3,"sources":["../../../../src/components/Highlight/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nexport interface HighlightProps extends StandardProps {\n    /**\n     * String that needs to be rendered\n     */\n    text: string;\n    /**\n     * String that needs to be highlighted\n     */\n    highlight?: string;\n    /**\n     * Array that defines the indices to highlight, each element is an array of [start, end]\n     * In case this is procided then highlight will be ignored.\n     */\n    matches?: Array<Array<number>>;\n    /**\n     * Defines if the search will be case insensitive\n     */\n    ignoreCase?: boolean;\n}\nconst Highlighted = styled.span `\n  background-color: ${themed(props => props.theme.highlightColor)};\n`;\n/**\n * Validates that the matches provided are valid, if not it will throw an error\n *\n * @param matches\n */\nfunction validateMatches(matches: Array<Array<number>>) {\n    let lastMatch = -1;\n    if (!Array.isArray(matches)) {\n        throw Error(`match must be an Array of [start, end], but provided ${JSON.stringify(matches)}`);\n    }\n    matches.forEach(match => {\n        if (!Array.isArray(match) || match.length !== 2) {\n            throw Error('match must be an Array of [start, end]');\n        }\n        if (!Number.isInteger(match[0]) || !Number.isInteger(match[1]) || match[0] < 0 || match[1] < 0) {\n            throw Error('match [start] and [end] must be a positive integers.');\n        }\n        if (match[0] >= match[1]) {\n            throw Error('[start] must be lower than [end].');\n        }\n        if (match[0] <= lastMatch) {\n            throw Error('match indices cannot overlap.');\n        }\n        lastMatch = match[1];\n    });\n}\n/**\n * Highlight component is meant to be a simple component to display text with highlighted search.\n * Component will render a SPAN or series of SPAN with the content and highlights\n */\nexport const Highlight = Object.assign(((({ text, matches, highlight, ignoreCase = true, theme }) => {\n    if (!matches && undefined === highlight) {\n        throw new Error('You must set either indices or highlight');\n    }\n    if (matches) {\n        validateMatches(matches);\n        let lastMatch = 0;\n        return (<>\n        {matches.map((match, i) => {\n            const r = (<React.Fragment key={i}>\n              <span>{text.substring(lastMatch, match[0])}</span>\n              <Highlighted theme={theme}>{text.substring(match[0], match[1])}</Highlighted>\n            </React.Fragment>);\n            lastMatch = match[1];\n            return r;\n        })}\n        <span>{text.substring(lastMatch, text.length)}</span>\n      </>);\n    }\n    if (highlight === '') {\n        return <>{text}</>;\n    }\n    // Sanitized the user input to prevent them from using RegEx patterns\n    const sanitized = highlight && highlight.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    const parts = text.split(new RegExp(`(${sanitized})`, ignoreCase ? 'gi' : 'g')).filter(Boolean);\n    return (<>\n      {parts.map((part, i) => part.toLowerCase() === (highlight && highlight.toLowerCase()) ? (<Highlighted theme={theme} key={i}>\n            {part}\n          </Highlighted>) : (<span key={i}>{part}</span>))}\n    </>);\n}) as React.FC<HighlightProps>), { inner: {\n        get Highlighted() { return Highlighted as typeof Highlighted; }\n    } });\nHighlight.displayName = 'Highlight';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}