{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nconst StackChild = styled.div`\n  flex-grow: ${props => props.nofill ? '0' : '1'};\n  min-width: ${props => props.width || 'auto'};\n  height: ${props => props.height || 'auto'};\n`;\n/**\n * The stack item displays a single item within a stack panel.\n */\n\nexport class StackItem extends React.PureComponent {\n  render() {\n    const _a = this.props,\n          {\n      children\n    } = _a,\n          props = __rest(_a, [\"children\"]);\n\n    return React.createElement(StackChild, Object.assign({}, props), children);\n  }\n\n}\nStackItem.inner = {\n  get StackChild() {\n    return StackChild;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/StackItem/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AAoBA,MAAM,UAAU,GAAG,MAAM,CAAC,GAAoB;eAC/B,KAAK,IAAK,KAAK,CAAC,MAAN,GAAe,GAAf,GAAqB,GAAI;eACnC,KAAK,IAAI,KAAK,CAAC,KAAN,IAAe,MAAM;YACjC,KAAK,IAAI,KAAK,CAAC,MAAN,IAAgB,MAAM;CAH3C;AAKA;;;;AAGA,OAAM,MAAO,SAAP,SAAyB,KAAK,CAAC,aAA/B,CAA4D;AAC9D,EAAA,MAAM,GAAA;AACF,UAAM,EAAA,GAAA,KAAA,KAAN;AAAA,UAAM;AAAE,MAAA;AAAF,QAAU,EAAhB;AAAA,UAAkB,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,UAAA,CAAA,CAAlB;;AACA,WAAO,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAX,EAAwB,QAAxB,CAAP;AACH;;AAJ6D;AAKvD,SAAA,CAAA,KAAA,GAAQ;AACX,MAAI,UAAJ,GAAc;AAAK,WAAO,UAAP;AAAyC;;AADjD,CAAR","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { StandardProps } from '../../common';\nexport interface StackItemProps extends StandardProps {\n    /**\n     * Sets the items's children.\n     */\n    children?: React.ReactNode;\n    /**\n     * Sets the width of the item.\n     */\n    width?: string;\n    /**\n     * Sets the height of the item.\n     */\n    height?: string;\n    /**\n     * Determines if the item should not fill the remaining space.\n     */\n    nofill?: boolean;\n}\nconst StackChild = styled.div<StackItemProps> `\n  flex-grow: ${props => (props.nofill ? '0' : '1')};\n  min-width: ${props => props.width || 'auto'};\n  height: ${props => props.height || 'auto'};\n`;\n/**\n * The stack item displays a single item within a stack panel.\n */\nexport class StackItem extends React.PureComponent<StackItemProps> {\n    render() {\n        const { children, ...props } = this.props;\n        return <StackChild {...props}>{children}</StackChild>;\n    }\n    static inner = {\n        get StackChild() { return StackChild as typeof StackChild; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}