{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { distance } from '../../distance';\n\nfunction getAlignMargin(alignment) {\n  if (alignment !== 'center') {\n    return alignment === 'left' ? 'margin-right: auto' : 'margin-left: auto';\n  }\n\n  return 'margin: 0 auto';\n}\n\nconst FluidContainer = css`\n  width: 100%;\n`;\nconst FixedWidthContainer = css`\n  position: relative;\n  ${props => getAlignMargin(props.align)};\n  max-width: ${props => props.maxWidth}px;\n  padding: 0 ${distance.medium};\n`;\nconst StyledContainer = styled.div`\n  ${props => props.maxWidth ? FixedWidthContainer : FluidContainer};\n`;\nconst defaultAlign = 'center';\n/**\n * Represents a simple reusable container for outer layouts.\n */\n\nexport const Container = Object.assign(_a => {\n  var {\n    align = defaultAlign,\n    maxWidth = undefined,\n    innerRef\n  } = _a,\n      rest = __rest(_a, [\"align\", \"maxWidth\", \"innerRef\"]);\n\n  return React.createElement(StyledContainer, Object.assign({\n    align: align,\n    maxWidth: maxWidth,\n    ref: innerRef\n  }, rest));\n}, {\n  inner: {\n    get StyledContainer() {\n      return StyledContainer;\n    }\n\n  }\n});\nContainer.displayName = 'Container';","map":{"version":3,"sources":["../../../../src/components/Container/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,GAAjB,QAA4B,oBAA5B;AAEA,SAAS,QAAT,QAAyB,gBAAzB;;AA4BA,SAAS,cAAT,CAAwB,SAAxB,EAAqD;AACjD,MAAI,SAAS,KAAK,QAAlB,EAA4B;AACxB,WAAO,SAAS,KAAK,MAAd,GAAuB,oBAAvB,GAA8C,mBAArD;AACH;;AACD,SAAO,gBAAP;AACH;;AACD,MAAM,cAAc,GAAG,GAAI;;CAA3B;AAGA,MAAM,mBAAmB,GAAG,GAA8B;;IAEtD,KAAK,IAAI,cAAc,CAAC,KAAK,CAAC,KAAP,CAAa;eACzB,KAAK,IAAI,KAAK,CAAC,QAAQ;eACvB,QAAQ,CAAC,MAAM;CAJ9B;AAMA,MAAM,eAAe,GAAG,MAAM,CAAC,GAAI;IAC9B,KAAD,IAGE,KAAK,CAAC,QAAN,GAAiB,mBAAjB,GAAuC,cAAc;CAJ3D;AAMA,MAAM,YAAY,GAAuB,QAAzC;AACA;;;;AAGA,OAAO,MAAM,SAAS,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAAsE;MAArE;AAAE,IAAA,KAAK,GAAG,YAAV;AAAwB,IAAA,QAAQ,GAAG,SAAnC;AAA8C,IAAA;AAA9C,MAAsD,E;MAAE,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,UAAA,CAAA,C;;AAAc,SAAA,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE,KAAR;AAAe,IAAA,QAAQ,EAAE,QAAzB;AAAmC,IAAA,GAAG,EAAE;AAAxC,GAAA,EAAsD,IAAtD,CAAhB,CAAA;AAA6E,CAApK,EAAqM;AAAE,EAAA,KAAK,EAAE;AAC/N,QAAI,eAAJ,GAAmB;AAAK,aAAO,eAAP;AAAmD;;AADoJ;AAAT,CAArM,CAAlB;AAGP,SAAS,CAAC,WAAV,GAAwB,WAAxB","sourcesContent":["import * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { distance } from '../../distance';\nexport type ContainerAlignment = 'left' | 'center' | 'right';\nexport interface ContainerProps extends StandardProps {\n    /**\n     * Sets the children to display.\n     */\n    children?: React.ReactNode;\n    /**\n     * By default the container is fluid, meaning it occupies 100% of it's\n     * parent width, and by defining maxWidth property, container looses it's\n     * fluid behaviour and becomes defined with max-width.\n     */\n    maxWidth?: number;\n    /**\n     * Where the container content should be aligned. This property is only\n     * applicable in case when fullWidth is defined. By default, it is 'center'.\n     * @default center\n     */\n    align?: ContainerAlignment;\n    /**\n     * Gets the reference to the underlying HTML DOM element.\n     */\n    innerRef?(instance: HTMLElement | null): void;\n}\ninterface FixedWidthContainerProps {\n    maxWidth: number;\n    align: ContainerAlignment;\n}\nfunction getAlignMargin(alignment: ContainerAlignment) {\n    if (alignment !== 'center') {\n        return alignment === 'left' ? 'margin-right: auto' : 'margin-left: auto';\n    }\n    return 'margin: 0 auto';\n}\nconst FluidContainer = css `\n  width: 100%;\n`;\nconst FixedWidthContainer = css<FixedWidthContainerProps> `\n  position: relative;\n  ${props => getAlignMargin(props.align)};\n  max-width: ${props => props.maxWidth}px;\n  padding: 0 ${distance.medium};\n`;\nconst StyledContainer = styled.div `\n  ${(props: {\n    maxWidth?: number;\n    align: ContainerAlignment;\n}) => props.maxWidth ? FixedWidthContainer : FluidContainer};\n`;\nconst defaultAlign: ContainerAlignment = 'center';\n/**\n * Represents a simple reusable container for outer layouts.\n */\nexport const Container = Object.assign(((({ align = defaultAlign, maxWidth = undefined, innerRef, ...rest }) => <StyledContainer align={align} maxWidth={maxWidth} ref={innerRef} {...rest}/>) as React.SFC<ContainerProps>), { inner: {\n        get StyledContainer() { return StyledContainer as typeof StyledContainer; }\n    } });\nContainer.displayName = 'Container';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}