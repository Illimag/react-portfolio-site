{"ast":null,"code":"import _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\nimport { getWidthBreakpointsQuery, getScreenSizeBreakpoints, getMediaQueries } from '../../utils/displayTo';\nimport { light, breakpoints } from '../../themes';\nexport var Responsive = /*#__PURE__*/function (_React$Component) {\n  _inherits(Responsive, _React$Component);\n\n  var _super = _createSuper(Responsive);\n\n  function Responsive(props) {\n    var _this;\n\n    _classCallCheck(this, Responsive);\n\n    _this = _super.call(this, props);\n    _this.mediaQueriesToListen = {};\n\n    _this.updateMatches = function () {\n      _this.setState({\n        matchesTo: _this.currentlyMatches()\n      });\n    };\n\n    var _this$props = _this.props,\n        _this$props$theme = _this$props.theme,\n        theme = _this$props$theme === void 0 ? light : _this$props$theme,\n        screenSize = _this$props.screenSize,\n        _this$props$screenSiz = _this$props.screenSizeCondition,\n        screenSizeCondition = _this$props$screenSiz === void 0 ? 'equal' : _this$props$screenSiz,\n        render = _this$props.render;\n    var themedBreakpoints = Object.assign({}, breakpoints, theme.breakpoints);\n\n    if (screenSize) {\n      var screenSizeBreakpoints = _this.getBreakpoints(themedBreakpoints, screenSize, screenSizeCondition);\n\n      if (screenSizeBreakpoints) {\n        _this.mediaQueriesToListen[screenSize] = window.matchMedia(getWidthBreakpointsQuery(screenSizeBreakpoints));\n      }\n    } else {\n      var allMediaQueries = getMediaQueries(themedBreakpoints);\n\n      for (var _screenSize in allMediaQueries) {\n        _this.mediaQueriesToListen[_screenSize] = window.matchMedia(allMediaQueries[_screenSize]);\n      }\n    }\n\n    if (typeof render !== 'function' && !Object.keys(_this.mediaQueriesToListen).length) {\n      console.error('`render` callback method or valid `screenSize` and `screenSizeCondition` should be defined');\n    }\n\n    _this.state = {\n      matchesTo: undefined\n    };\n    return _this;\n  }\n\n  _createClass(Responsive, [{\n    key: \"getBreakpoints\",\n    value: function getBreakpoints(breakpoints, screenSize, screenSizeCondition) {\n      var screenSizeBreakpoints = getScreenSizeBreakpoints(screenSize, breakpoints);\n\n      if (!screenSizeBreakpoints) {\n        console.error(\"Invalid screen size \".concat(screenSize));\n        return;\n      }\n\n      switch (screenSizeCondition) {\n        case 'equal':\n          return Object.assign({}, screenSizeBreakpoints);\n\n        case 'from':\n          return Object.assign({}, screenSizeBreakpoints, {\n            max: undefined\n          });\n\n        case 'upTo':\n          return Object.assign({}, screenSizeBreakpoints, {\n            min: undefined\n          });\n\n        default:\n          console.error(\"Invalid screen size condition \".concat(screenSizeCondition));\n          return;\n      }\n    }\n  }, {\n    key: \"currentlyMatches\",\n    value: function currentlyMatches() {\n      var mediaQueries = this.mediaQueriesToListen;\n\n      for (var _i = 0, _Object$keys = Object.keys(mediaQueries); _i < _Object$keys.length; _i++) {\n        var screenSize = _Object$keys[_i];\n\n        if (mediaQueries[screenSize].matches) {\n          return screenSize;\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      for (var screenSizeListenTo in this.mediaQueriesToListen) {\n        this.mediaQueriesToListen[screenSizeListenTo].addListener(this.updateMatches);\n      }\n\n      this.updateMatches();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      for (var _i2 = 0, _Object$keys2 = Object.keys(this.mediaQueriesToListen); _i2 < _Object$keys2.length; _i2++) {\n        var sceenSize = _Object$keys2[_i2];\n        this.mediaQueriesToListen[sceenSize].removeListener(this.updateMatches);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          render = _this$props2.render;\n      var matchesTo = this.state.matchesTo;\n\n      if (render) {\n        return render(matchesTo);\n      } else {\n        return children && matchesTo ? React.createElement(React.Fragment, null, children) : false;\n      }\n    }\n  }]);\n\n  return Responsive;\n}(React.Component);","map":{"version":3,"sources":["../../../../src/components/Responsive/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getWidthBreakpointsQuery, getScreenSizeBreakpoints, getMediaQueries } from '../../utils/displayTo';\nimport { PreciseTheme, ScreenSize, Breakpoints } from '../../common';\nimport { light, breakpoints } from '../../themes';\nexport type ScreenSizeCondition = 'equal' | 'from' | 'upTo';\nexport interface ResponsiveProps {\n    /**\n     * Sets the screen size for which to show the children.\n     * Valid values are: 'small' | 'medium' | 'large' | 'xLarge' | 'max'\n     */\n    screenSize?: ScreenSize;\n    /**\n     * Sets the screen size check condition.\n     * Valid values are: 'equal' | 'from' | 'upTo'\n     * @default 'equal'\n     */\n    screenSizeCondition?: ScreenSizeCondition;\n    /**\n     * Sets the render callback. When screen size changes it's called with a new one.\n     */\n    render?(screenSize?: ScreenSize): React.ReactNode;\n    /**\n     * The content to be displayed when the query matches.\n     */\n    children?: React.ReactNode;\n    /**\n     * The theme to supply for setting the custom breakpoints, if any.\n     */\n    theme?: PreciseTheme;\n}\nexport interface ResponsiveState {\n    matchesTo?: ScreenSize;\n}\nexport class Responsive extends React.Component<ResponsiveProps, ResponsiveState> {\n    private mediaQueriesToListen: {\n        [size: string]: MediaQueryList;\n    } = {};\n    constructor(props: ResponsiveProps) {\n        super(props);\n        const { theme = light, screenSize, screenSizeCondition = 'equal', render } = this.props;\n        const themedBreakpoints = { ...breakpoints, ...theme.breakpoints };\n        if (screenSize) {\n            const screenSizeBreakpoints = this.getBreakpoints(themedBreakpoints, screenSize, screenSizeCondition);\n            if (screenSizeBreakpoints) {\n                this.mediaQueriesToListen[screenSize] = window.matchMedia(getWidthBreakpointsQuery(screenSizeBreakpoints));\n            }\n        }\n        else {\n            const allMediaQueries = getMediaQueries(themedBreakpoints);\n            for (const screenSize in allMediaQueries) {\n                this.mediaQueriesToListen[screenSize] = window.matchMedia(allMediaQueries[screenSize]);\n            }\n        }\n        if (typeof render !== 'function' && !Object.keys(this.mediaQueriesToListen).length) {\n            console.error('`render` callback method or valid `screenSize` and `screenSizeCondition` should be defined');\n        }\n        this.state = {\n            matchesTo: undefined,\n        };\n    }\n    private getBreakpoints(breakpoints: Breakpoints, screenSize: ScreenSize, screenSizeCondition: ScreenSizeCondition) {\n        const screenSizeBreakpoints = getScreenSizeBreakpoints(screenSize, breakpoints);\n        if (!screenSizeBreakpoints) {\n            console.error(`Invalid screen size ${screenSize}`);\n            return;\n        }\n        switch (screenSizeCondition) {\n            case 'equal':\n                return { ...screenSizeBreakpoints };\n            case 'from':\n                return { ...screenSizeBreakpoints, max: undefined };\n            case 'upTo':\n                return { ...screenSizeBreakpoints, min: undefined };\n            default:\n                console.error(`Invalid screen size condition ${screenSizeCondition}`);\n                return;\n        }\n    }\n    private currentlyMatches() {\n        const mediaQueries = this.mediaQueriesToListen;\n        for (const screenSize of Object.keys(mediaQueries)) {\n            if (mediaQueries[screenSize].matches) {\n                return screenSize as ScreenSize;\n            }\n        }\n        return undefined;\n    }\n    private updateMatches = () => {\n        this.setState({\n            matchesTo: this.currentlyMatches(),\n        });\n    };\n    componentDidMount() {\n        for (const screenSizeListenTo in this.mediaQueriesToListen) {\n            this.mediaQueriesToListen[screenSizeListenTo].addListener(this.updateMatches);\n        }\n        this.updateMatches();\n    }\n    componentWillUnmount() {\n        for (const sceenSize of Object.keys(this.mediaQueriesToListen)) {\n            this.mediaQueriesToListen[sceenSize].removeListener(this.updateMatches);\n        }\n    }\n    render() {\n        const { children, render } = this.props;\n        const { matchesTo } = this.state;\n        if (render) {\n            return render(matchesTo);\n        }\n        else {\n            return children && matchesTo ? <>{children}</> : false;\n        }\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}