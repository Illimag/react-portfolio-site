{"ast":null,"code":"import { NotificationAction } from './types';\nimport { eventManagers } from '../../utils/eventManager';\nconst defaultOptions = {\n  type: 'none',\n  autoClose: undefined\n};\n\nfunction mergeOptions(options, type) {\n  return Object.assign({}, defaultOptions, options, {\n    type\n  });\n}\n\nfunction emitEvent({\n  content,\n  options = {}\n}, type = 'none') {\n  const {\n    events: eventManagerOption\n  } = options;\n  const eventManager = eventManagerOption || eventManagers[0];\n  eventManager.emit(NotificationAction.showNotification, {\n    content,\n    options: mergeOptions(options, type)\n  });\n}\n\nexport const notify = Object.assign(payload => emitEvent(payload, payload.options && payload.options.type), {\n  success: payload => emitEvent(payload, 'success'),\n  info: payload => emitEvent(payload, 'info'),\n  warn: payload => emitEvent(payload, 'warning'),\n  warning: payload => emitEvent(payload, 'warning'),\n  error: payload => emitEvent(payload, 'error')\n});","map":{"version":3,"sources":["../../../../src/components/Notifications/notifier.ts"],"names":[],"mappings":"AAAA,SAAoE,kBAApE,QAA8F,SAA9F;AACA,SAAS,aAAT,QAA8B,0BAA9B;AAEA,MAAM,cAAc,GAAuB;AACzC,EAAA,IAAI,EAAE,MADmC;AAEzC,EAAA,SAAS,EAAE;AAF8B,CAA3C;;AAKA,SAAS,YAAT,CAAsB,OAAtB,EAAmD,IAAnD,EAAyE;AACvE,SAAO,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,cAAlB,EAAkC,OAAlC,EAA2C;AAAE,IAAA;AAAF,GAA3C,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB;AAAE,EAAA,OAAF;AAAW,EAAA,OAAO,GAAG;AAArB,CAAnB,EAAmE,IAAA,GAAyB,MAA5F,EAAkG;AAChG,QAAM;AAAE,IAAA,MAAM,EAAE;AAAV,MAAiC,OAAvC;AACA,QAAM,YAAY,GAAG,kBAAkB,IAAI,aAAa,CAAC,CAAD,CAAxD;AACA,EAAA,YAAY,CAAC,IAAb,CAAkB,kBAAkB,CAAC,gBAArC,EAAuD;AACrD,IAAA,OADqD;AAErD,IAAA,OAAO,EAAE,YAAY,CAAC,OAAD,EAAU,IAAV;AAFgC,GAAvD;AAID;;AAED,OAAO,MAAM,MAAM,GAAG,MAAM,CAAC,MAAP,CACnB,OAAD,IAAkC,SAAS,CAAC,OAAD,EAAU,OAAO,CAAC,OAAR,IAAmB,OAAO,CAAC,OAAR,CAAgB,IAA7C,CADvB,EAEpB;AACE,EAAA,OAAO,EAAG,OAAD,IAAkC,SAAS,CAAC,OAAD,EAAU,SAAV,CADtD;AAEE,EAAA,IAAI,EAAG,OAAD,IAAkC,SAAS,CAAC,OAAD,EAAU,MAAV,CAFnD;AAGE,EAAA,IAAI,EAAG,OAAD,IAAkC,SAAS,CAAC,OAAD,EAAU,SAAV,CAHnD;AAIE,EAAA,OAAO,EAAG,OAAD,IAAkC,SAAS,CAAC,OAAD,EAAU,SAAV,CAJtD;AAKE,EAAA,KAAK,EAAG,OAAD,IAAkC,SAAS,CAAC,OAAD,EAAU,OAAV;AALpD,CAFoB,CAAf","sourcesContent":["import { NotificationOption, NotificationType, NotificationOptions, NotificationAction } from './types';\nimport { eventManagers } from '../../utils/eventManager';\n\nconst defaultOptions: NotificationOption = {\n  type: 'none',\n  autoClose: undefined,\n};\n\nfunction mergeOptions(options: NotificationOption, type: NotificationType): NotificationOption {\n  return Object.assign({}, defaultOptions, options, { type });\n}\n\nfunction emitEvent({ content, options = {} }: NotificationOptions, type: NotificationType = 'none') {\n  const { events: eventManagerOption } = options;\n  const eventManager = eventManagerOption || eventManagers[0];\n  eventManager.emit(NotificationAction.showNotification, {\n    content,\n    options: mergeOptions(options, type),\n  });\n}\n\nexport const notify = Object.assign(\n  (payload: NotificationOptions) => emitEvent(payload, payload.options && payload.options.type),\n  {\n    success: (payload: NotificationOptions) => emitEvent(payload, 'success'),\n    info: (payload: NotificationOptions) => emitEvent(payload, 'info'),\n    warn: (payload: NotificationOptions) => emitEvent(payload, 'warning'),\n    warning: (payload: NotificationOptions) => emitEvent(payload, 'warning'),\n    error: (payload: NotificationOptions) => emitEvent(payload, 'error'),\n  },\n);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}