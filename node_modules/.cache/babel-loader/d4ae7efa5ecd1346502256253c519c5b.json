{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { ocean } from '../../colors';\nimport { IndicatorKnob } from '../IndicatorKnob';\nimport { InteractiveSurface } from '../InteractiveSurface';\nimport { withFormContext } from '../../hoc';\nimport { showInputInfo } from '../../utils/input';\nimport { distance } from '../../distance';\nimport { transparentize } from '../../utils';\nimport { Tooltip } from '../Tooltip';\n\nfunction percent(value) {\n  return typeof value === 'number' ? `${value * 100}%` : '50%';\n}\n\nconst transitionDuration = '0.3s';\nconst transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';\nconst SliderContainer = styled.div`\n  position: relative;\n  outline: 0;\n  height: 100%;\n`;\nconst SliderBar = styled(InteractiveSurface)`\n  position: relative;\n  padding: ${props => props.orientation === 'vertical' ? `0 ${distance.small}` : `${distance.small} 0`};\n  height: ${props => props.orientation === 'vertical' ? '100%' : distance.xsmall};\n  width: ${props => props.orientation === 'vertical' ? distance.xsmall : '100%'};\n  box-sizing: content-box;\n\n  &:after {\n    content: '';\n    display: block;\n    border-radius: ${distance.small};\n    height: 100%;\n    width: 100%;\n    background: ${themed(props => props.disabled ? props.theme.ui3 : props.active ? transparentize(ocean, 0.25) : transparentize(props.theme.ui4, 0.25))};\n    transition: background ${transitionDuration} ${transitionEase};\n  }\n\n  &:hover {\n    cursor: pointer;\n\n    &:after {\n      background: ${transparentize(ocean, 0.25)};\n    }\n  }\n`;\nconst IndicatorBar = styled('div')`\n  border-radius: ${distance.small};\n  background: ${themed(props => props.disabled ? props.theme.ui4 : props.active ? ocean : transparentize(props.theme.ui5, 0.75))};\n  transition: background ${transitionDuration} ${transitionEase};\n  height: ${props => props.vertical ? '100%' : distance.xsmall};\n  width: ${props => props.vertical ? distance.xsmall : 'auto'};\n  position: absolute;\n  margin: auto;\n`;\nconst TooltipContainer = styled('div')`\n  position: absolute;\n  ${props => props.vertical ? `top: ${props.value}` : `left: ${props.value}`};\n  ${props => props.vertical ? `left: ${distance.large}` : `top: -${distance.large}`};\n  width: 0;\n  height: 0;\n\n  > div {\n    display: ${props => props.vertical ? `block` : `inline-block`};\n  }\n`;\n\nclass SliderInt extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.updateValue = e => {\n      const {\n        maximum = 1,\n        minimum = 0\n      } = this.props;\n      const v = this.state.vertical ? 1 - e.y : e.x;\n      const position = minimum + v * (maximum - minimum);\n      const value = this.state.value;\n      const length = Array.isArray(value) ? value.length : 1;\n      const multi = length > 1;\n      const knob = this.state.active || (multi ? this.getClosestKnob(position) : 1);\n      this.setValue(position, e.active ? knob : 0);\n    };\n\n    this.control = e => {\n      const {\n        minimum = 0,\n        maximum = 1,\n        onInput\n      } = this.props;\n      const {\n        step = Math.min(1, (maximum - minimum) / 10)\n      } = this.props;\n      const {\n        active,\n        vertical\n      } = this.state;\n      const knob = active || 1;\n\n      switch (e.keyCode) {\n        case 38\n        /* up */\n        :\n        case 40\n        /* down */\n        :\n          this.controlKnob(vertical, 39 - e.keyCode, step);\n          break;\n\n        case 37\n        /* left */\n        :\n        case 39\n        /* right */\n        :\n          this.controlKnob(!vertical, e.keyCode - 38, step);\n          break;\n\n        case 36\n        /* home */\n        :\n          this.setValue(minimum, knob);\n          break;\n\n        case 35\n        /* end */\n        :\n          this.setValue(maximum, knob);\n          break;\n\n        case 27\n        /* escape */\n        :\n          this.setState({\n            active: 0\n          });\n\n        case 13\n        /* enter */\n        :\n        case 32\n        /* space */\n        :\n        default:\n          if (typeof onInput === 'function') {\n            onInput();\n          }\n\n          return;\n      }\n\n      e.preventDefault();\n    };\n\n    this.handleMouseEnter = () => {\n      this.setState({\n        hovered: true\n      });\n    };\n\n    this.handleMouseLeave = () => {\n      this.setState({\n        hovered: false\n      });\n    };\n\n    this.updateTooltipValue = val => {\n      const {\n        maximum = 1,\n        step\n      } = this.props;\n      const decimalPlaces = step && step < 1 ? this.countDecimals(step) : 0;\n      return !step && maximum <= 1 ? `${val.toFixed(1)}` : `${val.toFixed(decimalPlaces)}`;\n    };\n\n    const value = props.value || props.defaultValue;\n    this.state = {\n      value: Array.isArray(value) ? value : [value || 0],\n      vertical: props.orientation === 'vertical',\n      active: 0,\n      controlled: typeof props.value !== 'undefined',\n      hovered: false,\n      error: props.error\n    };\n  }\n\n  componentDidMount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.subscribe(this);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.unsubscribe(this);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps({\n    value = this.state.value,\n    error,\n    orientation\n  }) {\n    if (this.state.controlled) {\n      this.setState({\n        value\n      });\n    }\n\n    this.setState({\n      vertical: orientation === 'vertical',\n      error\n    });\n  }\n\n  getClosestKnob(current) {\n    const values = this.state.value;\n\n    if (Array.isArray(values)) {\n      const dists = values.map(val => Math.abs(val - current));\n      const length = dists.length;\n      let minIndex = 0;\n\n      for (let i = 0; i < length; i++) {\n        const curValue = dists[i];\n        const minValue = dists[minIndex];\n\n        if (curValue < minValue || curValue === minValue && current > values[i]) {\n          minIndex = i;\n        }\n      }\n\n      return minIndex + 1;\n    }\n\n    return 1;\n  }\n\n  selectValue(selected, knob) {\n    const {\n      margin = 0\n    } = this.props;\n    const current = this.state.value;\n\n    if (Array.isArray(current)) {\n      const value = [...current];\n      const upper = value[knob];\n      const lower = value[knob - 2];\n\n      if (lower + margin > selected) {\n        value[knob - 1] = lower + margin;\n      } else if (upper - margin < selected) {\n        value[knob - 1] = upper - margin;\n      } else {\n        value[knob - 1] = selected;\n      }\n\n      return value;\n    }\n\n    return selected;\n  }\n\n  setValue(position, knob) {\n    const {\n      onChange,\n      onChangeDone,\n      maximum = 1,\n      minimum = 0,\n      step = 0,\n      disabled,\n      form,\n      name = ''\n    } = this.props;\n\n    if (!disabled) {\n      const current = this.state.value;\n      const length = Array.isArray(current) ? current.length : 1;\n      const multi = length > 1;\n      const previous = Array.isArray(current) ? current[knob - 1] : current;\n      const valid = Math.abs(position - previous) >= step && position >= minimum && position <= maximum;\n      const selected = position - (step && (position - previous) % step);\n\n      if (!this.state.controlled && valid) {\n        const value = this.selectValue(selected, knob);\n\n        if (form) {\n          form.change({\n            name,\n            value\n          });\n        } else {\n          this.setState({\n            value\n          });\n        }\n      }\n\n      const event = {\n        value: selected,\n        index: knob - 1,\n        type: multi ? 'multi' : 'single'\n      };\n\n      if (valid && typeof onChange === 'function') {\n        onChange(event);\n      }\n\n      if (knob !== this.state.active) {\n        this.setState({\n          active: knob\n        });\n\n        if (!knob && valid && typeof onChangeDone === 'function') {\n          onChangeDone(event);\n        }\n      }\n    }\n  }\n\n  controlKnob(change, dir, step) {\n    const {\n      active,\n      value\n    } = this.state;\n    const length = Array.isArray(value) ? value.length : 1;\n    const multi = length > 1;\n    const knob = active || 1;\n\n    if (change) {\n      this.setValue(value[knob - 1] + dir * step, knob);\n    } else if (multi) {\n      const newActive = knob + dir;\n\n      if (newActive <= length && newActive > 0) {\n        this.setState({\n          active: newActive\n        });\n      }\n    }\n  }\n\n  countDecimals(val) {\n    if (Math.floor(val) === val) {\n      return 0;\n    }\n\n    return val.toString().split('.')[1].length || 0;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children: _0,\n      value: _1,\n      defaultValue: _2,\n      disabled,\n      onChange: _3,\n      onChangeDone: _4,\n      margin: _5,\n      step,\n      minimum = 0,\n      maximum = 1,\n      color,\n      theme,\n      info,\n      onBlur,\n      onFocus,\n      showTooltip\n    } = _a,\n          props = __rest(_a, [\"children\", \"value\", \"defaultValue\", \"disabled\", \"onChange\", \"onChangeDone\", \"margin\", \"step\", \"minimum\", \"maximum\", \"color\", \"theme\", \"info\", \"onBlur\", \"onFocus\", \"showTooltip\"]);\n\n    const {\n      value,\n      active,\n      vertical,\n      hovered,\n      error\n    } = this.state;\n    const values = Array.isArray(value) ? value : [value];\n    const ind = values.length === 1 ? 100 * (values[0] - minimum) / (maximum - minimum) : 0;\n    return React.createElement(SliderContainer, {\n      theme: theme,\n      tabIndex: 0,\n      onKeyDown: this.control,\n      onBlur: onBlur,\n      onFocus: onFocus,\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave\n    }, React.createElement(SliderBar, Object.assign({}, props, {\n      theme: theme,\n      onChange: this.updateValue,\n      active: active !== 0,\n      disabled: disabled\n    }), ind > 0 && React.createElement(IndicatorBar, {\n      style: {\n        [vertical ? 'height' : 'width']: `${ind}%`\n      },\n      vertical: vertical,\n      active: active !== 0 || hovered,\n      disabled: disabled\n    }), values.map((val, index) => React.createElement(\"div\", {\n      key: index\n    }, showTooltip && React.createElement(TooltipContainer, {\n      vertical: vertical,\n      value: percent(vertical ? 1.0 - (val - minimum) / (maximum - minimum) : (val - minimum) / (maximum - minimum))\n    }, React.createElement(Tooltip, {\n      content: this.updateTooltipValue(val),\n      position: vertical ? 'right' : 'top',\n      open: active === index + 1\n    })), React.createElement(IndicatorKnob, {\n      x: vertical ? 0.5 : (val - minimum) / (maximum - minimum),\n      y: vertical ? 1.0 - (val - minimum) / (maximum - minimum) : 0.5,\n      key: index,\n      color: color,\n      active: active === index + 1 || hovered,\n      theme: theme,\n      disabled: disabled\n    })))), showInputInfo(error, info));\n  }\n\n}\n\nSliderInt.inner = {\n  get SliderContainer() {\n    return SliderContainer;\n  },\n\n  get SliderBar() {\n    return SliderBar;\n  },\n\n  get IndicatorBar() {\n    return IndicatorBar;\n  },\n\n  get TooltipContainer() {\n    return TooltipContainer;\n  },\n\n  get Tooltip() {\n    return Tooltip;\n  },\n\n  get IndicatorKnob() {\n    return IndicatorKnob;\n  }\n\n};\n/**\n * The slider component displays a data value picker in form of a sliding bar.\n */\n\nexport const Slider = withFormContext(SliderInt);\nSlider.displayName = 'Slider';","map":{"version":3,"sources":["../../../../src/components/Slider/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { ocean } from '../../colors';\nimport { InputProps, InputChangeEvent } from '../../common';\nimport { IndicatorKnob } from '../IndicatorKnob';\nimport { InteractiveSurface, InteractiveSurfaceChangeEvent, InteractiveSurfaceProps } from '../InteractiveSurface';\nimport { withFormContext, FormContextProps } from '../../hoc';\nimport { showInputInfo } from '../../utils/input';\nimport { KeyCodes } from '../../utils';\nimport { distance } from '../../distance';\nimport { transparentize } from '../../utils';\nimport { Tooltip } from '../Tooltip';\nexport interface SliderChangeEvent extends InputChangeEvent<number> {\n    /**\n     * Gets the type of the changed value.\n     */\n    type: 'single' | 'multi';\n    /**\n     * Gets the index of the knob.\n     */\n    index: number;\n}\nexport interface SliderProps extends InputProps<number | Array<number>> {\n    /**\n     * @ignore\n     */\n    children?: void;\n    /**\n     * Defines the color of the indicator.\n     */\n    color?: string;\n    /**\n     * Optionally sets the minimum value of the slider. By default is set to 0.\n     * @default 0\n     */\n    minimum?: number;\n    /**\n     * Optionally sets the maximum value of the slider. By default is set to 1.\n     * @default 1\n     */\n    maximum?: number;\n    /**\n     * Optionally sets the margin between the values.\n     */\n    margin?: number;\n    /**\n     * The stepping to use. By default is set to 0, i.e., no fixed stepping / continuous mode.\n     * @default 0\n     */\n    step?: number;\n    /**\n     * Sets the orienatation of the slider. By default is set to horizontal.\n     * @default horizontal\n     */\n    orientation?: 'horizontal' | 'vertical';\n    /**\n     * Sets the slider as disabled, i.e., not movable.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * Show status tooltip\n     * @default false\n     */\n    showTooltip?: boolean;\n    /**\n     * Emitted once the slider's value changed.\n     */\n    onChange?(e: SliderChangeEvent): void;\n    /**\n     * Emitted once the slider's value changing done and value is ready.\n     */\n    onChangeDone?(e: SliderChangeEvent): void;\n}\nexport interface SliderState {\n    value: number | Array<number>;\n    error?: React.ReactChild;\n    active: number;\n    controlled: boolean;\n    vertical: boolean;\n    hovered: boolean;\n}\ninterface SliderBarProps extends InteractiveSurfaceProps {\n    orientation?: 'vertical' | 'horizontal';\n    disabled?: boolean;\n    active?: boolean;\n    theme: any;\n}\ninterface IndicatorBarProps {\n    disabled?: boolean;\n    active?: boolean;\n    vertical: boolean;\n}\ninterface TooltipContainerProps {\n    value: string;\n    vertical: boolean;\n}\nfunction percent(value?: number) {\n    return typeof value === 'number' ? `${value * 100}%` : '50%';\n}\nconst transitionDuration = '0.3s';\nconst transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';\nconst SliderContainer = styled.div `\n  position: relative;\n  outline: 0;\n  height: 100%;\n`;\nconst SliderBar = styled(InteractiveSurface)<SliderBarProps> `\n  position: relative;\n  padding: ${props => (props.orientation === 'vertical' ? `0 ${distance.small}` : `${distance.small} 0`)};\n  height: ${props => (props.orientation === 'vertical' ? '100%' : distance.xsmall)};\n  width: ${props => (props.orientation === 'vertical' ? distance.xsmall : '100%')};\n  box-sizing: content-box;\n\n  &:after {\n    content: '';\n    display: block;\n    border-radius: ${distance.small};\n    height: 100%;\n    width: 100%;\n    background: ${themed(props => props.disabled\n    ? props.theme.ui3\n    : props.active\n        ? transparentize(ocean, 0.25)\n        : transparentize(props.theme.ui4, 0.25))};\n    transition: background ${transitionDuration} ${transitionEase};\n  }\n\n  &:hover {\n    cursor: pointer;\n\n    &:after {\n      background: ${transparentize(ocean, 0.25)};\n    }\n  }\n`;\nconst IndicatorBar = styled('div')<IndicatorBarProps> `\n  border-radius: ${distance.small};\n  background: ${themed(props => props.disabled ? props.theme.ui4 : props.active ? ocean : transparentize(props.theme.ui5, 0.75))};\n  transition: background ${transitionDuration} ${transitionEase};\n  height: ${props => (props.vertical ? '100%' : distance.xsmall)};\n  width: ${props => (props.vertical ? distance.xsmall : 'auto')};\n  position: absolute;\n  margin: auto;\n`;\nconst TooltipContainer = styled('div')<TooltipContainerProps> `\n  position: absolute;\n  ${props => (props.vertical ? `top: ${props.value}` : `left: ${props.value}`)};\n  ${props => (props.vertical ? `left: ${distance.large}` : `top: -${distance.large}`)};\n  width: 0;\n  height: 0;\n\n  > div {\n    display: ${props => (props.vertical ? `block` : `inline-block`)};\n  }\n`;\nclass SliderInt extends React.PureComponent<SliderProps & FormContextProps, SliderState> {\n    constructor(props: SliderProps) {\n        super(props);\n        const value = props.value || props.defaultValue;\n        this.state = {\n            value: Array.isArray(value) ? value : [value || 0],\n            vertical: props.orientation === 'vertical',\n            active: 0,\n            controlled: typeof props.value !== 'undefined',\n            hovered: false,\n            error: props.error,\n        };\n    }\n    componentDidMount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    UNSAFE_componentWillReceiveProps({ value = this.state.value, error, orientation }: SliderProps) {\n        if (this.state.controlled) {\n            this.setState({ value });\n        }\n        this.setState({\n            vertical: orientation === 'vertical',\n            error,\n        });\n    }\n    private getClosestKnob(current: number) {\n        const values = this.state.value;\n        if (Array.isArray(values)) {\n            const dists = values.map(val => Math.abs(val - current));\n            const length = dists.length;\n            let minIndex = 0;\n            for (let i = 0; i < length; i++) {\n                const curValue = dists[i];\n                const minValue = dists[minIndex];\n                if (curValue < minValue || (curValue === minValue && current > values[i])) {\n                    minIndex = i;\n                }\n            }\n            return minIndex + 1;\n        }\n        return 1;\n    }\n    private selectValue(selected: number, knob: number) {\n        const { margin = 0 } = this.props;\n        const current = this.state.value;\n        if (Array.isArray(current)) {\n            const value = [...current];\n            const upper = value[knob];\n            const lower = value[knob - 2];\n            if (lower + margin > selected) {\n                value[knob - 1] = lower + margin;\n            }\n            else if (upper - margin < selected) {\n                value[knob - 1] = upper - margin;\n            }\n            else {\n                value[knob - 1] = selected;\n            }\n            return value;\n        }\n        return selected;\n    }\n    private setValue(position: number, knob: number) {\n        const { onChange, onChangeDone, maximum = 1, minimum = 0, step = 0, disabled, form, name = '' } = this.props;\n        if (!disabled) {\n            const current = this.state.value;\n            const length = Array.isArray(current) ? current.length : 1;\n            const multi = length > 1;\n            const previous = Array.isArray(current) ? current[knob - 1] : current;\n            const valid = Math.abs(position - previous) >= step && position >= minimum && position <= maximum;\n            const selected = position - (step && (position - previous) % step);\n            if (!this.state.controlled && valid) {\n                const value = this.selectValue(selected, knob);\n                if (form) {\n                    form.change({\n                        name,\n                        value,\n                    });\n                }\n                else {\n                    this.setState({\n                        value,\n                    });\n                }\n            }\n            const event: SliderChangeEvent = {\n                value: selected,\n                index: knob - 1,\n                type: multi ? 'multi' : 'single',\n            };\n            if (valid && typeof onChange === 'function') {\n                onChange(event);\n            }\n            if (knob !== this.state.active) {\n                this.setState({\n                    active: knob,\n                });\n                if (!knob && valid && typeof onChangeDone === 'function') {\n                    onChangeDone(event);\n                }\n            }\n        }\n    }\n    private updateValue = (e: InteractiveSurfaceChangeEvent) => {\n        const { maximum = 1, minimum = 0 } = this.props;\n        const v = this.state.vertical ? 1 - e.y : e.x;\n        const position = minimum + v * (maximum - minimum);\n        const value = this.state.value;\n        const length = Array.isArray(value) ? value.length : 1;\n        const multi = length > 1;\n        const knob = this.state.active || (multi ? this.getClosestKnob(position) : 1);\n        this.setValue(position, e.active ? knob : 0);\n    };\n    private controlKnob(change: boolean, dir: number, step: number) {\n        const { active, value } = this.state;\n        const length = Array.isArray(value) ? value.length : 1;\n        const multi = length > 1;\n        const knob = active || 1;\n        if (change) {\n            this.setValue(value[knob - 1] + dir * step, knob);\n        }\n        else if (multi) {\n            const newActive = knob + dir;\n            if (newActive <= length && newActive > 0) {\n                this.setState({\n                    active: newActive,\n                });\n            }\n        }\n    }\n    private control = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        const { minimum = 0, maximum = 1, onInput } = this.props;\n        const { step = Math.min(1, (maximum - minimum) / 10) } = this.props;\n        const { active, vertical } = this.state;\n        const knob = active || 1;\n        switch (e.keyCode) {\n            case KeyCodes.up:\n            case KeyCodes.down:\n                this.controlKnob(vertical, 39 - e.keyCode, step);\n                break;\n            case KeyCodes.left:\n            case KeyCodes.right:\n                this.controlKnob(!vertical, e.keyCode - 38, step);\n                break;\n            case KeyCodes.home:\n                this.setValue(minimum, knob);\n                break;\n            case KeyCodes.end:\n                this.setValue(maximum, knob);\n                break;\n            case KeyCodes.escape:\n                this.setState({\n                    active: 0,\n                });\n            case KeyCodes.enter:\n            case KeyCodes.space:\n            default:\n                if (typeof onInput === 'function') {\n                    onInput();\n                }\n                return;\n        }\n        e.preventDefault();\n    };\n    private handleMouseEnter = () => {\n        this.setState({ hovered: true });\n    };\n    private handleMouseLeave = () => {\n        this.setState({ hovered: false });\n    };\n    private countDecimals(val: number) {\n        if (Math.floor(val) === val) {\n            return 0;\n        }\n        return val.toString().split('.')[1].length || 0;\n    }\n    private updateTooltipValue = (val: number) => {\n        const { maximum = 1, step } = this.props;\n        const decimalPlaces = step && step < 1 ? this.countDecimals(step) : 0;\n        return !step && maximum <= 1 ? `${val.toFixed(1)}` : `${val.toFixed(decimalPlaces)}`;\n    };\n    render() {\n        const { children: _0, value: _1, defaultValue: _2, disabled, onChange: _3, onChangeDone: _4, margin: _5, step, minimum = 0, maximum = 1, color, theme, info, onBlur, onFocus, showTooltip, ...props } = this.props;\n        const { value, active, vertical, hovered, error } = this.state;\n        const values = Array.isArray(value) ? value : [value];\n        const ind = values.length === 1 ? (100 * (values[0] - minimum)) / (maximum - minimum) : 0;\n        return (<SliderContainer theme={theme} tabIndex={0} onKeyDown={this.control} onBlur={onBlur} onFocus={onFocus} onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n        <SliderBar {...props} theme={theme} onChange={this.updateValue} active={active !== 0} disabled={disabled}>\n          {ind > 0 && (<IndicatorBar style={{ [vertical ? 'height' : 'width']: `${ind}%` }} vertical={vertical} active={active !== 0 || hovered} disabled={disabled}/>)}\n          {values.map((val, index) => (<div key={index}>\n              {showTooltip && (<TooltipContainer vertical={vertical} value={percent(vertical ? 1.0 - (val - minimum) / (maximum - minimum) : (val - minimum) / (maximum - minimum))}>\n                  <Tooltip content={this.updateTooltipValue(val)} position={vertical ? 'right' : 'top'} open={active === index + 1}/>\n                </TooltipContainer>)}\n              <IndicatorKnob x={vertical ? 0.5 : (val - minimum) / (maximum - minimum)} y={vertical ? 1.0 - (val - minimum) / (maximum - minimum) : 0.5} key={index} color={color} active={active === index + 1 || hovered} theme={theme} disabled={disabled}/>\n            </div>))}\n        </SliderBar>\n        {showInputInfo(error, info)}\n      </SliderContainer>);\n    }\n    static inner = {\n        get SliderContainer() { return SliderContainer as typeof SliderContainer; },\n        get SliderBar() { return SliderBar as typeof SliderBar; },\n        get IndicatorBar() { return IndicatorBar as typeof IndicatorBar; },\n        get TooltipContainer() { return TooltipContainer as typeof TooltipContainer; },\n        get Tooltip() { return Tooltip as typeof Tooltip; },\n        get IndicatorKnob() { return IndicatorKnob as typeof IndicatorKnob; }\n    };\n}\n/**\n * The slider component displays a data value picker in form of a sliding bar.\n */\nexport const Slider = withFormContext(SliderInt);\nSlider.displayName = 'Slider';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}