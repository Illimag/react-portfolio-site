{"ast":null,"code":"import _toConsumableArray from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport memoize from 'memoize-one';\nimport { debounce } from '../../utils';\nimport { TagBuilder } from '../TagBuilder';\nimport { Autocomplete } from '../Autocomplete';\nexport var AutocompleteTagBuilderInt = /*#__PURE__*/function (_React$Component) {\n  _inherits(AutocompleteTagBuilderInt, _React$Component);\n\n  var _super = _createSuper(AutocompleteTagBuilderInt);\n\n  function AutocompleteTagBuilderInt(props) {\n    var _this;\n\n    _classCallCheck(this, AutocompleteTagBuilderInt);\n\n    _this = _super.call(this, props);\n\n    _this.removeValueByIndex = function (index) {\n      var value = _this.state.value;\n      var keys = Array.from(value.keys());\n      index = index >= 0 ? index : keys.length + index;\n\n      if (index >= 0 && index < keys.length) {\n        value.splice(index, 1);\n\n        var newValue = _toConsumableArray(value);\n\n        _this.updateValue(newValue);\n      }\n    };\n\n    _this.getTagsArray = memoize(function (value) {\n      return value.map(function (x) {\n        return _this.getSuggestionValue(x);\n      });\n    });\n\n    _this.tagRemoveHandler = function (index) {\n      _this.removeValueByIndex(index);\n    };\n\n    _this.suggestionSelectedHandler = function (e) {\n      _this.addSuggestion(e.value);\n    };\n\n    _this.inputChangeHandler = function (e) {\n      _this.changeInputValue(e.value);\n    };\n\n    _this.inputRefHandler = function (node) {\n      _this._inputNode = node;\n    };\n\n    _this.tagBuilderRenderer = function (inputProps) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          tagRenderer = _this$props.tagRenderer,\n          _this$props$borderles = _this$props.borderless,\n          borderless = _this$props$borderles === void 0 ? false : _this$props$borderles;\n      var value = _this.state.value;\n\n      var onChange = inputProps.onChange,\n          inputValue = inputProps.value,\n          restProps = __rest(inputProps, [\"onChange\", \"value\"]);\n\n      var tagBuilderValue = _this.getTagsArray(value);\n\n      return React.createElement(TagBuilder, Object.assign({}, restProps, {\n        disabled: disabled,\n        inputValue: inputValue,\n        onInput: onChange,\n        value: tagBuilderValue,\n        tagRenderer: tagRenderer,\n        borderless: borderless,\n        onBeforeTagRemove: _this.tagRemoveHandler\n      }));\n    };\n\n    var _this$props2 = _this.props,\n        nullableValue = _this$props2.value,\n        defaultValue = _this$props2.defaultValue,\n        onInputChange = _this$props2.onInputChange,\n        inputValue = _this$props2.inputValue,\n        _this$props2$delay = _this$props2.delay,\n        delay = _this$props2$delay === void 0 ? 0 : _this$props2$delay;\n    var value = nullableValue || defaultValue || [];\n    _this.state = {\n      value: value,\n      inputValue: inputValue || '',\n      controlled: props.value !== undefined || inputValue !== undefined\n    };\n    _this._fireOnInputChange = debounce(function (value) {\n      onInputChange && onInputChange({\n        value: value\n      });\n    }, delay);\n    return _this;\n  }\n\n  _createClass(AutocompleteTagBuilderInt, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.state.controlled) {\n        var value = nextProps.value,\n            inputValue = nextProps.inputValue;\n        this.setState({\n          value: value || [],\n          inputValue: inputValue || ''\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var form = this.props.form;\n      var controlled = this.state.controlled;\n\n      if (!controlled && form) {\n        form.subscribe(this);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var form = this.props.form;\n      var controlled = this.state.controlled;\n\n      if (!controlled && form) {\n        form.unsubscribe(this);\n      }\n    }\n  }, {\n    key: \"addSuggestion\",\n    value: function addSuggestion(suggestion) {\n      var _this2 = this;\n\n      var value = this.state.value;\n      var key = this.getSuggestionKey(suggestion);\n      var suggestionAlreadyAdded = value.some(function (x) {\n        return _this2.getSuggestionKey(x) === key;\n      });\n\n      if (!suggestionAlreadyAdded) {\n        var newValue = _toConsumableArray(value);\n\n        newValue.push(suggestion);\n        this.updateValue(newValue);\n      }\n\n      this.changeInputValue('');\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(newValue) {\n      var _this$props3 = this.props,\n          onChange = _this$props3.onChange,\n          _this$props3$name = _this$props3.name,\n          name = _this$props3$name === void 0 ? '' : _this$props3$name,\n          form = _this$props3.form;\n\n      if (!this.state.controlled) {\n        if (form) {\n          form.change({\n            name: name,\n            value: newValue\n          });\n        } else {\n          this.setState({\n            value: newValue\n          });\n        }\n      }\n\n      if (this._inputNode) {\n        this._inputNode.focus();\n      }\n\n      if (typeof onChange === 'function') {\n        onChange({\n          value: newValue\n        });\n      }\n    }\n  }, {\n    key: \"changeInputValue\",\n    value: function changeInputValue(newValue) {\n      if (!this.state.controlled) {\n        this.setState({\n          inputValue: newValue\n        });\n      }\n\n      this._fireOnInputChange(newValue);\n    }\n  }, {\n    key: \"getSuggestionValue\",\n    value: function getSuggestionValue(item) {\n      var getSuggestionValue = this.props.getSuggestionValue;\n\n      if (typeof item === 'string') {\n        return item;\n      } else if (typeof getSuggestionValue === 'function') {\n        return getSuggestionValue(item);\n      } else {\n        throw new Error('Get suggestion value should be specified');\n      }\n    }\n  }, {\n    key: \"getSuggestionKey\",\n    value: function getSuggestionKey(item) {\n      var getSuggestionKey = this.props.getSuggestionKey;\n\n      if (typeof item === 'string') {\n        return item;\n      } else if (typeof getSuggestionKey === 'function') {\n        return getSuggestionKey(item);\n      } else {\n        throw new Error('Get suggestion key should be specified');\n      }\n    }\n  }, {\n    key: \"defaultSuggestionRenderer\",\n    value: function defaultSuggestionRenderer(suggestion) {\n      return {\n        content: this.getSuggestionValue(suggestion),\n        key: this.getSuggestionKey(suggestion)\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props4 = this.props,\n          _this$props4$suggesti = _this$props4.suggestions,\n          suggestions = _this$props4$suggesti === void 0 ? [] : _this$props4$suggesti,\n          noSuggestionsMessage = _this$props4.noSuggestionsMessage,\n          disabled = _this$props4.disabled,\n          _this$props4$renderSu = _this$props4.renderSuggestion,\n          renderSuggestion = _this$props4$renderSu === void 0 ? function (item) {\n        return _this3.defaultSuggestionRenderer(item);\n      } : _this$props4$renderSu,\n          label = _this$props4.label,\n          placeholder = _this$props4.placeholder,\n          info = _this$props4.info,\n          _this$props4$borderle = _this$props4.borderless,\n          borderless = _this$props4$borderle === void 0 ? false : _this$props4$borderle,\n          error = _this$props4.error,\n          onBlur = _this$props4.onBlur,\n          onFocus = _this$props4.onFocus;\n      var inputValue = this.state.inputValue;\n      return React.createElement(Autocomplete, {\n        noSuggestionsMessage: noSuggestionsMessage,\n        suggestions: suggestions,\n        inputRenderer: this.tagBuilderRenderer,\n        renderSuggestion: renderSuggestion,\n        disabled: disabled,\n        value: inputValue,\n        onChange: this.inputChangeHandler,\n        onSuggestionSelected: this.suggestionSelectedHandler,\n        inputRef: this.inputRefHandler,\n        label: label,\n        placeholder: placeholder,\n        info: info,\n        error: error,\n        borderless: borderless,\n        onBlur: onBlur,\n        onFocus: onFocus\n      });\n    }\n  }]);\n\n  return AutocompleteTagBuilderInt;\n}(React.Component);\nAutocompleteTagBuilderInt.inner = {\n  get TagBuilder() {\n    return TagBuilder;\n  },\n\n  get Autocomplete() {\n    return Autocomplete;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/AutocompleteTagBuilder/AutocompleteTagBuilder.int.part.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport memoize from 'memoize-one';\nimport { FormContextProps } from '../../hoc/withFormContext';\nimport { InputChangeEvent } from '../../common';\nimport { AutocompleteTagBuilderProps, AutocompleteTagBuilderState } from './AutocompleteTagBuilder.types.part';\nimport { debounce } from '../../utils';\nimport { TagBuilder } from '../TagBuilder';\nimport { Autocomplete, AutocompleteInputProps, AutosuggestSelectEvent } from '../Autocomplete';\nexport class AutocompleteTagBuilderInt<T> extends React.Component<AutocompleteTagBuilderProps<T> & FormContextProps, AutocompleteTagBuilderState<T>> {\n    private _fireOnInputChange: (q: string) => void;\n    private _inputNode: HTMLElement | null;\n    public constructor(props: AutocompleteTagBuilderProps<T>) {\n        super(props);\n        const { value: nullableValue, defaultValue, onInputChange, inputValue, delay = 0 } = this.props;\n        const value = nullableValue || defaultValue || [];\n        this.state = {\n            value: value,\n            inputValue: inputValue || '',\n            controlled: props.value !== undefined || inputValue !== undefined,\n        };\n        this._fireOnInputChange = debounce((value: string) => {\n            onInputChange && onInputChange({ value });\n        }, delay);\n    }\n    public UNSAFE_componentWillReceiveProps(nextProps: AutocompleteTagBuilderProps<T>) {\n        if (this.state.controlled) {\n            const { value, inputValue } = nextProps;\n            this.setState({\n                value: value || [],\n                inputValue: inputValue || '',\n            });\n        }\n    }\n    public componentDidMount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    public componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    private addSuggestion(suggestion: T) {\n        const { value } = this.state;\n        const key = this.getSuggestionKey(suggestion);\n        const suggestionAlreadyAdded = value.some(x => this.getSuggestionKey(x) === key);\n        if (!suggestionAlreadyAdded) {\n            const newValue = [...value];\n            newValue.push(suggestion);\n            this.updateValue(newValue);\n        }\n        this.changeInputValue('');\n    }\n    private removeValueByIndex = (index: number) => {\n        const { value } = this.state;\n        const keys = Array.from(value.keys());\n        index = index >= 0 ? index : keys.length + index;\n        if (index >= 0 && index < keys.length) {\n            value.splice(index, 1);\n            const newValue = [...value];\n            this.updateValue(newValue);\n        }\n    };\n    private updateValue(newValue: Array<T>) {\n        const { onChange, name = '', form } = this.props;\n        if (!this.state.controlled) {\n            if (form) {\n                form.change({\n                    name,\n                    value: newValue,\n                });\n            }\n            else {\n                this.setState({\n                    value: newValue,\n                });\n            }\n        }\n        if (this._inputNode) {\n            this._inputNode.focus();\n        }\n        if (typeof onChange === 'function') {\n            onChange({ value: newValue });\n        }\n    }\n    private changeInputValue(newValue: string) {\n        if (!this.state.controlled) {\n            this.setState({\n                inputValue: newValue,\n            });\n        }\n        this._fireOnInputChange(newValue);\n    }\n    private getSuggestionValue(item: T) {\n        const { getSuggestionValue } = this.props;\n        if (typeof item === 'string') {\n            return item;\n        }\n        else if (typeof getSuggestionValue === 'function') {\n            return getSuggestionValue(item);\n        }\n        else {\n            throw new Error('Get suggestion value should be specified');\n        }\n    }\n    private getSuggestionKey(item: T) {\n        const { getSuggestionKey } = this.props;\n        if (typeof item === 'string') {\n            return item;\n        }\n        else if (typeof getSuggestionKey === 'function') {\n            return getSuggestionKey(item);\n        }\n        else {\n            throw new Error('Get suggestion key should be specified');\n        }\n    }\n    private getTagsArray = memoize((value: Array<T>) => {\n        return value.map(x => this.getSuggestionValue(x));\n    });\n    private defaultSuggestionRenderer(suggestion: T) {\n        return {\n            content: this.getSuggestionValue(suggestion),\n            key: this.getSuggestionKey(suggestion),\n        };\n    }\n    private tagRemoveHandler = (index: number) => {\n        this.removeValueByIndex(index);\n    };\n    private suggestionSelectedHandler = (e: AutosuggestSelectEvent<T>) => {\n        this.addSuggestion(e.value);\n    };\n    private inputChangeHandler = (e: InputChangeEvent<string>) => {\n        this.changeInputValue(e.value);\n    };\n    private inputRefHandler = (node: HTMLElement | null) => {\n        this._inputNode = node;\n    };\n    private tagBuilderRenderer = (inputProps: AutocompleteInputProps) => {\n        const { disabled, tagRenderer, borderless = false } = this.props;\n        const { value } = this.state;\n        const { onChange, value: inputValue, ...restProps } = inputProps;\n        const tagBuilderValue = this.getTagsArray(value);\n        return (<TagBuilder {...restProps} disabled={disabled} inputValue={inputValue} onInput={onChange} value={tagBuilderValue} tagRenderer={tagRenderer} borderless={borderless} onBeforeTagRemove={this.tagRemoveHandler}/>);\n    };\n    public render() {\n        const { suggestions = [], noSuggestionsMessage, disabled, renderSuggestion = (item: T) => this.defaultSuggestionRenderer(item), label, placeholder, info, borderless = false, error, onBlur, onFocus, } = this.props;\n        const { inputValue } = this.state;\n        return (<Autocomplete noSuggestionsMessage={noSuggestionsMessage} suggestions={suggestions} inputRenderer={this.tagBuilderRenderer} renderSuggestion={renderSuggestion} disabled={disabled} value={inputValue} onChange={this.inputChangeHandler} onSuggestionSelected={this.suggestionSelectedHandler} inputRef={this.inputRefHandler} label={label} placeholder={placeholder} info={info} error={error} borderless={borderless} onBlur={onBlur} onFocus={onFocus}/>);\n    }\n    static inner = {\n        get TagBuilder() { return TagBuilder as typeof TagBuilder; },\n        get Autocomplete() { return Autocomplete as typeof Autocomplete; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}