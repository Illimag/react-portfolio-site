{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed, keyframes } from '../../utils/styled';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nconst spinningWidth = 50;\nconst ProgressContainer = styled.div`\n  color: ${themed(props => props.theme.text6)};\n`;\nconst ProgressRail = styled('div')`\n  position: relative;\n  border: 0;\n  background: ${themed(props => props.theme.ui4)};\n  height: ${({\n  type\n}) => type === 'secondary' ? distance.xsmall : distance.xxsmall};\n`;\nconst ProgressTitle = styled.div`\n  ${getFontStyle({\n  size: 'medium'\n})}\n\n  margin: 0 0 ${distance.medium};\n  padding: 0;\n  display: block;\n`;\nconst ProgressDescription = styled.div`\n  ${getFontStyle({\n  size: 'small'\n})}\n\n  margin: ${distance.small} 0 0;\n`;\nconst ProgressIndicator = styled.div`\n  border-radius: inherit;\n  border: 0;\n  background: ${themed(props => props.theme.ui0)};\n  height: 100%;\n  width: 0;\n`;\nconst ProgressStop = styled('div')`\n  border-radius: ${distance.small};\n  position: absolute;\n  width: ${distance.small};\n  height: ${distance.small};\n  background: ${themed(props => props.active ? props.theme.ui7 : props.theme.text2)};\n  top: 50%;\n  transform: translateY(-50%);\n`;\nconst SpinningAnimation = keyframes`\n  from {\n    left: -${spinningWidth}%;\n  }\n  to {\n    left: 100%;\n  }\n`;\nconst MaskContainer = styled.div`\n  position: relative;\n  overflow: hidden;\n  height: 100%;\n`;\nconst ProgressAnimation = styled.div`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  left: -${spinningWidth}%;\n  animation: ${SpinningAnimation} 2s linear infinite;\n`;\n\nfunction getPercent(current, minimum, maximum) {\n  const value = ~~(100 * (current - minimum) / (maximum - minimum));\n  const percent = Math.min(Math.max(0, value), 100);\n  return `${percent}%`;\n}\n\nfunction spinning(child) {\n  return React.createElement(MaskContainer, null, React.createElement(ProgressAnimation, null, child));\n}\n/**\n * The progress bar component displays a progress indicator ranging from min to max.\n */\n\n\nexport const ProgressBar = Object.assign(_a => {\n  var {\n    minimum = 0,\n    maximum = 100,\n    value: propValue,\n    title,\n    description,\n    animate,\n    stops = [],\n    type = 'primary',\n    theme\n  } = _a,\n      rest = __rest(_a, [\"minimum\", \"maximum\", \"value\", \"title\", \"description\", \"animate\", \"stops\", \"type\", \"theme\"]);\n\n  const value = (animate === 'spinning' ? spinningWidth : propValue) || 0;\n  const width = getPercent(value, minimum, maximum);\n  const transition = animate ? 'width 200ms' : 'none';\n  const indicator = React.createElement(ProgressIndicator, {\n    style: {\n      width,\n      transition\n    },\n    theme: theme\n  });\n  return React.createElement(ProgressContainer, {\n    theme: theme\n  }, !!title && React.createElement(ProgressTitle, {\n    theme: theme\n  }, title), React.createElement(ProgressRail, Object.assign({\n    type: type,\n    theme: theme\n  }, rest), animate === 'spinning' ? spinning(indicator) : indicator, stops.map((stop, index) => React.createElement(ProgressStop, {\n    key: `${index}-at-${stop}`,\n    style: {\n      left: getPercent(stop, minimum, maximum)\n    },\n    active: stop <= value,\n    theme: theme\n  }))), !!description && React.createElement(ProgressDescription, {\n    theme: theme\n  }, description));\n}, {\n  inner: {\n    get ProgressIndicator() {\n      return ProgressIndicator;\n    },\n\n    get ProgressContainer() {\n      return ProgressContainer;\n    },\n\n    get ProgressTitle() {\n      return ProgressTitle;\n    },\n\n    get ProgressRail() {\n      return ProgressRail;\n    },\n\n    get ProgressStop() {\n      return ProgressStop;\n    },\n\n    get ProgressDescription() {\n      return ProgressDescription;\n    }\n\n  }\n});\nProgressBar.displayName = 'ProgressBar';","map":{"version":3,"sources":["../../../../src/components/ProgressBar/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed, keyframes } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\n/**\n * ProgressBar type.\n */\nexport type ProgressBarType = 'primary' | 'secondary';\nexport interface ProgressBarProps extends StandardProps {\n    /**\n     * @ignore\n     */\n    children?: void;\n    /**\n     * Shows animations between value updates.\n     * @default false\n     */\n    animate?: boolean | 'spinning';\n    /**\n     * The minimum value, which is by default 0.\n     * @default 0\n     */\n    minimum?: number;\n    /**\n     * The maximum value, which is by default 100.\n     * @default 100\n     */\n    maximum?: number;\n    /**\n     * The current value, which is by default 0.\n     * @default 0\n     */\n    value?: number;\n    /**\n     * The optional title to be displayed.\n     */\n    title?: string;\n    /**\n     * The optional stops to be displayed.\n     */\n    stops?: Array<number>;\n    /**\n     * The optional description to be displayed.\n     */\n    description?: string;\n    /**\n     * Sets the progress bar type. By default primary.\n     * @default primary\n     */\n    type?: ProgressBarType;\n}\nexport interface StopProps {\n    active: boolean;\n}\nexport interface ProgressContainerProps {\n    type: ProgressBarType;\n}\nconst spinningWidth = 50;\nconst ProgressContainer = styled.div `\n  color: ${themed(props => props.theme.text6)};\n`;\nconst ProgressRail = styled('div')<ProgressContainerProps> `\n  position: relative;\n  border: 0;\n  background: ${themed(props => props.theme.ui4)};\n  height: ${({ type }) => (type === 'secondary' ? distance.xsmall : distance.xxsmall)};\n`;\nconst ProgressTitle = styled.div `\n  ${getFontStyle({ size: 'medium' })}\n\n  margin: 0 0 ${distance.medium};\n  padding: 0;\n  display: block;\n`;\nconst ProgressDescription = styled.div `\n  ${getFontStyle({ size: 'small' })}\n\n  margin: ${distance.small} 0 0;\n`;\nconst ProgressIndicator = styled.div `\n  border-radius: inherit;\n  border: 0;\n  background: ${themed(props => props.theme.ui0)};\n  height: 100%;\n  width: 0;\n`;\nconst ProgressStop = styled('div')<StopProps & React.HTMLProps<HTMLInputElement>> `\n  border-radius: ${distance.small};\n  position: absolute;\n  width: ${distance.small};\n  height: ${distance.small};\n  background: ${themed(props => (props.active ? props.theme.ui7 : props.theme.text2))};\n  top: 50%;\n  transform: translateY(-50%);\n`;\nconst SpinningAnimation = keyframes `\n  from {\n    left: -${spinningWidth}%;\n  }\n  to {\n    left: 100%;\n  }\n`;\nconst MaskContainer = styled.div `\n  position: relative;\n  overflow: hidden;\n  height: 100%;\n`;\nconst ProgressAnimation = styled.div `\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  left: -${spinningWidth}%;\n  animation: ${SpinningAnimation} 2s linear infinite;\n`;\nfunction getPercent(current: number, minimum: number, maximum: number) {\n    const value = ~~((100 * (current - minimum)) / (maximum - minimum));\n    const percent = Math.min(Math.max(0, value), 100);\n    return `${percent}%`;\n}\nfunction spinning(child: React.ReactChild) {\n    return (<MaskContainer>\n      <ProgressAnimation>{child}</ProgressAnimation>\n    </MaskContainer>);\n}\n/**\n * The progress bar component displays a progress indicator ranging from min to max.\n */\nexport const ProgressBar = Object.assign(((({ minimum = 0, maximum = 100, value: propValue, title, description, animate, stops = [], type = 'primary' as 'primary', theme, ...rest }) => {\n    const value = (animate === 'spinning' ? spinningWidth : propValue) || 0;\n    const width = getPercent(value, minimum, maximum);\n    const transition = animate ? 'width 200ms' : 'none';\n    const indicator = <ProgressIndicator style={{ width, transition }} theme={theme}/>;\n    return (<ProgressContainer theme={theme}>\n      {!!title && <ProgressTitle theme={theme}>{title}</ProgressTitle>}\n      <ProgressRail type={type} theme={theme} {...rest}>\n        {animate === 'spinning' ? spinning(indicator) : indicator}\n        {stops.map((stop, index) => (<ProgressStop key={`${index}-at-${stop}`} style={{ left: getPercent(stop, minimum, maximum) }} active={stop <= value} theme={theme}/>))}\n      </ProgressRail>\n      {!!description && <ProgressDescription theme={theme}>{description}</ProgressDescription>}\n    </ProgressContainer>);\n}) as React.SFC<ProgressBarProps>), { inner: {\n        get ProgressIndicator() { return ProgressIndicator as typeof ProgressIndicator; },\n        get ProgressContainer() { return ProgressContainer as typeof ProgressContainer; },\n        get ProgressTitle() { return ProgressTitle as typeof ProgressTitle; },\n        get ProgressRail() { return ProgressRail as typeof ProgressRail; },\n        get ProgressStop() { return ProgressStop as typeof ProgressStop; },\n        get ProgressDescription() { return ProgressDescription as typeof ProgressDescription; }\n    } });\nProgressBar.displayName = 'ProgressBar';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}