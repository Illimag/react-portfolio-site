{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nconst Bulleted = css`\n  padding: 0;\n`;\nconst StyledList = styled.ul`\n  flex: 1 1 auto;\n  flex-direction: column;\n  margin: 0;\n  position: relative;\n  overflow-x: hidden;\n  list-style: ${props => props.bullets || 'none'};\n  ${props => props.bullets && props.bullets !== 'none' ? '' : Bulleted};\n`;\n/**\n * General purpose list component which can be used for rendering list items.\n */\n\nexport const List = Object.assign(_a => {\n  var {\n    disablePadding,\n    borderless,\n    children,\n    activeItem\n  } = _a,\n      props = __rest(_a, [\"disablePadding\", \"borderless\", \"children\", \"activeItem\"]);\n\n  const listItems = React.Children.map(children, (child, index) => React.isValidElement(child) ? React.cloneElement(child, Object.assign({}, disablePadding !== undefined ? {\n    disablePadding\n  } : undefined, borderless !== undefined ? {\n    border: !borderless\n  } : undefined, child.props, activeItem !== undefined ? {\n    active: index === activeItem\n  } : {})) : child);\n  return React.createElement(StyledList, Object.assign({}, props), listItems);\n}, {\n  inner: {\n    get StyledList() {\n      return StyledList;\n    }\n\n  }\n});\nList.displayName = 'List';","map":{"version":3,"sources":["../../../../src/components/List/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,GAAjB,QAA4B,oBAA5B;AA0BA,MAAM,QAAQ,GAAG,GAAI;;CAArB;AAGA,MAAM,UAAU,GAAG,MAAM,CAAC,EAAc;;;;;;gBAMxB,KAAK,IAAI,KAAK,CAAC,OAAN,IAAiB,MAAM;IAC5C,KAAK,IAAK,KAAK,CAAC,OAAN,IAAiB,KAAK,CAAC,OAAN,KAAkB,MAAnC,GAA4C,EAA5C,GAAiD,QAAS;CAPxE;AASA;;;;AAGA,OAAO,MAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAAmE;MAAlE;AAAE,IAAA,cAAF;AAAkB,IAAA,UAAlB;AAA8B,IAAA,QAA9B;AAAwC,IAAA;AAAxC,MAAkD,E;MAAE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,CAAA,C;;AACrF,QAAM,SAAS,GAAG,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,QAAnB,EAA6B,CAAC,KAAD,EAAQ,KAAR,KAAkB,KAAK,CAAC,cAAN,CAAqB,KAArB,IAC3D,KAAK,CAAC,YAAN,CAAmB,KAAnB,EAAwB,MAAA,CAAA,MAAA,CAAA,EAAA,EAClB,cAAc,KAAK,SAAnB,GAA+B;AAAE,IAAA;AAAF,GAA/B,GAAoD,SADlC,EAElB,UAAU,KAAK,SAAf,GAA2B;AAAE,IAAA,MAAM,EAAE,CAAC;AAAX,GAA3B,GAAqD,SAFnC,EAGnB,KAAK,CAAC,KAHa,EAIlB,UAAU,KAAK,SAAf,GAA2B;AAAE,IAAA,MAAM,EAAE,KAAK,KAAK;AAApB,GAA3B,GAA8D,EAJ5C,CAAxB,CAD2D,GAO3D,KAPY,CAAlB;AAQA,SAAO,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAX,EAAwB,SAAxB,CAAP;AACH,CAVmB,EAUS;AAAE,EAAA,KAAK,EAAE;AAC9B,QAAI,UAAJ,GAAc;AAAK,aAAO,UAAP;AAAyC;;AAD9B;AAAT,CAVT,CAAb;AAaP,IAAI,CAAC,WAAL,GAAmB,MAAnB","sourcesContent":["import * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nexport interface ListProps extends StandardProps {\n    /**\n     * Index of the active item.\n     */\n    activeItem?: number;\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Switches the default to render a border on each list item.\n     */\n    borderless?: boolean;\n    /**\n     * If `true`, padding will be removed from the children list.\n     * Used to remove padding from the child components.\n     */\n    disablePadding?: boolean;\n    /**\n     * Shows the given bullet style.\n     * @default 'none'\n     */\n    bullets?: 'none' | 'disc' | 'square';\n}\nconst Bulleted = css `\n  padding: 0;\n`;\nconst StyledList = styled.ul<ListProps> `\n  flex: 1 1 auto;\n  flex-direction: column;\n  margin: 0;\n  position: relative;\n  overflow-x: hidden;\n  list-style: ${props => props.bullets || 'none'};\n  ${props => (props.bullets && props.bullets !== 'none' ? '' : Bulleted)};\n`;\n/**\n * General purpose list component which can be used for rendering list items.\n */\nexport const List = Object.assign(((({ disablePadding, borderless, children, activeItem, ...props }) => {\n    const listItems = React.Children.map(children, (child, index) => React.isValidElement(child)\n        ? React.cloneElement(child, {\n            ...(disablePadding !== undefined ? { disablePadding } : undefined),\n            ...(borderless !== undefined ? { border: !borderless } : undefined),\n            ...child.props,\n            ...(activeItem !== undefined ? { active: index === activeItem } : {}),\n        })\n        : child);\n    return <StyledList {...props}>{listItems}</StyledList>;\n}) as React.SFC<ListProps>), { inner: {\n        get StyledList() { return StyledList as typeof StyledList; }\n    } });\nList.displayName = 'List';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}