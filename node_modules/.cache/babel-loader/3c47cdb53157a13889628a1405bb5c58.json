{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { Autocomplete } from '../Autocomplete';\nimport { debounce } from '../../utils/debounce';\nimport { Icon } from '../Icon';\nimport { light } from '../../themes';\nimport { Button } from '../Button';\nimport styled from '../../utils/styled';\nconst SearchContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\nconst SearchButton = styled(Button)`\n  height: 54px;\n  width: 54px;\n  margin: 0;\n`;\nconst defaultDebounceDelay = 200;\n/**\n * A search field for user search queries.\n */\n\nexport class SearchField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyDown = e => {\n      e.keyCode === 13\n      /* enter */\n      && this.fireSearch(this.state.query);\n    };\n\n    this.onSearchClick = () => {\n      const {\n        onSearch\n      } = this.props;\n      typeof onSearch === 'function' && onSearch({\n        query: this.state.query\n      });\n    };\n\n    this.onClear = () => {\n      const {\n        onClear,\n        triggerMode = 'auto'\n      } = this.props;\n      typeof onClear === 'function' && onClear(); // In case, triggerMode is set to manual, clicking on clear should also trigger the search.\n\n      triggerMode === 'manual' && this.fireSearch('');\n    };\n\n    this.onSuggestionSelected = e => {\n      const {\n        onSuggestionSelected,\n        triggerMode = 'auto'\n      } = this.props;\n      typeof onSuggestionSelected === 'function' && onSuggestionSelected(e); // In case, triggerMode is set to manual, selecting a suggestion should also trigger the search.\n\n      triggerMode === 'manual' && this.fireSearch(String(e.value));\n    };\n\n    this.change = e => {\n      const {\n        onChange,\n        triggerMode = 'auto'\n      } = this.props;\n      this.setState({\n        query: e.value\n      });\n      typeof onChange === 'function' && onChange(e);\n      triggerMode === 'auto' && this.fireSearch(e.value);\n    };\n\n    const {\n      delay = defaultDebounceDelay\n    } = props;\n    this.state = {\n      query: ''\n    };\n    this.fireSearch = debounce(query => {\n      const {\n        onSearch\n      } = this.props;\n      typeof onSearch === 'function' && onSearch({\n        query\n      });\n    }, delay);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      onSearch,\n      delay,\n      icon = 'Search',\n      triggerMode = 'auto'\n    } = _a,\n          rest = __rest(_a, [\"onSearch\", \"delay\", \"icon\", \"triggerMode\"]);\n\n    const autoTrigger = triggerMode === 'auto';\n    const fieldIconColor = rest.theme && rest.theme.text2 || light.text2;\n    const buttonIconColor = rest.theme && rest.theme.text4 || light.text4;\n    const searchFieldIcon = React.createElement(Icon, {\n      name: icon,\n      color: fieldIconColor,\n      size: \"22px\"\n    });\n    const searchButtonIcon = React.createElement(Icon, {\n      name: icon,\n      color: buttonIconColor,\n      size: \"22px\"\n    });\n    return React.createElement(SearchContainer, {\n      onKeyDown: this.handleKeyDown\n    }, React.createElement(Autocomplete, Object.assign({}, rest, {\n      onClear: this.onClear,\n      onChange: this.change,\n      onSuggestionSelected: this.onSuggestionSelected,\n      icon: autoTrigger ? searchFieldIcon : React.createElement(React.Fragment, null)\n    })), !autoTrigger && React.createElement(SearchButton, {\n      disabled: rest.disabled,\n      onClick: this.onSearchClick\n    }, searchButtonIcon));\n  }\n\n}\nSearchField.inner = {\n  get Icon() {\n    return Icon;\n  },\n\n  get SearchContainer() {\n    return SearchContainer;\n  },\n\n  get Autocomplete() {\n    return Autocomplete;\n  },\n\n  get SearchButton() {\n    return SearchButton;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/SearchField/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Autocomplete, AutocompleteProps, AutosuggestSelectEvent } from '../Autocomplete';\nimport { InputChangeEvent } from '../../common';\nimport { debounce } from '../../utils/debounce';\nimport { Icon, IconName } from '../Icon';\nimport { light } from '../../themes';\nimport { Button } from '../Button';\nimport styled from '../../utils/styled';\nimport { KeyCodes } from '../../utils/keyCodes';\nconst SearchContainer = styled.div `\n  display: flex;\n  flex-direction: row;\n`;\nconst SearchButton = styled(Button) `\n  height: 54px;\n  width: 54px;\n  margin: 0;\n`;\nexport interface SearchEvent {\n    query: string;\n}\nexport interface SearchFieldProps<T> extends AutocompleteProps<T> {\n    /**\n     * @ignore\n     */\n    children?: void;\n    /**\n     * The icon to be used for the search.\n     * @default Search\n     */\n    icon?: IconName;\n    /**\n     * Defines whether the search triggers onSearch on every keystroke or\n     * by manually clicking on a button or pressing enter.\n     *\n     * @default \"auto\"\n     */\n    triggerMode?: 'auto' | 'manual';\n    /**\n     * The debounce time in milliseconds.\n     * @default 200\n     */\n    delay?: number;\n    /**\n     * The event fired when the search is triggered.\n     */\n    onSearch?(ev: SearchEvent): void;\n    /**\n     * Always `true` on Searchfield components.\n     * @ignore\n     */\n    clearable?: boolean;\n}\nconst defaultDebounceDelay = 200;\ntype SearchFieldState = SearchEvent;\n/**\n * A search field for user search queries.\n */\nexport class SearchField<T> extends React.Component<SearchFieldProps<T>, SearchFieldState> {\n    private fireSearch: (q: string) => void;\n    constructor(props: SearchFieldProps<T>) {\n        super(props);\n        const { delay = defaultDebounceDelay } = props;\n        this.state = { query: '' };\n        this.fireSearch = debounce((query: string) => {\n            const { onSearch } = this.props;\n            typeof onSearch === 'function' && onSearch({ query });\n        }, delay);\n    }\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n        e.keyCode === KeyCodes.enter && this.fireSearch(this.state.query);\n    };\n    private onSearchClick = () => {\n        const { onSearch } = this.props;\n        typeof onSearch === 'function' && onSearch({ query: this.state.query });\n    };\n    private onClear = () => {\n        const { onClear, triggerMode = 'auto' } = this.props;\n        typeof onClear === 'function' && onClear();\n        // In case, triggerMode is set to manual, clicking on clear should also trigger the search.\n        triggerMode === 'manual' && this.fireSearch('');\n    };\n    private onSuggestionSelected = (e: AutosuggestSelectEvent<T>) => {\n        const { onSuggestionSelected, triggerMode = 'auto' } = this.props;\n        typeof onSuggestionSelected === 'function' && onSuggestionSelected(e);\n        // In case, triggerMode is set to manual, selecting a suggestion should also trigger the search.\n        triggerMode === 'manual' && this.fireSearch(String(e.value));\n    };\n    private change = (e: InputChangeEvent<string>) => {\n        const { onChange, triggerMode = 'auto' } = this.props;\n        this.setState({ query: e.value });\n        typeof onChange === 'function' && onChange(e);\n        triggerMode === 'auto' && this.fireSearch(e.value);\n    };\n    render() {\n        const { onSearch, delay, icon = 'Search', triggerMode = 'auto', ...rest } = this.props;\n        const autoTrigger = triggerMode === 'auto';\n        const fieldIconColor = (rest.theme && rest.theme.text2) || light.text2;\n        const buttonIconColor = (rest.theme && rest.theme.text4) || light.text4;\n        const searchFieldIcon = <Icon name={icon} color={fieldIconColor} size=\"22px\"/>;\n        const searchButtonIcon = <Icon name={icon} color={buttonIconColor} size=\"22px\"/>;\n        return (<SearchContainer onKeyDown={this.handleKeyDown}>\n        <Autocomplete {...rest} onClear={this.onClear} onChange={this.change} onSuggestionSelected={this.onSuggestionSelected} icon={autoTrigger ? searchFieldIcon : <></>}/>\n        {!autoTrigger && (<SearchButton disabled={rest.disabled} onClick={this.onSearchClick}>\n            {searchButtonIcon}\n          </SearchButton>)}\n      </SearchContainer>);\n    }\n    static inner = {\n        get Icon() { return Icon as typeof Icon; },\n        get SearchContainer() { return SearchContainer as typeof SearchContainer; },\n        get Autocomplete() { return Autocomplete as typeof Autocomplete; },\n        get SearchButton() { return SearchButton as typeof SearchButton; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}