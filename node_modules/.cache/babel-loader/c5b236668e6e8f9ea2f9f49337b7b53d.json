{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as colors from '../../colors';\nimport onClickOutside from 'react-onclickoutside';\nimport styled, { themed } from '../../utils/styled';\nimport { Icon } from '../Icon';\nimport { InteractiveList } from '../InteractiveList';\nimport { distance } from '../../distance';\nimport { Flyout } from '../Flyout';\nimport { getFontStyle } from '../../textStyles';\nconst RootContainer = styled.div`\n  position: relative;\n  margin-right: ${distance.xlarge};\n  &:last-child {\n    margin-right: 0;\n  }\n`;\nconst StyledInteractiveList = styled(InteractiveList)`\n  position: static;\n  white-space: nowrap;\n\n  ul {\n    background: ${themed(props => props.theme.ui1)};\n  }\n`;\nconst DropdownButton = styled.div`\n  color: ${props => props.open ? colors.cyan : colors.grey2};\n  ${({\n  menuSize\n}) => getFontStyle({\n  size: menuSize\n})};\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  span {\n    margin-left: ${distance.small};\n  }\n  &:hover {\n    color: ${colors.cyan};\n  }\n`;\n\nclass DropdownMenuInt extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleClickOutside = () => {\n      this.container && this.state.open && this.toggleOpen();\n    };\n\n    this.setContainer = el => {\n      this.container = el;\n    };\n\n    this.handleKeyDown = e => {\n      switch (e.keyCode) {\n        case 32\n        /* space */\n        :\n        case 13\n        /* enter */\n        :\n        case 40\n        /* down */\n        :\n          this.toggleOpen();\n          break;\n      }\n    };\n\n    this.handleButtonMouseDown = e => {\n      this.toggleOpen();\n      e.preventDefault();\n    };\n\n    this.handleBlur = () => {\n      this.toggleOpen(false);\n    };\n\n    this.handleChange = e => {\n      const {\n        onChange,\n        keepOpen\n      } = this.props;\n\n      if (typeof onChange === 'function') {\n        onChange({\n          indices: e.value\n        });\n      }\n\n      if (!keepOpen) {\n        this.toggleOpen(false);\n      }\n    };\n\n    this.state = {\n      open: false\n    };\n  }\n\n  toggleOpen(force) {\n    const {\n      open\n    } = this.state;\n    const {\n      items,\n      onToggle\n    } = this.props;\n    const newState = force ? force : !open;\n    this.setState({\n      open: newState && !!items.length\n    }, () => {\n      if (typeof onToggle === 'function') {\n        onToggle({\n          open: this.state.open\n        });\n      }\n    });\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      items = [],\n      text = '',\n      icon,\n      onChange: _0,\n      menuSize = 'normal',\n      iconSize = 1\n    } = _a,\n          rest = __rest(_a, [\"items\", \"text\", \"icon\", \"onChange\", \"menuSize\", \"iconSize\"]);\n\n    const {\n      open\n    } = this.state;\n    return React.createElement(RootContainer, {\n      ref: this.setContainer\n    }, React.createElement(Flyout, {\n      open: open,\n      noGutter: true,\n      content: React.createElement(StyledInteractiveList, {\n        borderless: true,\n        open: open,\n        data: items,\n        autoFocus: true,\n        onBlur: this.handleBlur,\n        onChange: this.handleChange\n      })\n    }, React.createElement(DropdownButton, Object.assign({\n      tabIndex: 0,\n      onKeyDown: this.handleKeyDown,\n      onMouseDown: this.handleButtonMouseDown,\n      open: open,\n      menuSize: menuSize\n    }, rest), icon && React.createElement(Icon, {\n      name: icon,\n      size: iconSize\n    }), React.createElement(\"span\", null, text))));\n  }\n\n}\n\nDropdownMenuInt.inner = {\n  get RootContainer() {\n    return RootContainer;\n  },\n\n  get Flyout() {\n    return Flyout;\n  },\n\n  get DropdownButton() {\n    return DropdownButton;\n  },\n\n  get Icon() {\n    return Icon;\n  }\n\n};\n/**\n * A dropdown menu for displaying menu items.\n */\n\nexport const DropdownMenu = onClickOutside(DropdownMenuInt);\nDropdownMenu.displayName = 'DropdownMenu';","map":{"version":3,"sources":["../../../../src/components/DropdownMenu/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as colors from '../../colors';\nimport onClickOutside, { AdditionalProps } from 'react-onclickoutside';\nimport styled, { themed } from '../../utils/styled';\nimport { Icon, IconName } from '../Icon';\nimport { InteractiveList, InteractiveListItem, InteractiveListChangeEvent } from '../InteractiveList';\nimport { StandardProps } from '../../common';\nimport { KeyCodes } from '../../utils/keyCodes';\nimport { distance } from '../../distance';\nimport { Flyout } from '../Flyout';\nimport { FontSize, getFontStyle } from '../../textStyles';\nexport interface DropdownMenuChangeEvent {\n    /**\n     * The indices of the items that have been selected.\n     */\n    indices: Array<number>;\n}\nexport interface DropdownMenuToggleEvent {\n    /**\n     * The menu is currently closed or opened.\n     */\n    open: boolean;\n}\nexport interface DropdownMenuProps extends StandardProps {\n    /**\n     * The text to display.\n     */\n    text?: string;\n    /**\n     * The optional icon (name) to use.\n     */\n    icon?: IconName;\n    /**\n     * The items of the menu.\n     */\n    items: Array<InteractiveListItem>;\n    /**\n     * Defines the size of the menu.\n     * @default 'normal\n     */\n    menuSize?: FontSize;\n    /**\n     * Should the menu be kept open when losing focus.\n     */\n    keepOpen?: boolean;\n    /**\n     * Event fired when the selected item changes.\n     */\n    onChange?(e: DropdownMenuChangeEvent): void;\n    /**\n     * The icon size to use.\n     */\n    iconSize?: number | string;\n    /**\n     * Event fired when menu opened | closed.\n     */\n    onToggle?(e: DropdownMenuToggleEvent): void;\n    /**\n     * @ignore\n     */\n    children?: void;\n}\nexport interface DropdownMenuState {\n    open: boolean;\n}\ninterface DropdownButtonProps {\n    open: boolean;\n    menuSize: FontSize;\n}\nconst RootContainer = styled.div `\n  position: relative;\n  margin-right: ${distance.xlarge};\n  &:last-child {\n    margin-right: 0;\n  }\n`;\nconst StyledInteractiveList = styled(InteractiveList) `\n  position: static;\n  white-space: nowrap;\n\n  ul {\n    background: ${themed(props => props.theme.ui1)};\n  }\n`;\nconst DropdownButton = styled.div<DropdownButtonProps> `\n  color: ${props => (props.open ? colors.cyan : colors.grey2)};\n  ${({ menuSize }) => getFontStyle({ size: menuSize })};\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  span {\n    margin-left: ${distance.small};\n  }\n  &:hover {\n    color: ${colors.cyan};\n  }\n`;\nclass DropdownMenuInt extends React.PureComponent<DropdownMenuProps, DropdownMenuState> {\n    private container: HTMLDivElement | null;\n    constructor(props: DropdownMenuProps) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n    }\n    handleClickOutside = () => {\n        this.container && this.state.open && this.toggleOpen();\n    };\n    private setContainer = (el: HTMLDivElement) => {\n        this.container = el;\n    };\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        switch (e.keyCode) {\n            case KeyCodes.space:\n            case KeyCodes.enter:\n            case KeyCodes.down:\n                this.toggleOpen();\n                break;\n        }\n    };\n    private handleButtonMouseDown = (e: React.MouseEvent<HTMLDivElement> | React.KeyboardEvent<HTMLDivElement>) => {\n        this.toggleOpen();\n        e.preventDefault();\n    };\n    private toggleOpen(force?: boolean) {\n        const { open } = this.state;\n        const { items, onToggle } = this.props;\n        const newState = force ? force : !open;\n        this.setState({\n            open: newState && !!items.length,\n        }, () => {\n            if (typeof onToggle === 'function') {\n                onToggle({\n                    open: this.state.open,\n                });\n            }\n        });\n    }\n    private handleBlur = () => {\n        this.toggleOpen(false);\n    };\n    private handleChange = (e: InteractiveListChangeEvent) => {\n        const { onChange, keepOpen } = this.props;\n        if (typeof onChange === 'function') {\n            onChange({\n                indices: e.value,\n            });\n        }\n        if (!keepOpen) {\n            this.toggleOpen(false);\n        }\n    };\n    render() {\n        const { items = [], text = '', icon, onChange: _0, menuSize = 'normal' as FontSize, iconSize = 1, ...rest } = this.props;\n        const { open } = this.state;\n        return (<RootContainer ref={this.setContainer}>\n        <Flyout open={open} noGutter content={<StyledInteractiveList borderless open={open} data={items} autoFocus onBlur={this.handleBlur} onChange={this.handleChange}/>}>\n          <DropdownButton tabIndex={0} onKeyDown={this.handleKeyDown} onMouseDown={this.handleButtonMouseDown} open={open} menuSize={menuSize} {...rest}>\n            {icon && <Icon name={icon} size={iconSize}/>}\n            <span>{text}</span>\n          </DropdownButton>\n        </Flyout>\n      </RootContainer>);\n    }\n    static inner = {\n        get RootContainer() { return RootContainer as typeof RootContainer; },\n        get Flyout() { return Flyout as typeof Flyout; },\n        get DropdownButton() { return DropdownButton as typeof DropdownButton; },\n        get Icon() { return Icon as typeof Icon; }\n    };\n}\n/**\n * A dropdown menu for displaying menu items.\n */\nexport const DropdownMenu: React.ComponentClass<DropdownMenuProps & AdditionalProps> = onClickOutside(DropdownMenuInt);\nDropdownMenu.displayName = 'DropdownMenu';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}