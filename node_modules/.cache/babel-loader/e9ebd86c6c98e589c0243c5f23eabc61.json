{"ast":null,"code":"import * as React from 'react';\nimport { IconNames } from './icon.types';\nexport const registeredIcons = {};\n/**\n * Registers subset of SVG icons.\n * @param icons  Map of icons with SVG definition.\n *\n * To be able to register icons and extend type definitions in Typescript,\n * interface `AdditionalIconNames `with registered icon names should be provided\n * in global scope for interface augmentation. Example shown below\n *\n * @example\n *\n * ```\n * declare global {\n *   interface AdditionalIconNames {\n *     Foo: string;\n *     Bar: string;\n *   }\n * }\n *\n * registerIcons({\n *   Foo: *some svg value*,\n *   Bar: *some svg value*,\n * })\n * ```\n */\n\nexport function registerIcons(icons) {\n  for (const name in icons) {\n    if (process.env.NODE_ENV === 'development' && (registeredIcons[name] || IconNames[name])) {\n      console.error(`An icon with the name ${name} is already registered`);\n    }\n\n    registeredIcons[name] = icons[name];\n  }\n}\nexport function getIcon(name) {\n  if (registeredIcons[name]) {\n    return props => React.cloneElement(registeredIcons[name], props);\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../../../../src/components/Icon/registerIcons.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,SAAT,QAA0B,cAA1B;AAMA,OAAO,MAAM,eAAe,GAAoB,EAAzC;AAEP;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAM,SAAU,aAAV,CAAwB,KAAxB,EAA8C;AAClD,OAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACxB,QAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,aAAzB,KAA2C,eAAe,CAAC,IAAD,CAAf,IAAyB,SAAS,CAAC,IAAD,CAA7E,CAAJ,EAA0F;AACxF,MAAA,OAAO,CAAC,KAAR,CAAc,yBAAyB,IAAI,wBAA3C;AACD;;AAED,IAAA,eAAe,CAAC,IAAD,CAAf,GAAwB,KAAK,CAAC,IAAD,CAA7B;AACD;AACF;AAED,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAA8B;AAClC,MAAI,eAAe,CAAC,IAAD,CAAnB,EAA2B;AACzB,WAAQ,KAAD,IAAyB,KAAK,CAAC,YAAN,CAAmB,eAAe,CAAC,IAAD,CAAlC,EAA0C,KAA1C,CAAhC;AACD;;AACD,SAAO,SAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { SvgIconProps } from './icons';\nimport { IconNames } from './icon.types';\n\nexport interface IconDefinitions {\n  [key: string]: JSX.Element;\n}\n\nexport const registeredIcons: IconDefinitions = {};\n\n/**\n * Registers subset of SVG icons.\n * @param icons  Map of icons with SVG definition.\n *\n * To be able to register icons and extend type definitions in Typescript,\n * interface `AdditionalIconNames `with registered icon names should be provided\n * in global scope for interface augmentation. Example shown below\n *\n * @example\n *\n * ```\n * declare global {\n *   interface AdditionalIconNames {\n *     Foo: string;\n *     Bar: string;\n *   }\n * }\n *\n * registerIcons({\n *   Foo: *some svg value*,\n *   Bar: *some svg value*,\n * })\n * ```\n */\n\nexport function registerIcons(icons: IconDefinitions) {\n  for (const name in icons) {\n    if (process.env.NODE_ENV === 'development' && (registeredIcons[name] || IconNames[name])) {\n      console.error(`An icon with the name ${name} is already registered`);\n    }\n\n    registeredIcons[name] = icons[name];\n  }\n}\n\nexport function getIcon(name: string): React.SFC<SvgIconProps> | undefined {\n  if (registeredIcons[name]) {\n    return (props: SvgIconProps) => React.cloneElement(registeredIcons[name], props);\n  }\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}