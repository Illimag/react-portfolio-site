{"ast":null,"code":"import _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\nimport styled from '../../utils/styled';\n\nfunction getExpandingContainerHeight(status, expandedHeight, collapsedHeight) {\n  if (!expandedHeight) {\n    return '0';\n  }\n\n  switch (status) {\n    case 'entering':\n      return \"\".concat(expandedHeight, \"px\");\n\n    case 'entered':\n      return 'auto';\n\n    case 'exitingStart':\n      return \"\".concat(expandedHeight, \"px\");\n\n    case 'exiting':\n    default:\n      return \"\".concat(collapsedHeight || '0');\n  }\n}\n\nvar ExpandingContainer = styled('div')(function (_ref) {\n  var status = _ref.status,\n      expandedHeight = _ref.expandedHeight,\n      collapsedHeight = _ref.collapsedHeight,\n      timeout = _ref.timeout;\n  return \"\\n    overflow: hidden;\\n    transition-duration: \".concat(timeout, \"ms;\\n    height: \").concat(getExpandingContainerHeight(status, expandedHeight, collapsedHeight), \"\\n  \");\n});\n/**\n * A functional expander component for expanding / collapsing content.\n */\n\nexport var Expander = /*#__PURE__*/function (_React$Component) {\n  _inherits(Expander, _React$Component);\n\n  var _super = _createSuper(Expander);\n\n  function Expander(props) {\n    var _this;\n\n    _classCallCheck(this, Expander);\n\n    _this = _super.call(this, props);\n    _this.wrapperRef = React.createRef();\n\n    _this.setContainer = function (ref) {\n      _this.rootContainer = ref;\n    };\n\n    _this.state = {\n      status: 'unmounted'\n    };\n    return _this;\n  }\n\n  _createClass(Expander, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleChange();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var expand = this.props.expand;\n      var status = this.state.status;\n\n      if (prevProps.expand !== expand || prevState.status !== status) {\n        this.handleChange();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearTimer();\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange() {\n      var expand = this.props.expand;\n      var status = this.state.status;\n\n      if (expand) {\n        if (status === 'unmounted') {\n          this.setState({\n            status: 'mounted'\n          });\n        } else if (status !== 'entering' && status !== 'entered') {\n          this.performEnter();\n        }\n      } else {\n        if (status === 'entering' || status === 'entered') {\n          this.performExit();\n        }\n      }\n    }\n  }, {\n    key: \"performEnter\",\n    value: function performEnter() {\n      var _this2 = this;\n\n      this.setState({\n        status: 'entering'\n      }, function () {\n        return _this2.setDelayedStatus('entered');\n      });\n    }\n  }, {\n    key: \"performExit\",\n    value: function performExit() {\n      var _this3 = this;\n\n      var unmountOnExit = this.props.unmountOnExit;\n      this.setState({\n        status: 'exitingStart'\n      }, function () {\n        return _this3.setState({\n          status: 'exiting'\n        }, function () {\n          return _this3.setDelayedStatus(unmountOnExit ? 'unmounted' : 'exited');\n        });\n      });\n    }\n  }, {\n    key: \"clearTimer\",\n    value: function clearTimer() {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n    }\n  }, {\n    key: \"setDelayedStatus\",\n    value: function setDelayedStatus(status) {\n      var _this4 = this;\n\n      var _this$props$timeout = this.props.timeout,\n          timeout = _this$props$timeout === void 0 ? 0 : _this$props$timeout;\n      this.clearTimer();\n      this.timer = setTimeout(function () {\n        _this4.setState({\n          status: status\n        });\n      }, timeout);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var status = this.state.status;\n      var _this$props = this.props,\n          children = _this$props.children,\n          collapsedHeight = _this$props.collapsedHeight,\n          _this$props$timeout2 = _this$props.timeout,\n          timeout = _this$props$timeout2 === void 0 ? 0 : _this$props$timeout2;\n      var contentRef = this.wrapperRef.current;\n\n      if (status !== 'unmounted') {\n        return React.createElement(ExpandingContainer, {\n          ref: this.setContainer,\n          expandedHeight: contentRef ? contentRef.clientHeight : undefined,\n          collapsedHeight: collapsedHeight,\n          status: status,\n          timeout: timeout,\n          style: {\n            minHeight: collapsedHeight\n          }\n        }, React.createElement(\"div\", {\n          ref: this.wrapperRef\n        }, children));\n      }\n\n      return false;\n    }\n  }]);\n\n  return Expander;\n}(React.Component);\nExpander.inner = {\n  get ExpandingContainer() {\n    return ExpandingContainer;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Expander/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nexport interface ExpanderProps {\n    /**\n     * The timeout to be used for transitioning.\n     * @default 0\n     */\n    timeout?: number;\n    /**\n     * If `true`, the component will transition in.\n     * @default false\n     */\n    expand?: boolean;\n    /**\n     * The height of the container when collapsed.\n     * @default `0px`\n     */\n    collapsedHeight?: string;\n    /**\n     * Optionally unmount the expandable container\n     * @default false\n     */\n    unmountOnExit?: boolean;\n}\nexport type TransitionStatus = 'unmounted' | 'mounted' | 'exited' | 'entering' | 'entered' | 'exiting' | 'exitingStart';\nexport interface ExpanderState {\n    status?: TransitionStatus;\n}\nexport interface ExpandingContainerProps {\n    expandedHeight?: number;\n    collapsedHeight?: string;\n    status?: TransitionStatus;\n    timeout: number;\n}\nfunction getExpandingContainerHeight(status?: TransitionStatus, expandedHeight?: number, collapsedHeight?: string) {\n    if (!expandedHeight) {\n        return '0';\n    }\n    switch (status) {\n        case 'entering':\n            return `${expandedHeight}px`;\n        case 'entered':\n            return 'auto';\n        case 'exitingStart':\n            return `${expandedHeight}px`;\n        case 'exiting':\n        default:\n            return `${collapsedHeight || '0'}`;\n    }\n}\nconst ExpandingContainer = styled('div')<ExpandingContainerProps>(({ status, expandedHeight, collapsedHeight, timeout }) => `\n    overflow: hidden;\n    transition-duration: ${timeout}ms;\n    height: ${getExpandingContainerHeight(status, expandedHeight, collapsedHeight)}\n  `);\n/**\n * A functional expander component for expanding / collapsing content.\n */\nexport class Expander extends React.Component<ExpanderProps, ExpanderState> {\n    private wrapperRef = React.createRef<HTMLDivElement>();\n    private rootContainer: HTMLDivElement | null;\n    private timer: any;\n    constructor(props: ExpanderProps) {\n        super(props);\n        this.state = {\n            status: 'unmounted',\n        };\n    }\n    componentDidMount() {\n        this.handleChange();\n    }\n    componentDidUpdate(prevProps: ExpanderProps, prevState: ExpanderState) {\n        const { expand } = this.props;\n        const { status } = this.state;\n        if (prevProps.expand !== expand || prevState.status !== status) {\n            this.handleChange();\n        }\n    }\n    componentWillUnmount() {\n        this.clearTimer();\n    }\n    private handleChange() {\n        const { expand } = this.props;\n        const { status } = this.state;\n        if (expand) {\n            if (status === 'unmounted') {\n                this.setState({\n                    status: 'mounted',\n                });\n            }\n            else if (status !== 'entering' && status !== 'entered') {\n                this.performEnter();\n            }\n        }\n        else {\n            if (status === 'entering' || status === 'entered') {\n                this.performExit();\n            }\n        }\n    }\n    private performEnter() {\n        this.setState({\n            status: 'entering',\n        }, () => this.setDelayedStatus('entered'));\n    }\n    private performExit() {\n        const { unmountOnExit } = this.props;\n        this.setState({ status: 'exitingStart' }, () => this.setState({ status: 'exiting' }, () => this.setDelayedStatus(unmountOnExit ? 'unmounted' : 'exited')));\n    }\n    private clearTimer() {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n    }\n    private setContainer = (ref: HTMLDivElement | null) => {\n        this.rootContainer = ref;\n    };\n    private setDelayedStatus(status: TransitionStatus) {\n        const { timeout = 0 } = this.props;\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.setState({\n                status,\n            });\n        }, timeout);\n    }\n    render() {\n        const { status } = this.state;\n        const { children, collapsedHeight, timeout = 0 } = this.props;\n        const contentRef = this.wrapperRef.current;\n        if (status !== 'unmounted') {\n            return (<ExpandingContainer ref={this.setContainer} expandedHeight={contentRef ? contentRef.clientHeight : undefined} collapsedHeight={collapsedHeight} status={status} timeout={timeout} style={{ minHeight: collapsedHeight }}>\n          <div ref={this.wrapperRef}>{children}</div>\n        </ExpandingContainer>);\n        }\n        return false;\n    }\n    static inner = {\n        get ExpandingContainer() { return ExpandingContainer as typeof ExpandingContainer; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}