{"ast":null,"code":"import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { Button } from '../Button';\nimport { Spinner } from '../Spinner';\nimport { distance } from '../../distance';\nconst Container = styled.div`\n  height: ${({\n  height\n}) => height ? `${height}px` : 'auto'};\n  overflow: ${({\n  height\n}) => height ? 'auto' : 'visible'};\n`;\nconst Footer = styled.div`\n  margin-top: ${distance.small};\n`;\nconst DefaultButton = styled(Button)`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\nexport class InfiniteScroll extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnScroll = () => {\n      const scrolledToBottom = this.reachedBottom();\n\n      if (scrolledToBottom && this.props.hasMore) {\n        this.loadItems();\n      }\n    };\n\n    this.loadItems = () => {\n      const {\n        data\n      } = this.props;\n      this.setState({\n        isLoading: true\n      });\n      return this.props.loadItems(data.length);\n    };\n\n    this.setContainer = node => {\n      this.node = node;\n\n      if (this.node) {\n        this.node.removeEventListener('scroll', this.handleOnScroll);\n      }\n\n      if (node && !this.props.useWindow) {\n        node.addEventListener('scroll', this.handleOnScroll);\n      }\n\n      this.node = node;\n    };\n\n    this.state = {\n      isButtonMode: !!this.props.button,\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      isButtonMode\n    } = this.state;\n\n    if (!isButtonMode) {\n      const {\n        useWindow\n      } = this.props;\n\n      if (useWindow) {\n        window.addEventListener('scroll', this.handleOnScroll);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      isButtonMode\n    } = this.state;\n\n    if (!isButtonMode) {\n      const {\n        useWindow\n      } = this.props;\n\n      if (useWindow) {\n        window.removeEventListener('scroll', this.handleOnScroll);\n      } else if (this.node && !useWindow) {\n        this.node.removeEventListener('scroll', this.handleOnScroll);\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.data.length !== this.props.data.length || nextProps.hasMore !== this.props.hasMore) {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  reachedBottom() {\n    const edgeOffset = this.props.edgeOffset || 0;\n    const {\n      documentElement,\n      body\n    } = document;\n    const {\n      useWindow\n    } = this.props;\n    const scrollTop = useWindow ? documentElement && documentElement.scrollTop || body.scrollTop : this.node && this.node.scrollTop || 0;\n    const scrollHeight = useWindow ? documentElement && documentElement.scrollHeight || body.scrollHeight : this.node && this.node.scrollHeight || 0;\n    const innerHeight = useWindow ? window.innerHeight : this.node && this.node.clientHeight || 0;\n    const scrolledToBottom = Math.ceil(scrollTop + innerHeight + edgeOffset) >= scrollHeight;\n    return scrolledToBottom;\n  }\n\n  renderButton() {\n    const {\n      data,\n      button: CustomButton,\n      hasMore\n    } = this.props;\n    const {\n      isLoading\n    } = this.state;\n\n    if (!hasMore || data.length === 0 || isLoading) {\n      return undefined;\n    }\n\n    if (CustomButton && typeof CustomButton !== 'boolean' && typeof CustomButton !== 'string') {\n      return React.createElement(CustomButton, {\n        onClick: this.loadItems\n      });\n    }\n\n    return React.createElement(DefaultButton, {\n      buttonStyle: \"secondary\",\n      onClick: this.loadItems,\n      theme: {\n        buttonIconPosition: 'left'\n      },\n      icon: \"Add\"\n    }, typeof CustomButton === 'string' ? CustomButton : 'Show more');\n  }\n\n  render() {\n    const {\n      host: Host = 'div',\n      data,\n      containerHeight,\n      loadingIndicator\n    } = this.props;\n    const {\n      isButtonMode,\n      isLoading\n    } = this.state;\n    return React.createElement(Container, {\n      ref: this.setContainer,\n      height: containerHeight\n    }, React.createElement(Host, null, data), React.createElement(Footer, null, isLoading && (loadingIndicator || React.createElement(Spinner, {\n      size: \"x-small\"\n    })), isButtonMode && this.renderButton()));\n  }\n\n}\nInfiniteScroll.inner = {\n  get DefaultButton() {\n    return DefaultButton;\n  },\n\n  get Container() {\n    return Container;\n  },\n\n  get Footer() {\n    return Footer;\n  },\n\n  get Spinner() {\n    return Spinner;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/InfiniteScroll/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { Button } from '../Button';\nimport { Spinner } from '../Spinner';\nimport { distance } from '../../distance';\nexport interface InfiniteScrollProps {\n    /**\n     * @ignore\n     */\n    children?: void;\n    /**\n     * Method to load more items.\n     */\n    loadItems(offset: number): void;\n    /**\n     * Sets the button mode. If true the component will render the default\n     * 'Show More' button. In case a string is supplied the default button\n     * will be rendered with the given string. Otherwise, if a React component\n     * is provided it will render the provided component.\n     */\n    button?: boolean | string | React.ComponentType<LoaderButtonProps>;\n    /**\n     * Pixels left to bottom of the page, at which loadItems() function will\n     * be called. Used 'scroll' mode.\n     * @default 0px\n     */\n    edgeOffset?: number;\n    /**\n     * The height of the scrolling container in pixels. This is a required\n     * prop if useWindow is not set to true.\n     * @default 0px\n     */\n    containerHeight?: number;\n    /**\n     * This option allows the window to be used as the scroll container, instead\n     * of an arbitrary div created by this component, when it is set to true.\n     * @default false\n     */\n    useWindow?: boolean;\n    /**\n     * The optional host element to be used.\n     */\n    host?: string | React.ComponentClass | React.StatelessComponent;\n    /**\n     * This prop receives data that is displayed in this component.\n     */\n    data: React.ReactNodeArray;\n    /**\n     * This prop let's component know if there is more data to load and call loadItems function on scroll or to display the button.\n     */\n    hasMore: boolean;\n    /**\n     * Custom loading indicator\n     */\n    loadingIndicator?: React.ReactNode;\n}\nexport interface InfiniteScrollState {\n    isButtonMode: boolean;\n    isLoading: boolean;\n}\ninterface StyledContainerProps {\n    height?: number;\n}\nexport interface LoaderButtonProps {\n    onClick(): void;\n}\nconst Container = styled.div<StyledContainerProps> `\n  height: ${({ height }) => (height ? `${height}px` : 'auto')};\n  overflow: ${({ height }) => (height ? 'auto' : 'visible')};\n`;\nconst Footer = styled.div `\n  margin-top: ${distance.small};\n`;\nconst DefaultButton = styled(Button) `\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\nexport class InfiniteScroll extends React.Component<InfiniteScrollProps, InfiniteScrollState> {\n    private node: HTMLDivElement | null;\n    constructor(props: InfiniteScrollProps) {\n        super(props);\n        this.state = {\n            isButtonMode: !!this.props.button,\n            isLoading: false,\n        };\n    }\n    componentDidMount() {\n        const { isButtonMode } = this.state;\n        if (!isButtonMode) {\n            const { useWindow } = this.props;\n            if (useWindow) {\n                window.addEventListener('scroll', this.handleOnScroll);\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { isButtonMode } = this.state;\n        if (!isButtonMode) {\n            const { useWindow } = this.props;\n            if (useWindow) {\n                window.removeEventListener('scroll', this.handleOnScroll);\n            }\n            else if (this.node && !useWindow) {\n                this.node.removeEventListener('scroll', this.handleOnScroll);\n            }\n        }\n    }\n    UNSAFE_componentWillReceiveProps(nextProps: InfiniteScrollProps) {\n        if (nextProps.data.length !== this.props.data.length || nextProps.hasMore !== this.props.hasMore) {\n            this.setState({\n                isLoading: false,\n            });\n        }\n    }\n    private handleOnScroll = () => {\n        const scrolledToBottom = this.reachedBottom();\n        if (scrolledToBottom && this.props.hasMore) {\n            this.loadItems();\n        }\n    };\n    private reachedBottom() {\n        const edgeOffset = this.props.edgeOffset || 0;\n        const { documentElement, body } = document;\n        const { useWindow } = this.props;\n        const scrollTop = useWindow\n            ? (documentElement && documentElement.scrollTop) || body.scrollTop\n            : (this.node && this.node.scrollTop) || 0;\n        const scrollHeight = useWindow\n            ? (documentElement && documentElement.scrollHeight) || body.scrollHeight\n            : (this.node && this.node.scrollHeight) || 0;\n        const innerHeight = useWindow ? window.innerHeight : (this.node && this.node.clientHeight) || 0;\n        const scrolledToBottom = Math.ceil(scrollTop + innerHeight + edgeOffset) >= scrollHeight;\n        return scrolledToBottom;\n    }\n    private loadItems = () => {\n        const { data } = this.props;\n        this.setState({ isLoading: true });\n        return this.props.loadItems(data.length);\n    };\n    private renderButton() {\n        const { data, button: CustomButton, hasMore } = this.props;\n        const { isLoading } = this.state;\n        if (!hasMore || data.length === 0 || isLoading) {\n            return undefined;\n        }\n        if (CustomButton && typeof CustomButton !== 'boolean' && typeof CustomButton !== 'string') {\n            return <CustomButton onClick={this.loadItems}/>;\n        }\n        return (<DefaultButton buttonStyle=\"secondary\" onClick={this.loadItems} theme={{ buttonIconPosition: 'left' }} icon=\"Add\">\n        {typeof CustomButton === 'string' ? CustomButton : 'Show more'}\n      </DefaultButton>);\n    }\n    private setContainer = (node: HTMLDivElement | null) => {\n        this.node = node;\n        if (this.node) {\n            this.node.removeEventListener('scroll', this.handleOnScroll);\n        }\n        if (node && !this.props.useWindow) {\n            node.addEventListener('scroll', this.handleOnScroll);\n        }\n        this.node = node;\n    };\n    render() {\n        const { host: Host = 'div', data, containerHeight, loadingIndicator } = this.props;\n        const { isButtonMode, isLoading } = this.state;\n        return (<Container ref={this.setContainer} height={containerHeight}>\n        <Host>{data}</Host>\n        <Footer>\n          {isLoading && (loadingIndicator || <Spinner size=\"x-small\"/>)}\n          {isButtonMode && this.renderButton()}\n        </Footer>\n      </Container>);\n    }\n    static inner = {\n        get DefaultButton() { return DefaultButton as typeof DefaultButton; },\n        get Container() { return Container as typeof Container; },\n        get Footer() { return Footer as typeof Footer; },\n        get Spinner() { return Spinner as typeof Spinner; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}