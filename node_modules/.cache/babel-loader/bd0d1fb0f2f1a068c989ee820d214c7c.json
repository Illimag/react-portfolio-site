{"ast":null,"code":"import * as React from 'react';\nimport { eventManagers } from '../../utils/eventManager';\nimport { Dropzone } from '../Dropzone';\nimport { FileUploadActions } from '../FileUploaderDetails';\nimport { generateId, getSimpleStatus } from './helpers';\nexport class UploadData {\n  constructor(events) {\n    this.filesChanged = ({\n      files\n    }) => {\n      const filteredFiles = files.filter(item => item.uploaderId === this.id);\n\n      if (filteredFiles.length > 0) {\n        const ids = filteredFiles.map(item => item.fileId);\n        let changed = false;\n\n        for (const file of this.files) {\n          const index = ids.indexOf(file.id);\n\n          if (index !== -1) {\n            const updatedFile = filteredFiles[index];\n            const updatedStatus = getSimpleStatus(updatedFile);\n            const hasChanged = updatedFile.data !== file.data || updatedFile.progress !== file.progress || file.status !== updatedStatus;\n\n            if (hasChanged) {\n              changed = true;\n              file.data = updatedFile.data;\n              file.progress = updatedFile.progress;\n              file.status = updatedStatus;\n            }\n          }\n        }\n\n        if (changed) {\n          this.emit('change');\n\n          if (this.ready) {\n            this.emit('ready');\n          }\n        }\n      }\n    };\n\n    this.id = generateId();\n    this.events = events || eventManagers[0];\n    this.files = [];\n    this.notifications = [];\n  }\n\n  get completedFiles() {\n    return this.files.filter(m => m.status === 'complete');\n  }\n\n  get ready() {\n    return this.files.reduce((prev, curr) => prev && (curr.status === 'complete' || curr.status === 'canceled'), true);\n  }\n\n  get total() {\n    return this.files.filter(file => file.status !== 'canceled').length;\n  }\n\n  commit(cb) {\n    const handler = () => cb(this.completedFiles);\n\n    if (this.ready) {\n      handler();\n    } else {\n      this.once('ready', handler);\n    }\n  }\n\n  once(type, cb) {\n    const handler = () => {\n      this.off(type, handler);\n      cb();\n    };\n\n    this.on(type, handler);\n  }\n\n  on(type, cb) {\n    if (this.notifications.length === 0) {\n      this.connect();\n    }\n\n    this.notifications.push({\n      type,\n      cb\n    });\n  }\n\n  off(type, cb) {\n    for (let i = this.notifications.length; i--;) {\n      const notification = this.notifications[i];\n\n      if (notification.type === type && notification.cb === cb) {\n        this.notifications.splice(i, 1);\n      }\n    }\n\n    if (this.notifications.length === 0) {\n      this.disconnect();\n    }\n  }\n\n  connect() {\n    const em = this.events;\n    em.on(FileUploadActions.uploadProgress, this.filesChanged);\n    em.on(FileUploadActions.uploadFailure, this.filesChanged);\n    em.on(FileUploadActions.uploadSuccess, this.filesChanged);\n  }\n\n  disconnect() {\n    const em = this.events;\n    em.off(FileUploadActions.uploadProgress, this.filesChanged);\n    em.off(FileUploadActions.uploadFailure, this.filesChanged);\n    em.off(FileUploadActions.uploadSuccess, this.filesChanged);\n    em.emit(FileUploadActions.clearUploads, this.id);\n  }\n\n  emit(type) {\n    for (const notification of this.notifications) {\n      if (notification.type === type) {\n        notification.cb();\n      }\n    }\n  }\n\n  push(files) {\n    /**\n     * TODO:\n     * Update `FileSelect` component to assign generated id\n     * to a file to enable multiple selection of the same file\n     */\n    const names = this.files.map(item => item.status !== 'canceled' ? item.name : '');\n    const newUploadFiles = [];\n\n    for (const file of files) {\n      if (names.indexOf(file.name) === -1) {\n        const id = generateId();\n        const added = new Date();\n        const data = {};\n        newUploadFiles.push({\n          name: file.name,\n          fileId: id,\n          content: file,\n          type: file.type,\n          uploaderId: this.id,\n          timestamp: added,\n          data\n        });\n        this.files.push({\n          id,\n          added,\n          status: 'new',\n          data,\n          name: file.name,\n          progress: 0,\n          type: file.type\n        });\n      }\n    }\n\n    if (newUploadFiles.length) {\n      this.emit('change');\n      this.events.emit(FileUploadActions.startUpload, {\n        files: newUploadFiles\n      });\n    }\n  }\n\n}\n/**\n * The file uploader component that passes selected files to global uploader. Should be used with `FileUploaderDetails` component.\n */\n\nexport class FileUploader extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.emitChange = () => {\n      const {\n        onChange\n      } = this.props;\n\n      if (typeof onChange === 'function') {\n        const {\n          files,\n          ready,\n          total\n        } = this.data;\n        onChange({\n          files: files.map(file => ({\n            data: file.data,\n            id: file.id,\n            name: file.name,\n            progress: file.progress,\n            state: file.status,\n            type: file.type\n          })),\n          ready,\n          total\n        });\n      }\n    };\n\n    this.filesAdded = e => {\n      this.data.push(e.value);\n    };\n\n    this.fileSelect = e => {\n      const {\n        multiple\n      } = this.props;\n      const {\n        files,\n        events\n      } = this.data;\n      const notCanceledFiles = files.filter(file => file.status !== 'canceled');\n\n      if (!multiple && notCanceledFiles.length === 1) {\n        const completedFiles = notCanceledFiles.filter(file => file.status === 'complete');\n\n        if (completedFiles.length === 0) {\n          e.preventDefault();\n          events.emit(FileUploadActions.showUploads, {});\n        }\n      }\n    };\n\n    const {\n      data = new UploadData()\n    } = props;\n    this.data = data;\n  }\n\n  componentDidMount() {\n    this.data.on('change', this.emitChange);\n  }\n\n  componentWillUnmount() {\n    this.data.off('change', this.emitChange);\n  }\n\n  render() {\n    const {\n      multiple,\n      message,\n      children,\n      showFileList\n    } = this.props;\n    const additionalProps = !showFileList ? {\n      value: []\n    } : {};\n    return React.createElement(Dropzone, Object.assign({\n      multiple: multiple,\n      onChange: this.filesAdded,\n      onOpen: this.fileSelect,\n      message: message\n    }, additionalProps), children);\n  }\n\n}\nFileUploader.inner = {\n  get Dropzone() {\n    return Dropzone;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/FileUploader/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { EventManager, eventManagers } from '../../utils/eventManager';\nimport { Dropzone, DropzoneOpenEvent, DropzoneChangeEvent } from '../Dropzone';\nimport { FileUploadActions, FileItem, FileProgress, FileUploaderDetailsEvent } from '../FileUploaderDetails';\nimport { generateId, getSimpleStatus } from './helpers';\nexport type UploadFileState = 'new' | 'active' | 'canceled' | 'complete';\nexport interface UploadFileStatus {\n    /**\n     * The id of the file for identification.\n     */\n    id: string;\n    /**\n     * The name of the file.\n     */\n    name: string;\n    /**\n     * The content-type of the file.\n     */\n    type: string;\n    /**\n     * The current progress of the file.\n     */\n    progress: number;\n    /**\n     * The current state of the file.\n     */\n    state: UploadFileState;\n    /**\n     * Arbitrary data associated with the file, which is set by the upload host.\n     */\n    data: any;\n}\nexport interface FileUploaderChangeEvent {\n    /**\n     * The files that changed.\n     */\n    files: Array<UploadFileStatus>;\n    /**\n     * The total number of selected files.\n     */\n    total: number;\n    /**\n     * Status if the selected files are all uploaded and verified.\n     */\n    ready: boolean;\n}\nexport interface FileUploaderProps {\n    /**\n     * Allow selecting multiple files.\n     */\n    multiple?: boolean;\n    /**\n     * Event emitted when file upload changes.\n     */\n    onChange?(e: FileUploaderChangeEvent): void;\n    /**\n     * Optionally uses an explicit upload data connector.\n     */\n    data?: UploadData;\n    /**\n     * Message for dragging files to show on drop area.\n     * @default \"Drop files here to upload\"\n     */\n    message?: string;\n    /**\n     * Show the file list under the drop zone\n     */\n    showFileList?: boolean;\n}\nexport interface UploadFile {\n    id: string;\n    name: string;\n    type: string;\n    progress: number;\n    data: any;\n    added: Date;\n    status: UploadFileState;\n}\nexport type UploadDataEventType = 'change' | 'ready';\nexport interface UploadDataEventListener {\n    (): void;\n}\ninterface UploadDataNotification {\n    type: UploadDataEventType;\n    cb: UploadDataEventListener;\n}\nexport class UploadData {\n    readonly id: string;\n    readonly events: EventManager;\n    readonly files: Array<UploadFile>;\n    private readonly notifications: Array<UploadDataNotification>;\n    constructor(events?: EventManager) {\n        this.id = generateId();\n        this.events = events || eventManagers[0];\n        this.files = [];\n        this.notifications = [];\n    }\n    get completedFiles() {\n        return this.files.filter(m => m.status === 'complete');\n    }\n    get ready() {\n        return this.files.reduce((prev, curr) => prev && (curr.status === 'complete' || curr.status === 'canceled'), true);\n    }\n    get total() {\n        return this.files.filter(file => file.status !== 'canceled').length;\n    }\n    commit(cb: (completedFiles: Array<UploadFile>) => void) {\n        const handler = () => cb(this.completedFiles);\n        if (this.ready) {\n            handler();\n        }\n        else {\n            this.once('ready', handler);\n        }\n    }\n    once(type: UploadDataEventType, cb: UploadDataEventListener) {\n        const handler = () => {\n            this.off(type, handler);\n            cb();\n        };\n        this.on(type, handler);\n    }\n    on(type: UploadDataEventType, cb: UploadDataEventListener) {\n        if (this.notifications.length === 0) {\n            this.connect();\n        }\n        this.notifications.push({ type, cb });\n    }\n    off(type: UploadDataEventType, cb: UploadDataEventListener) {\n        for (let i = this.notifications.length; i--;) {\n            const notification = this.notifications[i];\n            if (notification.type === type && notification.cb === cb) {\n                this.notifications.splice(i, 1);\n            }\n        }\n        if (this.notifications.length === 0) {\n            this.disconnect();\n        }\n    }\n    private connect() {\n        const em = this.events;\n        em.on(FileUploadActions.uploadProgress, this.filesChanged);\n        em.on(FileUploadActions.uploadFailure, this.filesChanged);\n        em.on(FileUploadActions.uploadSuccess, this.filesChanged);\n    }\n    private disconnect() {\n        const em = this.events;\n        em.off(FileUploadActions.uploadProgress, this.filesChanged);\n        em.off(FileUploadActions.uploadFailure, this.filesChanged);\n        em.off(FileUploadActions.uploadSuccess, this.filesChanged);\n        em.emit(FileUploadActions.clearUploads, this.id);\n    }\n    private emit(type: UploadDataEventType) {\n        for (const notification of this.notifications) {\n            if (notification.type === type) {\n                notification.cb();\n            }\n        }\n    }\n    private filesChanged = ({ files }: FileUploaderDetailsEvent<FileProgress>) => {\n        const filteredFiles = files.filter(item => item.uploaderId === this.id);\n        if (filteredFiles.length > 0) {\n            const ids = filteredFiles.map(item => item.fileId);\n            let changed = false;\n            for (const file of this.files) {\n                const index = ids.indexOf(file.id);\n                if (index !== -1) {\n                    const updatedFile = filteredFiles[index];\n                    const updatedStatus = getSimpleStatus(updatedFile);\n                    const hasChanged = updatedFile.data !== file.data || updatedFile.progress !== file.progress || file.status !== updatedStatus;\n                    if (hasChanged) {\n                        changed = true;\n                        file.data = updatedFile.data;\n                        file.progress = updatedFile.progress;\n                        file.status = updatedStatus;\n                    }\n                }\n            }\n            if (changed) {\n                this.emit('change');\n                if (this.ready) {\n                    this.emit('ready');\n                }\n            }\n        }\n    };\n    push(files: Array<File>) {\n        /**\n         * TODO:\n         * Update `FileSelect` component to assign generated id\n         * to a file to enable multiple selection of the same file\n         */\n        const names = this.files.map(item => (item.status !== 'canceled' ? item.name : ''));\n        const newUploadFiles: Array<FileItem> = [];\n        for (const file of files) {\n            if (names.indexOf(file.name) === -1) {\n                const id = generateId();\n                const added = new Date();\n                const data = {};\n                newUploadFiles.push({\n                    name: file.name,\n                    fileId: id,\n                    content: file,\n                    type: file.type,\n                    uploaderId: this.id,\n                    timestamp: added,\n                    data,\n                });\n                this.files.push({\n                    id,\n                    added,\n                    status: 'new',\n                    data,\n                    name: file.name,\n                    progress: 0,\n                    type: file.type,\n                });\n            }\n        }\n        if (newUploadFiles.length) {\n            this.emit('change');\n            this.events.emit(FileUploadActions.startUpload, { files: newUploadFiles });\n        }\n    }\n}\n/**\n * The file uploader component that passes selected files to global uploader. Should be used with `FileUploaderDetails` component.\n */\nexport class FileUploader extends React.Component<FileUploaderProps> {\n    private readonly data: UploadData;\n    constructor(props: FileUploaderProps) {\n        super(props);\n        const { data = new UploadData() } = props;\n        this.data = data;\n    }\n    componentDidMount() {\n        this.data.on('change', this.emitChange);\n    }\n    componentWillUnmount() {\n        this.data.off('change', this.emitChange);\n    }\n    private emitChange = () => {\n        const { onChange } = this.props;\n        if (typeof onChange === 'function') {\n            const { files, ready, total } = this.data;\n            onChange({\n                files: files.map<UploadFileStatus>(file => ({\n                    data: file.data,\n                    id: file.id,\n                    name: file.name,\n                    progress: file.progress,\n                    state: file.status,\n                    type: file.type,\n                })),\n                ready,\n                total,\n            });\n        }\n    };\n    private filesAdded = (e: DropzoneChangeEvent) => {\n        this.data.push(e.value);\n    };\n    private fileSelect = (e: DropzoneOpenEvent) => {\n        const { multiple } = this.props;\n        const { files, events } = this.data;\n        const notCanceledFiles = files.filter(file => file.status !== 'canceled');\n        if (!multiple && notCanceledFiles.length === 1) {\n            const completedFiles = notCanceledFiles.filter(file => file.status === 'complete');\n            if (completedFiles.length === 0) {\n                e.preventDefault();\n                events.emit(FileUploadActions.showUploads, {});\n            }\n        }\n    };\n    render() {\n        const { multiple, message, children, showFileList } = this.props;\n        const additionalProps = !showFileList ? { value: [] } : {};\n        return (<Dropzone multiple={multiple} onChange={this.filesAdded} onOpen={this.fileSelect} message={message} {...additionalProps}>\n        {children}\n      </Dropzone>);\n    }\n    static inner = {\n        get Dropzone() { return Dropzone as typeof Dropzone; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}