{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nexport var StackPanelDirection;\n\n(function (StackPanelDirection) {\n  StackPanelDirection[\"leftToRight\"] = \"left\";\n  StackPanelDirection[\"rightToLeft\"] = \"right\";\n  StackPanelDirection[\"topToBottom\"] = \"top\";\n  StackPanelDirection[\"bottomToTop\"] = \"bottom\";\n})(StackPanelDirection || (StackPanelDirection = {}));\n\nconst StackLayout = styled.div`\n  display: flex;\n  flex-direction: ${props => props.dir};\n  flex-wrap: ${props => props.wrapping};\n  justify-content: flex-start;\n`;\n\nfunction mapFlex(direction) {\n  switch (direction) {\n    case StackPanelDirection.rightToLeft:\n      return 'row-reverse';\n\n    case StackPanelDirection.topToBottom:\n      return 'column';\n\n    case StackPanelDirection.bottomToTop:\n      return 'column-reverse';\n  }\n\n  return 'row';\n}\n/**\n * The stack panel displays a stack of children in a given direction.\n */\n\n\nexport const StackPanel = Object.assign(_a => {\n  var {\n    theme,\n    direction,\n    wrap,\n    innerRef\n  } = _a,\n      props = __rest(_a, [\"theme\", \"direction\", \"wrap\", \"innerRef\"]);\n\n  const wrapping = wrap ? 'wrap' : 'nowrap';\n  const dir = mapFlex(direction);\n  return React.createElement(StackLayout, Object.assign({\n    theme: theme,\n    dir: dir,\n    wrapping: wrapping,\n    ref: innerRef\n  }, props));\n}, {\n  inner: {\n    get StackLayout() {\n      return StackLayout;\n    }\n\n  }\n});\nStackPanel.displayName = 'StackPanel';","map":{"version":3,"sources":["../../../../src/components/StackPanel/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AAEA,OAAA,IAAY,mBAAZ;;AAAA,CAAA,UAAY,mBAAZ,EAA+B;AAC3B,EAAA,mBAAA,CAAA,aAAA,CAAA,GAAA,MAAA;AACA,EAAA,mBAAA,CAAA,aAAA,CAAA,GAAA,OAAA;AACA,EAAA,mBAAA,CAAA,aAAA,CAAA,GAAA,KAAA;AACA,EAAA,mBAAA,CAAA,aAAA,CAAA,GAAA,QAAA;AACH,CALD,EAAY,mBAAmB,KAAnB,mBAAmB,GAAA,EAAA,CAA/B;;AA+BA,MAAM,WAAW,GAAG,MAAM,CAAC,GAAsB;;oBAE7B,KAAK,IAAI,KAAK,CAAC,GAAG;eACvB,KAAK,IAAI,KAAK,CAAC,QAAQ;;CAHtC;;AAMA,SAAS,OAAT,CAAiB,SAAjB,EAAgD;AAC5C,UAAQ,SAAR;AACI,SAAK,mBAAmB,CAAC,WAAzB;AACI,aAAO,aAAP;;AACJ,SAAK,mBAAmB,CAAC,WAAzB;AACI,aAAO,QAAP;;AACJ,SAAK,mBAAmB,CAAC,WAAzB;AACI,aAAO,gBAAP;AANR;;AAQA,SAAO,KAAP;AACH;AACD;;;;;AAGA,OAAO,MAAM,UAAU,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAAmD;MAAlD;AAAE,IAAA,KAAF;AAAS,IAAA,SAAT;AAAoB,IAAA,IAApB;AAA0B,IAAA;AAA1B,MAAkC,E;MAAE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,MAAA,EAAA,UAAA,CAAA,C;;AAC3E,QAAM,QAAQ,GAAG,IAAI,GAAG,MAAH,GAAY,QAAjC;AACA,QAAM,GAAG,GAAG,OAAO,CAAC,SAAD,CAAnB;AACA,SAAO,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE,KAAR;AAAe,IAAA,GAAG,EAAE,GAApB;AAAyB,IAAA,QAAQ,EAAE,QAAnC;AAA6C,IAAA,GAAG,EAAE;AAAlD,GAAA,EAAgE,KAAhE,CAAZ,CAAP;AACH,CAJyB,EAIS;AAAE,EAAA,KAAK,EAAE;AACpC,QAAI,WAAJ,GAAe;AAAK,aAAO,WAAP;AAA2C;;AAD3B;AAAT,CAJT,CAAnB;AAOP,UAAU,CAAC,WAAX,GAAyB,YAAzB","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { StandardProps } from '../../common';\nexport enum StackPanelDirection {\n    leftToRight = 'left',\n    rightToLeft = 'right',\n    topToBottom = 'top',\n    bottomToTop = 'bottom'\n}\nexport interface StackPanelProps extends StandardProps {\n    /**\n     * Sets the panel's children.\n     */\n    children?: React.ReactNode;\n    /**\n     * Sets the direction of the panel's items. By default left to right.\n     * @default left\n     */\n    direction?: StackPanelDirection;\n    /**\n     * Determines if the stack should be wrapped. By default it is not wrapped.\n     * @default false\n     */\n    wrap?: boolean;\n    /**\n     * Gets the reference to the underlying HTML DOM element.\n     */\n    innerRef?(instance: HTMLElement | null): void;\n}\nexport interface StackLayoutProps {\n    wrapping: string;\n    dir: string;\n    theme: any;\n}\nconst StackLayout = styled.div<StackLayoutProps> `\n  display: flex;\n  flex-direction: ${props => props.dir};\n  flex-wrap: ${props => props.wrapping};\n  justify-content: flex-start;\n`;\nfunction mapFlex(direction?: StackPanelDirection) {\n    switch (direction) {\n        case StackPanelDirection.rightToLeft:\n            return 'row-reverse';\n        case StackPanelDirection.topToBottom:\n            return 'column';\n        case StackPanelDirection.bottomToTop:\n            return 'column-reverse';\n    }\n    return 'row';\n}\n/**\n * The stack panel displays a stack of children in a given direction.\n */\nexport const StackPanel = Object.assign(((({ theme, direction, wrap, innerRef, ...props }) => {\n    const wrapping = wrap ? 'wrap' : 'nowrap';\n    const dir = mapFlex(direction);\n    return <StackLayout theme={theme} dir={dir} wrapping={wrapping} ref={innerRef} {...props}/>;\n}) as React.SFC<StackPanelProps>), { inner: {\n        get StackLayout() { return StackLayout as typeof StackLayout; }\n    } });\nStackPanel.displayName = 'StackPanel';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}