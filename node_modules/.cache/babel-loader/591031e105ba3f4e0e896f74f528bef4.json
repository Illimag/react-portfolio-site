{"ast":null,"code":"import * as React from 'react';\nimport { usePrompt } from './usePrompt';\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from '../Modal';\nimport { Button } from '../Button';\nimport { getMessage } from './PromptBasic.part';\nimport { ActionLink } from '../ActionLink';\nimport { styled } from '../../utils';\nimport { distance } from '../../distance';\nexport const PromptModal = Object.assign(({\n  history,\n  when,\n  message,\n  modalOptions\n}) => {\n  const [showModal, setShowModal] = React.useState(false);\n  const [handleContinue] = usePrompt(() => {\n    setShowModal(true);\n    return false;\n  }, () => getMessage(message), history, when);\n  return React.createElement(DefaultModal, Object.assign({}, modalOptions, {\n    message: getMessage(message),\n    open: when && showModal,\n    onConfirm: () => {\n      setShowModal(false);\n      handleContinue();\n      modalOptions.onConfirm && modalOptions.onConfirm();\n    },\n    onCancel: () => {\n      setShowModal(false);\n      modalOptions.onConfirm && modalOptions.onCancel();\n    }\n  }));\n}, {\n  inner: {\n    get DefaultModal() {\n      return DefaultModal;\n    }\n\n  }\n});\nconst StyledActionLink = styled(ActionLink)`\n  padding: 0 ${distance.large};\n`;\nconst DefaultModal = Object.assign(({\n  title,\n  message,\n  confirmText = 'Ok',\n  cancelText = 'Cancel',\n  onConfirm,\n  onCancel,\n  open\n}) => {\n  return React.createElement(Modal, {\n    open: open\n  }, React.createElement(ModalHeader, {\n    title: title\n  }), typeof message === 'string' && React.createElement(ModalBody, null, message), React.createElement(ModalFooter, null, React.createElement(StyledActionLink, {\n    onClick: onCancel\n  }, cancelText), React.createElement(Button, {\n    onClick: onConfirm\n  }, confirmText)));\n}, {\n  inner: {\n    get Modal() {\n      return Modal;\n    },\n\n    get ModalHeader() {\n      return ModalHeader;\n    },\n\n    get ModalBody() {\n      return ModalBody;\n    },\n\n    get ModalFooter() {\n      return ModalFooter;\n    },\n\n    get StyledActionLink() {\n      return StyledActionLink;\n    },\n\n    get Button() {\n      return Button;\n    }\n\n  }\n});","map":{"version":3,"sources":["../../../../src/components/Prompt/PromptModal.part.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { usePrompt } from './usePrompt';\nimport { PromptDefaultModalProps, PromptModalProps } from './Prompt.types';\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from '../Modal';\nimport { Button } from '../Button';\nimport { getMessage } from './PromptBasic.part';\nimport { ActionLink } from '../ActionLink';\nimport { styled } from '../../utils';\nimport { distance } from '../../distance';\nexport const PromptModal = Object.assign(((({ history, when, message, modalOptions }) => {\n    const [showModal, setShowModal] = React.useState(false);\n    const [handleContinue] = usePrompt(() => {\n        setShowModal(true);\n        return false;\n    }, () => getMessage(message), history, when);\n    return (<DefaultModal {...modalOptions} message={getMessage(message)} open={when && showModal} onConfirm={() => {\n        setShowModal(false);\n        handleContinue();\n        modalOptions.onConfirm && modalOptions.onConfirm();\n    }} onCancel={() => {\n        setShowModal(false);\n        modalOptions.onConfirm && modalOptions.onCancel();\n    }}/>);\n}) as React.FC<PromptModalProps>), { inner: {\n        get DefaultModal() { return DefaultModal as typeof DefaultModal; }\n    } });\nconst StyledActionLink = styled(ActionLink) `\n  padding: 0 ${distance.large};\n`;\nconst DefaultModal = Object.assign(((({ title, message, confirmText = 'Ok', cancelText = 'Cancel', onConfirm, onCancel, open, }) => {\n    return (<Modal open={open}>\n      <ModalHeader title={title}/>\n      {typeof message === 'string' && <ModalBody>{message}</ModalBody>}\n      <ModalFooter>\n        <StyledActionLink onClick={onCancel}>{cancelText}</StyledActionLink>\n        <Button onClick={onConfirm}>{confirmText}</Button>\n      </ModalFooter>\n    </Modal>);\n}) as React.FC<PromptDefaultModalProps>), { inner: {\n        get Modal() { return Modal as typeof Modal; },\n        get ModalHeader() { return ModalHeader as typeof ModalHeader; },\n        get ModalBody() { return ModalBody as typeof ModalBody; },\n        get ModalFooter() { return ModalFooter as typeof ModalFooter; },\n        get StyledActionLink() { return StyledActionLink as typeof StyledActionLink; },\n        get Button() { return Button as typeof Button; }\n    } });\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}