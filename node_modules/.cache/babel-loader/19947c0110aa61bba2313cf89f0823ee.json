{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { distance } from '../../distance';\nconst AttachedLabel = css`\n  padding-left: ${distance.small};\n  display: inline-block;\n  cursor: inherit;\n`;\nconst BlockLabel = css`\n  display: block;\n`;\nconst Styledlabel = styled.label`\n  ${props => props.attached ? AttachedLabel : BlockLabel};\n`;\n/**\n * The label component displays an input or general label.\n */\n\nexport const Label = Object.assign(_a => {\n  var {\n    toolTip\n  } = _a,\n      props = __rest(_a, [\"toolTip\"]);\n\n  return React.createElement(Styledlabel, Object.assign({\n    title: toolTip\n  }, props));\n}, {\n  inner: {\n    get Styledlabel() {\n      return Styledlabel;\n    }\n\n  }\n});\nLabel.displayName = 'Label';","map":{"version":3,"sources":["../../../../src/components/Label/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,GAAjB,QAA4B,oBAA5B;AAEA,SAAS,QAAT,QAAyB,gBAAzB;AAeA,MAAM,aAAa,GAAG,GAAI;kBACR,QAAQ,CAAC,KAAK;;;CADhC;AAKA,MAAM,UAAU,GAAG,GAAI;;CAAvB;AAGA,MAAM,WAAW,GAAG,MAAM,CAAC,KAAkB;IACzC,KAAK,IAAK,KAAK,CAAC,QAAN,GAAiB,aAAjB,GAAiC,UAAW;CAD1D;AAGA;;;;AAGA,OAAO,MAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAA0B;MAAzB;AAAE,IAAA;AAAF,MAAS,E;MAAE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,SAAA,CAAA,C;;AAAe,SAAA,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE;AAAR,GAAA,EAAqB,KAArB,CAAZ,CAAA;AAAyC,CAApF,EAAiH;AAAE,EAAA,KAAK,EAAE;AACvI,QAAI,WAAJ,GAAe;AAAK,aAAO,WAAP;AAA2C;;AADwE;AAAT,CAAjH,CAAd;AAGP,KAAK,CAAC,WAAN,GAAoB,OAApB","sourcesContent":["import * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { distance } from '../../distance';\nexport interface LabelProps extends StandardProps {\n    /**\n     * The content of the label.\n     */\n    children?: React.ReactNode;\n    /**\n     * The displayed tooltip, if any.\n     */\n    toolTip?: string;\n    /**\n     * Sets the label into an attached mode.\n     */\n    attached?: boolean;\n}\nconst AttachedLabel = css `\n  padding-left: ${distance.small};\n  display: inline-block;\n  cursor: inherit;\n`;\nconst BlockLabel = css `\n  display: block;\n`;\nconst Styledlabel = styled.label<LabelProps> `\n  ${props => (props.attached ? AttachedLabel : BlockLabel)};\n`;\n/**\n * The label component displays an input or general label.\n */\nexport const Label = Object.assign(((({ toolTip, ...props }) => <Styledlabel title={toolTip} {...props}/>) as React.SFC<LabelProps>), { inner: {\n        get Styledlabel() { return Styledlabel as typeof Styledlabel; }\n    } });\nLabel.displayName = 'Label';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}