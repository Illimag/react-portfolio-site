{"ast":null,"code":"import _createForOfIteratorHelper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nexport var SimpleEventManager = /*#__PURE__*/function () {\n  function SimpleEventManager() {\n    _classCallCheck(this, SimpleEventManager);\n\n    this.eventListeners = {};\n  }\n\n  _createClass(SimpleEventManager, [{\n    key: \"on\",\n    value: function on(type, callback) {\n      var callbacks = this.eventListeners[type] || [];\n      this.eventListeners[type] = [].concat(_toConsumableArray(callbacks), [callback]);\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, callback) {\n      var callbacks = this.eventListeners[type] || [];\n      this.eventListeners[type] = callbacks.filter(function (cb) {\n        return cb !== callback;\n      });\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(type, arg) {\n      var _this = this;\n\n      var callbacks = this.eventListeners[type] || [];\n\n      var _iterator = _createForOfIteratorHelper(callbacks),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var callback = _step.value;\n          setTimeout(function () {\n            return callback.call(_this, arg);\n          }, 0);\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return SimpleEventManager;\n}();\nexport var eventManagers = [new SimpleEventManager()];\nexport function setDefaultEventManager(events) {\n  eventManagers.splice(0, 1, events);\n}","map":{"version":3,"sources":["../../../src/utils/eventManager.ts"],"names":[],"mappings":";;;;AAcA,WAAa,kBAAb;AAAA,gCAAA;AAAA;;AACmB,SAAA,cAAA,GAAiC,EAAjC;AAmBlB;;AApBD;AAAA;AAAA,uBAGQ,IAHR,EAGsB,QAHtB,EAGgD;AAC5C,UAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,IAApB,KAA6B,EAA/C;AACA,WAAK,cAAL,CAAoB,IAApB,iCAAgC,SAAhC,IAA2C,QAA3C;AACD;AANH;AAAA;AAAA,wBAQS,IART,EAQuB,QARvB,EAQiD;AAC7C,UAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,IAApB,KAA6B,EAA/C;AACA,WAAK,cAAL,CAAoB,IAApB,IAA4B,SAAS,CAAC,MAAV,CAAiB,UAAA,EAAE;AAAA,eAAI,EAAE,KAAK,QAAX;AAAA,OAAnB,CAA5B;AACD;AAXH;AAAA;AAAA,yBAaU,IAbV,EAawB,GAbxB,EAa8B;AAAA;;AAC1B,UAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,IAApB,KAA6B,EAA/C;;AAD0B,iDAGH,SAHG;AAAA;;AAAA;AAAA;AAAA,cAGf,QAHe;AAIxB,UAAA,UAAU,CAAC;AAAA,mBAAM,QAAQ,CAAC,IAAT,CAAc,KAAd,EAAoB,GAApB,CAAN;AAAA,WAAD,EAAiC,CAAjC,CAAV;AAJwB;;AAG1B,4DAAkC;AAAA;AAEjC;AALyB;AAAA;AAAA;AAAA;AAAA;AAM3B;AAnBH;;AAAA;AAAA;AAsBA,OAAO,IAAM,aAAa,GAAwB,CAAC,IAAI,kBAAJ,EAAD,CAA3C;AAEP,OAAM,SAAU,sBAAV,CAAiC,MAAjC,EAAqD;AACzD,EAAA,aAAa,CAAC,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,MAA3B;AACD","sourcesContent":["export interface Callback {\n  (arg: any): void;\n}\n\nexport interface EventListeners {\n  [event: string]: Array<Callback>;\n}\n\nexport interface EventManager {\n  on(type: string, callback: Callback): void;\n  off(type: string, callback: Callback): void;\n  emit<T>(type: string, arg: T): void;\n}\n\nexport class SimpleEventManager implements EventManager {\n  private readonly eventListeners: EventListeners = {};\n\n  on<T>(type: string, callback: (arg: T) => void) {\n    const callbacks = this.eventListeners[type] || [];\n    this.eventListeners[type] = [...callbacks, callback];\n  }\n\n  off<T>(type: string, callback: (arg: T) => void) {\n    const callbacks = this.eventListeners[type] || [];\n    this.eventListeners[type] = callbacks.filter(cb => cb !== callback);\n  }\n\n  emit<T>(type: string, arg: T) {\n    const callbacks = this.eventListeners[type] || [];\n\n    for (const callback of callbacks) {\n      setTimeout(() => callback.call(this, arg), 0);\n    }\n  }\n}\n\nexport const eventManagers: Array<EventManager> = [new SimpleEventManager()];\n\nexport function setDefaultEventManager(events: EventManager) {\n  eventManagers.splice(0, 1, events);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}