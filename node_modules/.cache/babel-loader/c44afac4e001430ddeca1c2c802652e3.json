{"ast":null,"code":"import _inherits from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createForOfIteratorHelper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as React from 'react';\nimport { eventManagers } from '../../utils/eventManager';\nimport { Dropzone } from '../Dropzone';\nimport { FileUploadActions } from '../FileUploaderDetails';\nimport { generateId, getSimpleStatus } from './helpers';\nexport var UploadData = /*#__PURE__*/function () {\n  function UploadData(events) {\n    var _this = this;\n\n    _classCallCheck(this, UploadData);\n\n    this.filesChanged = function (_ref) {\n      var files = _ref.files;\n      var filteredFiles = files.filter(function (item) {\n        return item.uploaderId === _this.id;\n      });\n\n      if (filteredFiles.length > 0) {\n        var ids = filteredFiles.map(function (item) {\n          return item.fileId;\n        });\n        var changed = false;\n\n        var _iterator = _createForOfIteratorHelper(_this.files),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var file = _step.value;\n            var index = ids.indexOf(file.id);\n\n            if (index !== -1) {\n              var updatedFile = filteredFiles[index];\n              var updatedStatus = getSimpleStatus(updatedFile);\n              var hasChanged = updatedFile.data !== file.data || updatedFile.progress !== file.progress || file.status !== updatedStatus;\n\n              if (hasChanged) {\n                changed = true;\n                file.data = updatedFile.data;\n                file.progress = updatedFile.progress;\n                file.status = updatedStatus;\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (changed) {\n          _this.emit('change');\n\n          if (_this.ready) {\n            _this.emit('ready');\n          }\n        }\n      }\n    };\n\n    this.id = generateId();\n    this.events = events || eventManagers[0];\n    this.files = [];\n    this.notifications = [];\n  }\n\n  _createClass(UploadData, [{\n    key: \"commit\",\n    value: function commit(cb) {\n      var _this2 = this;\n\n      var handler = function handler() {\n        return cb(_this2.completedFiles);\n      };\n\n      if (this.ready) {\n        handler();\n      } else {\n        this.once('ready', handler);\n      }\n    }\n  }, {\n    key: \"once\",\n    value: function once(type, cb) {\n      var _this3 = this;\n\n      var handler = function handler() {\n        _this3.off(type, handler);\n\n        cb();\n      };\n\n      this.on(type, handler);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, cb) {\n      if (this.notifications.length === 0) {\n        this.connect();\n      }\n\n      this.notifications.push({\n        type: type,\n        cb: cb\n      });\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, cb) {\n      for (var i = this.notifications.length; i--;) {\n        var notification = this.notifications[i];\n\n        if (notification.type === type && notification.cb === cb) {\n          this.notifications.splice(i, 1);\n        }\n      }\n\n      if (this.notifications.length === 0) {\n        this.disconnect();\n      }\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var em = this.events;\n      em.on(FileUploadActions.uploadProgress, this.filesChanged);\n      em.on(FileUploadActions.uploadFailure, this.filesChanged);\n      em.on(FileUploadActions.uploadSuccess, this.filesChanged);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var em = this.events;\n      em.off(FileUploadActions.uploadProgress, this.filesChanged);\n      em.off(FileUploadActions.uploadFailure, this.filesChanged);\n      em.off(FileUploadActions.uploadSuccess, this.filesChanged);\n      em.emit(FileUploadActions.clearUploads, this.id);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(type) {\n      var _iterator2 = _createForOfIteratorHelper(this.notifications),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var notification = _step2.value;\n\n          if (notification.type === type) {\n            notification.cb();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"push\",\n    value: function push(files) {\n      /**\n       * TODO:\n       * Update `FileSelect` component to assign generated id\n       * to a file to enable multiple selection of the same file\n       */\n      var names = this.files.map(function (item) {\n        return item.status !== 'canceled' ? item.name : '';\n      });\n      var newUploadFiles = [];\n\n      var _iterator3 = _createForOfIteratorHelper(files),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var file = _step3.value;\n\n          if (names.indexOf(file.name) === -1) {\n            var id = generateId();\n            var added = new Date();\n            var data = {};\n            newUploadFiles.push({\n              name: file.name,\n              fileId: id,\n              content: file,\n              type: file.type,\n              uploaderId: this.id,\n              timestamp: added,\n              data: data\n            });\n            this.files.push({\n              id: id,\n              added: added,\n              status: 'new',\n              data: data,\n              name: file.name,\n              progress: 0,\n              type: file.type\n            });\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      if (newUploadFiles.length) {\n        this.emit('change');\n        this.events.emit(FileUploadActions.startUpload, {\n          files: newUploadFiles\n        });\n      }\n    }\n  }, {\n    key: \"completedFiles\",\n    get: function get() {\n      return this.files.filter(function (m) {\n        return m.status === 'complete';\n      });\n    }\n  }, {\n    key: \"ready\",\n    get: function get() {\n      return this.files.reduce(function (prev, curr) {\n        return prev && (curr.status === 'complete' || curr.status === 'canceled');\n      }, true);\n    }\n  }, {\n    key: \"total\",\n    get: function get() {\n      return this.files.filter(function (file) {\n        return file.status !== 'canceled';\n      }).length;\n    }\n  }]);\n\n  return UploadData;\n}();\n/**\n * The file uploader component that passes selected files to global uploader. Should be used with `FileUploaderDetails` component.\n */\n\nexport var FileUploader = /*#__PURE__*/function (_React$Component) {\n  _inherits(FileUploader, _React$Component);\n\n  var _super = _createSuper(FileUploader);\n\n  function FileUploader(props) {\n    var _this4;\n\n    _classCallCheck(this, FileUploader);\n\n    _this4 = _super.call(this, props);\n\n    _this4.emitChange = function () {\n      var onChange = _this4.props.onChange;\n\n      if (typeof onChange === 'function') {\n        var _this4$data = _this4.data,\n            files = _this4$data.files,\n            ready = _this4$data.ready,\n            total = _this4$data.total;\n        onChange({\n          files: files.map(function (file) {\n            return {\n              data: file.data,\n              id: file.id,\n              name: file.name,\n              progress: file.progress,\n              state: file.status,\n              type: file.type\n            };\n          }),\n          ready: ready,\n          total: total\n        });\n      }\n    };\n\n    _this4.filesAdded = function (e) {\n      _this4.data.push(e.value);\n    };\n\n    _this4.fileSelect = function (e) {\n      var multiple = _this4.props.multiple;\n      var _this4$data2 = _this4.data,\n          files = _this4$data2.files,\n          events = _this4$data2.events;\n      var notCanceledFiles = files.filter(function (file) {\n        return file.status !== 'canceled';\n      });\n\n      if (!multiple && notCanceledFiles.length === 1) {\n        var completedFiles = notCanceledFiles.filter(function (file) {\n          return file.status === 'complete';\n        });\n\n        if (completedFiles.length === 0) {\n          e.preventDefault();\n          events.emit(FileUploadActions.showUploads, {});\n        }\n      }\n    };\n\n    var _props$data = props.data,\n        data = _props$data === void 0 ? new UploadData() : _props$data;\n    _this4.data = data;\n    return _this4;\n  }\n\n  _createClass(FileUploader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.data.on('change', this.emitChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.data.off('change', this.emitChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          multiple = _this$props.multiple,\n          message = _this$props.message,\n          children = _this$props.children,\n          showFileList = _this$props.showFileList;\n      var additionalProps = !showFileList ? {\n        value: []\n      } : {};\n      return React.createElement(Dropzone, Object.assign({\n        multiple: multiple,\n        onChange: this.filesAdded,\n        onOpen: this.fileSelect,\n        message: message\n      }, additionalProps), children);\n    }\n  }]);\n\n  return FileUploader;\n}(React.Component);\nFileUploader.inner = {\n  get Dropzone() {\n    return Dropzone;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/FileUploader/index.tsx"],"names":[],"mappings":";;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAuB,aAAvB,QAA4C,0BAA5C;AACA,SAAS,QAAT,QAAiE,aAAjE;AACA,SAAS,iBAAT,QAAoF,wBAApF;AACA,SAAS,UAAT,EAAqB,eAArB,QAA4C,WAA5C;AAkFA,WAAa,UAAb;AAKI,sBAAY,MAAZ,EAAiC;AAAA;;AAAA;;AAoEzB,SAAA,YAAA,GAAe,gBAAsD;AAAA,UAAnD,KAAmD,QAAnD,KAAmD;AACzE,UAAM,aAAa,GAAG,KAAK,CAAC,MAAN,CAAa,UAAA,IAAI;AAAA,eAAI,IAAI,CAAC,UAAL,KAAoB,KAAI,CAAC,EAA7B;AAAA,OAAjB,CAAtB;;AACA,UAAI,aAAa,CAAC,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,YAAM,GAAG,GAAG,aAAa,CAAC,GAAd,CAAkB,UAAA,IAAI;AAAA,iBAAI,IAAI,CAAC,MAAT;AAAA,SAAtB,CAAZ;AACA,YAAI,OAAO,GAAG,KAAd;;AAF0B,mDAGP,KAAI,CAAC,KAHE;AAAA;;AAAA;AAG1B,8DAA+B;AAAA,gBAApB,IAAoB;AAC3B,gBAAM,KAAK,GAAG,GAAG,CAAC,OAAJ,CAAY,IAAI,CAAC,EAAjB,CAAd;;AACA,gBAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,kBAAM,WAAW,GAAG,aAAa,CAAC,KAAD,CAAjC;AACA,kBAAM,aAAa,GAAG,eAAe,CAAC,WAAD,CAArC;AACA,kBAAM,UAAU,GAAG,WAAW,CAAC,IAAZ,KAAqB,IAAI,CAAC,IAA1B,IAAkC,WAAW,CAAC,QAAZ,KAAyB,IAAI,CAAC,QAAhE,IAA4E,IAAI,CAAC,MAAL,KAAgB,aAA/G;;AACA,kBAAI,UAAJ,EAAgB;AACZ,gBAAA,OAAO,GAAG,IAAV;AACA,gBAAA,IAAI,CAAC,IAAL,GAAY,WAAW,CAAC,IAAxB;AACA,gBAAA,IAAI,CAAC,QAAL,GAAgB,WAAW,CAAC,QAA5B;AACA,gBAAA,IAAI,CAAC,MAAL,GAAc,aAAd;AACH;AACJ;AACJ;AAhByB;AAAA;AAAA;AAAA;AAAA;;AAiB1B,YAAI,OAAJ,EAAa;AACT,UAAA,KAAI,CAAC,IAAL,CAAU,QAAV;;AACA,cAAI,KAAI,CAAC,KAAT,EAAgB;AACZ,YAAA,KAAI,CAAC,IAAL,CAAU,OAAV;AACH;AACJ;AACJ;AACJ,KA1BO;;AAnEJ,SAAK,EAAL,GAAU,UAAU,EAApB;AACA,SAAK,MAAL,GAAc,MAAM,IAAI,aAAa,CAAC,CAAD,CAArC;AACA,SAAK,KAAL,GAAa,EAAb;AACA,SAAK,aAAL,GAAqB,EAArB;AACH;;AAVL;AAAA;AAAA,2BAoBW,EApBX,EAoB0D;AAAA;;AAClD,UAAM,OAAO,GAAG,SAAV,OAAU;AAAA,eAAM,EAAE,CAAC,MAAI,CAAC,cAAN,CAAR;AAAA,OAAhB;;AACA,UAAI,KAAK,KAAT,EAAgB;AACZ,QAAA,OAAO;AACV,OAFD,MAGK;AACD,aAAK,IAAL,CAAU,OAAV,EAAmB,OAAnB;AACH;AACJ;AA5BL;AAAA;AAAA,yBA6BS,IA7BT,EA6BoC,EA7BpC,EA6B+D;AAAA;;AACvD,UAAM,OAAO,GAAG,SAAV,OAAU,GAAK;AACjB,QAAA,MAAI,CAAC,GAAL,CAAS,IAAT,EAAe,OAAf;;AACA,QAAA,EAAE;AACL,OAHD;;AAIA,WAAK,EAAL,CAAQ,IAAR,EAAc,OAAd;AACH;AAnCL;AAAA;AAAA,uBAoCO,IApCP,EAoCkC,EApClC,EAoC6D;AACrD,UAAI,KAAK,aAAL,CAAmB,MAAnB,KAA8B,CAAlC,EAAqC;AACjC,aAAK,OAAL;AACH;;AACD,WAAK,aAAL,CAAmB,IAAnB,CAAwB;AAAE,QAAA,IAAI,EAAJ,IAAF;AAAQ,QAAA,EAAE,EAAF;AAAR,OAAxB;AACH;AAzCL;AAAA;AAAA,wBA0CQ,IA1CR,EA0CmC,EA1CnC,EA0C8D;AACtD,WAAK,IAAI,CAAC,GAAG,KAAK,aAAL,CAAmB,MAAhC,EAAwC,CAAC,EAAzC,GAA8C;AAC1C,YAAM,YAAY,GAAG,KAAK,aAAL,CAAmB,CAAnB,CAArB;;AACA,YAAI,YAAY,CAAC,IAAb,KAAsB,IAAtB,IAA8B,YAAY,CAAC,EAAb,KAAoB,EAAtD,EAA0D;AACtD,eAAK,aAAL,CAAmB,MAAnB,CAA0B,CAA1B,EAA6B,CAA7B;AACH;AACJ;;AACD,UAAI,KAAK,aAAL,CAAmB,MAAnB,KAA8B,CAAlC,EAAqC;AACjC,aAAK,UAAL;AACH;AACJ;AApDL;AAAA;AAAA,8BAqDmB;AACX,UAAM,EAAE,GAAG,KAAK,MAAhB;AACA,MAAA,EAAE,CAAC,EAAH,CAAM,iBAAiB,CAAC,cAAxB,EAAwC,KAAK,YAA7C;AACA,MAAA,EAAE,CAAC,EAAH,CAAM,iBAAiB,CAAC,aAAxB,EAAuC,KAAK,YAA5C;AACA,MAAA,EAAE,CAAC,EAAH,CAAM,iBAAiB,CAAC,aAAxB,EAAuC,KAAK,YAA5C;AACH;AA1DL;AAAA;AAAA,iCA2DsB;AACd,UAAM,EAAE,GAAG,KAAK,MAAhB;AACA,MAAA,EAAE,CAAC,GAAH,CAAO,iBAAiB,CAAC,cAAzB,EAAyC,KAAK,YAA9C;AACA,MAAA,EAAE,CAAC,GAAH,CAAO,iBAAiB,CAAC,aAAzB,EAAwC,KAAK,YAA7C;AACA,MAAA,EAAE,CAAC,GAAH,CAAO,iBAAiB,CAAC,aAAzB,EAAwC,KAAK,YAA7C;AACA,MAAA,EAAE,CAAC,IAAH,CAAQ,iBAAiB,CAAC,YAA1B,EAAwC,KAAK,EAA7C;AACH;AAjEL;AAAA;AAAA,yBAkEiB,IAlEjB,EAkE0C;AAAA,kDACP,KAAK,aADE;AAAA;;AAAA;AAClC,+DAA+C;AAAA,cAApC,YAAoC;;AAC3C,cAAI,YAAY,CAAC,IAAb,KAAsB,IAA1B,EAAgC;AAC5B,YAAA,YAAY,CAAC,EAAb;AACH;AACJ;AALiC;AAAA;AAAA;AAAA;AAAA;AAMrC;AAxEL;AAAA;AAAA,yBAoGS,KApGT,EAoG2B;AACnB;;;;;AAKA,UAAM,KAAK,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,UAAA,IAAI;AAAA,eAAK,IAAI,CAAC,MAAL,KAAgB,UAAhB,GAA6B,IAAI,CAAC,IAAlC,GAAyC,EAA9C;AAAA,OAAnB,CAAd;AACA,UAAM,cAAc,GAAoB,EAAxC;;AAPmB,kDAQA,KARA;AAAA;;AAAA;AAQnB,+DAA0B;AAAA,cAAf,IAAe;;AACtB,cAAI,KAAK,CAAC,OAAN,CAAc,IAAI,CAAC,IAAnB,MAA6B,CAAC,CAAlC,EAAqC;AACjC,gBAAM,EAAE,GAAG,UAAU,EAArB;AACA,gBAAM,KAAK,GAAG,IAAI,IAAJ,EAAd;AACA,gBAAM,IAAI,GAAG,EAAb;AACA,YAAA,cAAc,CAAC,IAAf,CAAoB;AAChB,cAAA,IAAI,EAAE,IAAI,CAAC,IADK;AAEhB,cAAA,MAAM,EAAE,EAFQ;AAGhB,cAAA,OAAO,EAAE,IAHO;AAIhB,cAAA,IAAI,EAAE,IAAI,CAAC,IAJK;AAKhB,cAAA,UAAU,EAAE,KAAK,EALD;AAMhB,cAAA,SAAS,EAAE,KANK;AAOhB,cAAA,IAAI,EAAJ;AAPgB,aAApB;AASA,iBAAK,KAAL,CAAW,IAAX,CAAgB;AACZ,cAAA,EAAE,EAAF,EADY;AAEZ,cAAA,KAAK,EAAL,KAFY;AAGZ,cAAA,MAAM,EAAE,KAHI;AAIZ,cAAA,IAAI,EAAJ,IAJY;AAKZ,cAAA,IAAI,EAAE,IAAI,CAAC,IALC;AAMZ,cAAA,QAAQ,EAAE,CANE;AAOZ,cAAA,IAAI,EAAE,IAAI,CAAC;AAPC,aAAhB;AASH;AACJ;AAhCkB;AAAA;AAAA;AAAA;AAAA;;AAiCnB,UAAI,cAAc,CAAC,MAAnB,EAA2B;AACvB,aAAK,IAAL,CAAU,QAAV;AACA,aAAK,MAAL,CAAY,IAAZ,CAAiB,iBAAiB,CAAC,WAAnC,EAAgD;AAAE,UAAA,KAAK,EAAE;AAAT,SAAhD;AACH;AACJ;AAzIL;AAAA;AAAA,wBAWsB;AACd,aAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAA,CAAC;AAAA,eAAI,CAAC,CAAC,MAAF,KAAa,UAAjB;AAAA,OAAnB,CAAP;AACH;AAbL;AAAA;AAAA,wBAca;AACL,aAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAC,IAAD,EAAO,IAAP;AAAA,eAAgB,IAAI,KAAK,IAAI,CAAC,MAAL,KAAgB,UAAhB,IAA8B,IAAI,CAAC,MAAL,KAAgB,UAAnD,CAApB;AAAA,OAAlB,EAAsG,IAAtG,CAAP;AACH;AAhBL;AAAA;AAAA,wBAiBa;AACL,aAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAA,IAAI;AAAA,eAAI,IAAI,CAAC,MAAL,KAAgB,UAApB;AAAA,OAAtB,EAAsD,MAA7D;AACH;AAnBL;;AAAA;AAAA;AA2IA;;;;AAGA,WAAa,YAAb;AAAA;;AAAA;;AAEI,wBAAY,KAAZ,EAAoC;AAAA;;AAAA;;AAChC,+BAAM,KAAN;;AAUI,WAAA,UAAA,GAAa,YAAK;AAAA,UACd,QADc,GACD,OAAK,KADJ,CACd,QADc;;AAEtB,UAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAAA,0BACA,OAAK,IADL;AAAA,YACxB,KADwB,eACxB,KADwB;AAAA,YACjB,KADiB,eACjB,KADiB;AAAA,YACV,KADU,eACV,KADU;AAEhC,QAAA,QAAQ,CAAC;AACL,UAAA,KAAK,EAAE,KAAK,CAAC,GAAN,CAA4B,UAAA,IAAI;AAAA,mBAAK;AACxC,cAAA,IAAI,EAAE,IAAI,CAAC,IAD6B;AAExC,cAAA,EAAE,EAAE,IAAI,CAAC,EAF+B;AAGxC,cAAA,IAAI,EAAE,IAAI,CAAC,IAH6B;AAIxC,cAAA,QAAQ,EAAE,IAAI,CAAC,QAJyB;AAKxC,cAAA,KAAK,EAAE,IAAI,CAAC,MAL4B;AAMxC,cAAA,IAAI,EAAE,IAAI,CAAC;AAN6B,aAAL;AAAA,WAAhC,CADF;AASL,UAAA,KAAK,EAAL,KATK;AAUL,UAAA,KAAK,EAAL;AAVK,SAAD,CAAR;AAYH;AACJ,KAjBO;;AAkBA,WAAA,UAAA,GAAa,UAAC,CAAD,EAA2B;AAC5C,aAAK,IAAL,CAAU,IAAV,CAAe,CAAC,CAAC,KAAjB;AACH,KAFO;;AAGA,WAAA,UAAA,GAAa,UAAC,CAAD,EAAyB;AAAA,UAClC,QADkC,GACrB,OAAK,KADgB,CAClC,QADkC;AAAA,yBAEhB,OAAK,IAFW;AAAA,UAElC,KAFkC,gBAElC,KAFkC;AAAA,UAE3B,MAF2B,gBAE3B,MAF2B;AAG1C,UAAM,gBAAgB,GAAG,KAAK,CAAC,MAAN,CAAa,UAAA,IAAI;AAAA,eAAI,IAAI,CAAC,MAAL,KAAgB,UAApB;AAAA,OAAjB,CAAzB;;AACA,UAAI,CAAC,QAAD,IAAa,gBAAgB,CAAC,MAAjB,KAA4B,CAA7C,EAAgD;AAC5C,YAAM,cAAc,GAAG,gBAAgB,CAAC,MAAjB,CAAwB,UAAA,IAAI;AAAA,iBAAI,IAAI,CAAC,MAAL,KAAgB,UAApB;AAAA,SAA5B,CAAvB;;AACA,YAAI,cAAc,CAAC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,UAAA,CAAC,CAAC,cAAF;AACA,UAAA,MAAM,CAAC,IAAP,CAAY,iBAAiB,CAAC,WAA9B,EAA2C,EAA3C;AACH;AACJ;AACJ,KAXO;;AAhC4B,sBAEI,KAFJ,CAExB,IAFwB;AAAA,QAExB,IAFwB,4BAEjB,IAAI,UAAJ,EAFiB;AAGhC,WAAK,IAAL,GAAY,IAAZ;AAHgC;AAInC;;AANL;AAAA;AAAA,wCAOqB;AACb,WAAK,IAAL,CAAU,EAAV,CAAa,QAAb,EAAuB,KAAK,UAA5B;AACH;AATL;AAAA;AAAA,2CAUwB;AAChB,WAAK,IAAL,CAAU,GAAV,CAAc,QAAd,EAAwB,KAAK,UAA7B;AACH;AAZL;AAAA;AAAA,6BA8CU;AAAA,wBACoD,KAAK,KADzD;AAAA,UACM,QADN,eACM,QADN;AAAA,UACgB,OADhB,eACgB,OADhB;AAAA,UACyB,QADzB,eACyB,QADzB;AAAA,UACmC,YADnC,eACmC,YADnC;AAEF,UAAM,eAAe,GAAG,CAAC,YAAD,GAAgB;AAAE,QAAA,KAAK,EAAE;AAAT,OAAhB,GAAgC,EAAxD;AACA,aAAQ,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS,MAAA,CAAA,MAAA,CAAA;AAAC,QAAA,QAAQ,EAAE,QAAX;AAAqB,QAAA,QAAQ,EAAE,KAAK,UAApC;AAAgD,QAAA,MAAM,EAAE,KAAK,UAA7D;AAAyE,QAAA,OAAO,EAAE;AAAlF,OAAA,EAA+F,eAA/F,CAAT,EACP,QADO,CAAR;AAGH;AApDL;;AAAA;AAAA,EAAkC,KAAK,CAAC,SAAxC;AAqDW,YAAA,CAAA,KAAA,GAAQ;AACX,MAAI,QAAJ,GAAY;AAAK,WAAO,QAAP;AAAqC;;AAD3C,CAAR","sourcesContent":["import * as React from 'react';\nimport { EventManager, eventManagers } from '../../utils/eventManager';\nimport { Dropzone, DropzoneOpenEvent, DropzoneChangeEvent } from '../Dropzone';\nimport { FileUploadActions, FileItem, FileProgress, FileUploaderDetailsEvent } from '../FileUploaderDetails';\nimport { generateId, getSimpleStatus } from './helpers';\nexport type UploadFileState = 'new' | 'active' | 'canceled' | 'complete';\nexport interface UploadFileStatus {\n    /**\n     * The id of the file for identification.\n     */\n    id: string;\n    /**\n     * The name of the file.\n     */\n    name: string;\n    /**\n     * The content-type of the file.\n     */\n    type: string;\n    /**\n     * The current progress of the file.\n     */\n    progress: number;\n    /**\n     * The current state of the file.\n     */\n    state: UploadFileState;\n    /**\n     * Arbitrary data associated with the file, which is set by the upload host.\n     */\n    data: any;\n}\nexport interface FileUploaderChangeEvent {\n    /**\n     * The files that changed.\n     */\n    files: Array<UploadFileStatus>;\n    /**\n     * The total number of selected files.\n     */\n    total: number;\n    /**\n     * Status if the selected files are all uploaded and verified.\n     */\n    ready: boolean;\n}\nexport interface FileUploaderProps {\n    /**\n     * Allow selecting multiple files.\n     */\n    multiple?: boolean;\n    /**\n     * Event emitted when file upload changes.\n     */\n    onChange?(e: FileUploaderChangeEvent): void;\n    /**\n     * Optionally uses an explicit upload data connector.\n     */\n    data?: UploadData;\n    /**\n     * Message for dragging files to show on drop area.\n     * @default \"Drop files here to upload\"\n     */\n    message?: string;\n    /**\n     * Show the file list under the drop zone\n     */\n    showFileList?: boolean;\n}\nexport interface UploadFile {\n    id: string;\n    name: string;\n    type: string;\n    progress: number;\n    data: any;\n    added: Date;\n    status: UploadFileState;\n}\nexport type UploadDataEventType = 'change' | 'ready';\nexport interface UploadDataEventListener {\n    (): void;\n}\ninterface UploadDataNotification {\n    type: UploadDataEventType;\n    cb: UploadDataEventListener;\n}\nexport class UploadData {\n    readonly id: string;\n    readonly events: EventManager;\n    readonly files: Array<UploadFile>;\n    private readonly notifications: Array<UploadDataNotification>;\n    constructor(events?: EventManager) {\n        this.id = generateId();\n        this.events = events || eventManagers[0];\n        this.files = [];\n        this.notifications = [];\n    }\n    get completedFiles() {\n        return this.files.filter(m => m.status === 'complete');\n    }\n    get ready() {\n        return this.files.reduce((prev, curr) => prev && (curr.status === 'complete' || curr.status === 'canceled'), true);\n    }\n    get total() {\n        return this.files.filter(file => file.status !== 'canceled').length;\n    }\n    commit(cb: (completedFiles: Array<UploadFile>) => void) {\n        const handler = () => cb(this.completedFiles);\n        if (this.ready) {\n            handler();\n        }\n        else {\n            this.once('ready', handler);\n        }\n    }\n    once(type: UploadDataEventType, cb: UploadDataEventListener) {\n        const handler = () => {\n            this.off(type, handler);\n            cb();\n        };\n        this.on(type, handler);\n    }\n    on(type: UploadDataEventType, cb: UploadDataEventListener) {\n        if (this.notifications.length === 0) {\n            this.connect();\n        }\n        this.notifications.push({ type, cb });\n    }\n    off(type: UploadDataEventType, cb: UploadDataEventListener) {\n        for (let i = this.notifications.length; i--;) {\n            const notification = this.notifications[i];\n            if (notification.type === type && notification.cb === cb) {\n                this.notifications.splice(i, 1);\n            }\n        }\n        if (this.notifications.length === 0) {\n            this.disconnect();\n        }\n    }\n    private connect() {\n        const em = this.events;\n        em.on(FileUploadActions.uploadProgress, this.filesChanged);\n        em.on(FileUploadActions.uploadFailure, this.filesChanged);\n        em.on(FileUploadActions.uploadSuccess, this.filesChanged);\n    }\n    private disconnect() {\n        const em = this.events;\n        em.off(FileUploadActions.uploadProgress, this.filesChanged);\n        em.off(FileUploadActions.uploadFailure, this.filesChanged);\n        em.off(FileUploadActions.uploadSuccess, this.filesChanged);\n        em.emit(FileUploadActions.clearUploads, this.id);\n    }\n    private emit(type: UploadDataEventType) {\n        for (const notification of this.notifications) {\n            if (notification.type === type) {\n                notification.cb();\n            }\n        }\n    }\n    private filesChanged = ({ files }: FileUploaderDetailsEvent<FileProgress>) => {\n        const filteredFiles = files.filter(item => item.uploaderId === this.id);\n        if (filteredFiles.length > 0) {\n            const ids = filteredFiles.map(item => item.fileId);\n            let changed = false;\n            for (const file of this.files) {\n                const index = ids.indexOf(file.id);\n                if (index !== -1) {\n                    const updatedFile = filteredFiles[index];\n                    const updatedStatus = getSimpleStatus(updatedFile);\n                    const hasChanged = updatedFile.data !== file.data || updatedFile.progress !== file.progress || file.status !== updatedStatus;\n                    if (hasChanged) {\n                        changed = true;\n                        file.data = updatedFile.data;\n                        file.progress = updatedFile.progress;\n                        file.status = updatedStatus;\n                    }\n                }\n            }\n            if (changed) {\n                this.emit('change');\n                if (this.ready) {\n                    this.emit('ready');\n                }\n            }\n        }\n    };\n    push(files: Array<File>) {\n        /**\n         * TODO:\n         * Update `FileSelect` component to assign generated id\n         * to a file to enable multiple selection of the same file\n         */\n        const names = this.files.map(item => (item.status !== 'canceled' ? item.name : ''));\n        const newUploadFiles: Array<FileItem> = [];\n        for (const file of files) {\n            if (names.indexOf(file.name) === -1) {\n                const id = generateId();\n                const added = new Date();\n                const data = {};\n                newUploadFiles.push({\n                    name: file.name,\n                    fileId: id,\n                    content: file,\n                    type: file.type,\n                    uploaderId: this.id,\n                    timestamp: added,\n                    data,\n                });\n                this.files.push({\n                    id,\n                    added,\n                    status: 'new',\n                    data,\n                    name: file.name,\n                    progress: 0,\n                    type: file.type,\n                });\n            }\n        }\n        if (newUploadFiles.length) {\n            this.emit('change');\n            this.events.emit(FileUploadActions.startUpload, { files: newUploadFiles });\n        }\n    }\n}\n/**\n * The file uploader component that passes selected files to global uploader. Should be used with `FileUploaderDetails` component.\n */\nexport class FileUploader extends React.Component<FileUploaderProps> {\n    private readonly data: UploadData;\n    constructor(props: FileUploaderProps) {\n        super(props);\n        const { data = new UploadData() } = props;\n        this.data = data;\n    }\n    componentDidMount() {\n        this.data.on('change', this.emitChange);\n    }\n    componentWillUnmount() {\n        this.data.off('change', this.emitChange);\n    }\n    private emitChange = () => {\n        const { onChange } = this.props;\n        if (typeof onChange === 'function') {\n            const { files, ready, total } = this.data;\n            onChange({\n                files: files.map<UploadFileStatus>(file => ({\n                    data: file.data,\n                    id: file.id,\n                    name: file.name,\n                    progress: file.progress,\n                    state: file.status,\n                    type: file.type,\n                })),\n                ready,\n                total,\n            });\n        }\n    };\n    private filesAdded = (e: DropzoneChangeEvent) => {\n        this.data.push(e.value);\n    };\n    private fileSelect = (e: DropzoneOpenEvent) => {\n        const { multiple } = this.props;\n        const { files, events } = this.data;\n        const notCanceledFiles = files.filter(file => file.status !== 'canceled');\n        if (!multiple && notCanceledFiles.length === 1) {\n            const completedFiles = notCanceledFiles.filter(file => file.status === 'complete');\n            if (completedFiles.length === 0) {\n                e.preventDefault();\n                events.emit(FileUploadActions.showUploads, {});\n            }\n        }\n    };\n    render() {\n        const { multiple, message, children, showFileList } = this.props;\n        const additionalProps = !showFileList ? { value: [] } : {};\n        return (<Dropzone multiple={multiple} onChange={this.filesAdded} onOpen={this.fileSelect} message={message} {...additionalProps}>\n        {children}\n      </Dropzone>);\n    }\n    static inner = {\n        get Dropzone() { return Dropzone as typeof Dropzone; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}