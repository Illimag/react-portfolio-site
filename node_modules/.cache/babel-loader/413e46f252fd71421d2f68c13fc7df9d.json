{"ast":null,"code":"import _taggedTemplateLiteral from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  \", \"\\n  text-decoration: none;\\n  color: \", \";\\n  display: \", \";\\n  cursor: \", \";\\n  \", \";\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  &:hover {\\n    color: \", \";\\n  }\\n  &:focus {\\n    color: \", \";\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { Anchor } from '../Anchor';\nimport { getFontStyle } from '../../textStyles';\nvar PseudoLinkStyle = css(_templateObject(), themed(function (props) {\n  return props.theme.ui6;\n}), themed(function (props) {\n  return props.theme.ui7;\n}));\nvar StyledActionLink = styled(Anchor)(_templateObject2(), getFontStyle({\n  weight: 'medium'\n}), themed(function (props) {\n  return props.disabled ? props.theme.text3 : props.theme.ui0;\n}), function (props) {\n  return props.block ? 'block' : 'inline-block';\n}, function (props) {\n  return props.disabled ? 'default' : 'pointer';\n}, function (props) {\n  return !props.disabled ? PseudoLinkStyle : '';\n});\n/**\n * The action link component gives a simple text link to be used in call for action scenarios.\n */\n\nexport var ActionLink = Object.assign(function (props) {\n  return React.createElement(StyledActionLink, Object.assign({}, props));\n}, {\n  inner: {\n    get StyledActionLink() {\n      return StyledActionLink;\n    }\n\n  }\n});\nActionLink.displayName = 'ActionLink';","map":{"version":3,"sources":["../../../../src/components/ActionLink/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,MAAjB,EAAyB,GAAzB,QAAoC,oBAApC;AACA,SAAS,MAAT,QAAoC,WAApC;AACA,SAAS,YAAT,QAA6B,kBAA7B;AAeA,IAAM,eAAe,GAAG,GAAH,oBAER,MAAM,CAAC,UAAA,KAAK;AAAA,SAAI,KAAK,CAAC,KAAN,CAAY,GAAhB;AAAA,CAAN,CAFE,EAKR,MAAM,CAAC,UAAA,KAAK;AAAA,SAAI,KAAK,CAAC,KAAN,CAAY,GAAhB;AAAA,CAAN,CALE,CAArB;AASA,IAAM,gBAAgB,GAAG,MAAM,CAAC,MAAD,CAAT,qBAClB,YAAY,CAAC;AAAE,EAAA,MAAM,EAAE;AAAV,CAAD,CADM,EAGX,MAAM,CAAC,UAAA,KAAK;AAAA,SAAK,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,KAAN,CAAY,KAA7B,GAAqC,KAAK,CAAC,KAAN,CAAY,GAAtD;AAAA,CAAN,CAHK,EAIT,UAAA,KAAK;AAAA,SAAK,KAAK,CAAC,KAAN,GAAc,OAAd,GAAwB,cAA7B;AAAA,CAJI,EAKV,UAAA,KAAK;AAAA,SAAK,KAAK,CAAC,QAAN,GAAiB,SAAjB,GAA6B,SAAlC;AAAA,CALK,EAMlB,UAAA,KAAK;AAAA,SAAK,CAAC,KAAK,CAAC,QAAP,GAAkB,eAAlB,GAAoC,EAAzC;AAAA,CANa,CAAtB;AAQA;;;;AAGA,OAAO,IAAM,UAAU,GAAG,MAAM,CAAC,MAAP,CAAgB,UAAA,KAAK;AAAA,SAAI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAjB,CAAJ;AAAA,CAArB,EAAyF;AAAE,EAAA,KAAK,EAAE;AACpH,QAAI,gBAAJ,GAAoB;AAAK,aAAO,gBAAP;AAAqD;;AADsC;AAAT,CAAzF,CAAnB;AAGP,UAAU,CAAC,WAAX,GAAyB,YAAzB","sourcesContent":["import * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { Anchor, AnchorProps } from '../Anchor';\nimport { getFontStyle } from '../../textStyles';\nexport interface ActionLinkProps extends AnchorProps {\n    /**\n     * Sets the action link as active.\n     */\n    active?: boolean;\n    /**\n     * Sets the action link as a block.\n     */\n    block?: boolean;\n}\nexport interface StyledActionLink {\n    disabled?: boolean;\n    block?: boolean;\n}\nconst PseudoLinkStyle = css `\n  &:hover {\n    color: ${themed(props => props.theme.ui6)};\n  }\n  &:focus {\n    color: ${themed(props => props.theme.ui7)};\n    outline: none;\n  }\n`;\nconst StyledActionLink = styled(Anchor)<StyledActionLink> `\n  ${getFontStyle({ weight: 'medium' })}\n  text-decoration: none;\n  color: ${themed(props => (props.disabled ? props.theme.text3 : props.theme.ui0))};\n  display: ${props => (props.block ? 'block' : 'inline-block')};\n  cursor: ${props => (props.disabled ? 'default' : 'pointer')};\n  ${props => (!props.disabled ? PseudoLinkStyle : '')};\n`;\n/**\n * The action link component gives a simple text link to be used in call for action scenarios.\n */\nexport const ActionLink = Object.assign(((props => <StyledActionLink {...props}/>) as React.SFC<ActionLinkProps>), { inner: {\n        get StyledActionLink() { return StyledActionLink as typeof StyledActionLink; }\n    } });\nActionLink.displayName = 'ActionLink';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}