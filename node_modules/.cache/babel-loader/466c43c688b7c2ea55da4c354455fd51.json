{"ast":null,"code":"export var InteractiveListDirection;\n\n(function (InteractiveListDirection) {\n  InteractiveListDirection[InteractiveListDirection[\"normal\"] = 0] = \"normal\";\n  InteractiveListDirection[InteractiveListDirection[\"reverse\"] = 1] = \"reverse\";\n})(InteractiveListDirection || (InteractiveListDirection = {}));","map":{"version":3,"sources":["../../../../src/components/InteractiveList/InteractiveList.types.part.tsx"],"names":[],"mappings":"AAiIA,OAAA,IAAY,wBAAZ;;AAAA,CAAA,UAAY,wBAAZ,EAAoC;AAChC,EAAA,wBAAA,CAAA,wBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,wBAAA,CAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACH,CAHD,EAAY,wBAAwB,KAAxB,wBAAwB,GAAA,EAAA,CAApC","sourcesContent":["import { StandardProps } from '../../common';\nexport interface InteractiveListItemObject {\n    key: string;\n    content?: React.ReactChild;\n    searchText?: string;\n    type?: 'item' | 'divider' | 'header';\n}\nexport type InteractiveListItem = InteractiveListItemObject | string;\nexport interface InteractiveListChangeEvent {\n    /**\n     * The changed value if any.\n     */\n    value: Array<number>;\n}\nexport interface InteractiveListProps extends StandardProps {\n    /**\n     * The data to be displayed as selection basis.\n     */\n    data: Array<string | InteractiveListItem | undefined>;\n    /**\n     * Determines if the list should be open or not.\n     */\n    open?: boolean;\n    /**\n     * Determines if interactivity is disabled, i.e., touch etc. behaves as a scroll.\n     */\n    disabled?: boolean;\n    /**\n     * This Boolean attribute indicates that multiple options can be selected in the list.\n     * If it is not specified, then only one option can be selected at a time.\n     * Default value is `false`.\n     */\n    multiple?: boolean;\n    /**\n     * Optionally makes the accordion paddings smaller.\n     */\n    condensed?: boolean;\n    /**\n     * Switches the default to render a border on each list item.\n     * Default value is `false`.\n     */\n    borderless?: boolean;\n    /**\n     * Removes the tick that is shown for the selected list item.\n     * Default value is `false`.\n     */\n    showTick?: boolean;\n    /**\n     * The currently selected value, either a single one or multiple.\n     * If used will go into controlled mode.\n     */\n    value?: string | Array<string>;\n    /**\n     * The initially selected value, either a single one or multiple.\n     * Should be used to remain in managed mode.\n     */\n    defaultValue?: string | Array<string>;\n    /**\n     * Event triggered once the selected value changes.\n     */\n    onChange?(e: InteractiveListChangeEvent): void;\n    /**\n     * Event triggered once interactive list loses the focus.\n     */\n    onBlur?(): void;\n    /**\n     * Event triggered when a key was pressed.\n     */\n    onKeyDown?(e: React.KeyboardEvent<HTMLElement>): void;\n    /**\n     * The custom wrapper for rendering the list.\n     */\n    customWrapper?: React.ComponentType<InteractiveListWrapperProps>;\n    /**\n     * The content to consider for the interactive list.\n     */\n    children?: React.ReactNode;\n    /**\n     * @ignore\n     */\n    indices?: Array<number>;\n    /**\n     * Whether to position the list automatically based on screen size.\n     */\n    autoPosition?: boolean;\n    /**\n     * Whether to autofocus the list when it opens.\n     */\n    autoFocus?: boolean;\n    /**\n     * Set to true to focus the list.\n     */\n    focus?: boolean;\n    /**\n     * Set to false for the list to be visible as a shown block element.\n     * Default value is `true`.\n     */\n    flyout?: boolean;\n    /**\n     * Event transported from the wrapper in case of a click somewhere inside.\n     */\n    onClick?(e: React.MouseEvent<HTMLElement>): void;\n    /**\n     * Event fired when clicked outside of the component\n     */\n    onClickOutside?(): void;\n    /**\n     * Whether to position the list to top or bottom.\n     * Either `0` (bottom) or `1` (top). Make sure that the value provided is number.\n     */\n    direction?: InteractiveListDirection;\n    /**\n     * Disable specific items. Strings in this list have to match the strings used as `data` or the `key`\n     * fields if `InteractiveListItemObject` are used.\n     */\n    disabledItems?: Array<string>;\n}\nexport interface InteractiveListState {\n    value: Array<number>;\n    controlled: boolean;\n    selected: number | undefined;\n    direction: InteractiveListDirection;\n}\nexport const enum InteractiveListBorderType {\n    none = 0,\n    normal = 1,\n    focus = 2,\n    error = 3\n}\nexport enum InteractiveListDirection {\n    normal = 0,\n    reverse = 1\n}\nexport interface InteractiveListWrapperProps {\n    open: boolean;\n    border: InteractiveListBorderType;\n    direction: InteractiveListDirection;\n    onClick?(e: React.MouseEvent<HTMLElement>): void;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}