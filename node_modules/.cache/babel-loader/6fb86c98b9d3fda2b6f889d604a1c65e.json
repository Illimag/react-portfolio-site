{"ast":null,"code":"import onClickOutside from 'react-onclickoutside';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\n/**\n * Wraps the component with a helper that detects if the wrapped component\n * or its surrounding was clicked.\n * @param component The component to be notified when outside was clicked.\n * @param options The options for configuration.\n * @returns The wrapped component.\n */\n\nexport function withOutsideClick(Component) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return withInner(onClickOutside(Component, {\n    excludeScrollbar: options.excludeScrollbar\n  }), {\n    Component: Component\n  });\n}","map":{"version":3,"sources":["../../../src/hoc/withOutsideClick.tsx"],"names":[],"mappings":"AAAA,OAAO,cAAP,MAAgD,sBAAhD;AACA,SAAS,SAAT,QAA0B,uCAA1B;AAiBA;;;;;;;;AAOA,OAAM,SAAU,gBAAV,CAAmC,SAAnC,EAA4G;AAAA,MAAjC,OAAiC,uEAAF,EAAE;AAC9G,SAAO,SAAS,CAAC,cAAc,CAAC,SAAD,EAAY;AACvC,IAAA,gBAAgB,EAAE,OAAO,CAAC;AADa,GAAZ,CAAf,EAEZ;AAAE,IAAA,SAAS,EAAT;AAAF,GAFY,CAAhB;AAGH","sourcesContent":["import onClickOutside, { OnClickOutProps } from 'react-onclickoutside';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\nexport interface OutsideInjectedProps {\n    disableOnClickOutside(): void;\n    enableOnClickOutside(): void;\n}\nexport interface OutsideAdditionalProps {\n    handleClickOutside?: React.MouseEventHandler<any>;\n    eventTypes?: string | Array<string>;\n    outsideClickIgnoreClass?: string;\n    preventDefault?: boolean;\n    stopPropagation?: boolean;\n    excludeScrollbar?: boolean;\n}\nexport interface OutsideClickOptions {\n    excludeScrollbar?: boolean;\n}\nexport type OutsideComponentProps<P> = OutsideAdditionalProps & Pick<P, Exclude<keyof P, keyof OutsideInjectedProps>>;\n/**\n * Wraps the component with a helper that detects if the wrapped component\n * or its surrounding was clicked.\n * @param component The component to be notified when outside was clicked.\n * @param options The options for configuration.\n * @returns The wrapped component.\n */\nexport function withOutsideClick<TProps>(Component: React.ComponentType<TProps>, options: OutsideClickOptions = {}): React.ComponentClass<OutsideComponentProps<TProps>> {\n    return withInner(onClickOutside(Component, {\n        excludeScrollbar: options.excludeScrollbar,\n    }), { Component });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}