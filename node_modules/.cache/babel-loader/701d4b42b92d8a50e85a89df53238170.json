{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as colors from '../../colors';\nimport styled, { themed, css } from '../../utils/styled';\nimport { distance } from '../../distance';\nimport { IconLink } from '../IconLink';\nimport { Icon } from '../Icon';\nimport { getFontStyle } from '../../textStyles';\n\nfunction getNotificationColor(type = 'none', theme) {\n  switch (type) {\n    case 'success':\n      return theme.notificationColorSuccess;\n\n    case 'info':\n      return theme.notificationColorInfo;\n\n    case 'warning':\n      return theme.notificationColorWarning;\n\n    case 'error':\n      return theme.notificationColorError;\n\n    case 'none':\n    default:\n      return theme.notificationColorNone;\n  }\n}\n\nfunction getNotificationIcon(type = 'none') {\n  switch (type) {\n    case 'success':\n      return 'CheckCircle';\n\n    case 'info':\n      return 'Info';\n\n    case 'warning':\n      return 'Warning';\n\n    case 'error':\n      return 'Error';\n\n    case 'none':\n    default:\n      return 'Notifications';\n  }\n}\n\nconst StyledNotification = styled.div(themed(({\n  closed,\n  type,\n  theme\n}) => `\n  position: relative;\n  display: ${closed ? 'none' : 'flex'};\n  background: #fff;\n  border-style: solid;\n  border-color: ${getNotificationColor(type, theme)};\n  margin-bottom: ${distance.small};\n  padding: ${theme.notificationPadding};\n  box-shadow: ${theme.notificationBoxShadow};\n  border-width: ${theme.notificationBorderWidth};\n`));\nconst StyledTitle = styled.div(themed(({\n  theme: {\n    notificationTitleFontSize,\n    notificationTitleLineHeight\n  }\n}) => `\n  font-family: inherit;\n  font-size: ${notificationTitleFontSize};\n  line-height: ${notificationTitleLineHeight};\n  color: #404040;\n  margin-right: ${distance.small};\n`));\nconst ContentWrapper = styled.span`\n  display: contents;\n`;\nconst StyledContent = styled.div(themed(({\n  inline,\n  theme: {\n    notificationTextFontSize,\n    notificationTextLineHeight\n  }\n}) => `\n  display: ${inline ? 'inline' : 'block'};\n  font-family: inherit;\n  font-size: ${notificationTextFontSize};\n  line-height: ${notificationTextLineHeight};\n  color: #404040;\n  margin-right: ${distance.small};\n`));\nconst ActionContainer = styled('div')`\n  display: ${props => props.inline ? 'inline' : 'block'};\n`;\nconst CloseButton = styled(IconLink)`\n  ${getFontStyle({\n  size: 'medium'\n})}\n\n  position: absolute;\n  right: ${distance.small};\n  top: ${distance.small};\n  background-color: ${colors.transparent};\n  color: ${colors.black};\n  padding: 0;\n  border: none;\n  outline: none;\n`;\nconst LayoutVertical = css`\n  display: flex;\n  flex-direction: column;\n`;\nconst LayoutInline = css`\n  display: block;\n`;\nconst ContentContainer = styled.div`\n  ${props => props.inline ? LayoutInline : LayoutVertical};\n  margin-right: ${distance.medium};\n  width: 100%;\n`;\nconst IconContainer = styled.div(themed(({\n  theme: {\n    notificationIconMarginRight\n  }\n}) => css`\n      margin-right: ${notificationIconMarginRight};\n    `));\nconst StyledIconInt = Object.assign(_a => {\n  var {\n    type: _0\n  } = _a,\n      props = __rest(_a, [\"type\"]);\n\n  return React.createElement(Icon, Object.assign({}, props));\n}, {\n  inner: {\n    get Icon() {\n      return Icon;\n    }\n\n  }\n});\nconst StyledIcon = styled(StyledIconInt)`\n  color: ${themed(props => getNotificationColor(props.type, props.theme))};\n`;\n/**\n * The Notification component for rendering an inline notification message.\n */\n\nexport class Notification extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onCloseHandler = e => {\n      const {\n        onClose,\n        closeable\n      } = this.props;\n\n      if (typeof onClose === 'function' && closeable) {\n        const selfClose = onClose(e);\n\n        if (selfClose === false) {\n          return;\n        }\n      }\n\n      this.setState({\n        closed: true\n      });\n    };\n\n    this.state = {\n      closed: false\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      type = 'none',\n      children,\n      title,\n      actionRenderer,\n      theme,\n      style,\n      closeable\n    } = _a,\n          other = __rest(_a, [\"type\", \"children\", \"title\", \"actionRenderer\", \"theme\", \"style\", \"closeable\"]);\n\n    const {\n      closed\n    } = this.state;\n    const isInline = !title;\n    return React.createElement(StyledNotification, Object.assign({\n      theme: theme,\n      closed: closed,\n      type: type\n    }, other), React.createElement(IconContainer, {\n      theme: theme\n    }, React.createElement(StyledIcon, {\n      type: type,\n      name: getNotificationIcon(type),\n      size: \"22px\",\n      theme: theme\n    })), React.createElement(ContentContainer, {\n      inline: isInline\n    }, title && React.createElement(StyledTitle, {\n      theme: theme\n    }, title), React.createElement(StyledContent, {\n      inline: isInline,\n      theme: theme\n    }, children), React.createElement(ActionContainer, {\n      inline: isInline\n    }, React.createElement(ContentWrapper, {\n      onClick: this.onCloseHandler\n    }, actionRenderer && actionRenderer()))), closeable && React.createElement(CloseButton, {\n      onClick: this.onCloseHandler,\n      icon: \"Close\"\n    }));\n  }\n\n}\nNotification.defaultProps = {\n  closeable: true\n};\nNotification.inner = {\n  get StyledNotification() {\n    return StyledNotification;\n  },\n\n  get IconContainer() {\n    return IconContainer;\n  },\n\n  get StyledIcon() {\n    return StyledIcon;\n  },\n\n  get ContentContainer() {\n    return ContentContainer;\n  },\n\n  get StyledTitle() {\n    return StyledTitle;\n  },\n\n  get StyledContent() {\n    return StyledContent;\n  },\n\n  get ActionContainer() {\n    return ActionContainer;\n  },\n\n  get ContentWrapper() {\n    return ContentWrapper;\n  },\n\n  get CloseButton() {\n    return CloseButton;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Notification/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as colors from '../../colors';\nimport styled, { themed, css } from '../../utils/styled';\nimport { NotificationType } from '../Notifications/types';\nimport { distance } from '../../distance';\nimport { StandardProps, PreciseFullTheme } from '../../common';\nimport { IconLink } from '../IconLink';\nimport { Icon, IconProps } from '../Icon';\nimport { getFontStyle } from '../../textStyles';\nexport interface NotificationProps extends StandardProps {\n    /**\n     * Sets the type of the notification.\n     */\n    type?: NotificationType;\n    /**\n     * Sets the title of the notification message.\n     */\n    title?: string;\n    /**\n     * Optionally provides a custom way for rendering an action control.\n     * If `closeable` is set to `true`, clicking on the action element will also trigger an `onClose` event.\n     */\n    actionRenderer?(): React.ReactChild;\n    /**\n     * Event fired when the close action triggered. Return `false` if don't\n     * want notification to self-close after event was played.\n     */\n    onClose?(e: React.MouseEvent): boolean | void;\n    /**\n     * Sets if the notification can be closed or not.\n     * @default true\n     */\n    closeable?: boolean;\n}\nexport interface NotificationState {\n    closed: boolean;\n}\nexport interface StyledNotificationProps {\n    closed: boolean;\n    type: NotificationType;\n}\nfunction getNotificationColor(type: NotificationType = 'none', theme: PreciseFullTheme) {\n    switch (type) {\n        case 'success':\n            return theme.notificationColorSuccess;\n        case 'info':\n            return theme.notificationColorInfo;\n        case 'warning':\n            return theme.notificationColorWarning;\n        case 'error':\n            return theme.notificationColorError;\n        case 'none':\n        default:\n            return theme.notificationColorNone;\n    }\n}\nfunction getNotificationIcon(type: NotificationType = 'none') {\n    switch (type) {\n        case 'success':\n            return 'CheckCircle';\n        case 'info':\n            return 'Info';\n        case 'warning':\n            return 'Warning';\n        case 'error':\n            return 'Error';\n        case 'none':\n        default:\n            return 'Notifications';\n    }\n}\ninterface LayoutProps {\n    inline: boolean;\n}\nconst StyledNotification = styled.div<StyledNotificationProps>(themed(({ closed, type, theme }) => `\n  position: relative;\n  display: ${closed ? 'none' : 'flex'};\n  background: #fff;\n  border-style: solid;\n  border-color: ${getNotificationColor(type, theme)};\n  margin-bottom: ${distance.small};\n  padding: ${theme.notificationPadding};\n  box-shadow: ${theme.notificationBoxShadow};\n  border-width: ${theme.notificationBorderWidth};\n`));\nconst StyledTitle = styled.div(themed(({ theme: { notificationTitleFontSize, notificationTitleLineHeight } }) => `\n  font-family: inherit;\n  font-size: ${notificationTitleFontSize};\n  line-height: ${notificationTitleLineHeight};\n  color: #404040;\n  margin-right: ${distance.small};\n`));\nconst ContentWrapper = styled.span `\n  display: contents;\n`;\nconst StyledContent = styled.div<LayoutProps>(themed(({ inline, theme: { notificationTextFontSize, notificationTextLineHeight } }) => `\n  display: ${inline ? 'inline' : 'block'};\n  font-family: inherit;\n  font-size: ${notificationTextFontSize};\n  line-height: ${notificationTextLineHeight};\n  color: #404040;\n  margin-right: ${distance.small};\n`));\nconst ActionContainer = styled('div')<LayoutProps> `\n  display: ${props => (props.inline ? 'inline' : 'block')};\n`;\nconst CloseButton = styled(IconLink) `\n  ${getFontStyle({ size: 'medium' })}\n\n  position: absolute;\n  right: ${distance.small};\n  top: ${distance.small};\n  background-color: ${colors.transparent};\n  color: ${colors.black};\n  padding: 0;\n  border: none;\n  outline: none;\n`;\nconst LayoutVertical = css `\n  display: flex;\n  flex-direction: column;\n`;\nconst LayoutInline = css `\n  display: block;\n`;\nconst ContentContainer = styled.div<LayoutProps> `\n  ${props => (props.inline ? LayoutInline : LayoutVertical)};\n  margin-right: ${distance.medium};\n  width: 100%;\n`;\nconst IconContainer = styled.div(themed(({ theme: { notificationIconMarginRight } }) => css `\n      margin-right: ${notificationIconMarginRight};\n    `));\ninterface StyledIconProps extends IconProps {\n    type: NotificationType;\n}\nconst StyledIconInt = Object.assign(((({ type: _0, ...props }) => <Icon {...props}/>) as React.SFC<StyledIconProps>), { inner: {\n        get Icon() { return Icon as typeof Icon; }\n    } });\nconst StyledIcon = styled(StyledIconInt)<StyledIconProps> `\n  color: ${themed(props => getNotificationColor(props.type, props.theme))};\n`;\n/**\n * The Notification component for rendering an inline notification message.\n */\nexport class Notification extends React.Component<NotificationProps, NotificationState> {\n    constructor(props: NotificationProps) {\n        super(props);\n        this.state = {\n            closed: false,\n        };\n    }\n    static defaultProps = {\n        closeable: true,\n    };\n    private onCloseHandler = (e: React.MouseEvent) => {\n        const { onClose, closeable } = this.props;\n        if (typeof onClose === 'function' && closeable) {\n            const selfClose = onClose(e);\n            if (selfClose === false) {\n                return;\n            }\n        }\n        this.setState({ closed: true });\n    };\n    render() {\n        const { type = 'none', children, title, actionRenderer, theme, style, closeable, ...other } = this.props;\n        const { closed } = this.state;\n        const isInline = !title;\n        return (<StyledNotification theme={theme} closed={closed} type={type} {...other}>\n        <IconContainer theme={theme}>\n          <StyledIcon type={type} name={getNotificationIcon(type)} size=\"22px\" theme={theme}/>\n        </IconContainer>\n        <ContentContainer inline={isInline}>\n          {title && <StyledTitle theme={theme}>{title}</StyledTitle>}\n          <StyledContent inline={isInline} theme={theme}>\n            {children}\n          </StyledContent>\n          <ActionContainer inline={isInline}>\n            <ContentWrapper onClick={this.onCloseHandler}>{actionRenderer && actionRenderer()}</ContentWrapper>\n          </ActionContainer>\n        </ContentContainer>\n        {closeable && <CloseButton onClick={this.onCloseHandler} icon=\"Close\"/>}\n      </StyledNotification>);\n    }\n    static inner = {\n        get StyledNotification() { return StyledNotification as typeof StyledNotification; },\n        get IconContainer() { return IconContainer as typeof IconContainer; },\n        get StyledIcon() { return StyledIcon as typeof StyledIcon; },\n        get ContentContainer() { return ContentContainer as typeof ContentContainer; },\n        get StyledTitle() { return StyledTitle as typeof StyledTitle; },\n        get StyledContent() { return StyledContent as typeof StyledContent; },\n        get ActionContainer() { return ActionContainer as typeof ActionContainer; },\n        get ContentWrapper() { return ContentWrapper as typeof ContentWrapper; },\n        get CloseButton() { return CloseButton as typeof CloseButton; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}