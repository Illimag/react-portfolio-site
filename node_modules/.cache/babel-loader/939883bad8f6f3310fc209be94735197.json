{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { Anchor } from '../Anchor';\nimport { StyledTileIcon } from '../../quarks';\nimport { getFontStyle } from '../../textStyles';\nconst Tile = styled(Anchor)`\n  cursor: pointer;\n  display: block;\n  position: relative;\n  width: ${themed(({\n  theme\n}) => theme.metroInfoTile.size)};\n  height: ${themed(({\n  theme\n}) => theme.metroInfoTile.size)};\n  margin: 0 12px 12px 0;\n  overflow: hidden;\n  user-select: none;\n  background: ${themed(({\n  theme\n}) => theme.metroInfoTile.background)};\n  color: ${themed(({\n  theme\n}) => theme.metroInfoTile.textColor)};\n\n  &:hover {\n    outline: rgba(29, 29, 29, 0.1) solid 4px;\n  }\n`;\nconst TileTitle = styled.span`\n  ${getFontStyle({\n  size: 'small',\n  weight: 'medium'\n})}\n\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  padding: 0 10px 10px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  z-index: 2;\n`;\n/**\n * Provides a simple tile component that gives a flat info appareance.\n */\n\nexport const MetroInfoTile = Object.assign(_a => {\n  var {\n    children,\n    image,\n    title\n  } = _a,\n      props = __rest(_a, [\"children\", \"image\", \"title\"]);\n\n  return React.createElement(Tile, Object.assign({}, props), image && React.createElement(StyledTileIcon, {\n    src: image,\n    width: \"33%\",\n    height: \"33%\"\n  }), title && React.createElement(TileTitle, null, title), children);\n}, {\n  inner: {\n    get Tile() {\n      return Tile;\n    },\n\n    get StyledTileIcon() {\n      return StyledTileIcon;\n    },\n\n    get TileTitle() {\n      return TileTitle;\n    }\n\n  }\n});\nMetroInfoTile.displayName = 'MetroInfoTile';","map":{"version":3,"sources":["../../../../src/components/MetroInfoTile/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,MAAjB,QAA+B,oBAA/B;AACA,SAAS,MAAT,QAAoC,WAApC;AACA,SAAS,cAAT,QAA+B,cAA/B;AACA,SAAS,YAAT,QAA6B,kBAA7B;AACA,MAAM,IAAI,GAAG,MAAM,CAAC,MAAD,CAAS;;;;WAIjB,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,aAAN,CAAoB,IAApC,CAAyC;YAC9C,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,aAAN,CAAoB,IAApC,CAAyC;;;;gBAI3C,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,aAAN,CAAoB,UAApC,CAA+C;WAC1D,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,aAAN,CAAoB,SAApC,CAA8C;;;;;CAV/D;AAgBA,MAAM,SAAS,GAAG,MAAM,CAAC,IAAK;IAC1B,YAAY,CAAC;AAAE,EAAA,IAAI,EAAE,OAAR;AAAiB,EAAA,MAAM,EAAE;AAAzB,CAAD,CAAqC;;;;;;;;;;;CADrD;AAuBA;;;;AAGA,OAAO,MAAM,aAAa,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAAyC;MAAxC;AAAE,IAAA,QAAF;AAAY,IAAA,KAAZ;AAAmB,IAAA;AAAnB,MAAwB,E;MAAE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,UAAA,EAAA,OAAA,EAAA,OAAA,CAAA,C;;AAAe,SAAC,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAL,EACnF,KAAK,IAAI,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AAAC,IAAA,GAAG,EAAE,KAAN;AAAa,IAAA,KAAK,EAAC,KAAnB;AAAyB,IAAA,MAAM,EAAC;AAAhC,GAAf,CAD0E,EAEnF,KAAK,IAAI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,IAAV,EAAY,KAAZ,CAF0E,EAGnF,QAHmF,CAAD;AAI7E,CAJmB,EAIkB;AAAE,EAAA,KAAK,EAAE;AAChD,QAAI,IAAJ,GAAQ;AAAK,aAAO,IAAP;AAA6B,KADM;;AAEhD,QAAI,cAAJ,GAAkB;AAAK,aAAO,cAAP;AAAiD,KAFxB;;AAGhD,QAAI,SAAJ,GAAa;AAAK,aAAO,SAAP;AAAuC;;AAHT;AAAT,CAJlB,CAAtB;AASP,aAAa,CAAC,WAAd,GAA4B,eAA5B","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { Anchor, AnchorProps } from '../Anchor';\nimport { StyledTileIcon } from '../../quarks';\nimport { getFontStyle } from '../../textStyles';\nconst Tile = styled(Anchor) `\n  cursor: pointer;\n  display: block;\n  position: relative;\n  width: ${themed(({ theme }) => theme.metroInfoTile.size)};\n  height: ${themed(({ theme }) => theme.metroInfoTile.size)};\n  margin: 0 12px 12px 0;\n  overflow: hidden;\n  user-select: none;\n  background: ${themed(({ theme }) => theme.metroInfoTile.background)};\n  color: ${themed(({ theme }) => theme.metroInfoTile.textColor)};\n\n  &:hover {\n    outline: rgba(29, 29, 29, 0.1) solid 4px;\n  }\n`;\nconst TileTitle = styled.span `\n  ${getFontStyle({ size: 'small', weight: 'medium' })}\n\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  padding: 0 10px 10px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  z-index: 2;\n`;\nexport interface MetroInfoTileProps extends AnchorProps {\n    /**\n     * The source URL of an icon, if used. The icon scaled to max. 33% of the tile.\n     */\n    image?: string;\n    /**\n     * The title of the tile, if anything.\n     */\n    title?: string;\n}\n/**\n * Provides a simple tile component that gives a flat info appareance.\n */\nexport const MetroInfoTile = Object.assign(((({ children, image, title, ...props }) => (<Tile {...props}>\n    {image && <StyledTileIcon src={image} width=\"33%\" height=\"33%\"/>}\n    {title && <TileTitle>{title}</TileTitle>}\n    {children}\n  </Tile>)) as React.SFC<MetroInfoTileProps>), { inner: {\n        get Tile() { return Tile as typeof Tile; },\n        get StyledTileIcon() { return StyledTileIcon as typeof StyledTileIcon; },\n        get TileTitle() { return TileTitle as typeof TileTitle; }\n    } });\nMetroInfoTile.displayName = 'MetroInfoTile';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}