{"ast":null,"code":"import { createTypes } from 'redux-action-creator';\nexport const types = createTypes(['IMG_LOAD_START', 'IMG_LOAD_END', 'SET_CURRENT_PROGRESS', 'SET_IMAGES']);\nexport const setLoadingEnd = () => {\n  return {\n    type: types.IMG_LOAD_START,\n    payload: {\n      isloading: false\n    }\n  };\n};\nexport const setLoadingStart = () => {\n  return {\n    type: types.IMG_LOAD_END,\n    payload: {\n      isloading: true,\n      progress: 0\n    }\n  };\n};\nexport const setCurrentProgress = progress => {\n  return {\n    type: types.SET_CURRENT_PROGRESS,\n    payload: progress\n  };\n};\nexport const setImages = imgs => {\n  return {\n    type: types.SET_IMAGES,\n    payload: imgs\n  };\n};\nconst imgs = [];\nexport const loadImage = urls => dispatch => {\n  let counter = 0;\n  dispatch(setLoadingStart());\n\n  for (let i = 0; i < urls.length; i++) {\n    imgs.push('');\n  }\n\n  const load = (url, index) => {\n    var xmlHTTP = new XMLHttpRequest();\n    xmlHTTP.open('GET', url, true);\n    xmlHTTP.responseType = 'blob';\n\n    xmlHTTP.onload = function (e) {\n      counter++;\n      var imageURL = window.URL.createObjectURL(this.response);\n      imgs[index] = imageURL;\n      dispatch(setCurrentProgress(counter * 100 / urls.length));\n\n      if (counter !== 0 && counter >= urls.length) {\n        setTimeout(() => {\n          dispatch(setImages(imgs));\n          dispatch(setLoadingEnd());\n        }, 500);\n      }\n    };\n\n    xmlHTTP.send();\n  };\n\n  urls.map((url, index) => {\n    load(url, index);\n  });\n};","map":{"version":3,"sources":["/root/git/react-portfolio-site/src/store/imgLoad/actions.js"],"names":["createTypes","types","setLoadingEnd","type","IMG_LOAD_START","payload","isloading","setLoadingStart","IMG_LOAD_END","progress","setCurrentProgress","SET_CURRENT_PROGRESS","setImages","imgs","SET_IMAGES","loadImage","urls","dispatch","counter","i","length","push","load","url","index","xmlHTTP","XMLHttpRequest","open","responseType","onload","e","imageURL","window","URL","createObjectURL","response","setTimeout","send","map"],"mappings":"AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAO,MAAMC,KAAK,GAAGD,WAAW,CAAC,CAAC,gBAAD,EAAmB,cAAnB,EAAmC,sBAAnC,EAA2D,YAA3D,CAAD,CAAzB;AAEP,OAAO,MAAME,aAAa,GAAG,MAAM;AACjC,SAAQ;AACNC,IAAAA,IAAI,EAAEF,KAAK,CAACG,cADN;AAENC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE;AADJ;AAFH,GAAR;AAMD,CAPM;AASP,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,SAAQ;AACNJ,IAAAA,IAAI,EAAEF,KAAK,CAACO,YADN;AAENH,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,IADJ;AAEPG,MAAAA,QAAQ,EAAE;AAFH;AAFH,GAAR;AAOD,CARM;AAUP,OAAO,MAAMC,kBAAkB,GAAID,QAAD,IAAc;AAC9C,SAAQ;AACNN,IAAAA,IAAI,EAAEF,KAAK,CAACU,oBADN;AAENN,IAAAA,OAAO,EAAEI;AAFH,GAAR;AAID,CALM;AAOP,OAAO,MAAMG,SAAS,GAAIC,IAAD,IAAU;AACjC,SAAQ;AACNV,IAAAA,IAAI,EAAEF,KAAK,CAACa,UADN;AAENT,IAAAA,OAAO,EAAEQ;AAFH,GAAR;AAID,CALM;AAMP,MAAMA,IAAI,GAAG,EAAb;AACA,OAAO,MAAME,SAAS,GAAIC,IAAD,IAAUC,QAAQ,IAAI;AAC7C,MAAIC,OAAO,GAAG,CAAd;AACAD,EAAAA,QAAQ,CAACV,eAAe,EAAhB,CAAR;;AAEA,OAAI,IAAIY,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AACnCN,IAAAA,IAAI,CAACQ,IAAL,CAAU,EAAV;AACD;;AAED,QAAMC,IAAI,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC3B,QAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AAEAD,IAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBJ,GAApB,EAAyB,IAAzB;AACAE,IAAAA,OAAO,CAACG,YAAR,GAAuB,MAAvB;;AAEAH,IAAAA,OAAO,CAACI,MAAR,GAAiB,UAAUC,CAAV,EAAa;AAC5BZ,MAAAA,OAAO;AACP,UAAIa,QAAQ,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2B,KAAKC,QAAhC,CAAf;AAGAtB,MAAAA,IAAI,CAACW,KAAD,CAAJ,GAAcO,QAAd;AAEAd,MAAAA,QAAQ,CAACP,kBAAkB,CAAEQ,OAAO,GAAG,GAAX,GAAkBF,IAAI,CAACI,MAAxB,CAAnB,CAAR;;AAEA,UAAIF,OAAO,KAAK,CAAZ,IAAiBA,OAAO,IAAIF,IAAI,CAACI,MAArC,EAA6C;AAC3CgB,QAAAA,UAAU,CAAC,MAAM;AACfnB,UAAAA,QAAQ,CAACL,SAAS,CAACC,IAAD,CAAV,CAAR;AACAI,UAAAA,QAAQ,CAACf,aAAa,EAAd,CAAR;AACD,SAHS,EAGP,GAHO,CAAV;AAID;AAEF,KAhBD;;AAiBAuB,IAAAA,OAAO,CAACY,IAAR;AACD,GAxBD;;AA0BArB,EAAAA,IAAI,CAACsB,GAAL,CAAS,CAACf,GAAD,EAAMC,KAAN,KAAgB;AACvBF,IAAAA,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAJ;AACD,GAFD;AAGD,CArCM","sourcesContent":["import { createTypes } from 'redux-action-creator'\nexport const types = createTypes(['IMG_LOAD_START', 'IMG_LOAD_END', 'SET_CURRENT_PROGRESS', 'SET_IMAGES'])\n\nexport const setLoadingEnd = () => {\n  return ({\n    type: types.IMG_LOAD_START,\n    payload: {\n      isloading: false,\n    },\n  })\n}\n\nexport const setLoadingStart = () => {\n  return ({\n    type: types.IMG_LOAD_END,\n    payload: {\n      isloading: true,\n      progress: 0,\n    },\n  })\n}\n\nexport const setCurrentProgress = (progress) => {\n  return ({\n    type: types.SET_CURRENT_PROGRESS,\n    payload: progress,\n  });\n}\n\nexport const setImages = (imgs) => {\n  return ({\n    type: types.SET_IMAGES,\n    payload: imgs,\n  });\n}\nconst imgs = [];\nexport const loadImage = (urls) => dispatch => {\n  let counter = 0;\n  dispatch(setLoadingStart());\n\n  for(let i = 0 ; i < urls.length; i++){\n    imgs.push('');\n  }\n\n  const load = (url, index) => {\n    var xmlHTTP = new XMLHttpRequest();\n\n    xmlHTTP.open('GET', url, true);\n    xmlHTTP.responseType = 'blob';\n\n    xmlHTTP.onload = function (e) {\n      counter++;\n      var imageURL = window.URL.createObjectURL(this.response)\n\n\n      imgs[index] = imageURL\n\n      dispatch(setCurrentProgress((counter * 100) / urls.length));\n\n      if (counter !== 0 && counter >= urls.length) {\n        setTimeout(() => {\n          dispatch(setImages(imgs))\n          dispatch(setLoadingEnd());\n        }, 500)\n      }\n\n    };\n    xmlHTTP.send();\n  };\n\n  urls.map((url, index) => {\n    load(url, index);\n  })\n}"]},"metadata":{},"sourceType":"module"}