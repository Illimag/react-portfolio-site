{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { distance } from '../../distance';\nimport { grey6m } from '../../colors';\nconst StyledTag = styled('span')`\n  display: inline-block;\n  border-radius: 3px;\n  font-size: 0.8em;\n  border: 0;\n  color: ${themed(({\n  theme\n}) => theme.tagColor)};\n  background-color: ${themed(({\n  theme\n}) => theme.tagBackground)};\n  padding: ${distance.xsmall} ${distance.medium};\n`;\n\nfunction getStyle(type) {\n  switch (type) {\n    case 'secondary':\n      return {\n        tagColor: 'rgba(114,67,150,1)',\n        tagBackground: 'rgba(238,211,254,1)'\n      };\n\n    case 'info':\n      return {\n        tagColor: 'rgba(47,101,20,1)',\n        tagBackground: 'rgba(201,239,148,1)'\n      };\n\n    case 'success':\n      return {\n        tagColor: 'rgba(0,109,93,1)',\n        tagBackground: 'rgba(170,249,230,1)'\n      };\n\n    case 'danger':\n      return {\n        tagColor: 'rgba(163,56,42,1)',\n        tagBackground: 'rgba(254,214,149,1)'\n      };\n\n    case 'warning':\n      return {\n        tagColor: 'rgba(114,94,16,1)',\n        tagBackground: 'rgba(252,231,126,1)'\n      };\n\n    case 'disabled':\n      return {\n        tagColor: 'rgba(57,75,84,1)',\n        tagBackground: grey6m\n      };\n\n    case 'none':\n      return {\n        tagColor: 'rgba(173,22,37,1)',\n        tagBackground: 'rgba(255,210,221,1)'\n      };\n\n    case 'primary':\n    default:\n      return {\n        tagColor: 'rgba(52,93,127,1)',\n        tagBackground: 'rgba(193,230,254,1)'\n      };\n  }\n}\n\nconst defaultType = 'primary';\n/**\n * The tag component represents a simple block with a typed color and content.\n */\n\nexport const Tag = Object.assign(_a => {\n  var {\n    type = defaultType\n  } = _a,\n      props = __rest(_a, [\"type\"]);\n\n  return React.createElement(StyledTag, Object.assign({\n    theme: getStyle(type)\n  }, props));\n}, {\n  inner: {\n    get StyledTag() {\n      return StyledTag;\n    }\n\n  }\n});\nTag.displayName = 'Tag';","map":{"version":3,"sources":["../../../../src/components/Tag/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,MAAjB,QAA+B,oBAA/B;AAEA,SAAS,QAAT,QAAyB,gBAAzB;AACA,SAAS,MAAT,QAAuB,cAAvB;AAiBA,MAAM,SAAS,GAAG,MAAM,CAAC,MAAD,CAAmB;;;;;WAKhC,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,QAAtB,CAA+B;sBAC1B,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,aAAtB,CAAoC;aACnD,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM;CAP/C;;AASA,SAAS,QAAT,CAAkB,IAAlB,EAA+B;AAC3B,UAAQ,IAAR;AACI,SAAK,WAAL;AACI,aAAO;AACH,QAAA,QAAQ,EAAE,oBADP;AAEH,QAAA,aAAa,EAAE;AAFZ,OAAP;;AAIJ,SAAK,MAAL;AACI,aAAO;AACH,QAAA,QAAQ,EAAE,mBADP;AAEH,QAAA,aAAa,EAAE;AAFZ,OAAP;;AAIJ,SAAK,SAAL;AACI,aAAO;AACH,QAAA,QAAQ,EAAE,kBADP;AAEH,QAAA,aAAa,EAAE;AAFZ,OAAP;;AAIJ,SAAK,QAAL;AACI,aAAO;AACH,QAAA,QAAQ,EAAE,mBADP;AAEH,QAAA,aAAa,EAAE;AAFZ,OAAP;;AAIJ,SAAK,SAAL;AACI,aAAO;AACH,QAAA,QAAQ,EAAE,mBADP;AAEH,QAAA,aAAa,EAAE;AAFZ,OAAP;;AAIJ,SAAK,UAAL;AACI,aAAO;AACH,QAAA,QAAQ,EAAE,kBADP;AAEH,QAAA,aAAa,EAAE;AAFZ,OAAP;;AAIJ,SAAK,MAAL;AACI,aAAO;AACH,QAAA,QAAQ,EAAE,mBADP;AAEH,QAAA,aAAa,EAAE;AAFZ,OAAP;;AAIJ,SAAK,SAAL;AACA;AACI,aAAO;AACH,QAAA,QAAQ,EAAE,mBADP;AAEH,QAAA,aAAa,EAAE;AAFZ,OAAP;AAtCR;AA2CH;;AACD,MAAM,WAAW,GAAY,SAA7B;AACA;;;;AAGA,OAAO,MAAM,GAAG,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAAqC;MAApC;AAAE,IAAA,IAAI,GAAG;AAAT,MAAoB,E;MAAE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,C;;AAAe,SAAC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE,QAAQ,CAAC,IAAD;AAAhB,GAAA,EAA4B,KAA5B,CAAV,CAAD;AAAgD,CAAtG,EAAiI;AAAE,EAAA,KAAK,EAAE;AACrJ,QAAI,SAAJ,GAAa;AAAK,aAAO,SAAP;AAAuC;;AAD4F;AAAT,CAAjI,CAAZ;AAGP,GAAG,CAAC,WAAJ,GAAkB,KAAlB","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { distance } from '../../distance';\nimport { grey6m } from '../../colors';\nexport type TagType = 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'danger' | 'disabled' | 'none';\nexport interface TagProps extends StandardProps {\n    /**\n     * Event fired when the tag was clicked.\n     */\n    onClick?(): void;\n    /**\n     * The type of the tag, which is primary by default.\n     * @default primary\n     */\n    type?: TagType;\n    /**\n     * The content of the tag.\n     */\n    children?: React.ReactNode;\n}\nconst StyledTag = styled('span')<TagProps> `\n  display: inline-block;\n  border-radius: 3px;\n  font-size: 0.8em;\n  border: 0;\n  color: ${themed(({ theme }) => theme.tagColor)};\n  background-color: ${themed(({ theme }) => theme.tagBackground)};\n  padding: ${distance.xsmall} ${distance.medium};\n`;\nfunction getStyle(type: TagType) {\n    switch (type) {\n        case 'secondary':\n            return {\n                tagColor: 'rgba(114,67,150,1)',\n                tagBackground: 'rgba(238,211,254,1)',\n            };\n        case 'info':\n            return {\n                tagColor: 'rgba(47,101,20,1)',\n                tagBackground: 'rgba(201,239,148,1)',\n            };\n        case 'success':\n            return {\n                tagColor: 'rgba(0,109,93,1)',\n                tagBackground: 'rgba(170,249,230,1)',\n            };\n        case 'danger':\n            return {\n                tagColor: 'rgba(163,56,42,1)',\n                tagBackground: 'rgba(254,214,149,1)',\n            };\n        case 'warning':\n            return {\n                tagColor: 'rgba(114,94,16,1)',\n                tagBackground: 'rgba(252,231,126,1)',\n            };\n        case 'disabled':\n            return {\n                tagColor: 'rgba(57,75,84,1)',\n                tagBackground: grey6m,\n            };\n        case 'none':\n            return {\n                tagColor: 'rgba(173,22,37,1)',\n                tagBackground: 'rgba(255,210,221,1)',\n            };\n        case 'primary':\n        default:\n            return {\n                tagColor: 'rgba(52,93,127,1)',\n                tagBackground: 'rgba(193,230,254,1)',\n            };\n    }\n}\nconst defaultType: TagType = 'primary';\n/**\n * The tag component represents a simple block with a typed color and content.\n */\nexport const Tag = Object.assign(((({ type = defaultType, ...props }) => (<StyledTag theme={getStyle(type)} {...props}/>)) as React.SFC<TagProps>), { inner: {\n        get StyledTag() { return StyledTag as typeof StyledTag; }\n    } });\nTag.displayName = 'Tag';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}