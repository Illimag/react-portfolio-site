{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nimport { StackPanel, StackPanelDirection } from '../StackPanel';\nconst StyledCard = styled(StackPanel)`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n`;\nconst StyledCardChildWrapper = styled.div`\n  box-sizing: border-box;\n  overflow: auto;\n  transition: flex-grow 0.4s;\n  ${props => props.grow ? `\n    flex-grow: ${props.grow};\n    flex-basis: 0;` : ''};\n`;\nexport const Card = Object.assign(_a => {\n  var {\n    orientation = 'vertical',\n    children,\n    layout: propsLayout\n  } = _a,\n      rest = __rest(_a, [\"orientation\", \"children\", \"layout\"]);\n\n  const layout = propsLayout || React.Children.map(children, _ => 0) || [];\n  const cardChildComponents = [];\n  React.Children.forEach(children, (child, index) => {\n    if (!child) {\n      return;\n    }\n\n    const _a = child.props,\n          {\n      children: grandChildren\n    } = _a,\n          childProps = __rest(_a, [\"children\"]);\n\n    const sticky = children && child.type && child.type.displayName === 'Sticky';\n    cardChildComponents.push(sticky ? React.createElement(child.type, Object.assign({\n      key: index\n    }, childProps), grandChildren) : React.createElement(StyledCardChildWrapper, {\n      key: index,\n      grow: layout[index]\n    }, React.createElement(child.type, Object.assign({}, childProps), grandChildren)));\n  });\n  return React.createElement(StyledCard, Object.assign({\n    direction: orientation === 'vertical' ? StackPanelDirection.topToBottom : StackPanelDirection.leftToRight\n  }, rest), cardChildComponents);\n}, {\n  inner: {\n    get StyledCardChildWrapper() {\n      return StyledCardChildWrapper;\n    },\n\n    get StyledCard() {\n      return StyledCard;\n    }\n\n  }\n});\nCard.displayName = 'Card';","map":{"version":3,"sources":["../../../../src/components/Card/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AACA,SAAS,UAAT,EAAqB,mBAArB,QAAgD,eAAhD;AAsBA,MAAM,UAAU,GAAG,MAAM,CAAC,UAAD,CAAa;;;;;;;CAAtC;AAQA,MAAM,sBAAsB,GAAG,MAAM,CAAC,GAA0B;;;;IAI5D,KAAK,IAAI,KAAK,CAAC,IAAN,GACP;iBACW,KAAK,CAAC,IAAI;mBAFd,GAIP,EAAE;CARR;AAUA,OAAO,MAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAAyE;MAAxE;AAAE,IAAA,WAAW,GAAG,UAAhB;AAA4B,IAAA,QAA5B;AAAsC,IAAA,MAAM,EAAE;AAA9C,MAAyD,E;MAAE,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,aAAA,EAAA,UAAA,EAAA,QAAA,CAAA,C;;AAC5F,QAAM,MAAM,GAAG,WAAW,IAAI,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,QAAnB,EAA6B,CAAC,IAAI,CAAlC,CAAf,IAAuD,EAAtE;AACA,QAAM,mBAAmB,GAAe,EAAxC;AACA,EAAA,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,CAAC,KAAD,EAA0C,KAA1C,KAAmD;AAChF,QAAI,CAAC,KAAL,EAAY;AACR;AACH;;AACD,UAAM,EAAA,GAAA,KAAA,CAAA,KAAN;AAAA,UAAM;AAAE,MAAA,QAAQ,EAAE;AAAZ,QAAyB,EAA/B;AAAA,UAAiC,UAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,UAAA,CAAA,CAAjC;;AACA,UAAM,MAAM,GAAG,QAAQ,IAAI,KAAK,CAAC,IAAlB,IAA0B,KAAK,CAAC,IAAN,CAAW,WAAX,KAA2B,QAApE;AACA,IAAA,mBAAmB,CAAC,IAApB,CAAyB,MAAM,GAAI,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,IAAP,EAAW,MAAA,CAAA,MAAA,CAAA;AAAC,MAAA,GAAG,EAAE;AAAN,KAAA,EAAiB,UAAjB,CAAX,EAChC,aADgC,CAAJ,GAEb,KAAA,CAAA,aAAA,CAAC,sBAAD,EAAuB;AAAC,MAAA,GAAG,EAAE,KAAN;AAAa,MAAA,IAAI,EAAE,MAAM,CAAC,KAAD;AAAzB,KAAvB,EAChB,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,IAAP,EAAW,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,UAAL,CAAX,EAA6B,aAA7B,CADgB,CAFlB;AAKH,GAXD;AAYA,SAAQ,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,SAAS,EAAE,WAAW,KAAK,UAAhB,GAA6B,mBAAmB,CAAC,WAAjD,GAA+D,mBAAmB,CAAC;AAA/F,GAAA,EAAgH,IAAhH,CAAX,EACL,mBADK,CAAR;AAGH,CAlBmB,EAkBS;AAAE,EAAA,KAAK,EAAE;AAC9B,QAAI,sBAAJ,GAA0B;AAAK,aAAO,sBAAP;AAAiE,KADlE;;AAE9B,QAAI,UAAJ,GAAc;AAAK,aAAO,UAAP;AAAyC;;AAF9B;AAAT,CAlBT,CAAb;AAsBP,IAAI,CAAC,WAAL,GAAmB,MAAnB","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { StackPanel, StackPanelDirection } from '../StackPanel';\nimport { StandardProps } from '../../common';\nexport interface CardProps extends StandardProps {\n    /**\n     * Direction of the card is determining whether the card should be\n     * layed-out from top to bottom (vertical) or from left to right (horizontal)\n     */\n    orientation?: 'horizontal' | 'vertical';\n    /**\n     * Layout property lets the consumer to determine spacing distribution of th children\n     * Default is 1 for ever child, meaning that all the child elements\n     * will be distributed in a way that they share space equally\n     */\n    layout?: Array<number>;\n    /**\n     * Sets the children of the card to render.\n     */\n    children?: React.ReactNode;\n}\nexport interface StyledCardChildProps {\n    grow?: number;\n}\nconst StyledCard = styled(StackPanel) `\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n`;\nconst StyledCardChildWrapper = styled.div<StyledCardChildProps> `\n  box-sizing: border-box;\n  overflow: auto;\n  transition: flex-grow 0.4s;\n  ${props => props.grow\n    ? `\n    flex-grow: ${props.grow};\n    flex-basis: 0;`\n    : ''};\n`;\nexport const Card = Object.assign(((({ orientation = 'vertical', children, layout: propsLayout, ...rest }) => {\n    const layout = propsLayout || React.Children.map(children, _ => 0) || [];\n    const cardChildComponents: Array<any> = [];\n    React.Children.forEach(children, (child: React.ComponentElement<any, any>, index) => {\n        if (!child) {\n            return;\n        }\n        const { children: grandChildren, ...childProps } = child.props;\n        const sticky = children && child.type && child.type.displayName === 'Sticky';\n        cardChildComponents.push(sticky ? (<child.type key={index} {...childProps}>\n          {grandChildren}\n        </child.type>) : (<StyledCardChildWrapper key={index} grow={layout[index]}>\n          <child.type {...childProps}>{grandChildren}</child.type>\n        </StyledCardChildWrapper>));\n    });\n    return (<StyledCard direction={orientation === 'vertical' ? StackPanelDirection.topToBottom : StackPanelDirection.leftToRight} {...rest}>\n      {cardChildComponents}\n    </StyledCard>);\n}) as React.SFC<CardProps>), { inner: {\n        get StyledCardChildWrapper() { return StyledCardChildWrapper as typeof StyledCardChildWrapper; },\n        get StyledCard() { return StyledCard as typeof StyledCard; }\n    } });\nCard.displayName = 'Card';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}