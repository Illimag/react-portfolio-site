{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { TextField } from '../TextField';\nimport { withFormContext } from '../../hoc/withFormContext';\nimport { InteractiveList, InteractiveListDirection } from '../InteractiveList';\nconst AutocompleteWrapper = styled.div`\n  position: relative;\n  width: 100%;\n`;\nconst StyledInteractiveList = styled(InteractiveList)`\n  position: static;\n`;\nconst StyledAutosuggestWrapper = styled.ul(themed(({\n  direction,\n  theme: {\n    ui1,\n    ui4\n  }\n}) => css`\n      list-style: none;\n      width: 100%;\n      box-sizing: border-box;\n      box-shadow: none;\n      margin: 0;\n      padding: 0;\n      background: ${ui1};\n      border: 1px solid ${ui4};\n      ${direction === InteractiveListDirection.normal ? 'border-top-color: transparent' : 'border-bottom-color: transparent'};\n      max-height: 50vh;\n      position: absolute;\n      top: ${direction === InteractiveListDirection.normal ? '100%' : '0px'};\n      transform: translateY(${direction === InteractiveListDirection.normal ? 0 : -100}%);\n      overflow-y: auto;\n      z-index: 100;\n    `));\n\nfunction defaultSuggestionRenderer(suggestion) {\n  const value = String(suggestion);\n  return {\n    content: value,\n    key: value\n  };\n}\n\nfunction defaultInputRenderer(props) {\n  return React.createElement(TextField, Object.assign({}, props));\n}\n\nconst NotOpenComponent = React.createElement(React.Fragment, null);\nconst AutosuggestWrapper = Object.assign(_a => {\n  var {\n    border: _0,\n    open\n  } = _a,\n      props = __rest(_a, [\"border\", \"open\"]);\n\n  return open ? React.createElement(StyledAutosuggestWrapper, Object.assign({}, props)) : NotOpenComponent;\n}, {\n  inner: {\n    get StyledAutosuggestWrapper() {\n      return StyledAutosuggestWrapper;\n    }\n\n  }\n});\nAutosuggestWrapper.displayName = 'AutosuggestWrapper';\n\nclass AutocompleteInt extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyDown = e => {\n      const {\n        keyCode\n      } = e;\n\n      switch (keyCode) {\n        case 40\n        /* down */\n        :\n        case 38\n        /* up */\n        :\n          e.preventDefault();\n          const {\n            open\n          } = this.state;\n          open && this.setState(() => ({\n            listFocus: true,\n            focus: false\n          }));\n          break;\n      }\n    };\n\n    this.handleListChange = e => {\n      const {\n        suggestions = []\n      } = this.props;\n      const index = e.value[0];\n      const suggestion = suggestions[index];\n      this.handle(suggestion);\n    };\n\n    this.show = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.hide = () => {\n      this.setState(() => ({\n        open: false\n      }), this.props.onBlur);\n    };\n\n    this.handleFocus = () => {\n      const {\n        onFocus\n      } = this.props;\n      cancelAnimationFrame(this.delayedBlur);\n      this.show();\n      this.setState(() => ({\n        focus: true,\n        listFocus: false\n      }));\n      typeof onFocus === 'function' && onFocus();\n    };\n\n    this.handleBlur = () => {\n      cancelAnimationFrame(this.delayedBlur);\n      this.delayedBlur = requestAnimationFrame(() => {\n        this.setState(() => ({\n          focus: false,\n          listFocus: false\n        }), this.hide);\n      });\n    };\n\n    this.changed = e => {\n      this.updateValue(e.value);\n    };\n\n    this.setNode = node => {\n      this._element = node;\n      const {\n        inputRef\n      } = this.props;\n      typeof inputRef === 'function' && inputRef(node);\n    };\n\n    this.state = {\n      controlled: props.value !== undefined,\n      value: props.value || props.defaultValue || '',\n      open: false,\n      listFocus: false,\n      focus: false,\n      error: props.error\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps({\n    value = '',\n    error\n  }) {\n    if (this.state.controlled) {\n      this.setState({\n        value\n      });\n    }\n\n    this.setState({\n      error\n    });\n  }\n\n  componentDidMount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.subscribe(this);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.unsubscribe(this);\n    }\n  }\n\n  updateValue(value, suggestionSelected = false) {\n    const {\n      onChange,\n      name = '',\n      form\n    } = this.props;\n\n    if (!this.state.controlled) {\n      form ? form.change({\n        name,\n        value\n      }) : this.setState({\n        value\n      });\n    }\n\n    suggestionSelected ? this.hide() : this.show();\n    typeof onChange === 'function' && onChange({\n      value\n    });\n  }\n\n  handle(suggestion) {\n    const {\n      getSuggestionValue,\n      onSuggestionSelected\n    } = this.props;\n\n    if (typeof getSuggestionValue === 'function') {\n      const value = getSuggestionValue(suggestion);\n      this.updateValue(value, true);\n    } else if (typeof suggestion === 'string') {\n      this.updateValue(suggestion, true);\n    }\n\n    typeof onSuggestionSelected === 'function' && onSuggestionSelected({\n      value: suggestion\n    });\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      suggestions = [],\n      noSuggestionsMessage,\n      renderSuggestion = defaultSuggestionRenderer,\n      inputRenderer = defaultInputRenderer,\n      getSuggestionValue: _1,\n      onChange: _2,\n      children: _3,\n      onBlur: _4,\n      onFocus: _5,\n      defaultValue: _6,\n      inputRef: _7,\n      onSuggestionSelected: _8,\n      info\n    } = _a,\n          props = __rest(_a, [\"suggestions\", \"noSuggestionsMessage\", \"renderSuggestion\", \"inputRenderer\", \"getSuggestionValue\", \"onChange\", \"children\", \"onBlur\", \"onFocus\", \"defaultValue\", \"inputRef\", \"onSuggestionSelected\", \"info\"]);\n\n    const {\n      open,\n      listFocus,\n      value,\n      error\n    } = this.state;\n    const isListOpen = open && (!!suggestions.length || !!noSuggestionsMessage);\n    return React.createElement(AutocompleteWrapper, {\n      onKeyDown: this.handleKeyDown,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur\n    }, inputRenderer(Object.assign({}, props, {\n      clearable: true,\n      info: isListOpen ? undefined : info,\n      onChange: this.changed,\n      inputRef: this.setNode,\n      value,\n      error\n    })), React.createElement(StyledInteractiveList, {\n      data: suggestions.length ? suggestions.map(renderSuggestion) : [{\n        key: 'default',\n        content: noSuggestionsMessage\n      }],\n      disabled: suggestions.length === 0,\n      customWrapper: AutosuggestWrapper,\n      focus: listFocus,\n      onChange: this.handleListChange,\n      autoPosition: true,\n      open: isListOpen\n    }), isListOpen && info && React.createElement(\"div\", null, info));\n  }\n\n}\n\nAutocompleteInt.inner = {\n  get AutocompleteWrapper() {\n    return AutocompleteWrapper;\n  },\n\n  get StyledInteractiveList() {\n    return StyledInteractiveList;\n  }\n\n};\n/**\n * Extends a TextField with autocompletion capabilities.\n */\n\nexport const Autocomplete = withFormContext(AutocompleteInt);\nAutocomplete.displayName = 'Autocomplete';","map":{"version":3,"sources":["../../../../src/components/Autocomplete/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { TextField, TextFieldProps, TextFieldChangeEvent } from '../TextField';\nimport { FormContextProps, withFormContext } from '../../hoc/withFormContext';\nimport { InteractiveList, InteractiveListWrapperProps, InteractiveListDirection, InteractiveListChangeEvent, } from '../InteractiveList';\nimport { KeyCodes } from '../../utils/keyCodes';\nimport { InputChangeEvent, Omit } from '../../common';\nexport interface AutosuggestItem {\n    key: string;\n    content?: React.ReactChild;\n}\nexport interface AutosuggestSelectEvent<T> {\n    value: T;\n}\nexport interface AutocompleteInputProps {\n    onChange(e: InputChangeEvent<string>): void;\n    clearable: boolean;\n    inputRef?(instance: HTMLElement | null): void;\n    value: string;\n    error: any;\n    [index: string]: any;\n}\nexport interface AutocompleteProps<T> extends TextFieldProps {\n    /**\n     * The optional message to show in case tehre are no suggestions to display.\n     */\n    noSuggestionsMessage?: React.ReactChild;\n    /**\n     * The current value of the text field, leading to a controlled text field.\n     */\n    suggestions?: Array<T>;\n    /**\n     * How to render each suggestion in the InteractiveList\n     */\n    renderSuggestion?(data: T): AutosuggestItem;\n    /**\n     * Event emitted every time suggestion is selected via mouse or keyboard.\n     */\n    onSuggestionSelected?(e: AutosuggestSelectEvent<T>): void;\n    /**\n     * Gets the suggestion value.\n     */\n    getSuggestionValue?(item: T): string;\n    /**\n     * The renderer of input field.\n     */\n    inputRenderer?(props: AutocompleteInputProps): JSX.Element;\n    /**\n     * Always `true` on Autocomplete components.\n     * @ignore\n     */\n    clearable?: boolean;\n    /**\n     * @ignore\n     */\n    inputRef?(instance: HTMLElement | null): void;\n}\nexport type SupportedAutocompleteProps<T> = Omit<AutocompleteProps<T>, 'clearable'>;\nexport interface AutocompleteState {\n    controlled: boolean;\n    listFocus: boolean;\n    focus: boolean;\n    open: boolean;\n    value: string;\n    error?: React.ReactChild;\n}\nconst AutocompleteWrapper = styled.div `\n  position: relative;\n  width: 100%;\n`;\nconst StyledInteractiveList = styled(InteractiveList) `\n  position: static;\n`;\ninterface StyledAutosuggestWrapperProps {\n    direction: InteractiveListDirection;\n}\nconst StyledAutosuggestWrapper = styled.ul<StyledAutosuggestWrapperProps>(themed(({ direction, theme: { ui1, ui4 } }) => css `\n      list-style: none;\n      width: 100%;\n      box-sizing: border-box;\n      box-shadow: none;\n      margin: 0;\n      padding: 0;\n      background: ${ui1};\n      border: 1px solid ${ui4};\n      ${direction === InteractiveListDirection.normal\n    ? 'border-top-color: transparent'\n    : 'border-bottom-color: transparent'};\n      max-height: 50vh;\n      position: absolute;\n      top: ${direction === InteractiveListDirection.normal ? '100%' : '0px'};\n      transform: translateY(${direction === InteractiveListDirection.normal ? 0 : -100}%);\n      overflow-y: auto;\n      z-index: 100;\n    `));\nfunction defaultSuggestionRenderer<T>(suggestion: T): AutosuggestItem {\n    const value = String(suggestion);\n    return {\n        content: value,\n        key: value,\n    };\n}\nfunction defaultInputRenderer(props: AutocompleteInputProps): JSX.Element {\n    return <TextField {...props}/>;\n}\nconst NotOpenComponent = <></>;\nconst AutosuggestWrapper = Object.assign(((({ border: _0, open, ...props }) => open ? <StyledAutosuggestWrapper {...props}/> : NotOpenComponent) as React.FC<InteractiveListWrapperProps>), { inner: {\n        get StyledAutosuggestWrapper() { return StyledAutosuggestWrapper as typeof StyledAutosuggestWrapper; }\n    } });\nAutosuggestWrapper.displayName = 'AutosuggestWrapper';\nclass AutocompleteInt<T> extends React.Component<SupportedAutocompleteProps<T> & FormContextProps, AutocompleteState> {\n    private delayedBlur: number;\n    private _element: HTMLElement | null;\n    constructor(props: AutocompleteProps<T>) {\n        super(props);\n        this.state = {\n            controlled: props.value !== undefined,\n            value: props.value || props.defaultValue || '',\n            open: false,\n            listFocus: false,\n            focus: false,\n            error: props.error,\n        };\n    }\n    UNSAFE_componentWillReceiveProps({ value = '', error }: AutocompleteProps<T>) {\n        if (this.state.controlled) {\n            this.setState({ value });\n        }\n        this.setState({ error });\n    }\n    componentDidMount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    private updateValue(value: string, suggestionSelected: boolean = false) {\n        const { onChange, name = '', form } = this.props;\n        if (!this.state.controlled) {\n            form ? form.change({ name, value }) : this.setState({ value });\n        }\n        suggestionSelected ? this.hide() : this.show();\n        typeof onChange === 'function' && onChange({ value });\n    }\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n        const { keyCode } = e;\n        switch (keyCode) {\n            case KeyCodes.down:\n            case KeyCodes.up:\n                e.preventDefault();\n                const { open } = this.state;\n                open &&\n                    this.setState(() => ({\n                        listFocus: true,\n                        focus: false,\n                    }));\n                break;\n        }\n    };\n    private handleListChange = (e: InteractiveListChangeEvent) => {\n        const { suggestions = [] } = this.props;\n        const index = e.value[0];\n        const suggestion = suggestions[index];\n        this.handle(suggestion);\n    };\n    private handle(suggestion: T) {\n        const { getSuggestionValue, onSuggestionSelected } = this.props;\n        if (typeof getSuggestionValue === 'function') {\n            const value = getSuggestionValue(suggestion);\n            this.updateValue(value, true);\n        }\n        else if (typeof suggestion === 'string') {\n            this.updateValue(suggestion, true);\n        }\n        typeof onSuggestionSelected === 'function' && onSuggestionSelected({ value: suggestion });\n    }\n    private show = () => {\n        this.setState({ open: true });\n    };\n    private hide = () => {\n        this.setState(() => ({ open: false }), this.props.onBlur);\n    };\n    private handleFocus = () => {\n        const { onFocus } = this.props;\n        cancelAnimationFrame(this.delayedBlur);\n        this.show();\n        this.setState(() => ({ focus: true, listFocus: false }));\n        typeof onFocus === 'function' && onFocus();\n    };\n    private handleBlur = () => {\n        cancelAnimationFrame(this.delayedBlur);\n        this.delayedBlur = requestAnimationFrame(() => {\n            this.setState(() => ({\n                focus: false,\n                listFocus: false,\n            }), this.hide);\n        });\n    };\n    private changed = (e: TextFieldChangeEvent) => {\n        this.updateValue(e.value);\n    };\n    private setNode = (node: HTMLElement | null) => {\n        this._element = node;\n        const { inputRef } = this.props;\n        typeof inputRef === 'function' && inputRef(node);\n    };\n    render() {\n        const { suggestions = [], noSuggestionsMessage, renderSuggestion = defaultSuggestionRenderer, inputRenderer = defaultInputRenderer, getSuggestionValue: _1, onChange: _2, children: _3, onBlur: _4, onFocus: _5, defaultValue: _6, inputRef: _7, onSuggestionSelected: _8, info, ...props } = this.props;\n        const { open, listFocus, value, error } = this.state;\n        const isListOpen = open && (!!suggestions.length || !!noSuggestionsMessage);\n        return (<AutocompleteWrapper onKeyDown={this.handleKeyDown} onFocus={this.handleFocus} onBlur={this.handleBlur}>\n        {inputRenderer({\n            ...props,\n            clearable: true,\n            info: isListOpen ? undefined : info,\n            onChange: this.changed,\n            inputRef: this.setNode,\n            value,\n            error,\n        })}\n        <StyledInteractiveList data={suggestions.length ? suggestions.map(renderSuggestion) : [{ key: 'default', content: noSuggestionsMessage }]} disabled={suggestions.length === 0} customWrapper={AutosuggestWrapper} focus={listFocus} onChange={this.handleListChange} autoPosition open={isListOpen}/>\n        {isListOpen && info && <div>{info}</div>}\n      </AutocompleteWrapper>);\n    }\n    static inner = {\n        get AutocompleteWrapper() { return AutocompleteWrapper as typeof AutocompleteWrapper; },\n        get StyledInteractiveList() { return StyledInteractiveList as typeof StyledInteractiveList; }\n    };\n}\n/**\n * Extends a TextField with autocompletion capabilities.\n */\nexport const Autocomplete = withFormContext(AutocompleteInt);\nAutocomplete.displayName = 'Autocomplete';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}