{"ast":null,"code":"import _taggedTemplateLiteral from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  \", \";\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  \", \";\\n  max-width: \", \"px;\\n  padding: 0 \", \";\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { distance } from '../../distance';\n\nfunction getAlignMargin(alignment) {\n  if (alignment !== 'center') {\n    return alignment === 'left' ? 'margin-right: auto' : 'margin-left: auto';\n  }\n\n  return 'margin: 0 auto';\n}\n\nvar FluidContainer = css(_templateObject());\nvar FixedWidthContainer = css(_templateObject2(), function (props) {\n  return getAlignMargin(props.align);\n}, function (props) {\n  return props.maxWidth;\n}, distance.medium);\nvar StyledContainer = styled.div(_templateObject3(), function (props) {\n  return props.maxWidth ? FixedWidthContainer : FluidContainer;\n});\nvar defaultAlign = 'center';\n/**\n * Represents a simple reusable container for outer layouts.\n */\n\nexport var Container = Object.assign(function (_a) {\n  var _a$align = _a.align,\n      align = _a$align === void 0 ? defaultAlign : _a$align,\n      _a$maxWidth = _a.maxWidth,\n      maxWidth = _a$maxWidth === void 0 ? undefined : _a$maxWidth,\n      innerRef = _a.innerRef,\n      rest = __rest(_a, [\"align\", \"maxWidth\", \"innerRef\"]);\n\n  return React.createElement(StyledContainer, Object.assign({\n    align: align,\n    maxWidth: maxWidth,\n    ref: innerRef\n  }, rest));\n}, {\n  inner: {\n    get StyledContainer() {\n      return StyledContainer;\n    }\n\n  }\n});\nContainer.displayName = 'Container';","map":{"version":3,"sources":["../../../../src/components/Container/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,GAAjB,QAA4B,oBAA5B;AAEA,SAAS,QAAT,QAAyB,gBAAzB;;AA4BA,SAAS,cAAT,CAAwB,SAAxB,EAAqD;AACjD,MAAI,SAAS,KAAK,QAAlB,EAA4B;AACxB,WAAO,SAAS,KAAK,MAAd,GAAuB,oBAAvB,GAA8C,mBAArD;AACH;;AACD,SAAO,gBAAP;AACH;;AACD,IAAM,cAAc,GAAG,GAAH,mBAApB;AAGA,IAAM,mBAAmB,GAAG,GAAH,qBAErB,UAAA,KAAK;AAAA,SAAI,cAAc,CAAC,KAAK,CAAC,KAAP,CAAlB;AAAA,CAFgB,EAGV,UAAA,KAAK;AAAA,SAAI,KAAK,CAAC,QAAV;AAAA,CAHK,EAIV,QAAQ,CAAC,MAJC,CAAzB;AAMA,IAAM,eAAe,GAAG,MAAM,CAAC,GAAV,qBACjB,UAAC,KAAD;AAAA,SAGE,KAAK,CAAC,QAAN,GAAiB,mBAAjB,GAAuC,cAHzC;AAAA,CADiB,CAArB;AAMA,IAAM,YAAY,GAAuB,QAAzC;AACA;;;;AAGA,OAAO,IAAM,SAAS,GAAG,MAAM,CAAC,MAAP,CAAgB,UAAC,EAAD,EAAsE;AAAA,iBAAf,EAAe,CAAnE,KAAmE;AAAA,MAAnE,KAAmE,yBAA3D,YAA2D;AAAA,oBAAf,EAAe,CAA7C,QAA6C;AAAA,MAA7C,QAA6C,4BAAlC,SAAkC;AAAA,MAAvB,QAAuB,GAAf,EAAe,CAAvB,QAAuB;AAAA,MAAb,IAAa,GAAb,MAAA,CAAA,EAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,UAAA,CAAA,CAAa;;AAAC,SAAA,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE,KAAR;AAAe,IAAA,QAAQ,EAAE,QAAzB;AAAmC,IAAA,GAAG,EAAE;AAAxC,GAAA,EAAsD,IAAtD,CAAhB,CAAA;AAA6E,CAApK,EAAqM;AAAE,EAAA,KAAK,EAAE;AAC/N,QAAI,eAAJ,GAAmB;AAAK,aAAO,eAAP;AAAmD;;AADoJ;AAAT,CAArM,CAAlB;AAGP,SAAS,CAAC,WAAV,GAAwB,WAAxB","sourcesContent":["import * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { distance } from '../../distance';\nexport type ContainerAlignment = 'left' | 'center' | 'right';\nexport interface ContainerProps extends StandardProps {\n    /**\n     * Sets the children to display.\n     */\n    children?: React.ReactNode;\n    /**\n     * By default the container is fluid, meaning it occupies 100% of it's\n     * parent width, and by defining maxWidth property, container looses it's\n     * fluid behaviour and becomes defined with max-width.\n     */\n    maxWidth?: number;\n    /**\n     * Where the container content should be aligned. This property is only\n     * applicable in case when fullWidth is defined. By default, it is 'center'.\n     * @default center\n     */\n    align?: ContainerAlignment;\n    /**\n     * Gets the reference to the underlying HTML DOM element.\n     */\n    innerRef?(instance: HTMLElement | null): void;\n}\ninterface FixedWidthContainerProps {\n    maxWidth: number;\n    align: ContainerAlignment;\n}\nfunction getAlignMargin(alignment: ContainerAlignment) {\n    if (alignment !== 'center') {\n        return alignment === 'left' ? 'margin-right: auto' : 'margin-left: auto';\n    }\n    return 'margin: 0 auto';\n}\nconst FluidContainer = css `\n  width: 100%;\n`;\nconst FixedWidthContainer = css<FixedWidthContainerProps> `\n  position: relative;\n  ${props => getAlignMargin(props.align)};\n  max-width: ${props => props.maxWidth}px;\n  padding: 0 ${distance.medium};\n`;\nconst StyledContainer = styled.div `\n  ${(props: {\n    maxWidth?: number;\n    align: ContainerAlignment;\n}) => props.maxWidth ? FixedWidthContainer : FluidContainer};\n`;\nconst defaultAlign: ContainerAlignment = 'center';\n/**\n * Represents a simple reusable container for outer layouts.\n */\nexport const Container = Object.assign(((({ align = defaultAlign, maxWidth = undefined, innerRef, ...rest }) => <StyledContainer align={align} maxWidth={maxWidth} ref={innerRef} {...rest}/>) as React.SFC<ContainerProps>), { inner: {\n        get StyledContainer() { return StyledContainer as typeof StyledContainer; }\n    } });\nContainer.displayName = 'Container';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}