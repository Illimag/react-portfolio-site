{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as styledComponents from 'styled-components';\nimport { light } from './../themes';\nconst {\n  default: styled,\n  css,\n  keyframes,\n  createGlobalStyle,\n  withTheme,\n  ThemeProvider,\n  ThemeConsumer,\n  ThemeContext,\n  isStyledComponent,\n  ServerStyleSheet,\n  StyleSheetManager\n} = styledComponents;\n/*\n  Helper function which insures that theme is always available in the interpolation callback.\n*/\n\nexport const themed = interpolation => props => {\n  const _a = props,\n        {\n    theme\n  } = _a,\n        rest = __rest(_a, [\"theme\"]);\n\n  const hasNestedProps = prop => typeof prop === 'object' && !Array.isArray(prop) && Object.keys(prop).length > 0;\n\n  const mergedTheme = Object.keys(theme).reduce((acc, prop) => (hasNestedProps(theme[prop]) ? acc[prop] = Object.assign({}, acc[prop], theme[prop]) : acc[prop] = theme[prop], acc), Object.assign({}, light));\n  return interpolation(Object.assign({\n    theme: mergedTheme\n  }, rest));\n};\nexport { css, keyframes, createGlobalStyle, withTheme, ThemeProvider, ThemeConsumer, ThemeContext, isStyledComponent, ServerStyleSheet, StyleSheetManager };\nexport default styled;","map":{"version":3,"sources":["../../../src/utils/styled.ts"],"names":[],"mappings":";;;;;;;;;AAEA,OAAO,KAAK,gBAAZ,MAAkC,mBAAlC;AAQA,SAAS,KAAT,QAAsB,aAAtB;AAGA,MAAM;AACJ,EAAA,OAAO,EAAE,MADL;AAEJ,EAAA,GAFI;AAGJ,EAAA,SAHI;AAIJ,EAAA,iBAJI;AAKJ,EAAA,SALI;AAMJ,EAAA,aANI;AAOJ,EAAA,aAPI;AAQJ,EAAA,YARI;AASJ,EAAA,iBATI;AAUJ,EAAA,gBAVI;AAWJ,EAAA;AAXI,IAYF,gBAZJ;AAoBA;;;;AAGA,OAAO,MAAM,MAAM,GAAW,aAAR,IACpB,KADiG,IAE/F;AACF,QAAM,EAAA,GAAA,KAAN;AAAA,QAAM;AAAE,IAAA;AAAF,MAAO,EAAb;AAAA,QAAe,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,OAAA,CAAA,CAAf;;AAEA,QAAM,cAAc,GAAI,IAAD,IACrB,OAAO,IAAP,KAAgB,QAAhB,IAA4B,CAAC,KAAK,CAAC,OAAN,CAAc,IAAd,CAA7B,IAAoD,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,MAAlB,GAA2B,CADjF;;AAGA,QAAM,WAAW,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,MAAnB,CAClB,CAAC,GAAD,EAAM,IAAN,MACE,cAAc,CAAC,KAAK,CAAC,IAAD,CAAN,CAAd,GAA+B,GAAG,CAAC,IAAD,CAAH,GAAS,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,GAAG,CAAC,IAAD,CAAX,EAAsB,KAAK,CAAC,IAAD,CAA3B,CAAxC,GAAgF,GAAG,CAAC,IAAD,CAAH,GAAY,KAAK,CAAC,IAAD,CAAjG,EAA0G,GAD5G,CADkB,EAGjB,MAAA,CAAA,MAAA,CAAA,EAAA,EACI,KADJ,CAHiB,CAApB;AAMA,SAAO,aAAa,CAAA,MAAA,CAAA,MAAA,CAAA;AAAG,IAAA,KAAK,EAAE;AAAV,GAAA,EAA0B,IAA1B,CAAA,CAApB;AACD,CAfM;AAiBP,SACE,GADF,EAEE,SAFF,EAGE,iBAHF,EAIE,SAJF,EAKE,aALF,EAME,aANF,EAOE,YAPF,EAQE,iBARF,EASE,gBATF,EAUE,iBAVF;AAcA,eAAe,MAAf","sourcesContent":["/* tslint:disable:import-blacklist */\nimport * as React from 'react';\nimport * as styledComponents from 'styled-components';\nimport {\n  ThemedStyledComponentsModule,\n  ThemedCssFunction,\n  StyledFunction,\n  ThemedStyledProps,\n  InterpolationFunction,\n} from 'styled-components';\nimport { light } from './../themes';\nimport { PreciseTheme, PreciseFullTheme, Omit } from '../common';\n\nconst {\n  default: styled,\n  css,\n  keyframes,\n  createGlobalStyle,\n  withTheme,\n  ThemeProvider,\n  ThemeConsumer,\n  ThemeContext,\n  isStyledComponent,\n  ServerStyleSheet,\n  StyleSheetManager,\n} = styledComponents as ThemedStyledComponentsModule<PreciseTheme>;\n\nexport type WithOptionalTheme<P extends { theme?: T }, T> = Omit<P, 'theme'> & { theme?: T };\n\nexport type PreciseInterpolationFunc<Props, Theme> = InterpolationFunction<\n  ThemedStyledProps<WithOptionalTheme<Props, Theme>, Theme>\n>;\n\n/*\n  Helper function which insures that theme is always available in the interpolation callback.\n*/\nexport const themed = <Props>(interpolation: PreciseInterpolationFunc<Props, PreciseFullTheme>) => (\n  props: ThemedStyledProps<Props, PreciseTheme>,\n) => {\n  const { theme, ...rest } = props as ThemedStyledProps<any, PreciseTheme>;\n\n  const hasNestedProps = (prop: object) =>\n    typeof prop === 'object' && !Array.isArray(prop) && Object.keys(prop).length > 0;\n\n  const mergedTheme = Object.keys(theme).reduce(\n    (acc, prop) => (\n      hasNestedProps(theme[prop]) ? (acc[prop] = { ...acc[prop], ...theme[prop] }) : (acc[prop] = theme[prop]), acc\n    ),\n    { ...light },\n  );\n  return interpolation({ theme: mergedTheme, ...rest });\n};\n\nexport {\n  css,\n  keyframes,\n  createGlobalStyle,\n  withTheme,\n  ThemeProvider,\n  ThemeConsumer,\n  ThemeContext,\n  isStyledComponent,\n  ServerStyleSheet,\n  StyleSheetManager,\n  ThemedCssFunction,\n};\n\nexport default styled;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}