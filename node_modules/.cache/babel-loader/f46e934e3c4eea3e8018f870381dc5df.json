{"ast":null,"code":"var defaultLabels = {};\nexport function setLabels(labels) {\n  Object.assign(defaultLabels, labels);\n}\nexport function getLabel(key, args) {\n  var label = typeof defaultLabels[key] === 'function' ? defaultLabels[key](args) : defaultLabels[key];\n  return typeof label === 'string' && label || '';\n}\nexport function getPropLabel(props, name, value) {\n  var label = typeof props[name] === 'function' ? props[name](value) : props[name];\n\n  if (typeof label === 'string' && label) {\n    return label;\n  }\n\n  return getLabel(name);\n}","map":{"version":3,"sources":["../../../src/utils/labels.ts"],"names":[],"mappings":"AAuGA,IAAM,aAAa,GAAW,EAA9B;AAEA,OAAM,SAAU,SAAV,CAAoB,MAApB,EAA0C;AAC9C,EAAA,MAAM,CAAC,MAAP,CAAc,aAAd,EAA6B,MAA7B;AACD;AAED,OAAM,SAAU,QAAV,CAAmB,GAAnB,EAAgC,IAAhC,EAA0C;AAC9C,MAAM,KAAK,GAAG,OAAO,aAAa,CAAC,GAAD,CAApB,KAA8B,UAA9B,GAA4C,aAAa,CAAC,GAAD,CAAb,CAAgC,IAAhC,CAA5C,GAAoF,aAAa,CAAC,GAAD,CAA/G;AAEA,SAAQ,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAA9B,IAAwC,EAA/C;AACD;AAED,OAAM,SAAU,YAAV,CAA0D,KAA1D,EAAyE,IAAzE,EAA8F,KAA9F,EAAyG;AAC7G,MAAM,KAAK,GAAG,OAAO,KAAK,CAAC,IAAD,CAAZ,KAAuB,UAAvB,GAAqC,KAAK,CAAC,IAAD,CAAL,CAAoB,KAApB,CAArC,GAAkE,KAAK,CAAC,IAAD,CAArF;;AAEA,MAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAjC,EAAwC;AACtC,WAAO,KAAP;AACD;;AAED,SAAO,QAAQ,CAAC,IAAD,CAAf;AACD","sourcesContent":["export type ComponentLabel = string | { (input: any): string };\n\ninterface Labels {\n  [key: string]: ComponentLabel;\n}\n\nexport interface UploadProgressDetailsLabels extends StatusTableLabels {\n  /**\n   * Optionally sets the label for the cancel all button.\n   */\n  cancelAllLabel?: ComponentLabel;\n  /**\n   * Optionally sets the labe for the title of the progress details modal.\n   */\n  uploadModalTitleLabel?: ComponentLabel;\n}\n\nexport interface UploaderProgressBarLabels {\n  /**\n   * Optionally sets the label for showing multiple files in progress.\n   */\n  itemPluralLabel?: ComponentLabel;\n  /**\n   * Optionally sets the label for showing a single files in progress.\n   */\n  itemSingularLabel?: ComponentLabel;\n  /**\n   * Optionally sets the label for scanning.\n   */\n  uploadScanningLabel?: ComponentLabel;\n  /**\n   * Optionally sets the label for standard progress.\n   */\n  uploadProgressLabel?: ComponentLabel;\n  /**\n   * Optionally sets the label for a successful upload.\n   */\n  uploadSuccessLabel?: ComponentLabel;\n  /**\n   * Optionally sets the label for an upload error.\n   */\n  uploadErrorLabel?: ComponentLabel;\n  /**\n   * Optionally sets the label for the view details button.\n   */\n  viewDetailsLabel?: ComponentLabel;\n}\n\nexport interface StatusTableLabels {\n  /**\n   * Optionally sets the label for the file column.\n   */\n  tableHeaderFileLabel?: ComponentLabel;\n  /**\n   * Optionally sets the label for the status column.\n   */\n  tableHeaderStatusLabel?: ComponentLabel;\n  /**\n   * Optionally sets the status for canceled in the table.\n   */\n  canceledTableUploadLabel?: ComponentLabel;\n  /**\n   * Optionally sets the status for scanning in the table.\n   */\n  scanningTableUploadLabel?: ComponentLabel;\n  /**\n   * Optionally sets the status for progress in the table.\n   */\n  progressTableUploadLabel?: ComponentLabel;\n  /**\n   * Optionally sets the status for success in the table.\n   */\n  successTableUploadLabel?: ComponentLabel;\n  /**\n   * Optionally sets the status for error in the table.\n   */\n  errorTableUploadLabel?: ComponentLabel;\n}\n\nexport interface PaginationBarLabels {\n  /**\n   * The items per page label.\n   * @default 'Items per page:'\n   */\n  itemsPerPageLabel?: ComponentLabel;\n}\n\nexport interface AccordionCardLabels {\n  /**\n   * The label for opening details.\n   */\n  openLabel?: ComponentLabel;\n  /**\n   * The label for closing details.\n   */\n  closeLabel?: ComponentLabel;\n}\n\nexport type LabelOverwrite = UploadProgressDetailsLabels &\n  UploaderProgressBarLabels &\n  PaginationBarLabels &\n  AccordionCardLabels;\n\nconst defaultLabels: Labels = {};\n\nexport function setLabels(labels: LabelOverwrite) {\n  Object.assign(defaultLabels, labels);\n}\n\nexport function getLabel(key: string, args?: any) {\n  const label = typeof defaultLabels[key] === 'function' ? (defaultLabels[key] as Function)(args) : defaultLabels[key];\n\n  return (typeof label === 'string' && label) || '';\n}\n\nexport function getPropLabel<TProps, TKey extends keyof TProps>(props: TProps, name: TKey & string, value?: any) {\n  const label = typeof props[name] === 'function' ? (props[name] as any)(value) : props[name];\n\n  if (typeof label === 'string' && label) {\n    return label;\n  }\n\n  return getLabel(name);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}