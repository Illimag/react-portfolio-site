{"ast":null,"code":"import * as React from 'react';\nimport styled, { keyframes, themed } from '../../utils/styled';\nconst defaultBaseColor = themed(({\n  theme\n}) => theme.ui3);\nconst defaultHighlightColor = themed(({\n  theme\n}) => theme.ui2);\nconst shine = keyframes`\n  from {\n    background-position: -200px;\n  }\n  to {\n    background-position: 130%;\n  }\n`;\nconst Span = styled.span`\n  background-color: ${defaultBaseColor};\n  background-image: linear-gradient(90deg, ${defaultBaseColor}, ${defaultHighlightColor}, ${defaultBaseColor});\n  background-size: 60px 100%;\n  background-repeat: no-repeat;\n  display: inline-block;\n  line-height: 1;\n`;\n\nconst randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n/**\n * The `Sekeleton` component displays a low fidelity UI into which information will be gradually loaded.\n */\n\n\nexport const Skeleton = props => {\n  const {\n    count = 1,\n    duration = 1.2,\n    width = '100%',\n    height = '100%',\n    isCircle,\n    isText,\n    isPulsing = true\n  } = props;\n  const skeletons = [];\n\n  for (let i = 0; i < count; i++) {\n    const StyledSpan = styled(Span)`\n      animation: ${shine} ${duration}s infinite linear ${!isPulsing ? 'paused' : 'running'};\n\n      ${count > 1 && isText ? {\n      width: `${randomInt(80, 100)}%`\n    } : {\n      width: typeof width === 'number' ? `${width}px` : width\n    }};\n\n      height: ${typeof height === 'number' ? `${height}px` : height};\n\n      ${height && width && isCircle && {\n      borderRadius: '50%'\n    }};\n    `;\n    skeletons.push(React.createElement(StyledSpan, Object.assign({\n      key: i\n    }, props), \"\\u200C\"));\n  }\n\n  return React.createElement(React.Fragment, null, skeletons);\n};\nSkeleton.displayName = 'Skeleton';","map":{"version":3,"sources":["../../../../src/components/Skeleton/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,SAAjB,EAAiC,MAAjC,QAA+C,oBAA/C;AAqCA,MAAM,gBAAgB,GAAG,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,GAAtB,CAA/B;AACA,MAAM,qBAAqB,GAAG,MAAM,CAAC,CAAC;AAAE,EAAA;AAAF,CAAD,KAAe,KAAK,CAAC,GAAtB,CAApC;AACA,MAAM,KAAK,GAAG,SAAU;;;;;;;CAAxB;AAQA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAK;sBACH,gBAAgB;6CACO,gBAAgB,KAAK,qBAAqB,KAAK,gBAAgB;;;;;CAF5G;;AAQA,MAAM,SAAS,GAAG,CAAC,GAAD,EAAc,GAAd,KAA8B,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,MAAiB,GAAG,GAAG,GAAN,GAAY,CAA7B,CAAX,IAA8C,GAA9F;AACA;;;;;AAGA,OAAO,MAAM,QAAQ,GAA4B,KAAK,IAAG;AACrD,QAAM;AAAE,IAAA,KAAK,GAAG,CAAV;AAAa,IAAA,QAAQ,GAAG,GAAxB;AAA6B,IAAA,KAAK,GAAG,MAArC;AAA6C,IAAA,MAAM,GAAG,MAAtD;AAA8D,IAAA,QAA9D;AAAwE,IAAA,MAAxE;AAAgF,IAAA,SAAS,GAAG;AAA5F,MAAqG,KAA3G;AACA,QAAM,SAAS,GAAG,EAAlB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC5B,UAAM,UAAU,GAAG,MAAM,CAAC,IAAD,CAAO;mBACrB,KAAK,IAAI,QAAQ,qBAAqB,CAAC,SAAD,GAAa,QAAb,GAAwB,SAAS;;QAElF,KAAK,GAAG,CAAR,IAAa,MAAb,GACM;AAAE,MAAA,KAAK,EAAE,GAAG,SAAS,CAAC,EAAD,EAAK,GAAL,CAAS;AAA9B,KADN,GAEM;AAAE,MAAA,KAAK,EAAE,OAAO,KAAP,KAAiB,QAAjB,GAA4B,GAAG,KAAK,IAApC,GAA2C;AAApD,KAA2D;;gBAEzD,OAAO,MAAP,KAAkB,QAAlB,GAA6B,GAAG,MAAM,IAAtC,GAA6C,MAAM;;QAE3D,MAAM,IACF,KADJ,IAEI,QAFJ,IAEgB;AACZ,MAAA,YAAY,EAAE;AADF,KAEf;KAbD;AAeA,IAAA,SAAS,CAAC,IAAV,CAAe,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA;AAAC,MAAA,GAAG,EAAE;AAAN,KAAA,EAAa,KAAb,CAAX,EAA6B,QAA7B,CAAf;AAGH;;AACD,SAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,SAAH,CAAP;AACH,CAxBM;AAyBP,QAAQ,CAAC,WAAT,GAAuB,UAAvB","sourcesContent":["import * as React from 'react';\nimport styled, { keyframes, css, themed } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nexport interface SkeletonProps extends StandardProps {\n    /**\n     * The duration of the shine animation.\n     * @default 1.2\n     */\n    duration?: number;\n    /**\n     * The width of the skeleton, it could be a number (transformed into px) or a string (e.g.: '75%')\n     * @default '100%'\n     */\n    width?: number | string;\n    /**\n     * The height of the skeleton, it could be a number (transformed into px) or a string (e.g.: '20px')\n     * @default '100%'\n     */\n    height?: number | string;\n    /**\n     * Determines if the skeleton should be a circle (e.g.: avatar). The final shape will depend on the `width` and `height` values.\n     */\n    isCircle?: boolean;\n    /**\n     * The number of skeletons you want to display.\n     * @default 1\n     */\n    count?: number;\n    /**\n     * Randomly simulates different text line lengths. This will work only when `count` is greater that 1.\n     */\n    isText?: boolean;\n    /**\n     * Determines whether the pulsing animation is active or not. Could be use to stop the animation in case your component has some kind of error or just to have a more simple `Skeleton` component.\n     * @default true\n     */\n    isPulsing?: boolean;\n}\nconst defaultBaseColor = themed(({ theme }) => theme.ui3);\nconst defaultHighlightColor = themed(({ theme }) => theme.ui2);\nconst shine = keyframes `\n  from {\n    background-position: -200px;\n  }\n  to {\n    background-position: 130%;\n  }\n`;\nconst Span = styled.span `\n  background-color: ${defaultBaseColor};\n  background-image: linear-gradient(90deg, ${defaultBaseColor}, ${defaultHighlightColor}, ${defaultBaseColor});\n  background-size: 60px 100%;\n  background-repeat: no-repeat;\n  display: inline-block;\n  line-height: 1;\n`;\nconst randomInt = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\n/**\n * The `Sekeleton` component displays a low fidelity UI into which information will be gradually loaded.\n */\nexport const Skeleton: React.FC<SkeletonProps> = props => {\n    const { count = 1, duration = 1.2, width = '100%', height = '100%', isCircle, isText, isPulsing = true } = props;\n    const skeletons = [];\n    for (let i = 0; i < count; i++) {\n        const StyledSpan = styled(Span) `\n      animation: ${shine} ${duration}s infinite linear ${!isPulsing ? 'paused' : 'running'};\n\n      ${count > 1 && isText\n            ? { width: `${randomInt(80, 100)}%` }\n            : { width: typeof width === 'number' ? `${width}px` : width }};\n\n      height: ${typeof height === 'number' ? `${height}px` : height};\n\n      ${height &&\n            width &&\n            isCircle && {\n            borderRadius: '50%',\n        }};\n    `;\n        skeletons.push(<StyledSpan key={i} {...props}>\n        &zwnj;\n      </StyledSpan>);\n    }\n    return <>{skeletons}</>;\n};\nSkeleton.displayName = 'Skeleton';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}