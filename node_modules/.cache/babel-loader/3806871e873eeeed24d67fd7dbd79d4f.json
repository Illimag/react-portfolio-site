{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nconst GridAreaContainer = styled.div`\n  height: 100%;\n`;\n/**\n * The GridArea component to declare areas within a Grid instance.\n */\n\nexport class GridArea extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this.clicked = e => {\n      this.tapped(e.currentTarget, e.clientX, e.clientY);\n    };\n\n    this.touched = e => {\n      const touch = e.touches[0];\n      this.tapped(e.currentTarget, touch.clientX, touch.clientY);\n    };\n  }\n\n  tapped(node, clientX, clientY) {\n    const {\n      onTap\n    } = this.props;\n\n    if (typeof onTap === 'function') {\n      const r = node.getBoundingClientRect();\n      onTap({\n        node,\n        x: clientX - r.left,\n        y: clientY - r.top,\n        width: r.width,\n        height: r.height\n      });\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      colSpan,\n      rowSpan,\n      column,\n      row,\n      onTap,\n      hidden\n    } = _a,\n          props = __rest(_a, [\"colSpan\", \"rowSpan\", \"column\", \"row\", \"onTap\", \"hidden\"]);\n\n    return React.createElement(GridAreaContainer, Object.assign({}, props, {\n      onMouseDown: this.clicked,\n      onTouchStartCapture: this.touched\n    }));\n  }\n\n}\nGridArea.inner = {\n  get GridAreaContainer() {\n    return GridAreaContainer;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/GridArea/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AAmCA,MAAM,iBAAiB,GAAG,MAAM,CAAC,GAAI;;CAArC;AAGA;;;;AAGA,OAAM,MAAO,QAAP,SAAwB,KAAK,CAAC,aAA9B,CAA0D;AAAhE,EAAA,WAAA,GAAA;;;AACY,SAAA,OAAA,GAAW,CAAD,IAAwC;AACtD,WAAK,MAAL,CAAY,CAAC,CAAC,aAAd,EAA6B,CAAC,CAAC,OAA/B,EAAwC,CAAC,CAAC,OAA1C;AACH,KAFO;;AAGA,SAAA,OAAA,GAAW,CAAD,IAAwC;AACtD,YAAM,KAAK,GAAG,CAAC,CAAC,OAAF,CAAU,CAAV,CAAd;AACA,WAAK,MAAL,CAAY,CAAC,CAAC,aAAd,EAA6B,KAAK,CAAC,OAAnC,EAA4C,KAAK,CAAC,OAAlD;AACH,KAHO;AAwBX;;AApBW,EAAA,MAAM,CAAC,IAAD,EAAoB,OAApB,EAAqC,OAArC,EAAoD;AAC9D,UAAM;AAAE,MAAA;AAAF,QAAY,KAAK,KAAvB;;AACA,QAAI,OAAO,KAAP,KAAiB,UAArB,EAAiC;AAC7B,YAAM,CAAC,GAAG,IAAI,CAAC,qBAAL,EAAV;AACA,MAAA,KAAK,CAAC;AACF,QAAA,IADE;AAEF,QAAA,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,IAFb;AAGF,QAAA,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,GAHb;AAIF,QAAA,KAAK,EAAE,CAAC,CAAC,KAJP;AAKF,QAAA,MAAM,EAAE,CAAC,CAAC;AALR,OAAD,CAAL;AAOH;AACJ;;AACD,EAAA,MAAM,GAAA;AACF,UAAM,EAAA,GAAA,KAAA,KAAN;AAAA,UAAM;AAAE,MAAA,OAAF;AAAW,MAAA,OAAX;AAAoB,MAAA,MAApB;AAA4B,MAAA,GAA5B;AAAiC,MAAA,KAAjC;AAAwC,MAAA;AAAxC,QAA8C,EAApD;AAAA,UAAsD,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,SAAA,EAAA,SAAA,EAAA,QAAA,EAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,CAAtD;;AACA,WAAO,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,MAAA,WAAW,EAAE,KAAK,OAApB;AAA6B,MAAA,mBAAmB,EAAE,KAAK;AAAvD,KAAV,CAAlB,CAAP;AACH;;AAxB2D;AAyBrD,QAAA,CAAA,KAAA,GAAQ;AACX,MAAI,iBAAJ,GAAqB;AAAK,WAAO,iBAAP;AAAuD;;AADtE,CAAR","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { GridCellDefinition } from '../../utils/gridLayout';\nexport interface GridAreaTapEvent {\n    /**\n     * The specific target that was tapped.\n     */\n    node: HTMLElement;\n    /**\n     * The x coordinate of the tap.\n     */\n    x: number;\n    /**\n     * The y coordinate of the tap.\n     */\n    y: number;\n    /**\n     * The width of the bounding box.\n     */\n    width: number;\n    /**\n     * The height of the bounding box.\n     */\n    height: number;\n}\nexport interface GridAreaProps extends StandardProps, GridCellDefinition {\n    /**\n     * The children, usually passed as a collection of TabPage elements.\n     */\n    children?: React.ReactNode;\n    /**\n     * The event that is fired once the element is clicked or touched.\n     */\n    onTap?(e: GridAreaTapEvent): void;\n}\nconst GridAreaContainer = styled.div `\n  height: 100%;\n`;\n/**\n * The GridArea component to declare areas within a Grid instance.\n */\nexport class GridArea extends React.PureComponent<GridAreaProps> {\n    private clicked = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.tapped(e.currentTarget, e.clientX, e.clientY);\n    };\n    private touched = (e: React.TouchEvent<HTMLDivElement>) => {\n        const touch = e.touches[0];\n        this.tapped(e.currentTarget, touch.clientX, touch.clientY);\n    };\n    private tapped(node: HTMLElement, clientX: number, clientY: number) {\n        const { onTap } = this.props;\n        if (typeof onTap === 'function') {\n            const r = node.getBoundingClientRect();\n            onTap({\n                node,\n                x: clientX - r.left,\n                y: clientY - r.top,\n                width: r.width,\n                height: r.height,\n            });\n        }\n    }\n    render() {\n        const { colSpan, rowSpan, column, row, onTap, hidden, ...props } = this.props;\n        return <GridAreaContainer {...props} onMouseDown={this.clicked} onTouchStartCapture={this.touched}/>;\n    }\n    static inner = {\n        get GridAreaContainer() { return GridAreaContainer as typeof GridAreaContainer; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}