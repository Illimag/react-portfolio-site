{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nimport { Prompt } from '../Prompt';\nimport { FormContext } from '../../contexts';\nconst StyledForm = styled.form`\n  margin: 0;\n`;\n\nfunction isDifferent(a, b) {\n  if (a !== b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n      if (a.length === b.length) {\n        for (let i = 0; i < a.length; i++) {\n          if (isDifferent(a[i], b[i])) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    } else if (typeof a === 'object' && typeof b === 'object') {\n      const keysA = Object.keys(a);\n      const keysB = Object.keys(b);\n\n      if (keysA.length === keysB.length) {\n        for (const key of keysA) {\n          if (isDifferent(a[key], b[key])) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction isChanged(initial, current) {\n  const keys = Object.keys(current);\n\n  for (const key of keys) {\n    if (isDifferent(current[key], initial[key])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Represents a field aggregator that enables easily creating forms.\n */\n\n\nexport class Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fields = [];\n    this.ctx = this.createContext();\n\n    this.submit = e => {\n      const {\n        onSubmit,\n        disabled\n      } = this.props;\n      const {\n        current,\n        changed,\n        errors\n      } = this.state;\n      this.setErrors(current);\n\n      if (!disabled && typeof onSubmit === 'function') {\n        const arrayErrors = Object.keys(errors).reduce((arrayErrors, field) => {\n          const error = errors[field];\n\n          if (error) {\n            arrayErrors.push({\n              field,\n              error\n            });\n          }\n\n          return arrayErrors;\n        }, []);\n        this.setState({\n          changed: false,\n          initial: current\n        }, () => onSubmit({\n          data: current,\n          errors: arrayErrors,\n          changed\n        }));\n      }\n\n      e.preventDefault();\n      return false;\n    };\n\n    const data = props.value || props.defaultValue || {};\n    this.state = {\n      changed: false,\n      controlled: props.value !== undefined,\n      initial: data,\n      current: data,\n      errors: {}\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      controlled,\n      initial\n    } = this.state;\n\n    if (controlled) {\n      const {\n        value = {}\n      } = nextProps;\n      const changed = isChanged(initial, value);\n      this.setValues(value, changed);\n    }\n  }\n\n  setValues(current, changed) {\n    const keys = Object.keys(current);\n    this.setState({\n      current,\n      changed\n    });\n\n    for (const key of keys) {\n      const value = current[key];\n\n      for (const field of this.fields) {\n        if (field.props.name === key && field.state.value !== value) {\n          field.setState({\n            value\n          });\n        }\n      }\n    }\n  }\n\n  getError(name, value) {\n    const validator = this.props.validationRules && this.props.validationRules[name];\n    const validationResult = validator ? validator(value) : true;\n    const error = validationResult === true ? undefined : validationResult;\n    return error;\n  }\n\n  setFieldError(name, error) {\n    for (const fieldEntity of this.fields) {\n      if (fieldEntity.props.name === name) {\n        fieldEntity.setState({\n          error\n        });\n        return;\n      }\n    }\n  }\n\n  setError({\n    name,\n    value\n  }) {\n    const error = this.getError(name, value);\n    this.setFieldError(name, error);\n    this.setState({\n      errors: Object.assign({}, this.state.errors, {\n        [name]: error\n      })\n    });\n  }\n\n  setErrors(current) {\n    const keys = Object.keys(current);\n    const errors = Object.assign({}, this.state.errors);\n\n    for (const key of keys) {\n      const value = current[key];\n      const error = this.getError(key, value);\n      errors[key] = error;\n      this.setFieldError(key, error);\n    }\n\n    this.setState({\n      errors\n    });\n  }\n\n  createContext() {\n    return {\n      change: field => {\n        const {\n          onChange\n        } = this.props;\n        const {\n          controlled,\n          current,\n          initial\n        } = this.state;\n        const proposed = Object.assign({}, current, {\n          [field.name]: field.value\n        });\n        const changed = isChanged(initial, proposed);\n\n        if (!controlled) {\n          this.setValues(proposed, changed);\n        }\n\n        this.setError(field);\n\n        if (typeof onChange === 'function') {\n          onChange({\n            changed,\n            value: proposed\n          });\n        }\n      },\n      subscribe: field => {\n        const {\n          current,\n          errors = {}\n        } = this.state;\n        const {\n          name\n        } = field.props;\n\n        if (name) {\n          this.fields.push(field);\n          let error;\n\n          if (name in current) {\n            const value = current[name];\n            error = this.getError(name, value);\n            field.setState({\n              value\n            });\n          } else {\n            const value = field.state.value;\n            current[name] = value;\n            error = this.getError(name, value);\n          }\n\n          if (error) {\n            this.setState({\n              errors: Object.assign({}, errors, {\n                [name]: error\n              })\n            });\n          }\n        }\n      },\n      unsubscribe: field => {\n        const index = this.fields.indexOf(field);\n        index >= 0 && this.fields.splice(index, 1);\n      }\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      value: _0,\n      defaultValue: _1,\n      onChange: _2,\n      onSubmit: _3,\n      disabled: _4,\n      children,\n      prompt\n    } = _a,\n          rest = __rest(_a, [\"value\", \"defaultValue\", \"onChange\", \"onSubmit\", \"disabled\", \"children\", \"prompt\"]);\n\n    const {\n      changed\n    } = this.state;\n    return React.createElement(StyledForm, Object.assign({}, rest, {\n      onSubmit: this.submit\n    }), prompt && (typeof prompt === 'function' ? prompt(changed) : React.createElement(Prompt, {\n      when: changed,\n      message: prompt\n    })), React.createElement(FormContext.Provider, {\n      value: this.ctx\n    }, children));\n  }\n\n}\nForm.inner = {\n  get StyledForm() {\n    return StyledForm;\n  },\n\n  get Prompt() {\n    return Prompt;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Form/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AACA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,WAAT,QAAiF,gBAAjF;AA6EA,MAAM,UAAU,GAAG,MAAM,CAAC,IAAK;;CAA/B;;AAGA,SAAS,WAAT,CAAqB,CAArB,EAA6B,CAA7B,EAAmC;AAC/B,MAAI,CAAC,KAAK,CAAV,EAAa;AACT,QAAI,KAAK,CAAC,OAAN,CAAc,CAAd,KAAoB,KAAK,CAAC,OAAN,CAAc,CAAd,CAAxB,EAA0C;AACtC,UAAI,CAAC,CAAC,MAAF,KAAa,CAAC,CAAC,MAAnB,EAA2B;AACvB,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAAC,CAAC,MAAtB,EAA8B,CAAC,EAA/B,EAAmC;AAC/B,cAAI,WAAW,CAAC,CAAC,CAAC,CAAD,CAAF,EAAO,CAAC,CAAC,CAAD,CAAR,CAAf,EAA6B;AACzB,mBAAO,IAAP;AACH;AACJ;;AACD,eAAO,KAAP;AACH;AACJ,KATD,MAUK,IAAI,OAAO,CAAP,KAAa,QAAb,IAAyB,OAAO,CAAP,KAAa,QAA1C,EAAoD;AACrD,YAAM,KAAK,GAAG,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAd;AACA,YAAM,KAAK,GAAG,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAd;;AACA,UAAI,KAAK,CAAC,MAAN,KAAiB,KAAK,CAAC,MAA3B,EAAmC;AAC/B,aAAK,MAAM,GAAX,IAAkB,KAAlB,EAAyB;AACrB,cAAI,WAAW,CAAC,CAAC,CAAC,GAAD,CAAF,EAAS,CAAC,CAAC,GAAD,CAAV,CAAf,EAAiC;AAC7B,mBAAO,IAAP;AACH;AACJ;;AACD,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;;AACD,SAAS,SAAT,CAAmB,OAAnB,EAA4C,OAA5C,EAAmE;AAC/D,QAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAb;;AACA,OAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;AACpB,QAAI,WAAW,CAAC,OAAO,CAAC,GAAD,CAAR,EAAe,OAAO,CAAC,GAAD,CAAtB,CAAf,EAA6C;AACzC,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH;AACD;;;;;AAGA,OAAM,MAAO,IAAP,SAAmD,KAAK,CAAC,SAAzD,CAAwG;AAG1G,EAAA,WAAA,CAAY,KAAZ,EAAoC;AAChC,UAAM,KAAN;AAHa,SAAA,MAAA,GAAmC,EAAnC;AACA,SAAA,GAAA,GAAuB,KAAK,aAAL,EAAvB;;AAqHT,SAAA,MAAA,GAAU,CAAD,IAAwC;AACrD,YAAM;AAAE,QAAA,QAAF;AAAY,QAAA;AAAZ,UAAyB,KAAK,KAApC;AACA,YAAM;AAAE,QAAA,OAAF;AAAW,QAAA,OAAX;AAAoB,QAAA;AAApB,UAA+B,KAAK,KAA1C;AACA,WAAK,SAAL,CAAe,OAAf;;AACA,UAAI,CAAC,QAAD,IAAa,OAAO,QAAP,KAAoB,UAArC,EAAiD;AAC7C,cAAM,WAAW,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,CAAuD,CAAC,WAAD,EAAc,KAAd,KAAuB;AAC9F,gBAAM,KAAK,GAAG,MAAM,CAAC,KAAD,CAApB;;AACA,cAAI,KAAJ,EAAW;AACP,YAAA,WAAW,CAAC,IAAZ,CAAiB;AAAE,cAAA,KAAF;AAAS,cAAA;AAAT,aAAjB;AACH;;AACD,iBAAO,WAAP;AACH,SANmB,EAMjB,EANiB,CAApB;AAOA,aAAK,QAAL,CAAc;AACV,UAAA,OAAO,EAAE,KADC;AAEV,UAAA,OAAO,EAAE;AAFC,SAAd,EAGG,MAAM,QAAQ,CAAC;AACd,UAAA,IAAI,EAAE,OADQ;AAEd,UAAA,MAAM,EAAE,WAFM;AAGd,UAAA;AAHc,SAAD,CAHjB;AAQH;;AACD,MAAA,CAAC,CAAC,cAAF;AACA,aAAO,KAAP;AACH,KAvBO;;AAlHJ,UAAM,IAAI,GAAG,KAAK,CAAC,KAAN,IAAe,KAAK,CAAC,YAArB,IAAqC,EAAlD;AACA,SAAK,KAAL,GAAa;AACT,MAAA,OAAO,EAAE,KADA;AAET,MAAA,UAAU,EAAE,KAAK,CAAC,KAAN,KAAgB,SAFnB;AAGT,MAAA,OAAO,EAAE,IAHA;AAIT,MAAA,OAAO,EAAE,IAJA;AAKT,MAAA,MAAM,EAAE;AALC,KAAb;AAOH;;AACD,EAAA,gCAAgC,CAAC,SAAD,EAA6B;AACzD,UAAM;AAAE,MAAA,UAAF;AAAc,MAAA;AAAd,QAA0B,KAAK,KAArC;;AACA,QAAI,UAAJ,EAAgB;AACZ,YAAM;AAAE,QAAA,KAAK,GAAG;AAAV,UAAiB,SAAvB;AACA,YAAM,OAAO,GAAG,SAAS,CAAC,OAAD,EAAU,KAAV,CAAzB;AACA,WAAK,SAAL,CAAe,KAAf,EAAsB,OAAtB;AACH;AACJ;;AACO,EAAA,SAAS,CAAC,OAAD,EAAkB,OAAlB,EAAkC;AAC/C,UAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAb;AACA,SAAK,QAAL,CAAc;AACV,MAAA,OADU;AAEV,MAAA;AAFU,KAAd;;AAIA,SAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;AACpB,YAAM,KAAK,GAAG,OAAO,CAAC,GAAD,CAArB;;AACA,WAAK,MAAM,KAAX,IAAoB,KAAK,MAAzB,EAAiC;AAC7B,YAAI,KAAK,CAAC,KAAN,CAAY,IAAZ,KAAqB,GAArB,IAA4B,KAAK,CAAC,KAAN,CAAY,KAAZ,KAAsB,KAAtD,EAA6D;AACzD,UAAA,KAAK,CAAC,QAAN,CAAe;AACX,YAAA;AADW,WAAf;AAGH;AACJ;AACJ;AACJ;;AACO,EAAA,QAAQ,CAAC,IAAD,EAAe,KAAf,EAAyB;AACrC,UAAM,SAAS,GAAG,KAAK,KAAL,CAAW,eAAX,IAA8B,KAAK,KAAL,CAAW,eAAX,CAA2B,IAA3B,CAAhD;AACA,UAAM,gBAAgB,GAAG,SAAS,GAAG,SAAS,CAAC,KAAD,CAAZ,GAAsB,IAAxD;AACA,UAAM,KAAK,GAAG,gBAAgB,KAAK,IAArB,GAA4B,SAA5B,GAAwC,gBAAtD;AACA,WAAO,KAAP;AACH;;AACO,EAAA,aAAa,CAAC,IAAD,EAAqB,KAArB,EAA6C;AAC9D,SAAK,MAAM,WAAX,IAA0B,KAAK,MAA/B,EAAuC;AACnC,UAAI,WAAW,CAAC,KAAZ,CAAkB,IAAlB,KAA2B,IAA/B,EAAqC;AACjC,QAAA,WAAW,CAAC,QAAZ,CAAqB;AAAE,UAAA;AAAF,SAArB;AACA;AACH;AACJ;AACJ;;AACO,EAAA,QAAQ,CAAC;AAAE,IAAA,IAAF;AAAQ,IAAA;AAAR,GAAD,EAAiC;AAC7C,UAAM,KAAK,GAAG,KAAK,QAAL,CAAc,IAAd,EAAoB,KAApB,CAAd;AACA,SAAK,aAAL,CAAmB,IAAnB,EAAyB,KAAzB;AACA,SAAK,QAAL,CAAc;AAAE,MAAA,MAAM,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,KAAK,KAAL,CAAW,MAAlB,EAAwB;AAAE,SAAC,IAAD,GAAQ;AAAV,OAAxB;AAAR,KAAd;AACH;;AACO,EAAA,SAAS,CAAC,OAAD,EAAgB;AAC7B,UAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAb;AACA,UAAM,MAAM,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,KAAK,KAAL,CAAW,MAAnB,CAAZ;;AACA,SAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;AACpB,YAAM,KAAK,GAAG,OAAO,CAAC,GAAD,CAArB;AACA,YAAM,KAAK,GAAG,KAAK,QAAL,CAAc,GAAd,EAAmB,KAAnB,CAAd;AACA,MAAA,MAAM,CAAC,GAAD,CAAN,GAAc,KAAd;AACA,WAAK,aAAL,CAAmB,GAAnB,EAAwB,KAAxB;AACH;;AACD,SAAK,QAAL,CAAc;AAAE,MAAA;AAAF,KAAd;AACH;;AACO,EAAA,aAAa,GAAA;AACjB,WAAO;AACH,MAAA,MAAM,EAAG,KAAD,IAA2B;AAC/B,cAAM;AAAE,UAAA;AAAF,YAAe,KAAK,KAA1B;AACA,cAAM;AAAE,UAAA,UAAF;AAAc,UAAA,OAAd;AAAuB,UAAA;AAAvB,YAAmC,KAAK,KAA9C;AACA,cAAM,QAAQ,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACP,OADO,EACA;AACV,WAAC,KAAK,CAAC,IAAP,GAAc,KAAK,CAAC;AADV,SADA,CAAd;AAIA,cAAM,OAAO,GAAG,SAAS,CAAC,OAAD,EAAU,QAAV,CAAzB;;AACA,YAAI,CAAC,UAAL,EAAiB;AACb,eAAK,SAAL,CAAe,QAAf,EAAyB,OAAzB;AACH;;AACD,aAAK,QAAL,CAAc,KAAd;;AACA,YAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAChC,UAAA,QAAQ,CAAC;AACL,YAAA,OADK;AAEL,YAAA,KAAK,EAAE;AAFF,WAAD,CAAR;AAIH;AACJ,OAnBE;AAoBH,MAAA,SAAS,EAAG,KAAD,IAA6B;AACpC,cAAM;AAAE,UAAA,OAAF;AAAW,UAAA,MAAM,GAAG;AAApB,YAA2B,KAAK,KAAtC;AACA,cAAM;AAAE,UAAA;AAAF,YAAW,KAAK,CAAC,KAAvB;;AACA,YAAI,IAAJ,EAAU;AACN,eAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACA,cAAI,KAAJ;;AACA,cAAI,IAAI,IAAI,OAAZ,EAAqB;AACjB,kBAAM,KAAK,GAAG,OAAO,CAAC,IAAD,CAArB;AACA,YAAA,KAAK,GAAG,KAAK,QAAL,CAAc,IAAd,EAAoB,KAApB,CAAR;AACA,YAAA,KAAK,CAAC,QAAN,CAAe;AACX,cAAA;AADW,aAAf;AAGH,WAND,MAOK;AACD,kBAAM,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,KAA1B;AACA,YAAA,OAAO,CAAC,IAAD,CAAP,GAAgB,KAAhB;AACA,YAAA,KAAK,GAAG,KAAK,QAAL,CAAc,IAAd,EAAoB,KAApB,CAAR;AACH;;AACD,cAAI,KAAJ,EAAW;AACP,iBAAK,QAAL,CAAc;AAAE,cAAA,MAAM,EAAE,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,MAAL,EAAW;AAAE,iBAAC,IAAD,GAAQ;AAAV,eAAX;AAAV,aAAd;AACH;AACJ;AACJ,OA1CE;AA2CH,MAAA,WAAW,EAAG,KAAD,IAA6B;AACtC,cAAM,KAAK,GAAG,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAApB,CAAd;AACA,QAAA,KAAK,IAAI,CAAT,IAAc,KAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB,EAA0B,CAA1B,CAAd;AACH;AA9CE,KAAP;AAgDH;;AAyBD,EAAA,MAAM,GAAA;AACF,UAAM,EAAA,GAAA,KAAA,KAAN;AAAA,UAAM;AAAE,MAAA,KAAK,EAAE,EAAT;AAAa,MAAA,YAAY,EAAE,EAA3B;AAA+B,MAAA,QAAQ,EAAE,EAAzC;AAA6C,MAAA,QAAQ,EAAE,EAAvD;AAA2D,MAAA,QAAQ,EAAE,EAArE;AAAyE,MAAA,QAAzE;AAAmF,MAAA;AAAnF,QAAyF,EAA/F;AAAA,UAAiG,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,OAAA,EAAA,cAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,QAAA,CAAA,CAAjG;;AACA,UAAM;AAAE,MAAA;AAAF,QAAc,KAAK,KAAzB;AACA,WAAQ,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,IAAL,EAAS;AAAE,MAAA,QAAQ,EAAE,KAAK;AAAjB,KAAT,CAAX,EACP,MAAM,KAAK,OAAO,MAAP,KAAkB,UAAlB,GAA+B,MAAM,CAAC,OAAD,CAArC,GAAiD,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,MAAA,IAAI,EAAE,OAAP;AAAgB,MAAA,OAAO,EAAE;AAAzB,KAAP,CAAtD,CADC,EAER,KAAA,CAAA,aAAA,CAAC,WAAW,CAAC,QAAb,EAAqB;AAAC,MAAA,KAAK,EAAE,KAAK;AAAb,KAArB,EAAwC,QAAxC,CAFQ,CAAR;AAIH;;AAtJyG;AAuJnG,IAAA,CAAA,KAAA,GAAQ;AACX,MAAI,UAAJ,GAAc;AAAK,WAAO,UAAP;AAAyC,GADjD;;AAEX,MAAI,MAAJ,GAAU;AAAK,WAAO,MAAP;AAAiC;;AAFrC,CAAR","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { Prompt } from '../Prompt';\nimport { FormContext, FormContextType, FormValueNotifier, FormValueChange } from '../../contexts';\nimport { StandardProps } from '../../common';\nexport interface FormSubmitEvent {\n    /**\n     * The data to be submitted.\n     */\n    data: FormValuesData;\n    /**\n     * Validation errors\n     */\n    errors?: Array<FormValidationError>;\n    /**\n     * Indicates whether the data has changed from the initial state.\n     */\n    changed: boolean;\n}\nexport interface FormChangeEvent {\n    /**\n     * The current values of the form fields.\n     */\n    value: FormValuesData;\n    /**\n     * Indicates whether the data has changed from the initial state.\n     */\n    changed: boolean;\n}\nexport interface FormValuesData {\n    [name: string]: any;\n}\nexport interface FormValidationError {\n    field: string;\n    error: React.ReactChild;\n}\nexport interface FormProps<FormValues> extends StandardProps {\n    /**\n     * Shows the given message if the user wants to navigate\n     * with changes being made or renders custom component with message if provided.\n     */\n    prompt?: ((changed: boolean) => React.ReactChild) | string;\n    /**\n     * The value of the form to be used in controlled mode.\n     */\n    value?: FormValues;\n    /**\n     * The initial value of the form to be used in managed mode.\n     */\n    defaultValue?: FormValues;\n    /**\n     * Rules for validating fields values.\n     */\n    validationRules?: {\n        [T in keyof FormValues]?: (value: any) => React.ReactChild | true;\n    };\n    /**\n     * Event emitted when a field of the form changed.\n     */\n    onChange?(e: FormChangeEvent): void;\n    /**\n     * Event emitted when the form is submitted.\n     */\n    onSubmit?(e: FormSubmitEvent): void;\n    /**\n     * Disables the form in case of invalid input. Effectively\n     * disables the possibility of submitting forms.\n     * @default false\n     */\n    disabled?: boolean;\n}\nexport interface FormState<FormValues> {\n    changed: boolean;\n    initial: FormValues;\n    controlled: boolean;\n    current: FormValues;\n    errors: Partial<{\n        [T in keyof FormValues]: React.ReactChild;\n    }>;\n}\nconst StyledForm = styled.form `\n  margin: 0;\n`;\nfunction isDifferent(a: any, b: any) {\n    if (a !== b) {\n        if (Array.isArray(a) && Array.isArray(b)) {\n            if (a.length === b.length) {\n                for (let i = 0; i < a.length; i++) {\n                    if (isDifferent(a[i], b[i])) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }\n        else if (typeof a === 'object' && typeof b === 'object') {\n            const keysA = Object.keys(a);\n            const keysB = Object.keys(b);\n            if (keysA.length === keysB.length) {\n                for (const key of keysA) {\n                    if (isDifferent(a[key], b[key])) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nfunction isChanged(initial: FormValuesData, current: FormValuesData) {\n    const keys = Object.keys(current);\n    for (const key of keys) {\n        if (isDifferent(current[key], initial[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Represents a field aggregator that enables easily creating forms.\n */\nexport class Form<Values extends FormValuesData> extends React.Component<FormProps<Values>, FormState<Values>> {\n    private readonly fields: Array<FormValueNotifier> = [];\n    private readonly ctx: FormContextType = this.createContext();\n    constructor(props: FormProps<Values>) {\n        super(props);\n        const data = props.value || props.defaultValue || {};\n        this.state = {\n            changed: false,\n            controlled: props.value !== undefined,\n            initial: data as Values,\n            current: data as Values,\n            errors: {},\n        };\n    }\n    UNSAFE_componentWillReceiveProps(nextProps: FormProps<Values>) {\n        const { controlled, initial } = this.state;\n        if (controlled) {\n            const { value = {} } = nextProps as Values;\n            const changed = isChanged(initial, value);\n            this.setValues(value, changed);\n        }\n    }\n    private setValues(current: Values, changed: boolean) {\n        const keys = Object.keys(current);\n        this.setState({\n            current,\n            changed,\n        });\n        for (const key of keys) {\n            const value = current[key];\n            for (const field of this.fields) {\n                if (field.props.name === key && field.state.value !== value) {\n                    field.setState({\n                        value,\n                    });\n                }\n            }\n        }\n    }\n    private getError(name: string, value: any) {\n        const validator = this.props.validationRules && this.props.validationRules[name];\n        const validationResult = validator ? validator(value) : true;\n        const error = validationResult === true ? undefined : validationResult;\n        return error;\n    }\n    private setFieldError(name: keyof Values, error?: React.ReactChild) {\n        for (const fieldEntity of this.fields) {\n            if (fieldEntity.props.name === name) {\n                fieldEntity.setState({ error });\n                return;\n            }\n        }\n    }\n    private setError({ name, value }: FormValueChange) {\n        const error = this.getError(name, value);\n        this.setFieldError(name, error);\n        this.setState({ errors: { ...this.state.errors, [name]: error } });\n    }\n    private setErrors(current: Values) {\n        const keys = Object.keys(current);\n        const errors = { ...this.state.errors };\n        for (const key of keys) {\n            const value = current[key];\n            const error = this.getError(key, value);\n            errors[key] = error;\n            this.setFieldError(key, error);\n        }\n        this.setState({ errors });\n    }\n    private createContext(): FormContextType {\n        return {\n            change: (field: FormValueChange) => {\n                const { onChange } = this.props;\n                const { controlled, current, initial } = this.state;\n                const proposed = {\n                    ...current,\n                    [field.name]: field.value,\n                };\n                const changed = isChanged(initial, proposed);\n                if (!controlled) {\n                    this.setValues(proposed, changed);\n                }\n                this.setError(field);\n                if (typeof onChange === 'function') {\n                    onChange({\n                        changed,\n                        value: proposed,\n                    });\n                }\n            },\n            subscribe: (field: FormValueNotifier) => {\n                const { current, errors = {} } = this.state;\n                const { name } = field.props;\n                if (name) {\n                    this.fields.push(field);\n                    let error;\n                    if (name in current) {\n                        const value = current[name];\n                        error = this.getError(name, value);\n                        field.setState({\n                            value,\n                        });\n                    }\n                    else {\n                        const value = field.state.value;\n                        current[name] = value;\n                        error = this.getError(name, value);\n                    }\n                    if (error) {\n                        this.setState({ errors: { ...errors, [name]: error } as FormState<Values>['errors'] });\n                    }\n                }\n            },\n            unsubscribe: (field: FormValueNotifier) => {\n                const index = this.fields.indexOf(field);\n                index >= 0 && this.fields.splice(index, 1);\n            },\n        };\n    }\n    private submit = (e: React.FormEvent<HTMLFormElement>) => {\n        const { onSubmit, disabled } = this.props;\n        const { current, changed, errors } = this.state;\n        this.setErrors(current);\n        if (!disabled && typeof onSubmit === 'function') {\n            const arrayErrors = Object.keys(errors).reduce<Array<FormValidationError>>((arrayErrors, field) => {\n                const error = errors[field];\n                if (error) {\n                    arrayErrors.push({ field, error });\n                }\n                return arrayErrors;\n            }, []);\n            this.setState({\n                changed: false,\n                initial: current,\n            }, () => onSubmit({\n                data: current,\n                errors: arrayErrors,\n                changed,\n            }));\n        }\n        e.preventDefault();\n        return false;\n    };\n    render() {\n        const { value: _0, defaultValue: _1, onChange: _2, onSubmit: _3, disabled: _4, children, prompt, ...rest } = this.props;\n        const { changed } = this.state;\n        return (<StyledForm {...rest} onSubmit={this.submit}>\n        {prompt && (typeof prompt === 'function' ? prompt(changed) : <Prompt when={changed} message={prompt}/>)}\n        <FormContext.Provider value={this.ctx}>{children}</FormContext.Provider>\n      </StyledForm>);\n    }\n    static inner = {\n        get StyledForm() { return StyledForm as typeof StyledForm; },\n        get Prompt() { return Prompt as typeof Prompt; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}