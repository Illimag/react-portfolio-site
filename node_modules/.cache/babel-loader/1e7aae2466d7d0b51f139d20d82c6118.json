{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nimport { Flyout } from '../Flyout';\nimport { tuna, white } from '../../colors';\nimport { remCalc } from '../../utils/remCalc';\nconst TooltipContainer = styled.div`\n  position: relative;\n  width: fit-content;\n  display: inline-block;\n`;\nexport class Tooltip extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setTargetRef = el => {\n      this.targetContainer = el;\n    };\n\n    this.onMouseOver = () => {\n      if (!this.state.controlled) {\n        this.setOpen(true);\n      }\n    };\n\n    this.onMouseOut = () => {\n      if (!this.state.controlled) {\n        this.setOpen(false);\n      }\n    };\n\n    this.state = {\n      controlled: props.open !== undefined,\n      open: props.open || false,\n      targetRect: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        width: 0,\n        height: 0\n      },\n      dirtyFlag: false\n    };\n  }\n\n  componentDidMount() {\n    this.updateMeasurements();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.state.controlled && nextProps.open !== undefined) {\n      this.setOpen(nextProps.open);\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      dirtyFlag\n    } = this.state;\n\n    if (dirtyFlag) {\n      this.updateMeasurements();\n      this.setState({\n        dirtyFlag: false\n      });\n    }\n  }\n\n  updateMeasurements() {\n    if (this.targetContainer) {\n      const targetRect = this.targetContainer.getBoundingClientRect();\n      this.setState({\n        targetRect\n      });\n    }\n  }\n\n  setOpen(open) {\n    const {\n      onChange\n    } = this.props;\n\n    if (typeof onChange === 'function') {\n      onChange({\n        open\n      });\n    }\n\n    this.setState({\n      open,\n      dirtyFlag: open === true\n    });\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      open: _0,\n      theme\n    } = _a,\n          props = __rest(_a, [\"open\", \"theme\"]);\n\n    const {\n      open\n    } = this.state;\n    const tooltipFlyoutTheme = Object.assign({\n      flyout: {\n        background: tuna,\n        textColor: white,\n        fontSize: remCalc('14px'),\n        maxWidth: '250px'\n      }\n    }, theme);\n    return React.createElement(TooltipContainer, {\n      ref: this.setTargetRef,\n      onFocus: this.onMouseOver,\n      onBlur: this.onMouseOut,\n      onMouseOver: this.onMouseOver,\n      onMouseOut: this.onMouseOut\n    }, React.createElement(Flyout, Object.assign({}, props, {\n      open: open,\n      theme: tooltipFlyoutTheme\n    })));\n  }\n\n}\nTooltip.inner = {\n  get TooltipContainer() {\n    return TooltipContainer;\n  },\n\n  get Flyout() {\n    return Flyout;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Tooltip/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { TooltipProps } from './Tooltip.types.part';\nimport { Flyout } from '../Flyout';\nimport { tuna, white } from '../../colors';\nimport { remCalc } from '../../utils/remCalc';\nexport { TooltipPosition, TooltipChangeEvent, TooltipProps } from './Tooltip.types.part';\nconst TooltipContainer = styled.div `\n  position: relative;\n  width: fit-content;\n  display: inline-block;\n`;\nexport interface TooltipState {\n    controlled: boolean;\n    targetRect: ClientRect;\n    dirtyFlag: boolean;\n    open: boolean;\n}\nexport class Tooltip extends React.Component<TooltipProps, TooltipState> {\n    private targetContainer: HTMLDivElement | null;\n    constructor(props: TooltipProps) {\n        super(props);\n        this.state = {\n            controlled: props.open !== undefined,\n            open: props.open || false,\n            targetRect: { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 },\n            dirtyFlag: false,\n        };\n    }\n    componentDidMount() {\n        this.updateMeasurements();\n    }\n    UNSAFE_componentWillReceiveProps(nextProps: TooltipProps) {\n        if (this.state.controlled && nextProps.open !== undefined) {\n            this.setOpen(nextProps.open);\n        }\n    }\n    componentDidUpdate() {\n        const { dirtyFlag } = this.state;\n        if (dirtyFlag) {\n            this.updateMeasurements();\n            this.setState({\n                dirtyFlag: false,\n            });\n        }\n    }\n    private updateMeasurements() {\n        if (this.targetContainer) {\n            const targetRect = this.targetContainer.getBoundingClientRect();\n            this.setState({\n                targetRect,\n            });\n        }\n    }\n    private setTargetRef = (el: HTMLDivElement | null) => {\n        this.targetContainer = el;\n    };\n    private setOpen(open: boolean) {\n        const { onChange } = this.props;\n        if (typeof onChange === 'function') {\n            onChange({ open });\n        }\n        this.setState({\n            open,\n            dirtyFlag: open === true,\n        });\n    }\n    private onMouseOver = () => {\n        if (!this.state.controlled) {\n            this.setOpen(true);\n        }\n    };\n    private onMouseOut = () => {\n        if (!this.state.controlled) {\n            this.setOpen(false);\n        }\n    };\n    render() {\n        const { open: _0, theme, ...props } = this.props;\n        const { open } = this.state;\n        const tooltipFlyoutTheme = {\n            flyout: { background: tuna, textColor: white, fontSize: remCalc('14px'), maxWidth: '250px' },\n            ...theme,\n        };\n        return (<TooltipContainer ref={this.setTargetRef} onFocus={this.onMouseOver} onBlur={this.onMouseOut} onMouseOver={this.onMouseOver} onMouseOut={this.onMouseOut}>\n        <Flyout {...props} open={open} theme={tooltipFlyoutTheme}/>\n      </TooltipContainer>);\n    }\n    static inner = {\n        get TooltipContainer() { return TooltipContainer as typeof TooltipContainer; },\n        get Flyout() { return Flyout as typeof Flyout; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}