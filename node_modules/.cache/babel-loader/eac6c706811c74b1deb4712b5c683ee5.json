{"ast":null,"code":"import * as React from 'react';\nimport { withResponsive } from './withResponsive';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\n/**\n * Provides `mode` prop (if it's not passed manually) to the component depending on\n * the container width. When mode switches, HOC calls `onModeChange` prop if it is\n * defined.\n * @param getMode The function to determine the mode from the given width.\n * @returns A constructor function to wrap a component with the `mode` prop determined\n * by the getMode function.\n */\n\nexport function withResponsiveMode(getMode) {\n  return Component => {\n    return withInner(withResponsive(class ModeProvider extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          controlled: props.mode !== undefined,\n          mode: props.mode || getMode(props.dimensions && props.dimensions.width)\n        };\n      }\n\n      static getDerivedStateFromProps(props, state) {\n        const change = props.onModeChange;\n\n        if (state.controlled) {\n          const mode = props.mode || getMode();\n\n          if (state.mode !== mode) {\n            if (typeof change === 'function') {\n              change({\n                mode\n              });\n            }\n\n            return {\n              mode\n            };\n          }\n        } else {\n          const {\n            dimensions\n          } = props;\n          const {\n            mode\n          } = state;\n          const nextMode = getMode(dimensions && dimensions.width);\n\n          if (mode !== nextMode) {\n            if (typeof change === 'function') {\n              change({\n                mode: nextMode\n              });\n            }\n\n            return {\n              mode: nextMode\n            };\n          }\n        }\n\n        return {};\n      }\n\n      componentDidMount() {\n        const {\n          mode\n        } = this.state;\n        const {\n          onModeChange\n        } = this.props;\n\n        if (mode && typeof onModeChange === 'function') {\n          onModeChange({\n            mode\n          });\n        }\n      }\n\n      render() {\n        const {\n          mode\n        } = this.state;\n        const props = Object.assign({}, this.props, {\n          mode\n        });\n        return React.createElement(Component, Object.assign({}, props));\n      }\n\n    }), {\n      Component\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/hoc/withResponsiveMode.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,cAAT,QAAyD,kBAAzD;AACA,SAAS,SAAT,QAA0B,uCAA1B;AAeA;;;;;;;;;AAQA,OAAM,SAAU,kBAAV,CAAqC,OAArC,EAAiE;AACnE,SAAkD,SAA3C,IAAqF;AACxF,WAAO,SAAS,CAAC,cAAc,CAAC,MAAM,YAAN,SAA2B,KAAK,CAAC,SAAjC,CAA6E;AACzG,MAAA,WAAA,CAAY,KAAZ,EAAyB;AACrB,cAAM,KAAN;AACA,aAAK,KAAL,GAAa;AACT,UAAA,UAAU,EAAE,KAAK,CAAC,IAAN,KAAe,SADlB;AAET,UAAA,IAAI,EAAE,KAAK,CAAC,IAAN,IAAc,OAAO,CAAC,KAAK,CAAC,UAAN,IAAoB,KAAK,CAAC,UAAN,CAAiB,KAAtC;AAFlB,SAAb;AAIH;;AACD,aAAO,wBAAP,CAAgC,KAAhC,EAA+C,KAA/C,EAA+E;AAC3E,cAAM,MAAM,GAAG,KAAK,CAAC,YAArB;;AACA,YAAI,KAAK,CAAC,UAAV,EAAsB;AAClB,gBAAM,IAAI,GAAG,KAAK,CAAC,IAAN,IAAc,OAAO,EAAlC;;AACA,cAAI,KAAK,CAAC,IAAN,KAAe,IAAnB,EAAyB;AACrB,gBAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,cAAA,MAAM,CAAC;AAAE,gBAAA;AAAF,eAAD,CAAN;AACH;;AACD,mBAAO;AACH,cAAA;AADG,aAAP;AAGH;AACJ,SAVD,MAWK;AACD,gBAAM;AAAE,YAAA;AAAF,cAAiB,KAAvB;AACA,gBAAM;AAAE,YAAA;AAAF,cAAW,KAAjB;AACA,gBAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,IAAI,UAAU,CAAC,KAA1B,CAAxB;;AACA,cAAI,IAAI,KAAK,QAAb,EAAuB;AACnB,gBAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,cAAA,MAAM,CAAC;AAAE,gBAAA,IAAI,EAAE;AAAR,eAAD,CAAN;AACH;;AACD,mBAAO;AACH,cAAA,IAAI,EAAE;AADH,aAAP;AAGH;AACJ;;AACD,eAAO,EAAP;AACH;;AACD,MAAA,iBAAiB,GAAA;AACb,cAAM;AAAE,UAAA;AAAF,YAAW,KAAK,KAAtB;AACA,cAAM;AAAE,UAAA;AAAF,YAAmB,KAAK,KAA9B;;AACA,YAAI,IAAI,IAAI,OAAO,YAAP,KAAwB,UAApC,EAAgD;AAC5C,UAAA,YAAY,CAAC;AAAE,YAAA;AAAF,WAAD,CAAZ;AACH;AACJ;;AACD,MAAA,MAAM,GAAA;AACF,cAAM;AAAE,UAAA;AAAF,YAAW,KAAK,KAAtB;AACA,cAAM,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJ,KAAK,KADD,EACM;AACb,UAAA;AADa,SADN,CAAX;AAIA,eAAO,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAV,CAAP;AACH;;AAlDwG,KAA9E,CAAf,EAmDZ;AAAE,MAAA;AAAF,KAnDY,CAAhB;AAoDH,GArDD;AAsDH","sourcesContent":["import * as React from 'react';\nimport { withResponsive, ResponsiveComponentProps } from './withResponsive';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\nexport interface GetModeType<TModes> {\n    (width?: number): TModes;\n}\nexport interface ModeChangedEvent<TModes> {\n    mode: TModes;\n}\nexport interface ModeProviderProps<TModes> extends ResponsiveComponentProps {\n    mode?: TModes;\n    onModeChange?(e: ModeChangedEvent<TModes>): void;\n}\nexport interface ModeProviderState<TModes> {\n    controlled: boolean;\n    mode: TModes;\n}\n/**\n * Provides `mode` prop (if it's not passed manually) to the component depending on\n * the container width. When mode switches, HOC calls `onModeChange` prop if it is\n * defined.\n * @param getMode The function to determine the mode from the given width.\n * @returns A constructor function to wrap a component with the `mode` prop determined\n * by the getMode function.\n */\nexport function withResponsiveMode<TModes>(getMode: GetModeType<TModes>) {\n    return <TProps extends ModeProviderProps<TModes>>(Component: React.ComponentType<TProps>) => {\n        return withInner(withResponsive(class ModeProvider extends React.Component<TProps, ModeProviderState<TModes>> {\n            constructor(props: TProps) {\n                super(props);\n                this.state = {\n                    controlled: props.mode !== undefined,\n                    mode: props.mode || getMode(props.dimensions && props.dimensions.width),\n                };\n            }\n            static getDerivedStateFromProps(props: TProps, state: ModeProviderState<TModes>) {\n                const change = props.onModeChange;\n                if (state.controlled) {\n                    const mode = props.mode || getMode();\n                    if (state.mode !== mode) {\n                        if (typeof change === 'function') {\n                            change({ mode });\n                        }\n                        return {\n                            mode,\n                        };\n                    }\n                }\n                else {\n                    const { dimensions } = props;\n                    const { mode } = state;\n                    const nextMode = getMode(dimensions && dimensions.width);\n                    if (mode !== nextMode) {\n                        if (typeof change === 'function') {\n                            change({ mode: nextMode });\n                        }\n                        return {\n                            mode: nextMode,\n                        };\n                    }\n                }\n                return {};\n            }\n            componentDidMount() {\n                const { mode } = this.state;\n                const { onModeChange } = this.props;\n                if (mode && typeof onModeChange === 'function') {\n                    onModeChange({ mode });\n                }\n            }\n            render() {\n                const { mode } = this.state;\n                const props = {\n                    ...this.props,\n                    mode,\n                };\n                return <Component {...props}/>;\n            }\n        }), { Component });\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}