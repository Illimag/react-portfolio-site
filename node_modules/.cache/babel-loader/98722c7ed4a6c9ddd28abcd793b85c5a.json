{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as styledComponents from 'styled-components';\nimport { light } from './../themes';\nvar styled = styledComponents.default,\n    css = styledComponents.css,\n    keyframes = styledComponents.keyframes,\n    createGlobalStyle = styledComponents.createGlobalStyle,\n    withTheme = styledComponents.withTheme,\n    ThemeProvider = styledComponents.ThemeProvider,\n    ThemeConsumer = styledComponents.ThemeConsumer,\n    ThemeContext = styledComponents.ThemeContext,\n    isStyledComponent = styledComponents.isStyledComponent,\n    ServerStyleSheet = styledComponents.ServerStyleSheet,\n    StyleSheetManager = styledComponents.StyleSheetManager;\n/*\n  Helper function which insures that theme is always available in the interpolation callback.\n*/\n\nexport var themed = function themed(interpolation) {\n  return function (props) {\n    var _a = props,\n        theme = _a.theme,\n        rest = __rest(_a, [\"theme\"]);\n\n    var hasNestedProps = function hasNestedProps(prop) {\n      return typeof prop === 'object' && !Array.isArray(prop) && Object.keys(prop).length > 0;\n    };\n\n    var mergedTheme = Object.keys(theme).reduce(function (acc, prop) {\n      return hasNestedProps(theme[prop]) ? acc[prop] = Object.assign({}, acc[prop], theme[prop]) : acc[prop] = theme[prop], acc;\n    }, Object.assign({}, light));\n    return interpolation(Object.assign({\n      theme: mergedTheme\n    }, rest));\n  };\n};\nexport { css, keyframes, createGlobalStyle, withTheme, ThemeProvider, ThemeConsumer, ThemeContext, isStyledComponent, ServerStyleSheet, StyleSheetManager };\nexport default styled;","map":{"version":3,"sources":["../../../src/utils/styled.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAEA,OAAO,KAAK,gBAAZ,MAAkC,mBAAlC;AAQA,SAAS,KAAT,QAAsB,aAAtB;IAIW,M,GAWP,gB,CAXF,O;IACA,G,GAUE,gB,CAVF,G;IACA,S,GASE,gB,CATF,S;IACA,iB,GAQE,gB,CARF,iB;IACA,S,GAOE,gB,CAPF,S;IACA,a,GAME,gB,CANF,a;IACA,a,GAKE,gB,CALF,a;IACA,Y,GAIE,gB,CAJF,Y;IACA,iB,GAGE,gB,CAHF,iB;IACA,gB,GAEE,gB,CAFF,gB;IACA,iB,GACE,gB,CADF,iB;AASF;;;;AAGA,OAAO,IAAM,MAAM,GAAG,SAAT,MAAS,CAAQ,aAAR;AAAA,SAA6E,UACjG,KADiG,EAE/F;AACI,QAAA,EAAA,GAAA,KAAA;AAAA,QAAE,KAAF,GAAO,EAAP,CAAE,KAAF;AAAA,QAAS,IAAT,GAAS,MAAA,CAAA,EAAA,EAAA,CAAA,OAAA,CAAA,CAAT;;AAEN,QAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,IAAD;AAAA,aACrB,OAAO,IAAP,KAAgB,QAAhB,IAA4B,CAAC,KAAK,CAAC,OAAN,CAAc,IAAd,CAA7B,IAAoD,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,MAAlB,GAA2B,CAD1D;AAAA,KAAvB;;AAGA,QAAM,WAAW,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,MAAnB,CAClB,UAAC,GAAD,EAAM,IAAN;AAAA,aACE,cAAc,CAAC,KAAK,CAAC,IAAD,CAAN,CAAd,GAA+B,GAAG,CAAC,IAAD,CAAH,GAAS,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,GAAG,CAAC,IAAD,CAAX,EAAsB,KAAK,CAAC,IAAD,CAA3B,CAAxC,GAAgF,GAAG,CAAC,IAAD,CAAH,GAAY,KAAK,CAAC,IAAD,CAAjG,EAA0G,GAD5G;AAAA,KADkB,EAGjB,MAAA,CAAA,MAAA,CAAA,EAAA,EACI,KADJ,CAHiB,CAApB;AAMA,WAAO,aAAa,CAAA,MAAA,CAAA,MAAA,CAAA;AAAG,MAAA,KAAK,EAAE;AAAV,KAAA,EAA0B,IAA1B,CAAA,CAApB;AACD,GAfqB;AAAA,CAAf;AAiBP,SACE,GADF,EAEE,SAFF,EAGE,iBAHF,EAIE,SAJF,EAKE,aALF,EAME,aANF,EAOE,YAPF,EAQE,iBARF,EASE,gBATF,EAUE,iBAVF;AAcA,eAAe,MAAf","sourcesContent":["/* tslint:disable:import-blacklist */\nimport * as React from 'react';\nimport * as styledComponents from 'styled-components';\nimport {\n  ThemedStyledComponentsModule,\n  ThemedCssFunction,\n  StyledFunction,\n  ThemedStyledProps,\n  InterpolationFunction,\n} from 'styled-components';\nimport { light } from './../themes';\nimport { PreciseTheme, PreciseFullTheme, Omit } from '../common';\n\nconst {\n  default: styled,\n  css,\n  keyframes,\n  createGlobalStyle,\n  withTheme,\n  ThemeProvider,\n  ThemeConsumer,\n  ThemeContext,\n  isStyledComponent,\n  ServerStyleSheet,\n  StyleSheetManager,\n} = styledComponents as ThemedStyledComponentsModule<PreciseTheme>;\n\nexport type WithOptionalTheme<P extends { theme?: T }, T> = Omit<P, 'theme'> & { theme?: T };\n\nexport type PreciseInterpolationFunc<Props, Theme> = InterpolationFunction<\n  ThemedStyledProps<WithOptionalTheme<Props, Theme>, Theme>\n>;\n\n/*\n  Helper function which insures that theme is always available in the interpolation callback.\n*/\nexport const themed = <Props>(interpolation: PreciseInterpolationFunc<Props, PreciseFullTheme>) => (\n  props: ThemedStyledProps<Props, PreciseTheme>,\n) => {\n  const { theme, ...rest } = props as ThemedStyledProps<any, PreciseTheme>;\n\n  const hasNestedProps = (prop: object) =>\n    typeof prop === 'object' && !Array.isArray(prop) && Object.keys(prop).length > 0;\n\n  const mergedTheme = Object.keys(theme).reduce(\n    (acc, prop) => (\n      hasNestedProps(theme[prop]) ? (acc[prop] = { ...acc[prop], ...theme[prop] }) : (acc[prop] = theme[prop]), acc\n    ),\n    { ...light },\n  );\n  return interpolation({ theme: mergedTheme, ...rest });\n};\n\nexport {\n  css,\n  keyframes,\n  createGlobalStyle,\n  withTheme,\n  ThemeProvider,\n  ThemeConsumer,\n  ThemeContext,\n  isStyledComponent,\n  ServerStyleSheet,\n  StyleSheetManager,\n  ThemedCssFunction,\n};\n\nexport default styled;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}