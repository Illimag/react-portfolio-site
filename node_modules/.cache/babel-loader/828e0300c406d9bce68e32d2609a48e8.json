{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { colorCycle } from '../../utils/colorCycle';\nimport { remCalc } from '../../utils/remCalc';\nconst avatarSize = {\n  'xx-small': '16px',\n  'x-small': '24px',\n  small: '32px',\n  medium: '40px',\n  large: '48px',\n  'x-large': '72px'\n};\nconst avatarFontSize = {\n  'xx-small': remCalc('9px'),\n  'x-small': remCalc('11px'),\n  small: remCalc('14px'),\n  medium: remCalc('14px'),\n  large: remCalc('17px'),\n  'x-large': remCalc('28px')\n};\nconst AvatarContainer = styled('div')`\n  position: relative;\n  overflow: hidden;\n  ${({\n  size\n}) => `\n    width: ${avatarSize[size]};\n    height: ${avatarSize[size]}\n  `};\n`;\nconst AvatarContent = styled('div')`\n  border: 0;\n  perspective: 1px;\n\n  color: ${themed(props => props.theme.text7)};\n  border-radius: 50%;\n  overflow: hidden;\n\n  ${({\n  size\n}) => `\n    width: ${avatarSize[size]};\n    height: ${avatarSize[size]};\n  `};\n`;\nconst AvatarInitials = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  text-align: center;\n  background-color: ${themed(props => props.color || colorCycle(props.theme.colorCycle, props.initials))};\n  ${({\n  size\n}) => `\n    height: ${avatarSize[size]};\n    width: ${avatarSize[size]};\n    font-size: ${avatarFontSize[size]};\n  `};\n`;\nconst AvatarImage = styled.img`\n  transform: translate(-50%, -50%);\n  width: 100%;\n  height: auto;\n  left: 50%;\n  opacity: 1;\n  position: relative;\n  top: 50%;\n  display: block;\n`;\nconst avatarBadgeSize = {\n  'xx-small': '6px',\n  'x-small': '8px',\n  small: '10px',\n  medium: '12px',\n  large: '16px',\n  'x-large': '20px'\n};\nconst avatarBadgeFontSize = {\n  'xx-small': '0',\n  'x-small': '0',\n  small: '0',\n  medium: '8px',\n  large: '10px',\n  'x-large': '10px'\n};\nconst AvatarBadge = styled('div')`\n  position: absolute;\n  overflow: hidden;\n  border-radius: 50%;\n  border: solid 2px ${themed(props => props.theme.ui1)};\n  color: ${themed(props => props.theme.text7)};\n  bottom: -2px;\n  right: -2px;\n\n  ${({\n  size\n}) => `\n    width: ${avatarBadgeSize[size]};\n    height: ${avatarBadgeSize[size]};\n    line-height: ${avatarBadgeSize[size]};\n    font-size: ${avatarBadgeFontSize[size]}\n  `};\n`;\nconst defaultSize = 'medium';\n/**\n * The avatar component renders an avatar sticker with an optional badge.\n *\n * We must provide either an `image` or an `initials` prop for the Avatar component to work correctly.\n */\n\nexport const Avatar = Object.assign(_a => {\n  var {\n    image,\n    description,\n    children,\n    size = defaultSize\n  } = _a,\n      props = __rest(_a, [\"image\", \"description\", \"children\", \"size\"]);\n\n  return React.createElement(AvatarContainer, Object.assign({}, props, {\n    title: description,\n    size: size\n  }), React.createElement(AvatarContent, {\n    size: size,\n    theme: props.theme\n  }, image ? React.createElement(AvatarImage, {\n    src: image,\n    alt: description\n  }) : React.createElement(AvatarInitials, {\n    size: size,\n    theme: props.theme,\n    color: props.color\n  }, (props.initials || '').substr(0, 2))), children && React.createElement(AvatarBadge, {\n    theme: props.theme,\n    size: size\n  }, children));\n}, {\n  inner: {\n    get AvatarContainer() {\n      return AvatarContainer;\n    },\n\n    get AvatarContent() {\n      return AvatarContent;\n    },\n\n    get AvatarImage() {\n      return AvatarImage;\n    },\n\n    get AvatarInitials() {\n      return AvatarInitials;\n    },\n\n    get AvatarBadge() {\n      return AvatarBadge;\n    }\n\n  }\n});\nAvatar.displayName = 'Avatar';","map":{"version":3,"sources":["../../../../src/components/Avatar/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { colorCycle } from '../../utils/colorCycle';\nimport { remCalc } from '../../utils/remCalc';\nexport type AvatarSize = 'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large';\nexport interface AvatarProps extends StandardProps {\n    /**\n     * The size of the avatar, where medium is the default size.\n     */\n    size?: AvatarSize;\n    /**\n     * The initials of the user - at most two letters are being shown.\n     */\n    initials?: string;\n    /**\n     * Option to override the automatic color pick if no image was provided.\n     */\n    color?: string;\n    /**\n     * The image URL to be used as Avatar icon.\n     */\n    image?: string;\n    /**\n     * The optional description to show for the Avatar.\n     */\n    description?: string;\n    /**\n     * The content of the optional badge.\n     */\n    children?: React.ReactNode;\n}\nexport interface SizeProp {\n    size: AvatarSize;\n}\ninterface AvatarInitialsBaseProps {\n    color?: string;\n    initials?: string;\n    theme?: any;\n}\nconst avatarSize = {\n    'xx-small': '16px',\n    'x-small': '24px',\n    small: '32px',\n    medium: '40px',\n    large: '48px',\n    'x-large': '72px',\n};\nconst avatarFontSize = {\n    'xx-small': remCalc('9px'),\n    'x-small': remCalc('11px'),\n    small: remCalc('14px'),\n    medium: remCalc('14px'),\n    large: remCalc('17px'),\n    'x-large': remCalc('28px'),\n};\nconst AvatarContainer = styled('div')<SizeProp> `\n  position: relative;\n  overflow: hidden;\n  ${({ size }) => `\n    width: ${avatarSize[size]};\n    height: ${avatarSize[size]}\n  `};\n`;\nconst AvatarContent = styled('div')<SizeProp> `\n  border: 0;\n  perspective: 1px;\n\n  color: ${themed(props => props.theme.text7)};\n  border-radius: 50%;\n  overflow: hidden;\n\n  ${({ size }) => `\n    width: ${avatarSize[size]};\n    height: ${avatarSize[size]};\n  `};\n`;\nconst AvatarInitials = styled('div')<SizeProp & AvatarInitialsBaseProps> `\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  text-align: center;\n  background-color: ${themed(props => props.color || colorCycle(props.theme.colorCycle, props.initials))};\n  ${({ size }) => `\n    height: ${avatarSize[size]};\n    width: ${avatarSize[size]};\n    font-size: ${avatarFontSize[size]};\n  `};\n`;\nconst AvatarImage = styled.img `\n  transform: translate(-50%, -50%);\n  width: 100%;\n  height: auto;\n  left: 50%;\n  opacity: 1;\n  position: relative;\n  top: 50%;\n  display: block;\n`;\nconst avatarBadgeSize = {\n    'xx-small': '6px',\n    'x-small': '8px',\n    small: '10px',\n    medium: '12px',\n    large: '16px',\n    'x-large': '20px',\n};\nconst avatarBadgeFontSize = {\n    'xx-small': '0',\n    'x-small': '0',\n    small: '0',\n    medium: '8px',\n    large: '10px',\n    'x-large': '10px',\n};\nconst AvatarBadge = styled('div')<SizeProp> `\n  position: absolute;\n  overflow: hidden;\n  border-radius: 50%;\n  border: solid 2px ${themed(props => props.theme.ui1)};\n  color: ${themed(props => props.theme.text7)};\n  bottom: -2px;\n  right: -2px;\n\n  ${({ size }) => `\n    width: ${avatarBadgeSize[size]};\n    height: ${avatarBadgeSize[size]};\n    line-height: ${avatarBadgeSize[size]};\n    font-size: ${avatarBadgeFontSize[size]}\n  `};\n`;\nconst defaultSize: AvatarSize = 'medium';\n/**\n * The avatar component renders an avatar sticker with an optional badge.\n *\n * We must provide either an `image` or an `initials` prop for the Avatar component to work correctly.\n */\nexport const Avatar = Object.assign(((({ image, description, children, size = defaultSize, ...props }) => (<AvatarContainer {...props} title={description} size={size}>\n    <AvatarContent size={size} theme={props.theme}>\n      {image ? (<AvatarImage src={image} alt={description}/>) : (<AvatarInitials size={size} theme={props.theme} color={props.color}>\n          {(props.initials || '').substr(0, 2)}\n        </AvatarInitials>)}\n    </AvatarContent>\n    {children && (<AvatarBadge theme={props.theme} size={size}>\n        {children}\n      </AvatarBadge>)}\n  </AvatarContainer>)) as React.SFC<AvatarProps>), { inner: {\n        get AvatarContainer() { return AvatarContainer as typeof AvatarContainer; },\n        get AvatarContent() { return AvatarContent as typeof AvatarContent; },\n        get AvatarImage() { return AvatarImage as typeof AvatarImage; },\n        get AvatarInitials() { return AvatarInitials as typeof AvatarInitials; },\n        get AvatarBadge() { return AvatarBadge as typeof AvatarBadge; }\n    } });\nAvatar.displayName = 'Avatar';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}