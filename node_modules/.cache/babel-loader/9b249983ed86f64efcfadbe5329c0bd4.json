{"ast":null,"code":"import * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { Anchor } from '../Anchor';\nimport { getFontStyle } from '../../textStyles';\nconst PseudoLinkStyle = css`\n  &:hover {\n    color: ${themed(props => props.theme.ui6)};\n  }\n  &:focus {\n    color: ${themed(props => props.theme.ui7)};\n    outline: none;\n  }\n`;\nconst StyledActionLink = styled(Anchor)`\n  ${getFontStyle({\n  weight: 'medium'\n})}\n  text-decoration: none;\n  color: ${themed(props => props.disabled ? props.theme.text3 : props.theme.ui0)};\n  display: ${props => props.block ? 'block' : 'inline-block'};\n  cursor: ${props => props.disabled ? 'default' : 'pointer'};\n  ${props => !props.disabled ? PseudoLinkStyle : ''};\n`;\n/**\n * The action link component gives a simple text link to be used in call for action scenarios.\n */\n\nexport const ActionLink = Object.assign(props => React.createElement(StyledActionLink, Object.assign({}, props)), {\n  inner: {\n    get StyledActionLink() {\n      return StyledActionLink;\n    }\n\n  }\n});\nActionLink.displayName = 'ActionLink';","map":{"version":3,"sources":["../../../../src/components/ActionLink/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,MAAjB,EAAyB,GAAzB,QAAoC,oBAApC;AACA,SAAS,MAAT,QAAoC,WAApC;AACA,SAAS,YAAT,QAA6B,kBAA7B;AAeA,MAAM,eAAe,GAAG,GAAI;;aAEf,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,KAAN,CAAY,GAAtB,CAA0B;;;aAGhC,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,KAAN,CAAY,GAAtB,CAA0B;;;CAL7C;AASA,MAAM,gBAAgB,GAAG,MAAM,CAAC,MAAD,CAA2B;IACtD,YAAY,CAAC;AAAE,EAAA,MAAM,EAAE;AAAV,CAAD,CAAsB;;WAE3B,MAAM,CAAC,KAAK,IAAK,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,KAAN,CAAY,KAA7B,GAAqC,KAAK,CAAC,KAAN,CAAY,GAA5D,CAAiE;aACrE,KAAK,IAAK,KAAK,CAAC,KAAN,GAAc,OAAd,GAAwB,cAAe;YAClD,KAAK,IAAK,KAAK,CAAC,QAAN,GAAiB,SAAjB,GAA6B,SAAU;IACzD,KAAK,IAAK,CAAC,KAAK,CAAC,QAAP,GAAkB,eAAlB,GAAoC,EAAG;CANrD;AAQA;;;;AAGA,OAAO,MAAM,UAAU,GAAG,MAAM,CAAC,MAAP,CAAgB,KAAK,IAAI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAjB,CAAzB,EAAyF;AAAE,EAAA,KAAK,EAAE;AACpH,QAAI,gBAAJ,GAAoB;AAAK,aAAO,gBAAP;AAAqD;;AADsC;AAAT,CAAzF,CAAnB;AAGP,UAAU,CAAC,WAAX,GAAyB,YAAzB","sourcesContent":["import * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { Anchor, AnchorProps } from '../Anchor';\nimport { getFontStyle } from '../../textStyles';\nexport interface ActionLinkProps extends AnchorProps {\n    /**\n     * Sets the action link as active.\n     */\n    active?: boolean;\n    /**\n     * Sets the action link as a block.\n     */\n    block?: boolean;\n}\nexport interface StyledActionLink {\n    disabled?: boolean;\n    block?: boolean;\n}\nconst PseudoLinkStyle = css `\n  &:hover {\n    color: ${themed(props => props.theme.ui6)};\n  }\n  &:focus {\n    color: ${themed(props => props.theme.ui7)};\n    outline: none;\n  }\n`;\nconst StyledActionLink = styled(Anchor)<StyledActionLink> `\n  ${getFontStyle({ weight: 'medium' })}\n  text-decoration: none;\n  color: ${themed(props => (props.disabled ? props.theme.text3 : props.theme.ui0))};\n  display: ${props => (props.block ? 'block' : 'inline-block')};\n  cursor: ${props => (props.disabled ? 'default' : 'pointer')};\n  ${props => (!props.disabled ? PseudoLinkStyle : '')};\n`;\n/**\n * The action link component gives a simple text link to be used in call for action scenarios.\n */\nexport const ActionLink = Object.assign(((props => <StyledActionLink {...props}/>) as React.SFC<ActionLinkProps>), { inner: {\n        get StyledActionLink() { return StyledActionLink as typeof StyledActionLink; }\n    } });\nActionLink.displayName = 'ActionLink';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}