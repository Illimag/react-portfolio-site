{"ast":null,"code":"function clamp(n) {\n  return n > 1 ? 1 : n < 0 ? 0 : n;\n}\n\nexport function trackTouch(e, changed, context = window) {\n  if (e.touches.length === 1) {\n    const f = e.currentTarget.getBoundingClientRect();\n\n    const updatePosition = (e, active, moved) => {\n      const t = e.touches[0] || e.changedTouches[0];\n      const x = t.clientX - f.left;\n      const y = t.clientY - f.top;\n      const h = clamp(x / f.width);\n      const v = clamp(y / f.height);\n      changed(h, v, active, f, moved);\n    };\n\n    const updateHandler = e => updatePosition(e, true, true);\n\n    const removeHandler = e => {\n      context.removeEventListener('touchmove', updateHandler, true);\n      context.removeEventListener('touchend', removeHandler, true);\n      updatePosition(e, false, false);\n    };\n\n    context.addEventListener('touchmove', updateHandler, true);\n    context.addEventListener('touchend', removeHandler, true);\n    updatePosition(e, true, false);\n  }\n}\nexport function trackMouse(e, changed, context = window) {\n  if (e.button === 0 && e.buttons === 1) {\n    const f = e.currentTarget.getBoundingClientRect();\n\n    const updatePosition = (e, active, moved) => {\n      const x = e.clientX - f.left;\n      const y = e.clientY - f.top;\n      const h = clamp(x / f.width);\n      const v = clamp(y / f.height);\n\n      if (changed(h, v, active, f, moved)) {\n        e.preventDefault();\n      }\n    };\n\n    const updateHandler = e => updatePosition(e, true, true);\n\n    const removeHandler = e => {\n      context.removeEventListener('mousemove', updateHandler, true);\n      context.removeEventListener('mouseup', removeHandler, true);\n      updatePosition(e, false, false);\n    };\n\n    context.addEventListener('mousemove', updateHandler, true);\n    context.addEventListener('mouseup', removeHandler, true);\n    updatePosition(e, true, false);\n  }\n}","map":{"version":3,"sources":["../../../src/utils/interactivity.ts"],"names":[],"mappings":"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","sourcesContent":["function clamp(n: number) {\n  return n > 1 ? 1 : n < 0 ? 0 : n;\n}\n\nexport interface UpdatePositionHandler {\n  (h: number, v: number, active: boolean, rect: ClientRect, moved: boolean): Boolean;\n}\n\ninterface SimpleTouchEvent {\n  touches: TouchList;\n  changedTouches: TouchList;\n}\n\ninterface SimpleMouseEvent {\n  clientX: number;\n  clientY: number;\n  preventDefault(): void;\n}\n\nexport function trackTouch<T extends HTMLElement>(\n  e: React.TouchEvent<T>,\n  changed: UpdatePositionHandler,\n  context = window,\n) {\n  if (e.touches.length === 1) {\n    const f = e.currentTarget.getBoundingClientRect();\n    const updatePosition = (e: SimpleTouchEvent | React.TouchEvent<T>, active: boolean, moved: boolean) => {\n      const t = e.touches[0] || e.changedTouches[0];\n      const x = t.clientX - f.left;\n      const y = t.clientY - f.top;\n      const h = clamp(x / f.width);\n      const v = clamp(y / f.height);\n      changed(h, v, active, f, moved);\n    };\n    const updateHandler = (e: TouchEvent) => updatePosition(e, true, true);\n    const removeHandler = (e: TouchEvent) => {\n      context.removeEventListener('touchmove', updateHandler, true);\n      context.removeEventListener('touchend', removeHandler, true);\n      updatePosition(e, false, false);\n    };\n    context.addEventListener('touchmove', updateHandler, true);\n    context.addEventListener('touchend', removeHandler, true);\n    updatePosition(e, true, false);\n  }\n}\n\nexport function trackMouse<T extends HTMLElement>(\n  e: React.MouseEvent<T>,\n  changed: UpdatePositionHandler,\n  context = window,\n) {\n  if (e.button === 0 && e.buttons === 1) {\n    const f = e.currentTarget.getBoundingClientRect();\n    const updatePosition = (e: SimpleMouseEvent, active: boolean, moved: boolean) => {\n      const x = e.clientX - f.left;\n      const y = e.clientY - f.top;\n      const h = clamp(x / f.width);\n      const v = clamp(y / f.height);\n\n      if (changed(h, v, active, f, moved)) {\n        e.preventDefault();\n      }\n    };\n    const updateHandler = (e: MouseEvent) => updatePosition(e, true, true);\n    const removeHandler = (e: MouseEvent) => {\n      context.removeEventListener('mousemove', updateHandler, true);\n      context.removeEventListener('mouseup', removeHandler, true);\n      updatePosition(e, false, false);\n    };\n    context.addEventListener('mousemove', updateHandler, true);\n    context.addEventListener('mouseup', removeHandler, true);\n    updatePosition(e, true, false);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}