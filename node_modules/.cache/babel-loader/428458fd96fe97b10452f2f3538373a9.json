{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { StackPanel } from '../StackPanel';\nimport { purpleRed } from '../../colors';\nimport { InputIcon } from '../InputIcon';\nimport { withFormContext } from '../../hoc/withFormContext';\nimport { showInputInfo } from '../../utils/input';\nimport { distance } from '../../distance';\nimport { StyledInputRow, StyledInput, StyledInputBox, getTextFieldBorderType } from '../../quarks';\nimport { getFontSize } from '../../textStyles';\nconst TextFieldContainer = styled.div`\n  position: relative;\n`;\nconst TextFieldWrapper = styled(StackPanel)`\n  display: flex;\n`;\nconst TextFieldArea = styled.textarea`\n  ::-ms-clear { display: none; }\n\n  white-space: pre-wrap;\n  word-break: break-word;\n\n  ${getFontSize('medium')}\n  color: ${themed(({\n  theme,\n  disabled\n}) => disabled ? theme.text3 : theme.text2)};\n  border-radius: 0;\n  font-family: inherit;\n  padding: ${props => props.labelShown ? `${distance.large} ${distance.medium} ${distance.small}` : distance.medium};\n  box-sizing: border-box;\n  box-shadow: none;\n  resize: ${props => props.resizable || 'none'};\n  margin: 0;\n  width: 100%;\n  cursor: ${props => props.disabled ? 'not-allowed' : 'auto'};\n  border: none;\n  border-bottom: 1px solid\n    ${themed(({\n  theme,\n  border\n}) => border === 3\n/* error */\n? purpleRed : theme.ui4)};\n  background: ${themed(({\n  theme\n}) => theme.ui2)};\n\n  &::placeholder {\n    color: ${themed(({\n  theme,\n  disabled\n}) => disabled ? theme.text3 : theme.text2)};\n    opacity: ${props => props.labelShown ? '0' : '1'};\n    transition: inherit;\n  }\n\n  &:focus {\n    outline: none;\n\n    &::placeholder {\n      opacity: 1;\n    }\n  }\n`;\nconst TextFieldElement = styled.div`\n  ${getFontSize('medium')}\n\n  display: flex;\n  align-items: center;\n  padding: ${distance.medium};\n  color: ${themed(({\n  theme\n}) => theme.text2)};\n  background: ${themed(({\n  theme\n}) => theme.ui3)};\n`;\n\nclass TextFieldInt extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeValue = e => {\n      this.updateValue(e.target.value, e);\n    };\n\n    this.changeHeight = () => {\n      const {\n        resizable\n      } = this.props;\n      const element = this._element;\n\n      if (resizable === 'auto' && element) {\n        element.style.height = '1px';\n        element.style.height = `${element.scrollHeight}px`;\n      }\n    };\n\n    this.setTextFieldNode = node => {\n      this._element = node;\n      const {\n        inputRef\n      } = this.props;\n\n      if (typeof inputRef === 'function') {\n        inputRef(node);\n      }\n    };\n\n    this.setFocus = () => {\n      const {\n        onFocus\n      } = this.props;\n      this.setState({\n        focused: true\n      }, onFocus);\n    };\n\n    this.unsetFocus = () => {\n      const {\n        onBlur\n      } = this.props;\n      this.setState({\n        focused: false\n      }, onBlur);\n    };\n\n    this.handleReset = () => {\n      const {\n        onClear\n      } = this.props;\n      this.updateValue('');\n\n      if (typeof onClear === 'function') {\n        onClear();\n      }\n    };\n\n    this.state = {\n      focused: false,\n      reveal: false,\n      controlled: props.value !== undefined,\n      value: props.value || props.defaultValue || '',\n      error: props.error\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps({\n    value = '',\n    error\n  }) {\n    if (this.state.controlled) {\n      this.setState({\n        value\n      });\n    }\n\n    this.setState({\n      error\n    });\n  }\n\n  componentDidMount() {\n    this.changeHeight();\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.subscribe(this);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.unsubscribe(this);\n    }\n  }\n\n  updateValue(value, e) {\n    const {\n      onChange,\n      name = '',\n      form\n    } = this.props;\n\n    if (!this.state.controlled) {\n      if (form) {\n        form.change({\n          name,\n          value\n        });\n      } else {\n        this.setState({\n          value\n        });\n      }\n    }\n\n    if (typeof onChange === 'function') {\n      onChange({\n        value,\n        originalEvent: e\n      });\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      theme,\n      borderless,\n      prefix,\n      suffix,\n      multiline,\n      resizable = false,\n      disabled,\n      placeholder,\n      info,\n      label,\n      clearable,\n      onClear,\n      icon,\n      onChange: _0,\n      defaultValue: _1,\n      value: _2,\n      form: _3,\n      onFocus: _4,\n      onBlur: _5,\n      inputRef: _6,\n      onInput: _7\n    } = _a,\n          rest = __rest(_a, [\"theme\", \"borderless\", \"prefix\", \"suffix\", \"multiline\", \"resizable\", \"disabled\", \"placeholder\", \"info\", \"label\", \"clearable\", \"onClear\", \"icon\", \"onChange\", \"defaultValue\", \"value\", \"form\", \"onFocus\", \"onBlur\", \"inputRef\", \"onInput\"]);\n\n    const {\n      focused,\n      value,\n      error\n    } = this.state;\n    const rows = typeof multiline === 'number' ? multiline : undefined;\n    const border = getTextFieldBorderType(borderless, !!error, focused);\n    const hasValue = !!value;\n    const input = rows !== undefined || multiline ? React.createElement(TextFieldArea, Object.assign({\n      ref: this.setTextFieldNode,\n      onInput: this.changeHeight,\n      border: border,\n      rows: rows,\n      resizable: typeof resizable === 'string' ? resizable : resizable ? 'auto' : undefined,\n      disabled: disabled,\n      labelShown: label !== undefined,\n      placeholder: placeholder,\n      onFocus: this.setFocus,\n      onBlur: this.unsetFocus,\n      value: value,\n      onChange: this.changeValue\n    }, rest)) : React.createElement(StyledInput, Object.assign({\n      ref: el => this.setTextFieldNode(el),\n      theme: theme,\n      disabled: disabled,\n      labelShown: label !== undefined,\n      placeholder: placeholder,\n      onFocus: this.setFocus,\n      onBlur: this.unsetFocus,\n      value: value,\n      onChange: this.changeValue\n    }, rest));\n    const textFieldWrapper = React.createElement(StyledInputRow, {\n      error: !!error,\n      focused: focused,\n      hasValue: hasValue,\n      label: label,\n      placeholder: placeholder,\n      multiline: rows !== undefined || multiline !== undefined\n    }, input);\n    return React.createElement(TextFieldContainer, null, rows !== undefined || multiline ? textFieldWrapper : React.createElement(TextFieldWrapper, null, prefix && React.createElement(TextFieldElement, null, prefix), React.createElement(StyledInputBox, {\n      border: border,\n      disabled: disabled,\n      focused: focused,\n      hasValue: hasValue\n    }, textFieldWrapper, React.createElement(InputIcon, {\n      disabled: disabled,\n      defaultIcon: icon,\n      theme: theme,\n      error: error,\n      hasValue: hasValue,\n      clearable: clearable,\n      onClear: this.handleReset,\n      onClick: () => this._element && this._element.focus()\n    })), suffix && React.createElement(TextFieldElement, null, suffix)), showInputInfo(error, info));\n  }\n\n}\n\nTextFieldInt.inner = {\n  get TextFieldArea() {\n    return TextFieldArea;\n  },\n\n  get StyledInput() {\n    return StyledInput;\n  },\n\n  get StyledInputRow() {\n    return StyledInputRow;\n  },\n\n  get TextFieldContainer() {\n    return TextFieldContainer;\n  },\n\n  get TextFieldWrapper() {\n    return TextFieldWrapper;\n  },\n\n  get TextFieldElement() {\n    return TextFieldElement;\n  },\n\n  get StyledInputBox() {\n    return StyledInputBox;\n  },\n\n  get InputIcon() {\n    return InputIcon;\n  }\n\n};\n/**\n * A text field for custom user input.\n */\n\nexport const TextField = withFormContext(TextFieldInt);\nTextField.displayName = 'TextField';","map":{"version":3,"sources":["../../../../src/components/TextField/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { StackPanel } from '../StackPanel';\nimport { purpleRed } from '../../colors';\nimport { InputIcon } from '../InputIcon';\nimport { InputChangeEvent, TextInputProps } from '../../common';\nimport { FormContextProps, withFormContext } from '../../hoc/withFormContext';\nimport { showInputInfo } from '../../utils/input';\nimport { distance } from '../../distance';\nimport { StyledInputRow, StyledInput, TextFieldBorderType, StyledInputBox, getTextFieldBorderType } from '../../quarks';\nimport { getFontSize } from '../../textStyles';\nexport type TextFieldChangeEvent = InputChangeEvent<string>;\ntype TextFieldInputNodeType = HTMLTextAreaElement | HTMLInputElement;\nexport interface TextFieldProps extends TextInputProps {\n    /**\n     * Allows multi-line input from the user. Either a boolean\n     * or a number specifying the amount of rows to show.\n     * @default false\n     */\n    multiline?: boolean | number;\n    /**\n     * Allows resizing the text field if being used as a multi-line input.\n     * @default false\n     */\n    resizable?: boolean | 'auto' | 'vertical' | 'horizontal';\n    /**\n     * Shows a clearing icon which resets the input to an empty string.\n     * @default false\n     */\n    clearable?: boolean;\n    /**\n     * Event emitted when the clear button was pressed. Will always be fired after\n     * the onChange event, i.e., after the value was set / proposed.\n     */\n    onClear?(): void;\n    /**\n     * Gets the reference to the underlying input or textarea element.\n     * @ignore\n     */\n    inputRef?(instance: HTMLElement | null): void;\n    /**\n     * @ignore\n     */\n    children?: void;\n}\nexport interface TextFieldState {\n    controlled: boolean;\n    focused: boolean;\n    reveal: boolean;\n    value: string;\n    error?: React.ReactChild;\n}\ninterface TextFieldAreaProps {\n    border: TextFieldBorderType;\n    disabled?: boolean;\n    resizable?: string;\n    labelShown: boolean;\n}\nconst TextFieldContainer = styled.div `\n  position: relative;\n`;\nconst TextFieldWrapper = styled(StackPanel) `\n  display: flex;\n`;\nconst TextFieldArea = styled.textarea<TextFieldAreaProps> `\n  ::-ms-clear { display: none; }\n\n  white-space: pre-wrap;\n  word-break: break-word;\n\n  ${getFontSize('medium')}\n  color: ${themed(({ theme, disabled }) => (disabled ? theme.text3 : theme.text2))};\n  border-radius: 0;\n  font-family: inherit;\n  padding: ${props => (props.labelShown ? `${distance.large} ${distance.medium} ${distance.small}` : distance.medium)};\n  box-sizing: border-box;\n  box-shadow: none;\n  resize: ${props => props.resizable || 'none'};\n  margin: 0;\n  width: 100%;\n  cursor: ${props => (props.disabled ? 'not-allowed' : 'auto')};\n  border: none;\n  border-bottom: 1px solid\n    ${themed(({ theme, border }) => (border === TextFieldBorderType.error ? purpleRed : theme.ui4))};\n  background: ${themed(({ theme }) => theme.ui2)};\n\n  &::placeholder {\n    color: ${themed(({ theme, disabled }) => (disabled ? theme.text3 : theme.text2))};\n    opacity: ${props => (props.labelShown ? '0' : '1')};\n    transition: inherit;\n  }\n\n  &:focus {\n    outline: none;\n\n    &::placeholder {\n      opacity: 1;\n    }\n  }\n`;\nconst TextFieldElement = styled.div `\n  ${getFontSize('medium')}\n\n  display: flex;\n  align-items: center;\n  padding: ${distance.medium};\n  color: ${themed(({ theme }) => theme.text2)};\n  background: ${themed(({ theme }) => theme.ui3)};\n`;\nclass TextFieldInt extends React.Component<TextFieldProps & FormContextProps, TextFieldState> {\n    private _element: TextFieldInputNodeType | null;\n    constructor(props: TextFieldProps) {\n        super(props);\n        this.state = {\n            focused: false,\n            reveal: false,\n            controlled: props.value !== undefined,\n            value: props.value || props.defaultValue || '',\n            error: props.error,\n        };\n    }\n    UNSAFE_componentWillReceiveProps({ value = '', error }: TextFieldProps) {\n        if (this.state.controlled) {\n            this.setState({ value });\n        }\n        this.setState({ error });\n    }\n    componentDidMount() {\n        this.changeHeight();\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    private changeValue = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        this.updateValue(e.target.value, e);\n    };\n    private updateValue(value: string, e?: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n        const { onChange, name = '', form } = this.props;\n        if (!this.state.controlled) {\n            if (form) {\n                form.change({\n                    name,\n                    value,\n                });\n            }\n            else {\n                this.setState({\n                    value,\n                });\n            }\n        }\n        if (typeof onChange === 'function') {\n            onChange({\n                value,\n                originalEvent: e,\n            });\n        }\n    }\n    private changeHeight = () => {\n        const { resizable } = this.props;\n        const element = this._element;\n        if (resizable === 'auto' && element) {\n            element.style.height = '1px';\n            element.style.height = `${element.scrollHeight}px`;\n        }\n    };\n    private setTextFieldNode = (node: TextFieldInputNodeType | null) => {\n        this._element = node;\n        const { inputRef } = this.props;\n        if (typeof inputRef === 'function') {\n            inputRef(node);\n        }\n    };\n    private setFocus = () => {\n        const { onFocus } = this.props;\n        this.setState({\n            focused: true,\n        }, onFocus);\n    };\n    private unsetFocus = () => {\n        const { onBlur } = this.props;\n        this.setState({\n            focused: false,\n        }, onBlur);\n    };\n    private handleReset = () => {\n        const { onClear } = this.props;\n        this.updateValue('');\n        if (typeof onClear === 'function') {\n            onClear();\n        }\n    };\n    render() {\n        const { theme, borderless, prefix, suffix, multiline, resizable = false, disabled, placeholder, info, label, clearable, onClear, icon, onChange: _0, defaultValue: _1, value: _2, form: _3, onFocus: _4, onBlur: _5, inputRef: _6, onInput: _7, ...rest } = this.props;\n        const { focused, value, error } = this.state;\n        const rows = typeof multiline === 'number' ? multiline : undefined;\n        const border = getTextFieldBorderType(borderless, !!error, focused);\n        const hasValue = !!value;\n        const input = rows !== undefined || multiline ? (<TextFieldArea ref={this.setTextFieldNode} onInput={this.changeHeight} border={border} rows={rows} resizable={typeof resizable === 'string' ? resizable : resizable ? 'auto' : undefined} disabled={disabled} labelShown={label !== undefined} placeholder={placeholder} onFocus={this.setFocus} onBlur={this.unsetFocus} value={value} onChange={this.changeValue} {...rest}/>) : (<StyledInput ref={el => this.setTextFieldNode(el as TextFieldInputNodeType)} theme={theme} disabled={disabled} labelShown={label !== undefined} placeholder={placeholder} onFocus={this.setFocus} onBlur={this.unsetFocus} value={value} onChange={this.changeValue} {...rest}/>);\n        const textFieldWrapper = (<StyledInputRow error={!!error} focused={focused} hasValue={hasValue} label={label} placeholder={placeholder} multiline={rows !== undefined || multiline !== undefined}>\n        {input}\n      </StyledInputRow>);\n        return (<TextFieldContainer>\n        {rows !== undefined || multiline ? (textFieldWrapper) : (<TextFieldWrapper>\n            {prefix && <TextFieldElement>{prefix}</TextFieldElement>}\n            <StyledInputBox border={border} disabled={disabled} focused={focused} hasValue={hasValue}>\n              {textFieldWrapper}\n              <InputIcon disabled={disabled} defaultIcon={icon} theme={theme} error={error} hasValue={hasValue} clearable={clearable} onClear={this.handleReset} onClick={() => this._element && this._element.focus()}/>\n            </StyledInputBox>\n            {suffix && <TextFieldElement>{suffix}</TextFieldElement>}\n          </TextFieldWrapper>)}\n        {showInputInfo(error, info)}\n      </TextFieldContainer>);\n    }\n    static inner = {\n        get TextFieldArea() { return TextFieldArea as typeof TextFieldArea; },\n        get StyledInput() { return StyledInput as typeof StyledInput; },\n        get StyledInputRow() { return StyledInputRow as typeof StyledInputRow; },\n        get TextFieldContainer() { return TextFieldContainer as typeof TextFieldContainer; },\n        get TextFieldWrapper() { return TextFieldWrapper as typeof TextFieldWrapper; },\n        get TextFieldElement() { return TextFieldElement as typeof TextFieldElement; },\n        get StyledInputBox() { return StyledInputBox as typeof StyledInputBox; },\n        get InputIcon() { return InputIcon as typeof InputIcon; }\n    };\n}\n/**\n * A text field for custom user input.\n */\nexport const TextField = withFormContext(TextFieldInt);\nTextField.displayName = 'TextField';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}