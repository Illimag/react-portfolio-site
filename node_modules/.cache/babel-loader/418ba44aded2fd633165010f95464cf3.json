{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as icons from '../Icon/icons';\nimport styled, { keyframes, css } from '../../utils/styled';\nimport { withFormContext } from '../../hoc/withFormContext';\nimport { ocean } from '../../colors';\nimport { distance } from '../../distance';\nconst RatingContainer = styled.div`\n  display: inline-block;\n`;\nconst SetAnimation = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  25% {\n    transform: scale(1.5);\n  }\n  50% {\n    transform: scale(0.9);\n  }\n  75% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n`;\nconst RatingElement = styled.span`\n  display: inline-block;\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n\n  & + & {\n    padding-left: ${props => props.size === 'medium' ? distance.small : distance.xsmall};\n  }\n`;\n\nfunction getColor(theme, disabled, i, value, hover) {\n  if (!disabled) {\n    if (hover !== -1) {\n      if (i < hover) {\n        return theme.ui0;\n      } else if (i === hover) {\n        return ocean;\n      }\n    } else if (i < value) {\n      return theme.ui5;\n    }\n\n    return theme.ui4;\n  } else if (i < value) {\n    return theme.ui4;\n  }\n\n  return theme.ui3;\n}\n\nfunction getAnimation(i, value) {\n  if (i + 1 === value) {\n    return css`\n      ${SetAnimation} 0.5s ease-in-out\n    `;\n  }\n\n  return 'none';\n}\n\nconst RatingIconInt = _a => {\n  var {\n    disabled,\n    index,\n    value,\n    hover,\n    size\n  } = _a,\n      props = __rest(_a, [\"disabled\", \"index\", \"value\", \"hover\", \"size\"]);\n\n  return React.createElement(icons.Star, Object.assign({}, props));\n};\n\nconst RatingIcon = styled(RatingIconInt)(({\n  theme,\n  disabled,\n  index,\n  value,\n  hover,\n  size\n}) => css`\n    fill: ${getColor(theme, disabled, index, value, hover)};\n    animation: ${getAnimation(index, value)};\n    width: ${size};\n    height: ${size};\n  `);\n\nclass RatingInt extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.hoverVoid = () => {\n      this.setState({\n        hover: -1\n      });\n    };\n\n    const {\n      value,\n      defaultValue,\n      levels = 5\n    } = props;\n    const changers = [];\n    const hovers = [];\n\n    for (let i = 0; i < levels; i++) {\n      changers.push(() => this.updateValue(i + 1));\n      hovers.push(() => this.hoverValue(i));\n    }\n\n    this.state = {\n      controlled: value !== undefined,\n      value: value || defaultValue || 0,\n      error: props.error,\n      hover: -1,\n      changers,\n      hovers\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.state.controlled) {\n      this.setState({\n        value: nextProps.value || 0,\n        error: nextProps.error\n      });\n    }\n  }\n\n  componentDidMount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.subscribe(this);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.unsubscribe(this);\n    }\n  }\n\n  updateValue(value) {\n    const {\n      onChange,\n      name = '',\n      form\n    } = this.props;\n\n    if (!this.state.controlled) {\n      if (form) {\n        form.change({\n          name,\n          value\n        });\n      } else {\n        this.setState({\n          value\n        });\n      }\n    }\n\n    if (typeof onChange === 'function') {\n      onChange({\n        value\n      });\n    }\n  }\n\n  hoverValue(value) {\n    this.setState({\n      hover: value\n    });\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      levels: _0,\n      name: _1,\n      value: _2,\n      defaultValue: _3,\n      onChange: _4,\n      onInput: _5,\n      disabled,\n      size = 'medium',\n      icon = 'Star'\n    } = _a,\n          props = __rest(_a, [\"levels\", \"name\", \"value\", \"defaultValue\", \"onChange\", \"onInput\", \"disabled\", \"size\", \"icon\"]);\n\n    const {\n      value,\n      changers,\n      hover,\n      hovers\n    } = this.state;\n    const dim = size === 'medium' ? '32px' : '22px';\n    return React.createElement(RatingContainer, Object.assign({}, props), changers.map((changer, i) => React.createElement(RatingElement, {\n      key: i,\n      size: size,\n      onClick: changer,\n      disabled: disabled,\n      onMouseEnter: hovers[i],\n      onMouseLeave: this.hoverVoid\n    }, React.createElement(RatingIcon, {\n      index: i,\n      disabled: disabled,\n      value: value,\n      hover: hover,\n      size: dim,\n      as: icons[icon]\n    }))));\n  }\n\n}\n\nRatingInt.inner = {\n  get RatingContainer() {\n    return RatingContainer;\n  },\n\n  get RatingElement() {\n    return RatingElement;\n  },\n\n  get RatingIcon() {\n    return RatingIcon;\n  }\n\n};\n/**\n * An input control for providing user ratings.\n */\n\nexport const Rating = withFormContext(RatingInt);\nRating.displayName = 'Rating';","map":{"version":3,"sources":["../../../../src/components/Rating/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as icons from '../Icon/icons';\nimport styled, { keyframes, css } from '../../utils/styled';\nimport { IconName } from '../Icon';\nimport { InputProps, PreciseTheme } from '../../common';\nimport { withFormContext, FormContextProps } from '../../hoc/withFormContext';\nimport { brightLemon, white, ocean } from '../../colors';\nimport { distance } from '../../distance';\nexport interface RatingProps extends InputProps<number> {\n    /**\n     * Sets the icon to be used.\n     * @default Favorite\n     */\n    icon?: IconName;\n    /**\n     * The number of levels for the rating. By default 5.\n     * @default 5\n     */\n    levels?: number;\n    /**\n     * Sets the size of the stars.\n     * @default \"medium\"\n     */\n    size?: 'small' | 'medium';\n    /**\n     * @ignore\n     */\n    children?: void;\n}\nexport interface RatingState {\n    controlled: boolean;\n    value: number;\n    error?: React.ReactChild;\n    hover: number;\n    changers: Array<() => void>;\n    hovers: Array<() => void>;\n}\nconst RatingContainer = styled.div `\n  display: inline-block;\n`;\ninterface RatingElementProps {\n    size: 'medium' | 'small';\n    disabled?: boolean;\n}\nconst SetAnimation = keyframes `\n  0% {\n    transform: scale(1);\n  }\n  25% {\n    transform: scale(1.5);\n  }\n  50% {\n    transform: scale(0.9);\n  }\n  75% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n`;\nconst RatingElement = styled.span<RatingElementProps> `\n  display: inline-block;\n  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n\n  & + & {\n    padding-left: ${props => (props.size === 'medium' ? distance.small : distance.xsmall)};\n  }\n`;\nfunction getColor(theme: PreciseTheme, disabled: boolean | undefined, i: number, value: number, hover: number) {\n    if (!disabled) {\n        if (hover !== -1) {\n            if (i < hover) {\n                return theme.ui0;\n            }\n            else if (i === hover) {\n                return ocean;\n            }\n        }\n        else if (i < value) {\n            return theme.ui5;\n        }\n        return theme.ui4;\n    }\n    else if (i < value) {\n        return theme.ui4;\n    }\n    return theme.ui3;\n}\nfunction getAnimation(i: number, value: number) {\n    if (i + 1 === value) {\n        return css `\n      ${SetAnimation} 0.5s ease-in-out\n    `;\n    }\n    return 'none';\n}\ninterface RatingIconProps {\n    disabled?: boolean;\n    index: number;\n    value: number;\n    hover: number;\n    size: string;\n}\nconst RatingIconInt: React.FC<RatingIconProps> = ({ disabled, index, value, hover, size, ...props }) => (<icons.Star {...props}/>);\nconst RatingIcon = styled(RatingIconInt)(({ theme, disabled, index, value, hover, size }) => css `\n    fill: ${getColor(theme, disabled, index, value, hover)};\n    animation: ${getAnimation(index, value)};\n    width: ${size};\n    height: ${size};\n  `);\nclass RatingInt extends React.Component<RatingProps & FormContextProps, RatingState> {\n    constructor(props: RatingProps) {\n        super(props);\n        const { value, defaultValue, levels = 5 } = props;\n        const changers: Array<() => void> = [];\n        const hovers: Array<() => void> = [];\n        for (let i = 0; i < levels; i++) {\n            changers.push(() => this.updateValue(i + 1));\n            hovers.push(() => this.hoverValue(i));\n        }\n        this.state = {\n            controlled: value !== undefined,\n            value: value || defaultValue || 0,\n            error: props.error,\n            hover: -1,\n            changers,\n            hovers,\n        };\n    }\n    UNSAFE_componentWillReceiveProps(nextProps: RatingProps) {\n        if (this.state.controlled) {\n            this.setState({\n                value: nextProps.value || 0,\n                error: nextProps.error,\n            });\n        }\n    }\n    componentDidMount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    private updateValue(value: number) {\n        const { onChange, name = '', form } = this.props;\n        if (!this.state.controlled) {\n            if (form) {\n                form.change({\n                    name,\n                    value,\n                });\n            }\n            else {\n                this.setState({\n                    value,\n                });\n            }\n        }\n        if (typeof onChange === 'function') {\n            onChange({\n                value,\n            });\n        }\n    }\n    private hoverVoid = () => {\n        this.setState({\n            hover: -1,\n        });\n    };\n    private hoverValue(value: number) {\n        this.setState({\n            hover: value,\n        });\n    }\n    render() {\n        const { levels: _0, name: _1, value: _2, defaultValue: _3, onChange: _4, onInput: _5, disabled, size = 'medium', icon = 'Star', ...props } = this.props;\n        const { value, changers, hover, hovers } = this.state;\n        const dim = size === 'medium' ? '32px' : '22px';\n        return (<RatingContainer {...props}>\n        {changers.map((changer, i) => (<RatingElement key={i} size={size} onClick={changer} disabled={disabled} onMouseEnter={hovers[i]} onMouseLeave={this.hoverVoid}>\n            <RatingIcon index={i} disabled={disabled} value={value} hover={hover} size={dim} as={icons[icon]}/>\n          </RatingElement>))}\n      </RatingContainer>);\n    }\n    static inner = {\n        get RatingContainer() { return RatingContainer as typeof RatingContainer; },\n        get RatingElement() { return RatingElement as typeof RatingElement; },\n        get RatingIcon() { return RatingIcon as typeof RatingIcon; }\n    };\n}\n/**\n * An input control for providing user ratings.\n */\nexport const Rating = withFormContext(RatingInt);\nRating.displayName = 'Rating';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}