{"ast":null,"code":"import _toConsumableArray from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _taggedTemplateLiteral from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  box-sizing: border-box;\\n  width: \", \";\\n  \", \";\\n  @media (max-width: 480px) {\\n    padding: 0;\\n    margin: 0;\\n  }\\n  \", \";\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  z-index: 10001;\\n  position: fixed;\\n  \", \";\\n  width: \", \"px;\\n  @media (max-width: 480px) {\\n    width: 100vw;\\n    padding: 0;\\n    right: 0;\\n    margin: 0;\\n    position: fixed;\\n    \", \";\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { NotificationAction } from './types';\nimport { eventManagers } from '../../utils/eventManager';\nimport { capitalizeFirst } from '../../utils/text';\nimport { ToastNotification } from './ToastNotification.part';\nexport { NotificationAction } from './types';\nexport { notify } from './notifier';\nvar defaultProps = {\n  width: 320\n};\n\nvar getNotificationPositionStyle = function getNotificationPositionStyle(pos) {\n  var positionStyle = \"\".concat(pos.split('-')[0], \":1rem;\");\n\n  if (pos.indexOf('center') !== -1) {\n    positionStyle += \"left:50%;transform:translateX(-50%);\";\n  } else {\n    positionStyle += \"\".concat(pos.split('-')[1], \":1rem;\");\n  }\n\n  return positionStyle;\n};\n\nvar AbsoluteContainer = css(_templateObject(), function (props) {\n  return getNotificationPositionStyle(props.position);\n}, function (props) {\n  return props.width ? props.width : defaultProps.width;\n}, function (props) {\n  return props.position.substring(0, 3) === 'top' ? 'top: 0' : 'bottom: 0';\n});\nvar StyledNotifications = styled.div(_templateObject2(), function (props) {\n  return !props.width ? 'auto' : \"\".concat(props.width, \"px\");\n}, function (props) {\n  return props.disablePointer ? \"pointer-events: none\" : \"\";\n}, function (props) {\n  return props.position !== 'relative' ? AbsoluteContainer : '';\n});\n/**\n * The host element for arbitrary notifications. Use as a singleton only.\n */\n\nexport var Notifications = /*#__PURE__*/function (_React$Component) {\n  _inherits(Notifications, _React$Component);\n\n  var _super = _createSuper(Notifications);\n\n  function Notifications(props) {\n    var _this;\n\n    _classCallCheck(this, Notifications);\n\n    _this = _super.call(this, props);\n    _this.collection = [];\n\n    _this.hide = function (id) {\n      if (typeof id === 'string') {\n        _this.removeNotification(id);\n      } else {\n        _this.clearNotifications();\n      }\n    };\n\n    _this.show = function (payload) {\n      var content = payload.content,\n          _payload$options = payload.options,\n          options = _payload$options === void 0 ? {} : _payload$options;\n      var _this$props = _this.props,\n          position = _this$props.position,\n          autoClose = _this$props.autoClose;\n      var notifications = _this.state.notifications;\n      var id = options.id || \"\".concat(~~(Math.random() * 1000000));\n      var opts = {\n        id: id,\n        type: options.type || 'none',\n        onClose: function onClose() {\n          return _this.removeNotification(id);\n        },\n        position: options.position || position,\n        title: options.title || capitalizeFirst(options.type || ''),\n        actionRenderer: options.actionRenderer,\n        autoClose: typeof options.autoClose === 'number' ? options.autoClose : autoClose\n      };\n\n      _this.collection.push({\n        name: id,\n        options: opts,\n        content: _this.getNotificationContent(content, opts.onClose)\n      });\n\n      _this.setState({\n        notifications: [].concat(_toConsumableArray(notifications), [id])\n      });\n    };\n\n    var events = props.events;\n    _this.eventManager = events || eventManagers[0];\n    _this.state = {\n      notifications: []\n    };\n    return _this;\n  }\n\n  _createClass(Notifications, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var em = this.eventManager;\n      em.on(NotificationAction.showNotification, this.show);\n      em.on(NotificationAction.clearNotification, this.hide);\n      eventManagers.push(em);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var em = this.eventManager;\n      em.off(NotificationAction.showNotification, this.show);\n      em.off(NotificationAction.clearNotification, this.hide);\n      eventManagers.splice(eventManagers.lastIndexOf(em), 1);\n    }\n  }, {\n    key: \"removeNotification\",\n    value: function removeNotification(id) {\n      this.setState({\n        notifications: this.state.notifications.filter(function (v) {\n          return v !== id;\n        })\n      });\n    }\n  }, {\n    key: \"clearNotifications\",\n    value: function clearNotifications() {\n      this.setState({\n        notifications: []\n      });\n    }\n  }, {\n    key: \"getNotificationContent\",\n    value: function getNotificationContent(content, onClose) {\n      if (React.isValidElement(content)) {\n        return React.cloneElement(content, {\n          onClose: onClose\n        });\n      } else if (typeof content === 'function') {\n        return content({\n          onClose: onClose\n        });\n      }\n\n      return content;\n    }\n  }, {\n    key: \"defaultNotificationRenderer\",\n    value: function defaultNotificationRenderer(payload) {\n      var content = payload.content,\n          _payload$options2 = payload.options,\n          options = _payload$options2 === void 0 ? {} : _payload$options2;\n      return React.createElement(ToastNotification, Object.assign({}, options, {\n        title: options.title,\n        key: \"notification-\".concat(options.id)\n      }), content);\n    }\n  }, {\n    key: \"makeNotification\",\n    value: function makeNotification(payload) {\n      var notificationRenderer = this.props.notificationRenderer;\n      var renderer = notificationRenderer || this.defaultNotificationRenderer;\n      return renderer(payload);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          _this$props2$position = _this$props2.position,\n          position = _this$props2$position === void 0 ? 'relative' : _this$props2$position,\n          width = _this$props2.width,\n          _this$props2$newestOn = _this$props2.newestOnTop,\n          newestOnTop = _this$props2$newestOn === void 0 ? false : _this$props2$newestOn;\n      var notifications = this.state.notifications;\n      var notificationsToRender = {};\n      var collection = this.collection.map(function (item, i) {\n        return {\n          id: item.name,\n          item: item,\n          index: i\n        };\n      });\n\n      if (newestOnTop) {\n        collection.reverse();\n      }\n\n      collection.forEach(function (_ref) {\n        var id = _ref.id,\n            item = _ref.item,\n            index = _ref.index;\n        var options = item.options || {};\n        var itemPosition = options.position || position;\n        notificationsToRender[itemPosition] || (notificationsToRender[itemPosition] = []);\n\n        if (notifications.indexOf(id) !== -1) {\n          notificationsToRender[itemPosition].push(_this2.makeNotification(item));\n        } else {\n          notificationsToRender[itemPosition].push(undefined);\n\n          _this2.collection.splice(index, 1);\n        }\n      });\n      return React.createElement(\"div\", null, Object.keys(notificationsToRender).map(function (position) {\n        var disablePointer = notificationsToRender[position].length === 1 && notificationsToRender[position][0] === null;\n        return React.createElement(StyledNotifications, {\n          key: \"notification-container-\".concat(position),\n          width: width,\n          position: position,\n          disablePointer: disablePointer\n        }, notificationsToRender[position]);\n      }));\n    }\n  }]);\n\n  return Notifications;\n}(React.Component);\nNotifications.inner = {\n  get ToastNotification() {\n    return ToastNotification;\n  },\n\n  get StyledNotifications() {\n    return StyledNotifications;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Notifications/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { NotificationOption, NotificationProps, NotificationsPosition, NotificationAction, NotificationOptions, NotificationContent, } from './types';\nimport { EventManager, eventManagers } from '../../utils/eventManager';\nimport { capitalizeFirst } from '../../utils/text';\nimport { ToastNotification } from './ToastNotification.part';\nexport { NotificationsPosition, NotificationOption, NotificationType, NotificationOptions, NotificationAction, } from './types';\nexport { notify } from './notifier';\nexport interface NotificationsProps {\n    /**\n     * Custom notification renderer component.\n     */\n    notificationRenderer?(e: NotificationOptions): React.ReactChild;\n    /**\n     * The default position for new notifications. By default relative.\n     * @default relative\n     */\n    position?: NotificationsPosition;\n    /**\n     * Disable the pointer symbol. By default enabled.\n     * @default false\n     */\n    disablePointer?: boolean;\n    /**\n     * The width to be used, by default auto.\n     * @default auto\n     */\n    width?: number;\n    /**\n     * Automatically closes notifications after a certain time. By default\n     * the notifications are not closed.\n     * @default false\n     */\n    autoClose?: false | number;\n    /**\n     * Show the latest on top. By default latest notifications are shown below.\n     * @default false\n     */\n    newestOnTop?: boolean;\n    /**\n     * Sets the event manager to use. By default a standard event manager is used.\n     */\n    events?: EventManager;\n}\nexport interface NotificationsState {\n    notifications: Array<string>;\n}\nexport interface StyledNotificationsProps {\n    position?: NotificationsPosition;\n    disablePointer?: boolean;\n    width?: number;\n}\nexport interface AbsoluteContainerProps {\n    position: NotificationsPosition;\n    width: number;\n}\ninterface NotificationEntry extends NotificationOptions {\n    name: string;\n}\nconst defaultProps = {\n    width: 320,\n};\nconst getNotificationPositionStyle = (pos: NotificationsPosition) => {\n    let positionStyle = `${pos.split('-')[0]}:1rem;`;\n    if (pos.indexOf('center') !== -1) {\n        positionStyle += `left:50%;transform:translateX(-50%);`;\n    }\n    else {\n        positionStyle += `${pos.split('-')[1]}:1rem;`;\n    }\n    return positionStyle;\n};\nconst AbsoluteContainer = css<AbsoluteContainerProps> `\n  z-index: 10001;\n  position: fixed;\n  ${props => getNotificationPositionStyle(props.position)};\n  width: ${props => (props.width ? props.width : defaultProps.width)}px;\n  @media (max-width: 480px) {\n    width: 100vw;\n    padding: 0;\n    right: 0;\n    margin: 0;\n    position: fixed;\n    ${props => (props.position.substring(0, 3) === 'top' ? 'top: 0' : 'bottom: 0')};\n  }\n`;\nconst StyledNotifications = styled.div<StyledNotificationsProps> `\n  box-sizing: border-box;\n  width: ${props => (!props.width ? 'auto' : `${props.width}px`)};\n  ${props => (props.disablePointer ? `pointer-events: none` : ``)};\n  @media (max-width: 480px) {\n    padding: 0;\n    margin: 0;\n  }\n  ${props => (props.position !== 'relative' ? AbsoluteContainer : '')};\n`;\ninterface NotificationClose {\n    (): void;\n}\n/**\n * The host element for arbitrary notifications. Use as a singleton only.\n */\nexport class Notifications extends React.Component<NotificationsProps, NotificationsState> {\n    private collection: Array<NotificationEntry> = [];\n    private eventManager: EventManager;\n    constructor(props: NotificationsProps) {\n        super(props);\n        const { events } = props;\n        this.eventManager = events || eventManagers[0];\n        this.state = {\n            notifications: [],\n        };\n    }\n    componentDidMount() {\n        const em = this.eventManager;\n        em.on(NotificationAction.showNotification, this.show);\n        em.on(NotificationAction.clearNotification, this.hide);\n        eventManagers.push(em);\n    }\n    componentWillUnmount() {\n        const em = this.eventManager;\n        em.off(NotificationAction.showNotification, this.show);\n        em.off(NotificationAction.clearNotification, this.hide);\n        eventManagers.splice(eventManagers.lastIndexOf(em), 1);\n    }\n    private removeNotification(id: string) {\n        this.setState({\n            notifications: this.state.notifications.filter(v => v !== id),\n        });\n    }\n    private clearNotifications() {\n        this.setState({\n            notifications: [],\n        });\n    }\n    private getNotificationContent(content: NotificationContent, onClose?: NotificationClose) {\n        if (React.isValidElement(content)) {\n            return React.cloneElement(content, { onClose } as NotificationProps);\n        }\n        else if (typeof content === 'function') {\n            return content({ onClose });\n        }\n        return content;\n    }\n    private hide = (id: string) => {\n        if (typeof id === 'string') {\n            this.removeNotification(id);\n        }\n        else {\n            this.clearNotifications();\n        }\n    };\n    private show = (payload: NotificationOptions) => {\n        const { content, options = {} } = payload;\n        const { position, autoClose } = this.props;\n        const { notifications } = this.state;\n        const id = options.id || `${~~(Math.random() * 1000000)}`;\n        const opts: NotificationOption = {\n            id,\n            type: options.type || 'none',\n            onClose: () => this.removeNotification(id),\n            position: options.position || position,\n            title: options.title || capitalizeFirst(options.type || ''),\n            actionRenderer: options.actionRenderer,\n            autoClose: typeof options.autoClose === 'number' ? options.autoClose : autoClose,\n        };\n        this.collection.push({\n            name: id,\n            options: opts,\n            content: this.getNotificationContent(content, opts.onClose),\n        });\n        this.setState({\n            notifications: [...notifications, id],\n        });\n    };\n    private defaultNotificationRenderer(payload: NotificationOptions) {\n        const { content, options = {} } = payload;\n        return (<ToastNotification {...options} title={options.title} key={`notification-${options.id}`}>\n        {content}\n      </ToastNotification>);\n    }\n    private makeNotification(payload: NotificationOptions) {\n        const { notificationRenderer } = this.props;\n        const renderer = notificationRenderer || this.defaultNotificationRenderer;\n        return renderer(payload);\n    }\n    render() {\n        const { position = 'relative', width, newestOnTop = false } = this.props;\n        const { notifications } = this.state;\n        const notificationsToRender = {};\n        const collection = this.collection.map((item, i) => ({\n            id: item.name,\n            item: item,\n            index: i,\n        }));\n        if (newestOnTop) {\n            collection.reverse();\n        }\n        collection.forEach(({ id, item, index }) => {\n            const options = item.options || {};\n            const itemPosition = options.position || position;\n            notificationsToRender[itemPosition] || (notificationsToRender[itemPosition] = []);\n            if (notifications.indexOf(id) !== -1) {\n                notificationsToRender[itemPosition].push(this.makeNotification(item));\n            }\n            else {\n                notificationsToRender[itemPosition].push(undefined);\n                this.collection.splice(index, 1);\n            }\n        });\n        return (<div>\n        {Object.keys(notificationsToRender).map((position: NotificationsPosition) => {\n            const disablePointer = notificationsToRender[position].length === 1 && notificationsToRender[position][0] === null;\n            return (<StyledNotifications key={`notification-container-${position}`} width={width} position={position} disablePointer={disablePointer}>\n              {notificationsToRender[position]}\n            </StyledNotifications>);\n        })}\n      </div>);\n    }\n    static inner = {\n        get ToastNotification() { return ToastNotification as typeof ToastNotification; },\n        get StyledNotifications() { return StyledNotifications as typeof StyledNotifications; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}