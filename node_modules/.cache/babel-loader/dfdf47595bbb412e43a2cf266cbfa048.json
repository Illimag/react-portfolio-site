{"ast":null,"code":"import _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _taggedTemplateLiteral from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  display: inline-block;\\n  margin-left: \", \";\\n  vertical-align: middle;\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  display: block;\\n  margin-bottom: \", \";\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  outline: 0;\\n  display: block;\\n  width: \", \";\\n  height: \", \";\\n  border-radius: \", \";\\n  position: relative;\\n  background: \", \";\\n  transition: all \", \" \", \";\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  opacity: 0;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: inline-block;\\n  vertical-align: middle;\\n  padding: \", \" 0;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  \", \";\\n  position: relative;\\n  display: inline-block;\\n  cursor: \", \";\\n  color: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { withFormContext } from '../../hoc';\nimport { distance } from '../../distance';\nimport { IndicatorKnob } from '../IndicatorKnob';\nimport { getFontStyle } from '../../textStyles';\nimport { InputNotification } from '../InputNotification';\nimport { PaddedContainer } from '../PaddedContainer';\nvar transitionDuration = '0.3s';\nvar transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';\nvar ToggleContainer = styled('div')(_templateObject(), getFontStyle({\n  size: 'medium'\n}), function (props) {\n  return props.disabled ? 'not-allowed' : 'pointer';\n}, themed(function (props) {\n  return props.theme.text1;\n}));\nvar ToggleBoxWrapper = styled.div(_templateObject2(), distance.xsmall);\nvar StyledInput = styled.input(_templateObject3());\nvar ToggleBox = styled('div')(_templateObject4(), distance.xxlarge, distance.medium, distance.small, themed(function (props) {\n  return props.theme.ui4;\n}), transitionDuration, transitionEase);\nvar StyledLabel = styled.label(_templateObject5(), distance.small);\nvar StyledDesc = styled.span(_templateObject6(), distance.small);\nvar IndicatorKnobStyle = {\n  transform: 'translate(0, -50%)'\n};\n\nvar ToggleInt = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ToggleInt, _React$PureComponent);\n\n  var _super = _createSuper(ToggleInt);\n\n  function ToggleInt(props) {\n    var _this;\n\n    _classCallCheck(this, ToggleInt);\n\n    _this = _super.call(this, props);\n\n    _this.handleOnClick = function (e) {\n      _this.changeValue();\n\n      e.preventDefault();\n    };\n\n    _this.handleCheckboxChange = function () {\n      _this.changeValue();\n    };\n\n    _this.handleCheckboxFocus = function () {\n      _this.setState({\n        focused: true\n      });\n    };\n\n    _this.handleCheckboxBlur = function () {\n      _this.setState({\n        focused: false\n      });\n    };\n\n    _this.state = {\n      controlled: typeof props.value !== 'undefined',\n      value: props.value || props.defaultValue || false,\n      focused: false,\n      error: props.error\n    };\n    return _this;\n  }\n\n  _createClass(ToggleInt, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var form = this.props.form;\n      var controlled = this.state.controlled;\n\n      if (!controlled && form) {\n        form.subscribe(this);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var form = this.props.form;\n      var controlled = this.state.controlled;\n\n      if (!controlled && form) {\n        form.unsubscribe(this);\n      }\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(_ref) {\n      var _ref$value = _ref.value,\n          value = _ref$value === void 0 ? false : _ref$value,\n          error = _ref.error;\n\n      if (this.state.controlled) {\n        this.setState({\n          value: value\n        });\n      }\n\n      this.setState({\n        error: error\n      });\n    }\n  }, {\n    key: \"changeValue\",\n    value: function changeValue() {\n      var _this$props = this.props,\n          onChange = _this$props.onChange,\n          disabled = _this$props.disabled,\n          form = _this$props.form,\n          _this$props$name = _this$props.name,\n          name = _this$props$name === void 0 ? '' : _this$props$name;\n\n      if (!disabled) {\n        var _this$state = this.state,\n            controlled = _this$state.controlled,\n            value = _this$state.value;\n        var status = !value;\n\n        if (!controlled) {\n          if (form) {\n            form.change({\n              name: name,\n              value: status\n            });\n          } else {\n            this.setState({\n              value: status\n            });\n          }\n        }\n\n        if (typeof onChange === 'function') {\n          onChange({\n            value: status\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          disabled = _a.disabled,\n          theme = _a.theme,\n          _0 = _a.value,\n          _1 = _a.defaultValue,\n          _2 = _a.onChange,\n          _3 = _a.onInput,\n          info = _a.info,\n          label = _a.label,\n          props = __rest(_a, [\"children\", \"disabled\", \"theme\", \"value\", \"defaultValue\", \"onChange\", \"onInput\", \"info\", \"label\"]);\n\n      var _this$state2 = this.state,\n          value = _this$state2.value,\n          focused = _this$state2.focused,\n          error = _this$state2.error;\n      var containerProps = Object.assign({}, props, {\n        theme: theme,\n        onClick: this.handleOnClick,\n        disabled: disabled\n      });\n      var boxProps = {\n        checked: value,\n        theme: theme\n      };\n      return React.createElement(ToggleContainer, Object.assign({}, containerProps), label && React.createElement(StyledLabel, {\n        theme: theme\n      }, label), React.createElement(ToggleBoxWrapper, null, React.createElement(StyledInput, {\n        checked: value,\n        onChange: this.handleCheckboxChange,\n        onFocus: this.handleCheckboxFocus,\n        onBlur: this.handleCheckboxBlur\n      }), React.createElement(ToggleBox, Object.assign({}, boxProps), React.createElement(IndicatorKnob, {\n        style: IndicatorKnobStyle,\n        x: value ? 0.5 : 0,\n        active: value,\n        focus: focused,\n        disabled: containerProps.disabled,\n        animate: true\n      }))), children && React.createElement(StyledDesc, null, children), (error || info) && React.createElement(PaddedContainer, {\n        top: \"xsmall\",\n        bottom: \"xsmall\"\n      }, React.createElement(InputNotification, {\n        error: error,\n        info: info\n      })));\n    }\n  }]);\n\n  return ToggleInt;\n}(React.PureComponent);\n\nToggleInt.inner = {\n  get ToggleContainer() {\n    return ToggleContainer;\n  },\n\n  get StyledLabel() {\n    return StyledLabel;\n  },\n\n  get ToggleBoxWrapper() {\n    return ToggleBoxWrapper;\n  },\n\n  get StyledInput() {\n    return StyledInput;\n  },\n\n  get ToggleBox() {\n    return ToggleBox;\n  },\n\n  get IndicatorKnob() {\n    return IndicatorKnob;\n  },\n\n  get StyledDesc() {\n    return StyledDesc;\n  },\n\n  get PaddedContainer() {\n    return PaddedContainer;\n  },\n\n  get InputNotification() {\n    return InputNotification;\n  }\n\n};\n/**\n * The toggle component displays a button to toggle a checked state.\n */\n\nexport var Toggle = withFormContext(ToggleInt);\nToggle.displayName = 'Toggle';","map":{"version":3,"sources":["../../../../src/components/Toggle/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { InputProps, InputChangeEvent } from '../../common';\nimport { withFormContext, FormContextProps } from '../../hoc';\nimport { distance } from '../../distance';\nimport { IndicatorKnob } from '../IndicatorKnob';\nimport { getFontStyle } from '../../textStyles';\nimport { InputNotification } from '../InputNotification';\nimport { PaddedContainer } from '../PaddedContainer';\nexport type ToggleChangeEvent = InputChangeEvent<boolean>;\nexport interface ToggleProps extends InputProps<boolean> {\n    /**\n     * Sets the text of label.\n     * @default ''\n     */\n    label?: React.ReactChild;\n    /**\n     * The content of the toggle button.\n     */\n    children?: React.ReactNode;\n}\nexport interface ToggleState {\n    value: boolean;\n    error?: React.ReactChild;\n    controlled: boolean;\n    focused: boolean;\n}\ninterface ToggleContainerProps {\n    disabled?: boolean;\n}\ninterface ToggleBoxProps {\n    checked: boolean;\n    theme: any;\n}\nconst transitionDuration = '0.3s';\nconst transitionEase = 'cubic-bezier(0, 0, 0.25, 1)';\nconst ToggleContainer = styled('div')<ToggleContainerProps> `\n  ${getFontStyle({ size: 'medium' })};\n  position: relative;\n  display: inline-block;\n  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n  color: ${themed(props => props.theme.text1)};\n`;\nconst ToggleBoxWrapper = styled.div `\n  display: inline-block;\n  vertical-align: middle;\n  padding: ${distance.xsmall} 0;\n`;\nconst StyledInput = styled.input `\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\nconst ToggleBox = styled('div')<ToggleBoxProps> `\n  outline: 0;\n  display: block;\n  width: ${distance.xxlarge};\n  height: ${distance.medium};\n  border-radius: ${distance.small};\n  position: relative;\n  background: ${themed(props => props.theme.ui4)};\n  transition: all ${transitionDuration} ${transitionEase};\n`;\nconst StyledLabel = styled.label `\n  display: block;\n  margin-bottom: ${distance.small};\n`;\nconst StyledDesc = styled.span `\n  display: inline-block;\n  margin-left: ${distance.small};\n  vertical-align: middle;\n`;\nconst IndicatorKnobStyle: React.CSSProperties = {\n    transform: 'translate(0, -50%)',\n};\nclass ToggleInt extends React.PureComponent<ToggleProps & FormContextProps, ToggleState> {\n    constructor(props: ToggleProps) {\n        super(props);\n        this.state = {\n            controlled: typeof props.value !== 'undefined',\n            value: props.value || props.defaultValue || false,\n            focused: false,\n            error: props.error,\n        };\n    }\n    componentDidMount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    UNSAFE_componentWillReceiveProps({ value = false, error }: ToggleProps) {\n        if (this.state.controlled) {\n            this.setState({ value });\n        }\n        this.setState({ error });\n    }\n    private changeValue() {\n        const { onChange, disabled, form, name = '' } = this.props;\n        if (!disabled) {\n            const { controlled, value } = this.state;\n            const status = !value;\n            if (!controlled) {\n                if (form) {\n                    form.change({\n                        name,\n                        value: status,\n                    });\n                }\n                else {\n                    this.setState({\n                        value: status,\n                    });\n                }\n            }\n            if (typeof onChange === 'function') {\n                onChange({\n                    value: status,\n                });\n            }\n        }\n    }\n    private handleOnClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.changeValue();\n        e.preventDefault();\n    };\n    private handleCheckboxChange = () => {\n        this.changeValue();\n    };\n    private handleCheckboxFocus = () => {\n        this.setState({\n            focused: true,\n        });\n    };\n    private handleCheckboxBlur = () => {\n        this.setState({\n            focused: false,\n        });\n    };\n    render() {\n        const { children, disabled, theme, value: _0, defaultValue: _1, onChange: _2, onInput: _3, info, label, ...props } = this.props;\n        const { value, focused, error } = this.state;\n        const containerProps = {\n            ...props,\n            theme,\n            onClick: this.handleOnClick,\n            disabled,\n        };\n        const boxProps = {\n            checked: value,\n            theme,\n        };\n        return (<ToggleContainer {...containerProps}>\n        {label && <StyledLabel theme={theme}>{label}</StyledLabel>}\n        <ToggleBoxWrapper>\n          <StyledInput checked={value} onChange={this.handleCheckboxChange} onFocus={this.handleCheckboxFocus} onBlur={this.handleCheckboxBlur}/>\n          <ToggleBox {...boxProps}>\n            <IndicatorKnob style={IndicatorKnobStyle} x={value ? 0.5 : 0} active={value} focus={focused} disabled={containerProps.disabled} animate/>\n          </ToggleBox>\n        </ToggleBoxWrapper>\n        {children && <StyledDesc>{children}</StyledDesc>}\n        {(error || info) && (<PaddedContainer top=\"xsmall\" bottom=\"xsmall\">\n            <InputNotification error={error} info={info}/>\n          </PaddedContainer>)}\n      </ToggleContainer>);\n    }\n    static inner = {\n        get ToggleContainer() { return ToggleContainer as typeof ToggleContainer; },\n        get StyledLabel() { return StyledLabel as typeof StyledLabel; },\n        get ToggleBoxWrapper() { return ToggleBoxWrapper as typeof ToggleBoxWrapper; },\n        get StyledInput() { return StyledInput as typeof StyledInput; },\n        get ToggleBox() { return ToggleBox as typeof ToggleBox; },\n        get IndicatorKnob() { return IndicatorKnob as typeof IndicatorKnob; },\n        get StyledDesc() { return StyledDesc as typeof StyledDesc; },\n        get PaddedContainer() { return PaddedContainer as typeof PaddedContainer; },\n        get InputNotification() { return InputNotification as typeof InputNotification; }\n    };\n}\n/**\n * The toggle component displays a button to toggle a checked state.\n */\nexport const Toggle = withFormContext(ToggleInt);\nToggle.displayName = 'Toggle';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}