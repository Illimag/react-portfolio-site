{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nimport { setLabels, getPropLabel } from '../../utils/labels';\nimport { ItemControls } from './ItemControlsView.part';\nimport { PageControls } from './PageControls.part';\nsetLabels({\n  itemsPerPageLabel: 'Items per page:'\n});\n\nfunction defaultItemsInfo(start, end, total) {\n  return `${start} - ${end} of ${total}`;\n}\n\nfunction defaultPagesInfo(start, end) {\n  return `${start} of ${end} pages`;\n}\n\nfunction getPages(itemsPerPage, total) {\n  const l = Math.ceil(total / itemsPerPage);\n  const pages = [];\n\n  for (let i = 1; i <= l; i++) {\n    pages.push(i.toString());\n  }\n\n  return pages;\n}\n\nconst ControlsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-left: auto;\n  align-items: center;\n  height: 40px;\n`;\nexport class PaginationBar extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.sizeChanged = e => {\n      const {\n        onSizeChanged,\n        availableSizes\n      } = this.props;\n\n      if (Array.isArray(availableSizes) && typeof onSizeChanged === 'function') {\n        onSizeChanged({\n          size: availableSizes[e.index]\n        });\n      }\n    };\n\n    this.changeToPrevious = () => {\n      const {\n        selectedPage\n      } = this.props;\n      this.changeTo(selectedPage - 1);\n    };\n\n    this.changeToNext = () => {\n      const {\n        selectedPage\n      } = this.props;\n      this.changeTo(selectedPage + 1);\n    };\n\n    this.changeToSelect = ({\n      index\n    }) => {\n      this.changeTo(index);\n    };\n  }\n\n  changeTo(page) {\n    const {\n      onPageChanged\n    } = this.props;\n\n    if (page < 0) {\n      page = 0;\n    }\n\n    if (typeof onPageChanged === 'function') {\n      onPageChanged({\n        page\n      });\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      availableSizes,\n      size,\n      selectedPage,\n      pagesInfo = defaultPagesInfo,\n      itemsInfo = defaultItemsInfo,\n      items,\n      onSizeChanged,\n      onPageChanged\n    } = _a,\n          props = __rest(_a, [\"availableSizes\", \"size\", \"selectedPage\", \"pagesInfo\", \"itemsInfo\", \"items\", \"onSizeChanged\", \"onPageChanged\"]);\n\n    const pages = getPages(size, items);\n    const currentItem = selectedPage * size;\n    const nextItem = currentItem + size;\n    return React.createElement(ControlsContainer, null, Array.isArray(availableSizes) && availableSizes.length > 0 && React.createElement(ItemControls, {\n      label: getPropLabel(props, 'itemsPerPageLabel'),\n      data: availableSizes.map(size => size.toString()),\n      value: `${size}`,\n      onChange: this.sizeChanged\n    }, itemsInfo(currentItem, Math.min(nextItem, items), items)), React.createElement(PageControls, {\n      current: selectedPage,\n      total: pages.length,\n      changeToPrevious: this.changeToPrevious,\n      changeToNext: this.changeToNext,\n      changeToSelect: this.changeToSelect,\n      pages: pages\n    }, pagesInfo(selectedPage + 1, Math.max(pages.length, 1))));\n  }\n\n}\nPaginationBar.inner = {\n  get ControlsContainer() {\n    return ControlsContainer;\n  },\n\n  get ItemControls() {\n    return ItemControls;\n  },\n\n  get PageControls() {\n    return PageControls;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/PaginationBar/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AACA,SAAS,SAAT,EAAoB,YAApB,QAA6D,oBAA7D;AACA,SAAS,YAAT,QAA6B,yBAA7B;AACA,SAAS,YAAT,QAA6B,qBAA7B;AAEA,SAAS,CAAC;AACN,EAAA,iBAAiB,EAAE;AADb,CAAD,CAAT;;AAGA,SAAS,gBAAT,CAA0B,KAA1B,EAAyC,GAAzC,EAAsD,KAAtD,EAAmE;AAC/D,SAAO,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK,EAApC;AACH;;AACD,SAAS,gBAAT,CAA0B,KAA1B,EAAyC,GAAzC,EAAoD;AAChD,SAAO,GAAG,KAAK,OAAO,GAAG,QAAzB;AACH;;AACD,SAAS,QAAT,CAAkB,YAAlB,EAAwC,KAAxC,EAAqD;AACjD,QAAM,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,GAAG,YAAlB,CAAV;AACA,QAAM,KAAK,GAAkB,EAA7B;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,CAArB,EAAwB,CAAC,EAAzB,EAA6B;AACzB,IAAA,KAAK,CAAC,IAAN,CAAW,CAAC,CAAC,QAAF,EAAX;AACH;;AACD,SAAO,KAAP;AACH;;AACD,MAAM,iBAAiB,GAAG,MAAM,CAAC,GAAI;;;;;;CAArC;AAiDA,OAAM,MAAO,aAAP,SAA6B,KAAK,CAAC,SAAnC,CAAgE;AAAtE,EAAA,WAAA,GAAA;;;AACY,SAAA,WAAA,GAAe,CAAD,IAA+B;AACjD,YAAM;AAAE,QAAA,aAAF;AAAiB,QAAA;AAAjB,UAAoC,KAAK,KAA/C;;AACA,UAAI,KAAK,CAAC,OAAN,CAAc,cAAd,KAAiC,OAAO,aAAP,KAAyB,UAA9D,EAA0E;AACtE,QAAA,aAAa,CAAC;AACV,UAAA,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC,KAAH;AADV,SAAD,CAAb;AAGH;AACJ,KAPO;;AAQA,SAAA,gBAAA,GAAmB,MAAK;AAC5B,YAAM;AAAE,QAAA;AAAF,UAAmB,KAAK,KAA9B;AACA,WAAK,QAAL,CAAc,YAAY,GAAG,CAA7B;AACH,KAHO;;AAIA,SAAA,YAAA,GAAe,MAAK;AACxB,YAAM;AAAE,QAAA;AAAF,UAAmB,KAAK,KAA9B;AACA,WAAK,QAAL,CAAc,YAAY,GAAG,CAA7B;AACH,KAHO;;AAIA,SAAA,cAAA,GAAiB,CAAC;AAAE,MAAA;AAAF,KAAD,KAAuC;AAC5D,WAAK,QAAL,CAAc,KAAd;AACH,KAFO;AAiCX;;AA9BW,EAAA,QAAQ,CAAC,IAAD,EAAa;AACzB,UAAM;AAAE,MAAA;AAAF,QAAoB,KAAK,KAA/B;;AACA,QAAI,IAAI,GAAG,CAAX,EAAc;AACV,MAAA,IAAI,GAAG,CAAP;AACH;;AACD,QAAI,OAAO,aAAP,KAAyB,UAA7B,EAAyC;AACrC,MAAA,aAAa,CAAC;AACV,QAAA;AADU,OAAD,CAAb;AAGH;AACJ;;AACD,EAAA,MAAM,GAAA;AACF,UAAM,EAAA,GAAA,KAAA,KAAN;AAAA,UAAM;AAAE,MAAA,cAAF;AAAkB,MAAA,IAAlB;AAAwB,MAAA,YAAxB;AAAsC,MAAA,SAAS,GAAG,gBAAlD;AAAoE,MAAA,SAAS,GAAG,gBAAhF;AAAkG,MAAA,KAAlG;AAAyG,MAAA,aAAzG;AAAwH,MAAA;AAAxH,QAAqI,EAA3I;AAAA,UAA6I,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,MAAA,EAAA,cAAA,EAAA,WAAA,EAAA,WAAA,EAAA,OAAA,EAAA,eAAA,EAAA,eAAA,CAAA,CAA7I;;AACA,UAAM,KAAK,GAAG,QAAQ,CAAC,IAAD,EAAO,KAAP,CAAtB;AACA,UAAM,WAAW,GAAG,YAAY,GAAG,IAAnC;AACA,UAAM,QAAQ,GAAG,WAAW,GAAG,IAA/B;AACA,WAAQ,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB,IAAlB,EACP,KAAK,CAAC,OAAN,CAAc,cAAd,KAAiC,cAAc,CAAC,MAAf,GAAwB,CAAzD,IAA+D,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,MAAA,KAAK,EAAE,YAAY,CAAC,KAAD,EAAQ,mBAAR,CAApB;AAAkD,MAAA,IAAI,EAAE,cAAc,CAAC,GAAf,CAAmB,IAAI,IAAI,IAAI,CAAC,QAAL,EAA3B,CAAxD;AAAqG,MAAA,KAAK,EAAE,GAAG,IAAI,EAAnH;AAAuH,MAAA,QAAQ,EAAE,KAAK;AAAtI,KAAb,EAC3D,SAAS,CAAC,WAAD,EAAc,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,KAAnB,CAAd,EAAyC,KAAzC,CADkD,CADxD,EAIR,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,MAAA,OAAO,EAAE,YAAV;AAAwB,MAAA,KAAK,EAAE,KAAK,CAAC,MAArC;AAA6C,MAAA,gBAAgB,EAAE,KAAK,gBAApE;AAAsF,MAAA,YAAY,EAAE,KAAK,YAAzG;AAAuH,MAAA,cAAc,EAAE,KAAK,cAA5I;AAA4J,MAAA,KAAK,EAAE;AAAnK,KAAb,EACG,SAAS,CAAC,YAAY,GAAG,CAAhB,EAAmB,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,MAAf,EAAuB,CAAvB,CAAnB,CADZ,CAJQ,CAAR;AAQH;;AA5CiE;AA6C3D,aAAA,CAAA,KAAA,GAAQ;AACX,MAAI,iBAAJ,GAAqB;AAAK,WAAO,iBAAP;AAAuD,GADtE;;AAEX,MAAI,YAAJ,GAAgB;AAAK,WAAO,YAAP;AAA6C,GAFvD;;AAGX,MAAI,YAAJ,GAAgB;AAAK,WAAO,YAAP;AAA6C;;AAHvD,CAAR","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { setLabels, getPropLabel, PaginationBarLabels } from '../../utils/labels';\nimport { ItemControls } from './ItemControlsView.part';\nimport { PageControls } from './PageControls.part';\nimport { SelectButtonChangeEvent } from '../SelectButton';\nsetLabels({\n    itemsPerPageLabel: 'Items per page:',\n});\nfunction defaultItemsInfo(start: number, end: number, total: number) {\n    return `${start} - ${end} of ${total}`;\n}\nfunction defaultPagesInfo(start: number, end: number) {\n    return `${start} of ${end} pages`;\n}\nfunction getPages(itemsPerPage: number, total: number) {\n    const l = Math.ceil(total / itemsPerPage);\n    const pages: Array<string> = [];\n    for (let i = 1; i <= l; i++) {\n        pages.push(i.toString());\n    }\n    return pages;\n}\nconst ControlsContainer = styled.div `\n  display: flex;\n  justify-content: space-between;\n  margin-left: auto;\n  align-items: center;\n  height: 40px;\n`;\nexport interface PaginationBarSizeChangedEvent {\n    size: number;\n}\nexport interface PaginationBarPageChangedEvent {\n    page: number;\n}\nexport interface PaginationBarProps extends PaginationBarLabels {\n    /**\n     * The available maximum numbers of entries per page to choose from, if any.\n     */\n    availableSizes?: Array<number>;\n    /**\n     * The currently active page.\n     */\n    selectedPage: number;\n    /**\n     * The maximum number of entries per page.\n     */\n    size: number;\n    /**\n     * The total number of entries.\n     */\n    items: number;\n    /**\n     * Pages info label generator.\n     * @default '{start} of {end} pages'\n     */\n    pagesInfo?(start: number, end: number): React.ReactChild;\n    /**\n     * Items info label generator.\n     * @default '{start} - {end} of {total}'\n     */\n    itemsInfo?(start: number, end: number, total: number): React.ReactChild;\n    /**\n     * Event fired when the size per page has been changed.\n     */\n    onSizeChanged?(e: PaginationBarSizeChangedEvent): void;\n    /**\n     * Event fired when the selected page has been changed.\n     */\n    onPageChanged?(e: PaginationBarPageChangedEvent): void;\n}\nexport class PaginationBar extends React.Component<PaginationBarProps> {\n    private sizeChanged = (e: SelectButtonChangeEvent) => {\n        const { onSizeChanged, availableSizes } = this.props;\n        if (Array.isArray(availableSizes) && typeof onSizeChanged === 'function') {\n            onSizeChanged({\n                size: availableSizes[e.index],\n            });\n        }\n    };\n    private changeToPrevious = () => {\n        const { selectedPage } = this.props;\n        this.changeTo(selectedPage - 1);\n    };\n    private changeToNext = () => {\n        const { selectedPage } = this.props;\n        this.changeTo(selectedPage + 1);\n    };\n    private changeToSelect = ({ index }: SelectButtonChangeEvent) => {\n        this.changeTo(index);\n    };\n    private changeTo(page: number) {\n        const { onPageChanged } = this.props;\n        if (page < 0) {\n            page = 0;\n        }\n        if (typeof onPageChanged === 'function') {\n            onPageChanged({\n                page,\n            });\n        }\n    }\n    render() {\n        const { availableSizes, size, selectedPage, pagesInfo = defaultPagesInfo, itemsInfo = defaultItemsInfo, items, onSizeChanged, onPageChanged, ...props } = this.props;\n        const pages = getPages(size, items);\n        const currentItem = selectedPage * size;\n        const nextItem = currentItem + size;\n        return (<ControlsContainer>\n        {Array.isArray(availableSizes) && availableSizes.length > 0 && (<ItemControls label={getPropLabel(props, 'itemsPerPageLabel')} data={availableSizes.map(size => size.toString())} value={`${size}`} onChange={this.sizeChanged}>\n            {itemsInfo(currentItem, Math.min(nextItem, items), items)}\n          </ItemControls>)}\n        <PageControls current={selectedPage} total={pages.length} changeToPrevious={this.changeToPrevious} changeToNext={this.changeToNext} changeToSelect={this.changeToSelect} pages={pages}>\n          {pagesInfo(selectedPage + 1, Math.max(pages.length, 1))}\n        </PageControls>\n      </ControlsContainer>);\n    }\n    static inner = {\n        get ControlsContainer() { return ControlsContainer as typeof ControlsContainer; },\n        get ItemControls() { return ItemControls as typeof ItemControls; },\n        get PageControls() { return PageControls as typeof PageControls; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}