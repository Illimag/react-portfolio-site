{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nimport { trackMouse, trackTouch } from '../../utils/interactivity';\nconst Container = styled.div`\n  position: relative;\n  touch-action: ${props => props.disabled ? 'auto' : 'none'};\n  user-select: ${props => props.disabled ? 'auto' : 'none'};\n`;\n/**\n * The interactive surface provides a component that reacts on touch (or click) interactivity.\n */\n\nexport class InteractiveSurface extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.mounted = false;\n    this.moved = false;\n\n    this.updateValue = (x, y, active, rect, moved) => {\n      let canceled = true;\n\n      if (this.mounted) {\n        const {\n          onChange\n        } = this.props;\n        this.moved = this.moved || moved;\n\n        if (typeof onChange === 'function') {\n          onChange({\n            x,\n            y,\n            moved: this.moved,\n            active,\n            rect,\n\n            release() {\n              canceled = false;\n            }\n\n          });\n        }\n      }\n\n      return canceled;\n    };\n\n    this.changeValue = e => {\n      const {\n        disabled\n      } = this.props;\n      this.moved = false;\n\n      if (!disabled) {\n        trackMouse(e, this.updateValue);\n      }\n    };\n\n    this.preventValue = e => {\n      const {\n        disabled,\n        opaque\n      } = this.props;\n\n      if (!disabled && !opaque && this.moved) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    };\n\n    this.changeTouchValue = e => {\n      const {\n        disabled\n      } = this.props;\n      this.moved = false;\n\n      if (!disabled) {\n        trackTouch(e, this.updateValue);\n      }\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      disabled,\n      onChange: _0,\n      opaque: _1\n    } = _a,\n          props = __rest(_a, [\"children\", \"disabled\", \"onChange\", \"opaque\"]);\n\n    return React.createElement(Container, Object.assign({}, props, {\n      onMouseDownCapture: this.changeValue,\n      onClickCapture: this.preventValue,\n      onTouchStartCapture: this.changeTouchValue\n    }), children);\n  }\n\n}\nInteractiveSurface.inner = {\n  get Container() {\n    return Container;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/InteractiveSurface/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { trackMouse, trackTouch } from '../../utils/interactivity';\nexport interface InteractiveSurfaceChangeEvent {\n    /**\n     * Relative horizontal coordinate (0 to 1).\n     */\n    x: number;\n    /**\n     * Relative vertical coordinate (0 to 1).\n     */\n    y: number;\n    /**\n     * Gets if the dragging is currently active.\n     */\n    active: boolean;\n    /**\n     * Gets if any move was detected up until now.\n     */\n    moved: boolean;\n    /**\n     * Gets the associated absolute dimensions.\n     */\n    rect: ClientRect;\n    /**\n     * Releases the drag handler from the surface.\n     */\n    release(): void;\n}\nexport interface InteractiveSurfaceProps extends StandardProps {\n    /**\n     * Event that is fired once interaction with the component is happening.\n     */\n    onChange?(e: InteractiveSurfaceChangeEvent): void;\n    /**\n     * Determines if interactivity is disabled, i.e., touch etc. behaves as a scroll.\n     */\n    disabled?: boolean;\n    /**\n     * Passes the event capturing on to children, such that links etc. can be clicked.\n     */\n    opaque?: boolean;\n    /**\n     * The content of the container.\n     */\n    children?: React.ReactNode;\n}\nconst Container = styled.div<InteractiveSurfaceProps> `\n  position: relative;\n  touch-action: ${props => (props.disabled ? 'auto' : 'none')};\n  user-select: ${props => (props.disabled ? 'auto' : 'none')};\n`;\n/**\n * The interactive surface provides a component that reacts on touch (or click) interactivity.\n */\nexport class InteractiveSurface extends React.Component<InteractiveSurfaceProps> {\n    private mounted = false;\n    private moved = false;\n    UNSAFE_componentWillMount() {\n        this.mounted = true;\n    }\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n    private updateValue = (x: number, y: number, active: boolean, rect: ClientRect, moved: boolean) => {\n        let canceled = true;\n        if (this.mounted) {\n            const { onChange } = this.props;\n            this.moved = this.moved || moved;\n            if (typeof onChange === 'function') {\n                onChange({\n                    x,\n                    y,\n                    moved: this.moved,\n                    active,\n                    rect,\n                    release() {\n                        canceled = false;\n                    },\n                });\n            }\n        }\n        return canceled;\n    };\n    private changeValue = (e: React.MouseEvent<HTMLDivElement>) => {\n        const { disabled } = this.props;\n        this.moved = false;\n        if (!disabled) {\n            trackMouse(e, this.updateValue);\n        }\n    };\n    private preventValue = (e: React.MouseEvent<HTMLDivElement>) => {\n        const { disabled, opaque } = this.props;\n        if (!disabled && !opaque && this.moved) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    };\n    private changeTouchValue = (e: React.TouchEvent<HTMLDivElement>) => {\n        const { disabled } = this.props;\n        this.moved = false;\n        if (!disabled) {\n            trackTouch(e, this.updateValue);\n        }\n    };\n    render() {\n        const { children, disabled, onChange: _0, opaque: _1, ...props } = this.props;\n        return (<Container {...props} onMouseDownCapture={this.changeValue} onClickCapture={this.preventValue} onTouchStartCapture={this.changeTouchValue}>\n        {children}\n      </Container>);\n    }\n    static inner = {\n        get Container() { return Container as typeof Container; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}