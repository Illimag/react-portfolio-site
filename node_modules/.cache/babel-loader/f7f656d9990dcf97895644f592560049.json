{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nimport { transparentize } from '../../utils';\nimport { dark } from '../../colors';\nconst FixedContainer = styled.div`\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: fixed;\n  z-index: 10000;\n  overflow-x: hidden;\n  overflow-y: auto;\n`;\nconst FocusKeeper = styled.a`\n  height: 0;\n  width: 0;\n  overflow: hidden;\n`;\nconst StyledModalBackground = styled(FixedContainer)`\n  overflow: hidden;\n  z-index: 9999;\n  background: ${transparentize(dark, 0.4)};\n`;\n/**\n * Defines a generic content blocking overlay element, e.g., for a modal dialog.\n */\n\nexport class Blocker extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.keepFirstFocus = () => {\n      this.keepFocus('first');\n    };\n\n    this.keepLastFocus = () => {\n      this.keepFocus('last');\n    };\n\n    this.setElement = node => {\n      if (node && node !== this.modalNode) {\n        const el = node.querySelector('*[tabindex]');\n        (el || node).focus();\n      }\n\n      this.modalNode = node;\n    };\n\n    this.onContainerClick = e => {\n      e.stopPropagation();\n\n      if (!this.onScrollbarClick(e) && (e.target === e.currentTarget || e.target instanceof HTMLElement && e.target.parentElement === e.currentTarget)) {\n        this.notifyClose(e);\n      }\n    };\n\n    this.onScrollbarClick = e => {\n      return e.target instanceof HTMLElement && e.target.offsetLeft + e.target.scrollWidth < e.clientX;\n    };\n\n    this.onKeyPress = e => {\n      if (e.keyCode === 27\n      /* escape */\n      ) {\n          this.notifyClose(e);\n        }\n    };\n  }\n\n  getFocusables() {\n    if (this.modalNode) {\n      return this.modalNode.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]');\n    }\n\n    return undefined;\n  }\n\n  componentDidMount() {\n    this.changeBodyOverflow(true);\n  }\n\n  componentWillUnmount() {\n    this.changeBodyOverflow(false);\n  }\n\n  changeBodyOverflow(open) {\n    const body = document.querySelector('body');\n\n    if (body) {\n      if (open) {\n        body.style.setProperty('overflow', 'hidden');\n      } else {\n        body.style.removeProperty('overflow');\n      }\n    }\n  }\n\n  keepFocus(position) {\n    const focusables = this.getFocusables();\n\n    if (focusables && focusables.length > 2) {\n      const nextElement = position === 'first' ? focusables[1] : focusables[focusables.length - 2];\n      nextElement.focus();\n    }\n  }\n\n  notifyClose(e) {\n    const {\n      onClose\n    } = this.props;\n\n    if (typeof onClose === 'function') {\n      onClose(e);\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      onClose\n    } = _a,\n          props = __rest(_a, [\"children\", \"onClose\"]);\n\n    return React.createElement(React.Fragment, null, React.createElement(FixedContainer, Object.assign({\n      ref: this.setElement,\n      onMouseDown: this.onContainerClick,\n      onKeyDown: this.onKeyPress\n    }, props), React.createElement(FocusKeeper, {\n      href: \"#\",\n      onFocus: this.keepLastFocus\n    }), children, React.createElement(FocusKeeper, {\n      href: \"#\",\n      onFocus: this.keepFirstFocus\n    })), React.createElement(StyledModalBackground, Object.assign({}, props)));\n  }\n\n}\nBlocker.inner = {\n  get FixedContainer() {\n    return FixedContainer;\n  },\n\n  get FocusKeeper() {\n    return FocusKeeper;\n  },\n\n  get StyledModalBackground() {\n    return StyledModalBackground;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Blocker/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AAEA,SAAmB,cAAnB,QAAyC,aAAzC;AACA,SAAS,IAAT,QAAqB,cAArB;AAOA,MAAM,cAAc,GAAG,MAAM,CAAC,GAAI;;;;;;;;;CAAlC;AAUA,MAAM,WAAW,GAAG,MAAM,CAAC,CAAE;;;;CAA7B;AAKA,MAAM,qBAAqB,GAAG,MAAM,CAAC,cAAD,CAAiB;;;gBAGrC,cAAc,CAAC,IAAD,EAAO,GAAP,CAAW;CAHzC;AAKA;;;;AAGA,OAAM,MAAO,OAAP,SAAuB,KAAK,CAAC,SAA7B,CAAoD;AAA1D,EAAA,WAAA,GAAA;;;AAgCY,SAAA,cAAA,GAAiB,MAAK;AAC1B,WAAK,SAAL,CAAe,OAAf;AACH,KAFO;;AAGA,SAAA,aAAA,GAAgB,MAAK;AACzB,WAAK,SAAL,CAAe,MAAf;AACH,KAFO;;AAGA,SAAA,UAAA,GAAc,IAAD,IAAgC;AACjD,UAAI,IAAI,IAAI,IAAI,KAAK,KAAK,SAA1B,EAAqC;AACjC,cAAM,EAAE,GAAG,IAAI,CAAC,aAAL,CAAmB,aAAnB,CAAX;AACA,SAAC,EAAE,IAAI,IAAP,EAAa,KAAb;AACH;;AACD,WAAK,SAAL,GAAiB,IAAjB;AACH,KANO;;AAaA,SAAA,gBAAA,GAAoB,CAAD,IAAqC;AAC5D,MAAA,CAAC,CAAC,eAAF;;AACA,UAAI,CAAC,KAAK,gBAAL,CAAsB,CAAtB,CAAD,KACC,CAAC,CAAC,MAAF,KAAa,CAAC,CAAC,aAAf,IAAiC,CAAC,CAAC,MAAF,YAAoB,WAApB,IAAmC,CAAC,CAAC,MAAF,CAAS,aAAT,KAA2B,CAAC,CAAC,aADlG,CAAJ,EACuH;AACnH,aAAK,WAAL,CAAiB,CAAjB;AACH;AACJ,KANO;;AAOA,SAAA,gBAAA,GAAoB,CAAD,IAAqC;AAC5D,aAAO,CAAC,CAAC,MAAF,YAAoB,WAApB,IAAmC,CAAC,CAAC,MAAF,CAAS,UAAT,GAAsB,CAAC,CAAC,MAAF,CAAS,WAA/B,GAA6C,CAAC,CAAC,OAAzF;AACH,KAFO;;AAGA,SAAA,UAAA,GAAc,CAAD,IAAwC;AACzD,UAAI,CAAC,CAAC,OAAF,KAAS;AAAA;AAAb,QAAmC;AAC/B,eAAK,WAAL,CAAiB,CAAjB;AACH;AACJ,KAJO;AAqBX;;AAhFW,EAAA,aAAa,GAAA;AACjB,QAAI,KAAK,SAAT,EAAoB;AAChB,aAAO,KAAK,SAAL,CAAe,gBAAf,CAAgC,8KAAhC,CAAP;AACH;;AACD,WAAO,SAAP;AACH;;AACD,EAAA,iBAAiB,GAAA;AACb,SAAK,kBAAL,CAAwB,IAAxB;AACH;;AACD,EAAA,oBAAoB,GAAA;AAChB,SAAK,kBAAL,CAAwB,KAAxB;AACH;;AACO,EAAA,kBAAkB,CAAC,IAAD,EAAc;AACpC,UAAM,IAAI,GAAG,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAAb;;AACA,QAAI,IAAJ,EAAU;AACN,UAAI,IAAJ,EAAU;AACN,QAAA,IAAI,CAAC,KAAL,CAAW,WAAX,CAAuB,UAAvB,EAAmC,QAAnC;AACH,OAFD,MAGK;AACD,QAAA,IAAI,CAAC,KAAL,CAAW,cAAX,CAA0B,UAA1B;AACH;AACJ;AACJ;;AACO,EAAA,SAAS,CAAC,QAAD,EAA2B;AACxC,UAAM,UAAU,GAAG,KAAK,aAAL,EAAnB;;AACA,QAAI,UAAU,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAtC,EAAyC;AACrC,YAAM,WAAW,GAAI,QAAQ,KAAK,OAAb,GAAuB,UAAU,CAAC,CAAD,CAAjC,GAAuC,UAAU,CAAC,UAAU,CAAC,MAAX,GAAoB,CAArB,CAAtE;AACA,MAAA,WAAW,CAAC,KAAZ;AACH;AACJ;;AAcO,EAAA,WAAW,CAAC,CAAD,EAAqC;AACpD,UAAM;AAAE,MAAA;AAAF,QAAc,KAAK,KAAzB;;AACA,QAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AAC/B,MAAA,OAAO,CAAC,CAAD,CAAP;AACH;AACJ;;AAgBD,EAAA,MAAM,GAAA;AACF,UAAM,EAAA,GAAA,KAAA,KAAN;AAAA,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA;AAAZ,QAAmB,EAAzB;AAAA,UAA2B,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,UAAA,EAAA,SAAA,CAAA,CAA3B;;AACA,WAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACR,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,MAAA,CAAA,MAAA,CAAA;AAAC,MAAA,GAAG,EAAE,KAAK,UAAX;AAAuB,MAAA,WAAW,EAAE,KAAK,gBAAzC;AAA2D,MAAA,SAAS,EAAE,KAAK;AAA3E,KAAA,EAA2F,KAA3F,CAAf,EACE,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY;AAAC,MAAA,IAAI,EAAC,GAAN;AAAU,MAAA,OAAO,EAAE,KAAK;AAAxB,KAAZ,CADF,EAEG,QAFH,EAGE,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY;AAAC,MAAA,IAAI,EAAC,GAAN;AAAU,MAAA,OAAO,EAAE,KAAK;AAAxB,KAAZ,CAHF,CADQ,EAMR,KAAA,CAAA,aAAA,CAAC,qBAAD,EAAsB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAtB,CANQ,CAAR;AAQH;;AA5EqD;AA6E/C,OAAA,CAAA,KAAA,GAAQ;AACX,MAAI,cAAJ,GAAkB;AAAK,WAAO,cAAP;AAAiD,GAD7D;;AAEX,MAAI,WAAJ,GAAe;AAAK,WAAO,WAAP;AAA2C,GAFpD;;AAGX,MAAI,qBAAJ,GAAyB;AAAK,WAAO,qBAAP;AAA+D;;AAHlF,CAAR","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { KeyCodes, transparentize } from '../../utils';\nimport { dark } from '../../colors';\nexport interface BlockerProps extends StandardProps {\n    /**\n     * Event emitted when the user wants to remove the blocker.\n     */\n    onClose?(e: React.SyntheticEvent<HTMLElement>): void;\n}\nconst FixedContainer = styled.div `\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: fixed;\n  z-index: 10000;\n  overflow-x: hidden;\n  overflow-y: auto;\n`;\nconst FocusKeeper = styled.a `\n  height: 0;\n  width: 0;\n  overflow: hidden;\n`;\nconst StyledModalBackground = styled(FixedContainer) `\n  overflow: hidden;\n  z-index: 9999;\n  background: ${transparentize(dark, 0.4)};\n`;\n/**\n * Defines a generic content blocking overlay element, e.g., for a modal dialog.\n */\nexport class Blocker extends React.Component<BlockerProps> {\n    private modalNode: HTMLDivElement | null;\n    private getFocusables(): NodeListOf<Element> | undefined {\n        if (this.modalNode) {\n            return this.modalNode.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]');\n        }\n        return undefined;\n    }\n    componentDidMount() {\n        this.changeBodyOverflow(true);\n    }\n    componentWillUnmount() {\n        this.changeBodyOverflow(false);\n    }\n    private changeBodyOverflow(open: boolean) {\n        const body = document.querySelector('body');\n        if (body) {\n            if (open) {\n                body.style.setProperty('overflow', 'hidden');\n            }\n            else {\n                body.style.removeProperty('overflow');\n            }\n        }\n    }\n    private keepFocus(position: 'first' | 'last') {\n        const focusables = this.getFocusables();\n        if (focusables && focusables.length > 2) {\n            const nextElement = (position === 'first' ? focusables[1] : focusables[focusables.length - 2]) as HTMLElement;\n            nextElement.focus();\n        }\n    }\n    private keepFirstFocus = () => {\n        this.keepFocus('first');\n    };\n    private keepLastFocus = () => {\n        this.keepFocus('last');\n    };\n    private setElement = (node: HTMLDivElement | null) => {\n        if (node && node !== this.modalNode) {\n            const el = node.querySelector('*[tabindex]') as HTMLElement;\n            (el || node).focus();\n        }\n        this.modalNode = node;\n    };\n    private notifyClose(e: React.SyntheticEvent<HTMLElement>) {\n        const { onClose } = this.props;\n        if (typeof onClose === 'function') {\n            onClose(e);\n        }\n    }\n    private onContainerClick = (e: React.MouseEvent<HTMLElement>) => {\n        e.stopPropagation();\n        if (!this.onScrollbarClick(e) &&\n            (e.target === e.currentTarget || (e.target instanceof HTMLElement && e.target.parentElement === e.currentTarget))) {\n            this.notifyClose(e);\n        }\n    };\n    private onScrollbarClick = (e: React.MouseEvent<HTMLElement>) => {\n        return e.target instanceof HTMLElement && e.target.offsetLeft + e.target.scrollWidth < e.clientX;\n    };\n    private onKeyPress = (e: React.KeyboardEvent<HTMLElement>) => {\n        if (e.keyCode === KeyCodes.escape) {\n            this.notifyClose(e);\n        }\n    };\n    render() {\n        const { children, onClose, ...props } = this.props;\n        return (<>\n        <FixedContainer ref={this.setElement} onMouseDown={this.onContainerClick} onKeyDown={this.onKeyPress} {...props}>\n          <FocusKeeper href=\"#\" onFocus={this.keepLastFocus}/>\n          {children}\n          <FocusKeeper href=\"#\" onFocus={this.keepFirstFocus}/>\n        </FixedContainer>\n        <StyledModalBackground {...props}/>\n      </>);\n    }\n    static inner = {\n        get FixedContainer() { return FixedContainer as typeof FixedContainer; },\n        get FocusKeeper() { return FocusKeeper as typeof FocusKeeper; },\n        get StyledModalBackground() { return StyledModalBackground as typeof StyledModalBackground; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}