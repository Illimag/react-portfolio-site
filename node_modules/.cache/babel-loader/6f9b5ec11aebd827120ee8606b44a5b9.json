{"ast":null,"code":"export var ScreenSizeList = stringLiteralArray(['small', 'medium', 'large', 'xLarge', 'max']); // Helper type functions\n\nfunction stringLiteralArray(val) {\n  return val;\n}","map":{"version":3,"sources":["../../src/common.ts"],"names":[],"mappings":"AAqhBA,OAAO,IAAM,cAAc,GAAG,kBAAkB,CAAC,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,EAA6B,QAA7B,EAAuC,KAAvC,CAAD,CAAzC,C,CASP;;AACA,SAAS,kBAAT,CAA8C,GAA9C,EAA2D;AACzD,SAAO,GAAP;AACD","sourcesContent":["export interface Breakpoints {\n  /**\n   * Tablet: 740px\n   */\n  medium: number;\n  /**\n   * Desktop: 980px\n   */\n  large: number;\n  /**\n   * Desktop HD: 1200px\n   */\n  xLarge: number;\n  /**\n   * Desktop Full HD: 1800px\n   */\n  max: number;\n}\n\nexport interface AccordionCardStyling {\n  /**\n   * Border color in closed state.\n   */\n  borderColor: string;\n  /**\n   * Border color in opened state.\n   */\n  openedBorderColor: string;\n  /**\n   * Border of header block when card is expanded.\n   */\n  openedHeaderBorderColor: string;\n  /**\n   * Background of header block when card is expanded.\n   */\n  openedHeaderBackground: string;\n  /**\n   * Background of header block when card is not expanded.\n   */\n  headerBackground: string;\n  /**\n   * Padding of header block.\n   */\n  headerPadding: string;\n}\n\nexport interface MetroInfoTileStyling {\n  /**\n   * MetroInfoTile text color.\n   */\n  textColor: string;\n  /**\n   * MetroInfoTile background color.\n   */\n  background: string;\n  /**\n   * MetroInfoTile size (will always be square, size x size).\n   */\n  size: string;\n}\n\nexport interface FlyoutStyling {\n  /**\n   * Flyout maximum width.\n   */\n  maxWidth: string;\n  /**\n   * Flyout maximum height.\n   */\n  maxHeight: string;\n  /**\n   * Flyout backgound color.\n   */\n  background: string;\n  /**\n   * Flyout text color.\n   */\n  textColor: string;\n  /**\n   * Flyout text font size.\n   */\n  fontSize: string;\n}\n\nexport interface ButtonThemeSettings {\n  /**\n   * Color of a button background.\n   */\n  background: string;\n  /**\n   * Color of a hoveredbutton background.\n   */\n  hoverBackground: string;\n  /**\n   * Color of a focused button background.\n   */\n  focusBackground: string;\n  /**\n   * Color of a disabled button background.\n   */\n  disabledBackground: string;\n  /**\n   * Color of the text in a button.\n   */\n  text: string;\n  /**\n   * Color of the text in a hovered button.\n   */\n  hoverText: string;\n  /**\n   * Color of the text in a focused button.\n   */\n  focusText: string;\n  /**\n   * Color of the text in a disabled button.\n   */\n  disabledText: string;\n  /**\n   * Border of a button.\n   */\n  border: string;\n  /**\n   * Border of a hovered button.\n   */\n  hoverBorder: string;\n  /**\n   * Border of a focused button.\n   */\n  focusBorder: string;\n  /**\n   * Border of a disabled button.\n   */\n  disabledBorder: string;\n  /**\n   * Line height of a medium (default) button.\n   */\n  lineHeightMedium: string;\n  /**\n   * Line height of a small button.\n   */\n  lineHeightSmall: string;\n}\n\nexport interface ActionButtonThemeSettings {\n  /**\n   * Color of icon background.\n   */\n  iconBackground: string;\n  /**\n   * Color of icon background when hovered.\n   */\n  hoverIconBackground: string;\n  /**\n   * Color of icon background when focused.\n   */\n  focusIconBackground: string;\n}\n\nexport type PreciseThemeColors = {\n  /**\n   * Theme color UI0.\n   */\n  ui0: string;\n  /**\n   * Theme color UI1.\n   */\n  ui1: string;\n  /**\n   * Theme color UI2.\n   */\n  ui2: string;\n  /**\n   * Theme color UI3.\n   */\n  ui3: string;\n  /**\n   * Theme color UI4.\n   */\n  ui4: string;\n  /**\n   * Theme color UI5.\n   */\n  ui5: string;\n  /**\n   * Theme color UI6.\n   */\n  ui6: string;\n  /**\n   * Theme color UI7.\n   */\n  ui7: string;\n  /**\n   * Theme color UI8.\n   */\n  ui8: string;\n  /**\n   * Theme color TEXT0.\n   */\n  text0: string;\n  /**\n   * Theme color TEXT1.\n   */\n  text1: string;\n  /**\n   * Theme color TEXT2.\n   */\n  text2: string;\n  /**\n   * Theme color TEXT3.\n   */\n  text3: string;\n  /**\n   * Theme color TEXT4.\n   */\n  text4: string;\n  /**\n   * Theme color TEXT5.\n   */\n  text5: string;\n  /**\n   * Theme color TEXT6, which is the color of ordinary text.\n   */\n  text6: string;\n  /**\n   * Theme color TEXT7.\n   */\n  text7: string;\n};\n\nexport interface PreciseFullTheme extends PreciseThemeColors {\n  /**\n   * Padding for accordion items header.\n   */\n  accordionPadding: string;\n  /**\n   * Padding for accordion items content.\n   */\n  accordionContentPadding: string;\n  /**\n   * Accordion bottom border definition.\n   */\n  accordionLine: string;\n  /**\n   * Colors of the primary button.\n   */\n  buttonPrimary: ButtonThemeSettings;\n  /**\n   * Colors of the secondary button.\n   */\n  buttonSecondary: ButtonThemeSettings;\n  /**\n   * Colors of the warning action button.\n   */\n  actionButtonWarning: ActionButtonThemeSettings;\n  /**\n   * Position of the icon when place inside a button.\n   */\n  buttonIconPosition: 'left' | 'right';\n  /**\n   * Primary color to use.\n   */\n  primary: string;\n  /**\n   * Secondary color to use.\n   */\n  secondary: string;\n  /**\n   * Color of disabled text.\n   */\n  textDisabled: string;\n  /**\n   * Color of a disabled input background.\n   */\n  inputDisabled: string;\n  /**\n   * Color of an input error.\n   */\n  inputError: string;\n  /**\n   * Colors to be used cyclically.\n   */\n  colorCycle: Array<string>;\n  /**\n   * General font family to use.\n   */\n  fontFamily: string;\n  /**\n   * Padding for headings h1-h6.\n   */\n  headingsPadding: string;\n  /**\n   * Table border.\n   */\n  tableBorder: string;\n  /**\n   * Layout for the table.\n   */\n  tableLayout: string;\n  /**\n   * Padding value for table header row.\n   */\n  tableHeadPadding: string;\n  /**\n   * Background color for ZeissletCard tags.\n   */\n  tagBackground: string;\n  /**\n   * Font color for ZeissletCard tags.\n   */\n  tagColor: string;\n  /**\n   * The color of the badge.\n   */\n  badgeColor: string;\n  /**\n   * The background of the badge.\n   */\n  badgeBackground: string;\n  /**\n   * The background of the Toggle Head.\n   */\n  toggleHeadBackground: string;\n  /**\n   * The background of the active Toggle Head.\n   */\n  toggleHeadActiveBackground: string;\n  /**\n   * Breakpoint values for the responsive design.\n   */\n  breakpoints: Breakpoints;\n  /**\n   * Color of not specified notification,\n   */\n  notificationColorNone: string;\n  /**\n   * Color of success notification,\n   */\n  notificationColorSuccess: string;\n  /**\n   * Color of info notification,\n   */\n  notificationColorInfo: string;\n  /**\n   * Color of warning notification,\n   */\n  notificationColorWarning: string;\n  /**\n   * Color of error notification,\n   */\n  notificationColorError: string;\n  /**\n   * Notification padding.\n   */\n  notificationPadding: string;\n  /**\n   * Notification box shadow.\n   */\n  notificationBoxShadow: string;\n  /**\n   * Notification border width.\n   */\n  notificationBorderWidth: string;\n  /**\n   * Notification title font size.\n   */\n  notificationTitleFontSize: string;\n  /**\n   * Notification title line height.\n   */\n  notificationTitleLineHeight: string;\n  /**\n   * Notification text font size.\n   */\n  notificationTextFontSize: string;\n  /**\n   * Notification text line height.\n   */\n  notificationTextLineHeight: string;\n  /**\n   * Notification icon margin right.\n   */\n  notificationIconMarginRight: string;\n  /**\n   * Specific Flyout theme settings.\n   */\n  flyout: FlyoutStyling;\n  /**\n   * Specific MetroInfoTile theme settings.\n   */\n  metroInfoTile: MetroInfoTileStyling;\n  /**\n   * Specific AccordionCard theme settings.\n   */\n  accordionCard: AccordionCardStyling;\n  /**\n   * Color of highlighted text\n   */\n  highlightColor: string;\n}\n\nexport type PreciseTheme = { [T in keyof PreciseFullTheme]?: Partial<PreciseFullTheme[T]> };\n\nexport interface StandardProps {\n  /**\n   * Places the given class on the element.\n   */\n  className?: string;\n  /**\n   * An optional theme which can be passed down to a component.\n   */\n  theme?: PreciseTheme;\n  /**\n   * The style prop for explicitly overriding some CSS styles.\n   */\n  style?: React.CSSProperties;\n}\n\nexport interface InputChangeEvent<T> {\n  /**\n   * The current value of the input field.\n   */\n  value: T;\n  /**\n   * Original change event\n   */\n  originalEvent?: React.ChangeEvent<any>;\n}\n\nexport interface InputProps<T> extends StandardProps {\n  /**\n   * Sets the component as disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The current value of the input, leading to a controlled field.\n   */\n  value?: T;\n  /**\n   * The initial value of the input.\n   */\n  defaultValue?: T;\n  /**\n   * Event emitted once the value changes due to user input.\n   */\n  onChange?(e: InputChangeEvent<T>): void;\n  /**\n   * Event triggered once the input gets focused.\n   */\n  onFocus?(): void;\n  /**\n   * Event triggered once the input loses the focus.\n   */\n  onBlur?(): void;\n  /**\n   * Event triggered when a key was pressed.\n   */\n  onInput?(e?: InputChangeEvent<string>): void;\n  /**\n   * Optional name if to be used within a form context.\n   */\n  name?: string;\n  /**\n   * Displays the error message below the input.\n   */\n  error?: React.ReactChild;\n  /**\n   * Displays the info message below the input. Only applies if\n   * no error is to be shown.\n   */\n  info?: React.ReactChild;\n  /**\n   * Sets if the input should immediately receive focus.\n   */\n  autoFocus?: boolean;\n  /**\n   * Sets the autocomplete mode of the input.\n   */\n  autoComplete?: 'on' | 'off';\n  /**\n   * Sets type on the input field.\n   */\n  type?: string;\n  /**\n   * Sets maximum lenngth of input field.\n   */\n  maxLength?: number;\n}\n\nexport interface LabeledInputProps<T> extends InputProps<T> {\n  /**\n   * Sets the text of label.\n   * @default ''\n   */\n  label?: React.ReactChild;\n  /**\n   * A hint to the user of what can be entered in the control.\n   * The placeholder text must not contain carriage returns or line-feeds.\n   * @default ''\n   */\n  placeholder?: string;\n}\n\nexport interface TextInputProps extends LabeledInputProps<string> {\n  /**\n   * Removes the border of the text field.\n   * @default false\n   */\n  borderless?: boolean;\n  /**\n   * Sets the optional prefix of the input to show (e.g., \"http://\").\n   * @default null\n   */\n  prefix?: React.ReactChild;\n  /**\n   * Sets the optional suffix of the input to show (e.g., \"EUR\").\n   * @default null\n   */\n  suffix?: React.ReactChild;\n  /**\n   * Sets an optional default icon (if any) to use when no error or\n   * clearable is given.\n   */\n  icon?: React.ReactChild;\n}\n\nexport interface RefProps {\n  /**\n   * Callback to be used to get the referenced DOM node.\n   * @param node The node that is used.\n   */\n  innerRef?(node: HTMLElement | null): void;\n}\n\nexport const ScreenSizeList = stringLiteralArray(['small', 'medium', 'large', 'xLarge', 'max']);\nexport type ScreenSize = typeof ScreenSizeList[number];\n\n// Helper type operators\nexport type KeyofBase = keyof any;\nexport type Diff<T extends KeyofBase, U extends KeyofBase> = ({ [P in T]: P } &\n  { [P in U]: never } & { [x: string]: never })[T];\nexport type Omit<T, K extends keyof T> = Pick<T, Diff<keyof T, K>>;\nexport type Component<P> = React.ComponentClass<P> | React.StatelessComponent<P>;\n// Helper type functions\nfunction stringLiteralArray<T extends string>(val: Array<T>) {\n  return val;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}