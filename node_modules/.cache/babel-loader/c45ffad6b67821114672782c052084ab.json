{"ast":null,"code":"import _taggedTemplateLiteral from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n      animation: \", \" \", \"s infinite linear \", \";\\n\\n      \", \";\\n\\n      height: \", \";\\n\\n      \", \";\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  background-color: \", \";\\n  background-image: linear-gradient(90deg, \", \", \", \", \", \");\\n  background-size: 60px 100%;\\n  background-repeat: no-repeat;\\n  display: inline-block;\\n  line-height: 1;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  from {\\n    background-position: -200px;\\n  }\\n  to {\\n    background-position: 130%;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport styled, { keyframes, themed } from '../../utils/styled';\nvar defaultBaseColor = themed(function (_ref) {\n  var theme = _ref.theme;\n  return theme.ui3;\n});\nvar defaultHighlightColor = themed(function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.ui2;\n});\nvar shine = keyframes(_templateObject());\nvar Span = styled.span(_templateObject2(), defaultBaseColor, defaultBaseColor, defaultHighlightColor, defaultBaseColor);\n\nvar randomInt = function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n/**\n * The `Sekeleton` component displays a low fidelity UI into which information will be gradually loaded.\n */\n\n\nexport var Skeleton = function Skeleton(props) {\n  var _props$count = props.count,\n      count = _props$count === void 0 ? 1 : _props$count,\n      _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 1.2 : _props$duration,\n      _props$width = props.width,\n      width = _props$width === void 0 ? '100%' : _props$width,\n      _props$height = props.height,\n      height = _props$height === void 0 ? '100%' : _props$height,\n      isCircle = props.isCircle,\n      isText = props.isText,\n      _props$isPulsing = props.isPulsing,\n      isPulsing = _props$isPulsing === void 0 ? true : _props$isPulsing;\n  var skeletons = [];\n\n  for (var i = 0; i < count; i++) {\n    var StyledSpan = styled(Span)(_templateObject3(), shine, duration, !isPulsing ? 'paused' : 'running', count > 1 && isText ? {\n      width: \"\".concat(randomInt(80, 100), \"%\")\n    } : {\n      width: typeof width === 'number' ? \"\".concat(width, \"px\") : width\n    }, typeof height === 'number' ? \"\".concat(height, \"px\") : height, height && width && isCircle && {\n      borderRadius: '50%'\n    });\n    skeletons.push(React.createElement(StyledSpan, Object.assign({\n      key: i\n    }, props), \"\\u200C\"));\n  }\n\n  return React.createElement(React.Fragment, null, skeletons);\n};\nSkeleton.displayName = 'Skeleton';","map":{"version":3,"sources":["../../../../src/components/Skeleton/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,SAAjB,EAAiC,MAAjC,QAA+C,oBAA/C;AAqCA,IAAM,gBAAgB,GAAG,MAAM,CAAC;AAAA,MAAG,KAAH,QAAG,KAAH;AAAA,SAAe,KAAK,CAAC,GAArB;AAAA,CAAD,CAA/B;AACA,IAAM,qBAAqB,GAAG,MAAM,CAAC;AAAA,MAAG,KAAH,SAAG,KAAH;AAAA,SAAe,KAAK,CAAC,GAArB;AAAA,CAAD,CAApC;AACA,IAAM,KAAK,GAAG,SAAH,mBAAX;AAQA,IAAM,IAAI,GAAG,MAAM,CAAC,IAAV,qBACY,gBADZ,EAEmC,gBAFnC,EAEwD,qBAFxD,EAEkF,gBAFlF,CAAV;;AAQA,IAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,GAAD,EAAc,GAAd;AAAA,SAA8B,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,MAAiB,GAAG,GAAG,GAAN,GAAY,CAA7B,CAAX,IAA8C,GAA5E;AAAA,CAAlB;AACA;;;;;AAGA,OAAO,IAAM,QAAQ,GAA4B,SAApC,QAAoC,CAAA,KAAK,EAAG;AAAA,qBACsD,KADtD,CAC7C,KAD6C;AAAA,MAC7C,KAD6C,6BACrC,CADqC;AAAA,wBACsD,KADtD,CAClC,QADkC;AAAA,MAClC,QADkC,gCACvB,GADuB;AAAA,qBACsD,KADtD,CAClB,KADkB;AAAA,MAClB,KADkB,6BACV,MADU;AAAA,sBACsD,KADtD,CACF,MADE;AAAA,MACF,MADE,8BACO,MADP;AAAA,MACe,QADf,GACsD,KADtD,CACe,QADf;AAAA,MACyB,MADzB,GACsD,KADtD,CACyB,MADzB;AAAA,yBACsD,KADtD,CACiC,SADjC;AAAA,MACiC,SADjC,iCAC6C,IAD7C;AAErD,MAAM,SAAS,GAAG,EAAlB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC5B,QAAM,UAAU,GAAG,MAAM,CAAC,IAAD,CAAT,qBACL,KADK,EACI,QADJ,EACiC,CAAC,SAAD,GAAa,QAAb,GAAwB,SADzD,EAGhB,KAAK,GAAG,CAAR,IAAa,MAAb,GACM;AAAE,MAAA,KAAK,YAAK,SAAS,CAAC,EAAD,EAAK,GAAL,CAAd;AAAP,KADN,GAEM;AAAE,MAAA,KAAK,EAAE,OAAO,KAAP,KAAiB,QAAjB,aAA+B,KAA/B,UAA2C;AAApD,KALU,EAOR,OAAO,MAAP,KAAkB,QAAlB,aAAgC,MAAhC,UAA6C,MAPrC,EAShB,MAAM,IACF,KADJ,IAEI,QAFJ,IAEgB;AACZ,MAAA,YAAY,EAAE;AADF,KAXA,CAAhB;AAeA,IAAA,SAAS,CAAC,IAAV,CAAe,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA;AAAC,MAAA,GAAG,EAAE;AAAN,KAAA,EAAa,KAAb,CAAX,EAA6B,QAA7B,CAAf;AAGH;;AACD,SAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,SAAH,CAAP;AACH,CAxBM;AAyBP,QAAQ,CAAC,WAAT,GAAuB,UAAvB","sourcesContent":["import * as React from 'react';\nimport styled, { keyframes, css, themed } from '../../utils/styled';\nimport { StandardProps } from '../../common';\nexport interface SkeletonProps extends StandardProps {\n    /**\n     * The duration of the shine animation.\n     * @default 1.2\n     */\n    duration?: number;\n    /**\n     * The width of the skeleton, it could be a number (transformed into px) or a string (e.g.: '75%')\n     * @default '100%'\n     */\n    width?: number | string;\n    /**\n     * The height of the skeleton, it could be a number (transformed into px) or a string (e.g.: '20px')\n     * @default '100%'\n     */\n    height?: number | string;\n    /**\n     * Determines if the skeleton should be a circle (e.g.: avatar). The final shape will depend on the `width` and `height` values.\n     */\n    isCircle?: boolean;\n    /**\n     * The number of skeletons you want to display.\n     * @default 1\n     */\n    count?: number;\n    /**\n     * Randomly simulates different text line lengths. This will work only when `count` is greater that 1.\n     */\n    isText?: boolean;\n    /**\n     * Determines whether the pulsing animation is active or not. Could be use to stop the animation in case your component has some kind of error or just to have a more simple `Skeleton` component.\n     * @default true\n     */\n    isPulsing?: boolean;\n}\nconst defaultBaseColor = themed(({ theme }) => theme.ui3);\nconst defaultHighlightColor = themed(({ theme }) => theme.ui2);\nconst shine = keyframes `\n  from {\n    background-position: -200px;\n  }\n  to {\n    background-position: 130%;\n  }\n`;\nconst Span = styled.span `\n  background-color: ${defaultBaseColor};\n  background-image: linear-gradient(90deg, ${defaultBaseColor}, ${defaultHighlightColor}, ${defaultBaseColor});\n  background-size: 60px 100%;\n  background-repeat: no-repeat;\n  display: inline-block;\n  line-height: 1;\n`;\nconst randomInt = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\n/**\n * The `Sekeleton` component displays a low fidelity UI into which information will be gradually loaded.\n */\nexport const Skeleton: React.FC<SkeletonProps> = props => {\n    const { count = 1, duration = 1.2, width = '100%', height = '100%', isCircle, isText, isPulsing = true } = props;\n    const skeletons = [];\n    for (let i = 0; i < count; i++) {\n        const StyledSpan = styled(Span) `\n      animation: ${shine} ${duration}s infinite linear ${!isPulsing ? 'paused' : 'running'};\n\n      ${count > 1 && isText\n            ? { width: `${randomInt(80, 100)}%` }\n            : { width: typeof width === 'number' ? `${width}px` : width }};\n\n      height: ${typeof height === 'number' ? `${height}px` : height};\n\n      ${height &&\n            width &&\n            isCircle && {\n            borderRadius: '50%',\n        }};\n    `;\n        skeletons.push(<StyledSpan key={i} {...props}>\n        &zwnj;\n      </StyledSpan>);\n    }\n    return <>{skeletons}</>;\n};\nSkeleton.displayName = 'Skeleton';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}