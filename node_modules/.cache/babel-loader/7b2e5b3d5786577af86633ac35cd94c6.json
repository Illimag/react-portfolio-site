{"ast":null,"code":"import _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { PaginationBar } from '../PaginationBar';\nimport { PaginationLayout } from './PaginationLayout.part';\n/**\n * The Pagination component allows generic pagination of arbitrary components.\n */\n\nexport var Pagination = /*#__PURE__*/function (_React$Component) {\n  _inherits(Pagination, _React$Component);\n\n  var _super = _createSuper(Pagination);\n\n  function Pagination(props) {\n    var _this;\n\n    _classCallCheck(this, Pagination);\n\n    _this = _super.call(this, props);\n\n    _this.handlePageChange = function (_ref) {\n      var page = _ref.page;\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          value = _this$props.value;\n\n      if (value === undefined) {\n        _this.setState({\n          current: page\n        });\n      }\n\n      if (typeof onChange === 'function') {\n        onChange({\n          value: page\n        });\n      }\n    };\n\n    _this.handleSizeChange = function (_ref2) {\n      var size = _ref2.size;\n      var children = _this.props.children;\n      var current = _this.state.current;\n      var total = React.Children.count(children);\n      var maxPageCount = Math.max(Math.ceil(total / size) - 1, 0);\n\n      _this.setState({\n        size: size,\n        current: Math.min(current, maxPageCount)\n      });\n    };\n\n    var value = props.value,\n        defaultValue = props.defaultValue,\n        _props$size = props.size,\n        size = _props$size === void 0 ? 20 : _props$size;\n    _this.state = {\n      current: value || defaultValue || 0,\n      size: Array.isArray(size) ? size[0] : size\n    };\n    return _this;\n  }\n\n  _createClass(Pagination, [{\n    key: \"getDim\",\n    value: function getDim(count) {\n      var _this$state = this.state,\n          current = _this$state.current,\n          sizeState = _this$state.size;\n      var min = current * sizeState;\n\n      if (min < count) {\n        return {\n          current: current,\n          min: min,\n          max: min + sizeState,\n          sizeState: sizeState\n        };\n      } else {\n        var previous = ~~((count - 1) / sizeState);\n        return {\n          current: previous,\n          min: previous * sizeState,\n          max: (previous + 1) * sizeState,\n          sizeState: sizeState\n        };\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          host = _a.host,\n          sizeProp = _a.size,\n          itemsInfo = _a.itemsInfo,\n          pagesInfo = _a.pagesInfo,\n          label = _a.label,\n          render = _a.render,\n          props = __rest(_a, [\"children\", \"host\", \"size\", \"itemsInfo\", \"pagesInfo\", \"label\", \"render\"]);\n\n      var count = React.Children.count(children);\n\n      var _this$getDim = this.getDim(count),\n          current = _this$getDim.current,\n          min = _this$getDim.min,\n          max = _this$getDim.max,\n          sizeState = _this$getDim.sizeState;\n\n      var content = count < sizeState ? children : React.Children.map(children, function (child, index) {\n        if (index >= min && index < max) {\n          return child;\n        }\n\n        return undefined;\n      });\n\n      if (typeof render === 'function') {\n        return render({\n          current: current,\n          min: min,\n          max: max,\n          count: count,\n          content: content,\n          sizeChanged: this.handleSizeChange,\n          pageChanged: this.handlePageChange\n        });\n      }\n\n      return React.createElement(PaginationLayout, Object.assign({}, props, {\n        host: host,\n        content: content,\n        controls: React.createElement(PaginationBar, {\n          selectedPage: current,\n          itemsInfo: itemsInfo,\n          itemsPerPageLabel: label,\n          pagesInfo: pagesInfo,\n          size: sizeState,\n          items: count,\n          onSizeChanged: this.handleSizeChange,\n          onPageChanged: this.handlePageChange,\n          availableSizes: Array.isArray(sizeProp) ? sizeProp : []\n        })\n      }));\n    }\n  }]);\n\n  return Pagination;\n}(React.Component);\nPagination.inner = {\n  get PaginationLayout() {\n    return PaginationLayout;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Pagination/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StandardProps } from '../../common';\nimport { PaginationBar, PaginationBarSizeChangedEvent, PaginationBarPageChangedEvent } from '../PaginationBar';\nimport { PaginationLayout } from './PaginationLayout.part';\nexport interface PaginationChangeEvent {\n    /**\n     * The current page index.\n     */\n    value: number;\n}\nexport interface PaginationState {\n    current: number;\n    size: number;\n}\nexport interface PaginationRenderEvent {\n    /**\n     * The current page index.\n     */\n    current: number;\n    /**\n     * The minimum index for the entry to be in the current page.\n     */\n    min: number;\n    /**\n     * The maximum index for the entry to be in the current page.\n     */\n    max: number;\n    /**\n     * The total number of entries.\n     */\n    count: number;\n    /**\n     * The rendered entries.\n     */\n    content: React.ReactNode;\n    /**\n     * Callback for emitting an items per page change.\n     */\n    sizeChanged(e: PaginationBarSizeChangedEvent): void;\n    /**\n     * Callback for emitting a change of the current page index.\n     */\n    pageChanged(e: PaginationBarPageChangedEvent): void;\n}\nexport interface PaginationProps extends StandardProps {\n    /**\n     * The initial, i.e., default, page index used in managed mode.\n     */\n    defaultValue?: number;\n    /**\n     * The current page index leading to controlled mode.\n     */\n    value?: number;\n    /**\n     * The maximum number of entries per page. By default set to 20.\n     * @default 20\n     */\n    size?: number | Array<number>;\n    /**\n     * The optional host element to be used.\n     */\n    host?: string | React.ComponentClass | React.StatelessComponent;\n    /**\n     * Event fired when the selected page changes.\n     */\n    onChange?(e: PaginationChangeEvent): void;\n    /**\n     * The optional footer info label override, e.g., for localization.\n     */\n    label?: string;\n    /**\n     * Optional function to compute the items info label.\n     * @param start The inclusive start number of entries.\n     * @param end The inclusive end number of entries.\n     * @param total The total number of pages.\n     */\n    itemsInfo?(start: number, end: number, total: number): React.ReactChild;\n    /**\n     * Optional function to compute the pages info label.\n     * @param start The inclusive start number of entries.\n     * @param end The inclusive end number of entries.\n     */\n    pagesInfo?(start: number, end: number): React.ReactChild;\n    /**\n     * Callback to override the rendering of the pagination.\n     */\n    render?(e: PaginationRenderEvent): React.ReactNode;\n    /**\n     * The content of the component. Will be cropped if pagination applies.\n     */\n    children?: React.ReactNode;\n}\n/**\n * The Pagination component allows generic pagination of arbitrary components.\n */\nexport class Pagination extends React.Component<PaginationProps, PaginationState> {\n    constructor(props: PaginationProps) {\n        super(props);\n        const { value, defaultValue, size = 20 } = props;\n        this.state = {\n            current: value || defaultValue || 0,\n            size: Array.isArray(size) ? size[0] : size,\n        };\n    }\n    private handlePageChange = ({ page }: PaginationBarPageChangedEvent) => {\n        const { onChange, value } = this.props;\n        if (value === undefined) {\n            this.setState({\n                current: page,\n            });\n        }\n        if (typeof onChange === 'function') {\n            onChange({\n                value: page,\n            });\n        }\n    };\n    private handleSizeChange = ({ size }: PaginationBarSizeChangedEvent) => {\n        const { children } = this.props;\n        const { current } = this.state;\n        const total = React.Children.count(children);\n        const maxPageCount = Math.max(Math.ceil(total / size) - 1, 0);\n        this.setState({\n            size,\n            current: Math.min(current, maxPageCount),\n        });\n    };\n    private getDim(count: number) {\n        const { current, size: sizeState } = this.state;\n        const min = current * sizeState;\n        if (min < count) {\n            return {\n                current,\n                min,\n                max: min + sizeState,\n                sizeState,\n            };\n        }\n        else {\n            const previous = ~~((count - 1) / sizeState);\n            return {\n                current: previous,\n                min: previous * sizeState,\n                max: (previous + 1) * sizeState,\n                sizeState,\n            };\n        }\n    }\n    render() {\n        const { children, host, size: sizeProp, itemsInfo, pagesInfo, label, render, ...props } = this.props;\n        const count = React.Children.count(children);\n        const { current, min, max, sizeState } = this.getDim(count);\n        const content = count < sizeState\n            ? children\n            : React.Children.map(children, (child, index) => {\n                if (index >= min && index < max) {\n                    return child;\n                }\n                return undefined;\n            });\n        if (typeof render === 'function') {\n            return render({\n                current,\n                min,\n                max,\n                count,\n                content,\n                sizeChanged: this.handleSizeChange,\n                pageChanged: this.handlePageChange,\n            });\n        }\n        return (<PaginationLayout {...props} host={host} content={content} controls={<PaginationBar selectedPage={current} itemsInfo={itemsInfo} itemsPerPageLabel={label} pagesInfo={pagesInfo} size={sizeState} items={count} onSizeChanged={this.handleSizeChange} onPageChanged={this.handlePageChange} availableSizes={Array.isArray(sizeProp) ? sizeProp : []}/>}/>);\n    }\n    static inner = {\n        get PaginationLayout() { return PaginationLayout as typeof PaginationLayout; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}