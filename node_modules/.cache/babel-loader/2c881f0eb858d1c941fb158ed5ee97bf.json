{"ast":null,"code":"import * as React from 'react';\nimport { withFormContext } from '../../hoc/withFormContext';\nimport { RadioButtonGroupContext } from '../../contexts/RadioButtonGroupContext';\n\nclass RadioButtonGroupInt extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.buttons = [];\n    this.ctx = this.createContext();\n\n    this.getNextValue = groupItemName => {\n      const {\n        multiple\n      } = this.props;\n      const {\n        value\n      } = this.state;\n\n      if (value && Array.isArray(value) && groupItemName) {\n        if (value.indexOf(groupItemName) !== -1) {\n          return value.filter(f => f !== groupItemName);\n        }\n\n        return [...value, groupItemName];\n      }\n\n      return multiple && groupItemName ? [groupItemName] : groupItemName;\n    };\n\n    const controlled = props.value !== undefined;\n    const {\n      value: propValue,\n      defaultValue\n    } = props;\n    const value = controlled ? propValue : defaultValue;\n    this.state = {\n      controlled,\n      value\n    };\n  }\n\n  setState(state) {\n    const value = state.value;\n\n    if (value) {\n      for (const button of this.buttons) {\n        const selected = Array.isArray(value) && button.name ? value.indexOf(button.name) !== -1 : button.name === value;\n        button.setValue(selected);\n      }\n\n      super.setState(Object.assign({}, state, {\n        value\n      }));\n    }\n\n    super.setState(state);\n  }\n\n  componentDidMount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.subscribe(this);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled && form) {\n      form.unsubscribe(this);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps({\n    value\n  }) {\n    const {\n      controlled\n    } = this.state;\n\n    if (controlled) {\n      this.setState({\n        value\n      });\n    }\n  }\n\n  createContext() {\n    return {\n      select: rb => {\n        const {\n          onChange,\n          form,\n          name = ''\n        } = this.props;\n        const {\n          controlled\n        } = this.state;\n        const value = this.getNextValue(rb.name);\n\n        if (!controlled) {\n          if (form) {\n            form.change({\n              name,\n              value\n            });\n          } else if (value) {\n            this.setState({\n              value\n            });\n          } else {\n            for (const button of this.buttons) {\n              button.setValue(button === rb);\n            }\n\n            super.setState({\n              value: undefined\n            });\n          }\n        }\n\n        if (typeof onChange === 'function' && value) {\n          onChange({\n            value\n          });\n        }\n      },\n      subscribe: rb => {\n        const {\n          value\n        } = this.state;\n        this.buttons.push(rb);\n\n        if (value !== undefined) {\n          const selected = Array.isArray(value) && rb.name ? value.indexOf(rb.name) !== -1 : rb.name === value;\n          rb.setValue(selected);\n        }\n      },\n      unsubscribe: rb => {\n        const index = this.buttons.indexOf(rb);\n        index >= 0 && this.buttons.splice(index, 1);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(RadioButtonGroupContext.Provider, {\n      value: this.ctx\n    }, this.props.children);\n  }\n\n}\n/**\n * The radio button group manages a group of radio buttons.\n */\n\n\nexport const RadioButtonGroup = withFormContext(RadioButtonGroupInt);\nRadioButtonGroup.displayName = 'RadioButtonGroup';","map":{"version":3,"sources":["../../../../src/components/RadioButtonGroup/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { InputProps, InputChangeEvent } from '../../common';\nimport { FormContextProps, withFormContext } from '../../hoc/withFormContext';\nimport { RadioButtonGroupContext, RadioButtonGroupContextType, RadioButtonGroupNotifier, } from '../../contexts/RadioButtonGroupContext';\nexport type RadioButtonGroupChangeEvent = InputChangeEvent<string>;\nexport interface RadioButtonGroupProps extends InputProps<string | Array<string>> {\n    /**\n     * Sets the group's children.\n     */\n    children?: React.ReactNode;\n    multiple?: boolean;\n}\nexport type StateValue = Array<string> | string | undefined;\nexport interface RadioButtonGroupState {\n    controlled: boolean;\n    value: StateValue;\n}\nclass RadioButtonGroupInt extends React.PureComponent<RadioButtonGroupProps & FormContextProps, RadioButtonGroupState> {\n    private readonly buttons: Array<RadioButtonGroupNotifier> = [];\n    private readonly ctx: RadioButtonGroupContextType = this.createContext();\n    constructor(props: RadioButtonGroupProps) {\n        super(props);\n        const controlled = props.value !== undefined;\n        const { value: propValue, defaultValue } = props;\n        const value = controlled ? propValue : defaultValue;\n        this.state = {\n            controlled,\n            value,\n        };\n    }\n    setState<K extends keyof RadioButtonGroupState>(state: Pick<RadioButtonGroupState, K>) {\n        const value = (state as Pick<RadioButtonGroupState, 'value'>).value;\n        if (value) {\n            for (const button of this.buttons) {\n                const selected = Array.isArray(value) && button.name ? value.indexOf(button.name) !== -1 : button.name === value;\n                button.setValue(selected);\n            }\n            super.setState({ ...state, value });\n        }\n        super.setState(state);\n    }\n    componentDidMount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.subscribe(this);\n        }\n    }\n    componentWillUnmount() {\n        const { form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled && form) {\n            form.unsubscribe(this);\n        }\n    }\n    UNSAFE_componentWillReceiveProps({ value }: RadioButtonGroupProps) {\n        const { controlled } = this.state;\n        if (controlled) {\n            this.setState({\n                value,\n            });\n        }\n    }\n    private getNextValue = (groupItemName?: string) => {\n        const { multiple } = this.props;\n        const { value } = this.state;\n        if (value && Array.isArray(value) && groupItemName) {\n            if (value.indexOf(groupItemName) !== -1) {\n                return value.filter(f => f !== groupItemName);\n            }\n            return [...value, groupItemName];\n        }\n        return multiple && groupItemName ? [groupItemName] : groupItemName;\n    };\n    private createContext(): RadioButtonGroupContextType {\n        return {\n            select: (rb: RadioButtonGroupNotifier) => {\n                const { onChange, form, name = '' } = this.props;\n                const { controlled } = this.state;\n                const value = this.getNextValue(rb.name);\n                if (!controlled) {\n                    if (form) {\n                        form.change({\n                            name,\n                            value,\n                        });\n                    }\n                    else if (value) {\n                        this.setState({\n                            value,\n                        });\n                    }\n                    else {\n                        for (const button of this.buttons) {\n                            button.setValue(button === rb);\n                        }\n                        super.setState({\n                            value: undefined,\n                        });\n                    }\n                }\n                if (typeof onChange === 'function' && value) {\n                    onChange({\n                        value,\n                    });\n                }\n            },\n            subscribe: (rb: RadioButtonGroupNotifier) => {\n                const { value } = this.state;\n                this.buttons.push(rb);\n                if (value !== undefined) {\n                    const selected = Array.isArray(value) && rb.name ? value.indexOf(rb.name) !== -1 : rb.name === value;\n                    rb.setValue(selected);\n                }\n            },\n            unsubscribe: (rb: RadioButtonGroupNotifier) => {\n                const index = this.buttons.indexOf(rb);\n                index >= 0 && this.buttons.splice(index, 1);\n            },\n        };\n    }\n    render() {\n        return <RadioButtonGroupContext.Provider value={this.ctx}>{this.props.children}</RadioButtonGroupContext.Provider>;\n    }\n}\n/**\n * The radio button group manages a group of radio buttons.\n */\nexport const RadioButtonGroup = withFormContext(RadioButtonGroupInt);\nRadioButtonGroup.displayName = 'RadioButtonGroup';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}