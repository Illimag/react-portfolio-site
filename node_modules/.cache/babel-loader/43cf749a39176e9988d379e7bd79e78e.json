{"ast":null,"code":"import _taggedTemplateLiteral from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  \", \"\\n\\n  display: inline-block;\\n  vertical-align: middle;\\n  margin-left: \", \";\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  color: \", \";\\n  display: inline-block;\\n  vertical-align: middle;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      outline: none;\\n      text-decoration: none;\\n      color: \", \";\\n      display: \", \";\\n      font-size: 0;\\n      vertical-align: middle;\\n      cursor: \", \";\\n\\n      &:hover,\\n      &:hover * {\\n        color: \", \";\\n      }\\n\\n      &:focus,\\n      &:focus * {\\n        color: \", \";\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { Anchor } from '../Anchor';\nimport { Icon } from '../Icon';\nimport { ocean, midnight } from '../../colors';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nvar StyledAnchor = styled(Anchor)(themed(function (_ref) {\n  var display = _ref.display,\n      disabled = _ref.disabled,\n      _ref$theme = _ref.theme,\n      ui0 = _ref$theme.ui0,\n      ui4 = _ref$theme.ui4;\n  return css(_templateObject(), disabled ? ui4 : ui0, display, disabled ? 'default' : 'pointer', disabled ? ui4 : ocean, disabled ? ui4 : midnight);\n}));\nvar StyledIcon = styled(Icon)(_templateObject2(), themed(function (_ref2) {\n  var disabled = _ref2.disabled,\n      iconOnly = _ref2.iconOnly,\n      _ref2$theme = _ref2.theme,\n      ui0 = _ref2$theme.ui0,\n      ui4 = _ref2$theme.ui4,\n      ui5 = _ref2$theme.ui5;\n  return disabled ? ui4 : iconOnly ? ui5 : ui0;\n}));\nvar AnchorText = styled.span(_templateObject3(), getFontStyle({\n  size: 'medium'\n}), distance.xsmall);\n/**\n * The icon link component shows an icon with optional text.\n */\n\nexport var IconLink = Object.assign(function (_a) {\n  var icon = _a.icon,\n      theme = _a.theme,\n      disabled = _a.disabled,\n      children = _a.children,\n      block = _a.block,\n      other = __rest(_a, [\"icon\", \"theme\", \"disabled\", \"children\", \"block\"]);\n\n  return React.createElement(StyledAnchor, Object.assign({\n    disabled: disabled,\n    display: block ? 'block' : 'inline-block'\n  }, other), icon && React.createElement(StyledIcon, {\n    disabled: disabled,\n    iconOnly: children ? false : true,\n    name: icon,\n    theme: theme,\n    size: '22px'\n  }), children && React.createElement(AnchorText, null, children));\n}, {\n  inner: {\n    get StyledAnchor() {\n      return StyledAnchor;\n    },\n\n    get StyledIcon() {\n      return StyledIcon;\n    },\n\n    get AnchorText() {\n      return AnchorText;\n    }\n\n  }\n});\nIconLink.displayName = 'IconLink';","map":{"version":3,"sources":["../../../../src/components/IconLink/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { Anchor, AnchorProps } from '../Anchor';\nimport { IconName, Icon, IconProps } from '../Icon';\nimport { ocean, midnight } from '../../colors';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nexport interface IconLinkProps extends AnchorProps {\n    /**\n     * Sets the icon link as a block.\n     */\n    block?: boolean;\n    /**\n     * The name of the icon to display.\n     */\n    icon: IconName;\n}\nexport interface StyledAnchorProps {\n    disabled?: boolean;\n    display?: 'block' | 'inline-block';\n}\nexport interface StyledIconProps {\n    disabled?: boolean;\n    iconOnly?: boolean;\n}\nconst StyledAnchor = styled(Anchor)<StyledAnchorProps>(themed(({ display, disabled, theme: { ui0, ui4 } }) => css `\n      outline: none;\n      text-decoration: none;\n      color: ${disabled ? ui4 : ui0};\n      display: ${display};\n      font-size: 0;\n      vertical-align: middle;\n      cursor: ${disabled ? 'default' : 'pointer'};\n\n      &:hover,\n      &:hover * {\n        color: ${disabled ? ui4 : ocean};\n      }\n\n      &:focus,\n      &:focus * {\n        color: ${disabled ? ui4 : midnight};\n      }\n    `));\nconst StyledIcon = styled(Icon)<StyledIconProps & IconProps> `\n  color: ${themed(({ disabled, iconOnly, theme: { ui0, ui4, ui5 } }) => (disabled ? ui4 : iconOnly ? ui5 : ui0))};\n  display: inline-block;\n  vertical-align: middle;\n`;\nconst AnchorText = styled.span `\n  ${getFontStyle({ size: 'medium' })}\n\n  display: inline-block;\n  vertical-align: middle;\n  margin-left: ${distance.xsmall};\n`;\n/**\n * The icon link component shows an icon with optional text.\n */\nexport const IconLink = Object.assign(((({ icon, theme, disabled, children, block, ...other }) => {\n    return (<StyledAnchor disabled={disabled} display={block ? 'block' : 'inline-block'} {...other}>\n      {icon && (<StyledIcon disabled={disabled} iconOnly={children ? false : true} name={icon} theme={theme} size={'22px'}/>)}\n      {children && <AnchorText>{children}</AnchorText>}\n    </StyledAnchor>);\n}) as React.SFC<IconLinkProps>), { inner: {\n        get StyledAnchor() { return StyledAnchor as typeof StyledAnchor; },\n        get StyledIcon() { return StyledIcon as typeof StyledIcon; },\n        get AnchorText() { return AnchorText as typeof AnchorText; }\n    } });\nIconLink.displayName = 'IconLink';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}