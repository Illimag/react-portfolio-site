{"ast":null,"code":"function compareGeneralNormal(a, b) {\n  return a < b;\n}\n\nfunction compareGeneralReverse(a, b) {\n  return b < a;\n}\n\nexport function compareArrayNormal(a, b) {\n  // treat empty array like undefined\n  const aIsUndefined = !a || a.length === 0;\n  const bIsUndefined = !b || b.length === 0;\n\n  if (aIsUndefined && bIsUndefined) {\n    return false;\n  } else {\n    if (aIsUndefined) {\n      return false;\n    } else if (bIsUndefined) {\n      return true;\n    } else {\n      return !!a && !!b && a < b; // double checking for not undefined is needed to satisfy typescript\n    }\n  }\n}\n\nfunction compareArrayReverse(a, b) {\n  return compareArrayNormal(b, a);\n}\n\nfunction compareStringNormal(a, b) {\n  if (!a && !b) {\n    return false;\n  } else {\n    if (!a) {\n      return false;\n    } else if (!b) {\n      return true;\n    } else {\n      return a.localeCompare(b) === -1;\n    }\n  }\n}\n\nfunction compareStringReverse(a, b) {\n  if (!a && !b) {\n    return false;\n  } else {\n    if (!b) {\n      return true;\n    } else if (!a) {\n      return false;\n    } else {\n      return b.localeCompare(a) === -1;\n    }\n  }\n}\n\nexport function compareNumberNormal(a, b) {\n  if (a === b) {\n    return false;\n  }\n\n  if (a === 0) {\n    return !b || a < b;\n  }\n\n  if (!a) {\n    return false;\n  }\n\n  if (!b && b !== 0) {\n    return true;\n  }\n\n  return a < b;\n}\n\nfunction compareNumberReverse(a, b) {\n  return compareNumberNormal(b, a);\n}\n\nfunction getComparer(exampleValue, reverse) {\n  if (typeof exampleValue === 'string') {\n    return reverse ? compareStringReverse : compareStringNormal;\n  }\n\n  if (typeof exampleValue === 'number') {\n    return reverse ? compareNumberReverse : compareNumberNormal;\n  }\n\n  if (Array.isArray(exampleValue)) {\n    return reverse ? compareArrayReverse : compareArrayNormal;\n  }\n\n  return reverse ? compareGeneralReverse : compareGeneralNormal;\n}\n\nfunction getCombinedComparer(keyValues, groupValues, reverse) {\n  const hasGroups = groupValues && groupValues.length;\n  const keycomparer = getComparer(keyValues.find(item => !!item), reverse);\n\n  if (hasGroups) {\n    const groupcomparer = getComparer(groupValues.find(item => !!item), false); // Group order is always ascending\n\n    return (a, b) => groupcomparer(groupValues[a], groupValues[b]) || groupValues[a] === groupValues[b] && keycomparer(keyValues[a], keyValues[b]);\n  } else {\n    return (a, b) => keycomparer(keyValues[a], keyValues[b]);\n  }\n}\n\nfunction sorter(indices, items, key, groupBy, reverse = false) {\n  const keyValues = items.map(item => item[key]);\n  const n = keyValues.length;\n\n  if (n > 1) {\n    const groupValues = groupBy ? items.map(item => item[groupBy]) : [];\n    const comparer = getCombinedComparer(keyValues, groupValues, reverse);\n\n    for (let i = 1; i < n; i++) {\n      for (let j = 0; j < i; j++) {\n        const ij = indices[j];\n        const ii = indices[i];\n\n        if (comparer(ii, ij)) {\n          indices[i] = ij;\n          indices[j] = ii;\n        }\n      }\n    }\n  }\n}\n\nexport function sortObjectList(items, sortBy, order = 'ascending', groupBy) {\n  const result = items.map((_, index) => index);\n\n  if (sortBy) {\n    sorter(result, items, sortBy, groupBy, order === 'descending');\n  } else if (groupBy) {\n    sorter(result, items, groupBy, undefined, order === 'descending');\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../src/utils/sort.ts"],"names":[],"mappings":"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","sourcesContent":["function compareGeneralNormal(a: any, b: any) {\n  return a < b;\n}\n\nfunction compareGeneralReverse(a: any, b: any) {\n  return b < a;\n}\n\nexport function compareArrayNormal(a: Array<any> | undefined, b: Array<any> | undefined) {\n  // treat empty array like undefined\n  const aIsUndefined = !a || a.length === 0;\n  const bIsUndefined = !b || b.length === 0;\n\n  if (aIsUndefined && bIsUndefined) {\n    return false;\n  } else {\n    if (aIsUndefined) {\n      return false;\n    } else if (bIsUndefined) {\n      return true;\n    } else {\n      return !!a && !!b && a < b; // double checking for not undefined is needed to satisfy typescript\n    }\n  }\n}\n\nfunction compareArrayReverse(a: Array<any> | undefined, b: Array<any> | undefined) {\n  return compareArrayNormal(b, a);\n}\n\nfunction compareStringNormal(a: string | undefined, b: string | undefined) {\n  if (!a && !b) {\n    return false;\n  } else {\n    if (!a) {\n      return false;\n    } else if (!b) {\n      return true;\n    } else {\n      return a.localeCompare(b) === -1;\n    }\n  }\n}\n\nfunction compareStringReverse(a: string | undefined, b: string | undefined) {\n  if (!a && !b) {\n    return false;\n  } else {\n    if (!b) {\n      return true;\n    } else if (!a) {\n      return false;\n    } else {\n      return b.localeCompare(a) === -1;\n    }\n  }\n}\n\nexport function compareNumberNormal(a: number | undefined, b: number | undefined): boolean {\n  if (a === b) {\n    return false;\n  }\n\n  if (a === 0) {\n    return !b || a < b;\n  }\n\n  if (!a) {\n    return false;\n  }\n\n  if (!b && b !== 0) {\n    return true;\n  }\n\n  return a < b;\n}\n\nfunction compareNumberReverse(a: number | undefined, b: number | undefined): boolean {\n  return compareNumberNormal(b, a);\n}\n\nfunction getComparer(exampleValue: any, reverse: boolean): (a: any, b: any) => boolean {\n  if (typeof exampleValue === 'string') {\n    return reverse ? compareStringReverse : compareStringNormal;\n  }\n\n  if (typeof exampleValue === 'number') {\n    return reverse ? compareNumberReverse : compareNumberNormal;\n  }\n\n  if (Array.isArray(exampleValue)) {\n    return reverse ? compareArrayReverse : compareArrayNormal;\n  }\n\n  return reverse ? compareGeneralReverse : compareGeneralNormal;\n}\n\nfunction getCombinedComparer<T>(keyValues: Array<T[keyof T]>, groupValues: Array<T[keyof T]>, reverse: boolean) {\n  const hasGroups = groupValues && groupValues.length;\n  const keycomparer = getComparer(keyValues.find(item => !!item), reverse);\n\n  if (hasGroups) {\n    const groupcomparer = getComparer(groupValues.find(item => !!item), false); // Group order is always ascending\n\n    return (a: number, b: number) =>\n      groupcomparer(groupValues[a], groupValues[b]) ||\n      (groupValues[a] === groupValues[b] && keycomparer(keyValues[a], keyValues[b]));\n  } else {\n    return (a: number, b: number) => keycomparer(keyValues[a], keyValues[b]);\n  }\n}\n\nfunction sorter<T extends {}>(\n  indices: Array<number>,\n  items: Array<T>,\n  key: keyof T,\n  groupBy?: keyof T,\n  reverse = false,\n) {\n  const keyValues = items.map(item => item[key]);\n  const n = keyValues.length;\n\n  if (n > 1) {\n    const groupValues = groupBy ? items.map(item => item[groupBy]) : [];\n    const comparer = getCombinedComparer(keyValues, groupValues, reverse);\n\n    for (let i = 1; i < n; i++) {\n      for (let j = 0; j < i; j++) {\n        const ij = indices[j];\n        const ii = indices[i];\n\n        if (comparer(ii, ij)) {\n          indices[i] = ij;\n          indices[j] = ii;\n        }\n      }\n    }\n  }\n}\n\nexport function sortObjectList<T extends {}>(\n  items: Array<T>,\n  sortBy?: keyof T,\n  order: 'ascending' | 'descending' = 'ascending',\n  groupBy?: keyof T,\n) {\n  const result = items.map((_, index) => index);\n\n  if (sortBy) {\n    sorter(result, items, sortBy, groupBy, order === 'descending');\n  } else if (groupBy) {\n    sorter(result, items, groupBy, undefined, order === 'descending');\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}