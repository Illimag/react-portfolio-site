{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { List } from '../List';\nimport { ListItem } from '../ListItem';\nimport { defaultCellRenderer, handleDataClickedEvent } from './TableShared.part';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nconst Container = styled.div(themed(({\n  theme: {\n    ui4,\n    text1\n  }\n}) => css`\n      ${getFontStyle({\n  size: 'medium'\n})}\n\n      position: relative;\n      border: 1px solid ${ui4};\n      color: ${text1};\n    `));\nconst ContentContainer = styled.div`\n  padding: ${distance.medium} ${distance.medium} ${distance.large};\n`;\nconst PropContainer = styled.div`\n  margin-bottom: ${distance.medium};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\nPropContainer.displayName = 'PropContainer';\nconst PropName = styled.div`\n  ${getFontStyle({\n  size: 'xSmall'\n})}\n`;\nconst PropValue = styled.div`\n  ${getFontStyle({\n  weight: 'medium'\n})}\n`;\nconst PlaceholderContainer = styled.div`\n  text-align: center;\n`;\nconst StyledListItem = styled(ListItem)`\n  padding: 0;\n  margin-bottom: ${distance.xlarge};\n  border: none;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\nexport function defaultBodyRenderer(e) {\n  const CardBody = e.table;\n  return React.createElement(CardBody, null, e.rows);\n}\nconst TableCardHost = Object.assign(props => React.createElement(List, Object.assign({}, props)), {\n  inner: {\n    get List() {\n      return List;\n    }\n\n  }\n});\nexport class TableCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderItem = ({\n      item,\n      index,\n      keys\n    }) => {\n      const {\n        theme\n      } = this.props;\n      return React.createElement(StyledListItem, {\n        theme: theme,\n        key: index\n      }, React.createElement(Container, {\n        theme: theme\n      }, React.createElement(ContentContainer, {\n        theme: theme\n      }, this.renderItemProps(item, index, keys))));\n    };\n  }\n\n  getHeader(key) {\n    const {\n      columns\n    } = this.props;\n\n    if (columns) {\n      const column = columns[key];\n      return typeof column === 'string' ? column : column.header;\n    }\n\n    return key;\n  }\n\n  renderItemProps(item, rowIndex, keys) {\n    const {\n      columns,\n      cellRenderer = defaultCellRenderer,\n      data,\n      onDataClick\n    } = this.props;\n    return keys.map((key, colIndex) => {\n      const column = columns ? columns[key] : key;\n\n      if (typeof column === 'string' || !column.hidden) {\n        const propKey = this.getHeader(key);\n        const value = cellRenderer({\n          column: colIndex,\n          row: rowIndex,\n          key,\n          value: item[key],\n          data: item,\n          render: defaultCellRenderer\n        });\n        return React.createElement(PropContainer, {\n          key: colIndex,\n          onClick: handleDataClickedEvent({\n            row: rowIndex,\n            column: colIndex,\n            key,\n            data: data[rowIndex]\n          }, onDataClick)\n        }, React.createElement(PropName, null, propKey), React.createElement(PropValue, null, value));\n      }\n\n      return undefined;\n    }).filter(m => !!m);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      data = [],\n      columns,\n      placeholder,\n      theme,\n      cardRenderer = this.renderItem,\n      bodyRenderer = defaultBodyRenderer\n    } = _a,\n          props = __rest(_a, [\"data\", \"columns\", \"placeholder\", \"theme\", \"cardRenderer\", \"bodyRenderer\"]);\n\n    const keys = Object.keys(columns || data[0] || {});\n    const rows = data.length === 0 ? placeholder ? [React.createElement(StyledListItem, {\n      theme: theme,\n      key: 0\n    }, React.createElement(PlaceholderContainer, {\n      theme: theme\n    }, placeholder))] : [] : data.map((item, index) => cardRenderer({\n      item,\n      index,\n      keys\n    }));\n    return bodyRenderer({\n      table: TableCardHost,\n      props: Object.assign({\n        theme,\n        borderless: true\n      }, props),\n      rows,\n      mode: 'card'\n    });\n  }\n\n}\nTableCard.inner = {\n  get StyledListItem() {\n    return StyledListItem;\n  },\n\n  get Container() {\n    return Container;\n  },\n\n  get ContentContainer() {\n    return ContentContainer;\n  },\n\n  get PropContainer() {\n    return PropContainer;\n  },\n\n  get PropName() {\n    return PropName;\n  },\n\n  get PropValue() {\n    return PropValue;\n  },\n\n  get PlaceholderContainer() {\n    return PlaceholderContainer;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Table/TableCard.part.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed, css } from '../../utils/styled';\nimport { List } from '../List';\nimport { ListItem } from '../ListItem';\nimport { TableProps, TableCardRendererEvent, TableBodyRenderEvent } from './Table.types.part';\nimport { defaultCellRenderer, handleDataClickedEvent } from './TableShared.part';\nimport { distance } from '../../distance';\nimport { getFontStyle } from '../../textStyles';\nconst Container = styled.div(themed(({ theme: { ui4, text1 } }) => css `\n      ${getFontStyle({ size: 'medium' })}\n\n      position: relative;\n      border: 1px solid ${ui4};\n      color: ${text1};\n    `));\nconst ContentContainer = styled.div `\n  padding: ${distance.medium} ${distance.medium} ${distance.large};\n`;\nconst PropContainer = styled.div `\n  margin-bottom: ${distance.medium};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\nPropContainer.displayName = 'PropContainer';\nconst PropName = styled.div `\n  ${getFontStyle({ size: 'xSmall' })}\n`;\nconst PropValue = styled.div `\n  ${getFontStyle({ weight: 'medium' })}\n`;\nconst PlaceholderContainer = styled.div `\n  text-align: center;\n`;\nconst StyledListItem = styled(ListItem) `\n  padding: 0;\n  margin-bottom: ${distance.xlarge};\n  border: none;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\nexport function defaultBodyRenderer(e: TableBodyRenderEvent) {\n    const CardBody = e.table;\n    return <CardBody>{e.rows}</CardBody>;\n}\ninterface TableCardHostProps {\n    borderless: boolean;\n}\nconst TableCardHost = Object.assign(((props => <List {...props}/>) as React.SFC<TableCardHostProps>), { inner: {\n        get List() { return List as typeof List; }\n    } });\nexport class TableCard<T> extends React.Component<TableProps<T>> {\n    constructor(props: TableProps<T>) {\n        super(props);\n    }\n    private renderItem = ({ item, index, keys }: TableCardRendererEvent<T>) => {\n        const { theme } = this.props;\n        return (<StyledListItem theme={theme} key={index}>\n        <Container theme={theme}>\n          <ContentContainer theme={theme}>{this.renderItemProps(item, index, keys)}</ContentContainer>\n        </Container>\n      </StyledListItem>);\n    };\n    private getHeader(key: string) {\n        const { columns } = this.props;\n        if (columns) {\n            const column = columns[key];\n            return typeof column === 'string' ? column : column.header;\n        }\n        return key;\n    }\n    private renderItemProps(item: T, rowIndex: number, keys: Array<string>) {\n        const { columns, cellRenderer = defaultCellRenderer, data, onDataClick } = this.props;\n        return keys\n            .map((key, colIndex) => {\n            const column = columns ? columns[key] : key;\n            if (typeof column === 'string' || !column.hidden) {\n                const propKey = this.getHeader(key);\n                const value = cellRenderer({\n                    column: colIndex,\n                    row: rowIndex,\n                    key,\n                    value: item[key],\n                    data: item,\n                    render: defaultCellRenderer,\n                });\n                return (<PropContainer key={colIndex} onClick={handleDataClickedEvent({ row: rowIndex, column: colIndex, key, data: data[rowIndex] }, onDataClick)}>\n              <PropName>{propKey}</PropName>\n              <PropValue>{value}</PropValue>\n            </PropContainer>);\n            }\n            return undefined;\n        })\n            .filter(m => !!m);\n    }\n    render() {\n        const { data = [], columns, placeholder, theme, cardRenderer = this.renderItem, bodyRenderer = defaultBodyRenderer, ...props } = this.props;\n        const keys = Object.keys(columns || data[0] || {});\n        const rows = data.length === 0\n            ? placeholder\n                ? [\n                    <StyledListItem theme={theme} key={0}>\n                <PlaceholderContainer theme={theme}>{placeholder}</PlaceholderContainer>\n              </StyledListItem>,\n                ]\n                : []\n            : data.map((item, index) => cardRenderer({ item, index, keys }));\n        return bodyRenderer({\n            table: TableCardHost,\n            props: {\n                theme,\n                borderless: true,\n                ...props,\n            },\n            rows,\n            mode: 'card',\n        });\n    }\n    static inner = {\n        get StyledListItem() { return StyledListItem as typeof StyledListItem; },\n        get Container() { return Container as typeof Container; },\n        get ContentContainer() { return ContentContainer as typeof ContentContainer; },\n        get PropContainer() { return PropContainer as typeof PropContainer; },\n        get PropName() { return PropName as typeof PropName; },\n        get PropValue() { return PropValue as typeof PropValue; },\n        get PlaceholderContainer() { return PlaceholderContainer as typeof PlaceholderContainer; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}