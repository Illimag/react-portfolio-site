{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as icons from './icons';\nimport styled from '../../utils/styled';\nimport { getIcon } from './registerIcons';\nexport * from './icon.types';\nconst StyledIcon = styled.i`\n  display: inline-block;\n\n  > svg {\n    float: left;\n  }\n`;\n/**\n * The icon component displays an icon from the given set of icons.\n */\n\nexport const Icon = Object.assign(_a => {\n  var {\n    size = 1,\n    name,\n    stroke,\n    color\n  } = _a,\n      rest = __rest(_a, [\"size\", \"name\", \"stroke\", \"color\"]);\n\n  const dim = typeof size === 'number' ? `${size}em` : size;\n  const SvgIcon = icons[name] || getIcon(name);\n\n  if (SvgIcon) {\n    return React.createElement(StyledIcon, Object.assign({}, rest), React.createElement(SvgIcon, {\n      width: dim,\n      height: dim,\n      style: {\n        fill: color || 'currentColor',\n        stroke\n      }\n    }));\n  } else if (process.env.NODE_ENV === 'development') {\n    console.error(`An icon with the name ${name} could not be found.`);\n  } // tslint:disable-next-line\n\n\n  return null;\n}, {\n  inner: {\n    get StyledIcon() {\n      return StyledIcon;\n    }\n\n  }\n});\nIcon.displayName = 'Icon';\nexport { registerIcons } from './registerIcons';","map":{"version":3,"sources":["../../../../src/components/Icon/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,SAAvB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AAGA,SAAS,OAAT,QAAuC,iBAAvC;AACA,cAAc,cAAd;AAiCA,MAAM,UAAU,GAAG,MAAM,CAAC,CAAE;;;;;;CAA5B;AAOA;;;;AAGA,OAAO,MAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAiB,EAAD,IAA+C;MAA9C;AAAE,IAAA,IAAI,GAAG,CAAT;AAAY,IAAA,IAAZ;AAAkB,IAAA,MAAlB;AAA0B,IAAA;AAA1B,MAA+B,E;MAAE,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAA,OAAA,CAAA,C;;AAClE,QAAM,GAAG,GAAG,OAAO,IAAP,KAAgB,QAAhB,GAA2B,GAAG,IAAI,IAAlC,GAAyC,IAArD;AACA,QAAM,OAAO,GAAG,KAAK,CAAC,IAAD,CAAL,IAAe,OAAO,CAAC,IAAD,CAAtC;;AACA,MAAI,OAAJ,EAAa;AACT,WAAQ,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,IAAL,CAAX,EACR,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ;AAAC,MAAA,KAAK,EAAE,GAAR;AAAa,MAAA,MAAM,EAAE,GAArB;AAA0B,MAAA,KAAK,EAAE;AAAE,QAAA,IAAI,EAAE,KAAK,IAAI,cAAjB;AAAiC,QAAA;AAAjC;AAAjC,KAAR,CADQ,CAAR;AAGH,GAJD,MAKK,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,aAA7B,EAA4C;AAC7C,IAAA,OAAO,CAAC,KAAR,CAAc,yBAAyB,IAAI,sBAA3C;AACH,GAV8E,CAW/E;;;AACA,SAAO,IAAP;AACH,CAbmB,EAaQ;AAAE,EAAA,KAAK,EAAE;AAC7B,QAAI,UAAJ,GAAc;AAAK,aAAO,UAAP;AAAyC;;AAD/B;AAAT,CAbR,CAAb;AAgBP,IAAI,CAAC,WAAL,GAAmB,MAAnB;AACA,SAAS,aAAT,QAA8B,iBAA9B","sourcesContent":["import * as React from 'react';\nimport * as icons from './icons';\nimport styled from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { IconName, IconNames } from './icon.types';\nimport { getIcon, registerIcons } from './registerIcons';\nexport * from './icon.types';\nexport interface IconProps extends StandardProps {\n    /**\n     * The name of the icon to display.\n     */\n    name: IconName;\n    /**\n     * The CSS color of the icon, otherwise uses the theme's foreground color.\n     * @default currentColor\n     */\n    color?: string;\n    /**\n     * The CSS stroke color of the icon, otherwise is not defined.\n     */\n    stroke?: string;\n    /**\n     * @ignore\n     */\n    children?: void;\n    /**\n     * The relative (number) or absolute size of the icon, where 1\n     * is the default size.\n     */\n    size?: number | string;\n    /**\n     * Event emitted when the icon is clicked.\n     */\n    onClick?(): void;\n    /**\n     * Event emitted when the mouse down on the icon.\n     */\n    onMouseDown?(e: React.MouseEvent): void;\n}\nconst StyledIcon = styled.i `\n  display: inline-block;\n\n  > svg {\n    float: left;\n  }\n`;\n/**\n * The icon component displays an icon from the given set of icons.\n */\nexport const Icon = Object.assign(((({ size = 1, name, stroke, color, ...rest }) => {\n    const dim = typeof size === 'number' ? `${size}em` : size;\n    const SvgIcon = icons[name] || getIcon(name);\n    if (SvgIcon) {\n        return (<StyledIcon {...rest}>\n        <SvgIcon width={dim} height={dim} style={{ fill: color || 'currentColor', stroke }}/>\n      </StyledIcon>);\n    }\n    else if (process.env.NODE_ENV === 'development') {\n        console.error(`An icon with the name ${name} could not be found.`);\n    }\n    // tslint:disable-next-line\n    return null;\n}) as React.FC<IconProps>), { inner: {\n        get StyledIcon() { return StyledIcon as typeof StyledIcon; }\n    } });\nIcon.displayName = 'Icon';\nexport { registerIcons } from './registerIcons';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}