{"ast":null,"code":"import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { Icon } from '../Icon';\nimport { remCalc } from '../../utils/remCalc';\nimport { distance } from '../../distance';\nimport { normalizeIndex, toggleIndex, hasIndex } from '../AccordionTable/helpers/indexHelper';\nimport { Expander } from '../Expander';\nimport { getFontStyle } from '../../textStyles';\nconst animationDuration = '0.3s';\nconst animationFunction = 'cubic-bezier(0, 0, 0.25, 1)';\nconst AccordionContainer = styled.div``;\nconst AccordionItems = styled.ul`\n  padding: 0;\n  list-style: none;\n`;\nconst AccordionItem = styled.li`\n  ${getFontStyle({\n  size: 'small'\n})}\n\n  position: relative;\n  z-index: 1;\n  margin: 0;\n  text-align: left;\n  overflow: visible;\n  border-top: ${themed(({\n  theme\n}) => theme.accordionLine)};\n  box-sizing: border-box;\n  color: ${themed(({\n  theme\n}) => theme.text1)};\n\n  &:last-child {\n    border-bottom: ${themed(({\n  theme\n}) => theme.accordionLine)};\n  }\n`;\nconst AccordionItemHeaderContainer = styled('div')`\n  transition: background-color ${animationDuration} ${animationFunction};\n  background-color: ${themed(props => props.active ? props.theme.ui2 : props.theme.ui1)};\n`;\nconst AccordionItemHeader = styled.div`\n  display: flex;\n  white-space: pre-wrap;\n  align-items: center;\n  cursor: pointer;\n  padding: ${themed(({\n  theme\n}) => theme.accordionPadding)};\n`;\nconst StyledIcon = styled(Icon)`\n  font-size: ${remCalc('18px')};\n  margin-right: ${distance.medium};\n  transition: transform 0.2s ${animationFunction};\n  transform: ${({\n  isRotated\n}) => `rotate(${isRotated ? 90 : 0}deg)`};\n`;\nconst AccordionItemContent = styled.div`\n  padding: ${themed(({\n  theme\n}) => theme.accordionContentPadding)};\n`;\nexport class AccordionBasic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selects = [];\n    this.state = {\n      selectedIndexes: props.selectedIndex !== undefined ? normalizeIndex(props.selectedIndex) : normalizeIndex(props.defaultSelectedIndex),\n      controlled: props.selectedIndex !== undefined\n    };\n  }\n\n  componentDidMount() {\n    const {\n      defaultSelectedIndex\n    } = this.props;\n\n    if (defaultSelectedIndex) {\n      this.setState({\n        selectedIndexes: normalizeIndex(defaultSelectedIndex)\n      });\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      selectedIndex\n    } = props;\n\n    if (state.controlled && selectedIndex !== undefined) {\n      return {\n        selectedIndexes: normalizeIndex(selectedIndex)\n      };\n    }\n\n    return state;\n  }\n\n  changeIndex(target) {\n    const {\n      onChange,\n      multiple\n    } = this.props;\n    const {\n      controlled,\n      selectedIndexes\n    } = this.state;\n    const nextIndexes = toggleIndex(selectedIndexes, target, multiple);\n\n    if (typeof onChange === 'function') {\n      onChange({\n        selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,\n        previousIndex: multiple ? selectedIndexes : selectedIndexes[0] !== undefined ? selectedIndexes[0] : -1\n      });\n    }\n\n    if (!controlled) {\n      this.setState({\n        selectedIndexes: nextIndexes\n      });\n    }\n  }\n\n  render() {\n    const {\n      selectedIndexes\n    } = this.state;\n    const {\n      children,\n      theme,\n      onChange: _0,\n      selectedIndex: _1\n    } = this.props;\n    const items = [];\n    const selects = this.selects;\n    React.Children.forEach(children, (element, index) => {\n      if (element && React.isValidElement(element)) {\n        const {\n          header\n        } = element.props;\n        const active = hasIndex(selectedIndexes, index);\n\n        if (selects[index] === undefined) {\n          selects[index] = () => this.changeIndex(index);\n        }\n\n        items.push(React.createElement(AccordionItem, {\n          theme: theme,\n          key: `item-${index}`\n        }, React.createElement(AccordionItemHeaderContainer, {\n          active: active\n        }, React.createElement(AccordionItemHeader, {\n          theme: theme,\n          onClick: selects[index]\n        }, React.createElement(StyledIcon, {\n          isRotated: active,\n          name: \"KeyboardArrowRight\"\n        }), header)), React.createElement(Expander, {\n          expand: active,\n          timeout: 300,\n          unmountOnExit: true\n        }, React.createElement(AccordionItemContent, {\n          theme: theme\n        }, element))));\n      }\n    });\n    return React.createElement(AccordionContainer, null, React.createElement(AccordionItems, {\n      theme: theme\n    }, items));\n  }\n\n}\nAccordionBasic.inner = {\n  get AccordionItem() {\n    return AccordionItem;\n  },\n\n  get AccordionItemHeaderContainer() {\n    return AccordionItemHeaderContainer;\n  },\n\n  get AccordionItemHeader() {\n    return AccordionItemHeader;\n  },\n\n  get StyledIcon() {\n    return StyledIcon;\n  },\n\n  get Expander() {\n    return Expander;\n  },\n\n  get AccordionItemContent() {\n    return AccordionItemContent;\n  },\n\n  get AccordionContainer() {\n    return AccordionContainer;\n  },\n\n  get AccordionItems() {\n    return AccordionItems;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Accordion/AccordionBasic.part.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { themed } from '../../utils/styled';\nimport { AccordionTabProps } from '../AccordionTab';\nimport { Icon } from '../Icon';\nimport { remCalc } from '../../utils/remCalc';\nimport { distance } from '../../distance';\nimport { AccordionProps } from './Accordion.types.part';\nimport { normalizeIndex, toggleIndex, hasIndex } from '../AccordionTable/helpers/indexHelper';\nimport { Expander } from '../Expander';\nimport { getFontStyle } from '../../textStyles';\nexport interface AccordionBasicState {\n    /**\n     * The currently selected indices.\n     */\n    selectedIndexes: Array<number>;\n    /**\n     * Determines if the accordion component is controlled from the outside or not.\n     */\n    controlled: boolean;\n}\ninterface AccordionItemProps {\n    active?: boolean;\n}\ninterface StyledArrowProps {\n    isRotated: boolean;\n}\nconst animationDuration = '0.3s';\nconst animationFunction = 'cubic-bezier(0, 0, 0.25, 1)';\nconst AccordionContainer = styled.div ``;\nconst AccordionItems = styled.ul `\n  padding: 0;\n  list-style: none;\n`;\nconst AccordionItem = styled.li `\n  ${getFontStyle({ size: 'small' })}\n\n  position: relative;\n  z-index: 1;\n  margin: 0;\n  text-align: left;\n  overflow: visible;\n  border-top: ${themed(({ theme }) => theme.accordionLine)};\n  box-sizing: border-box;\n  color: ${themed(({ theme }) => theme.text1)};\n\n  &:last-child {\n    border-bottom: ${themed(({ theme }) => theme.accordionLine)};\n  }\n`;\nconst AccordionItemHeaderContainer = styled('div')<AccordionItemProps> `\n  transition: background-color ${animationDuration} ${animationFunction};\n  background-color: ${themed(props => (props.active ? props.theme.ui2 : props.theme.ui1))};\n`;\nconst AccordionItemHeader = styled.div `\n  display: flex;\n  white-space: pre-wrap;\n  align-items: center;\n  cursor: pointer;\n  padding: ${themed(({ theme }) => theme.accordionPadding)};\n`;\nconst StyledIcon = styled(Icon)<StyledArrowProps> `\n  font-size: ${remCalc('18px')};\n  margin-right: ${distance.medium};\n  transition: transform 0.2s ${animationFunction};\n  transform: ${({ isRotated }) => `rotate(${isRotated ? 90 : 0}deg)`};\n`;\nconst AccordionItemContent = styled.div `\n  padding: ${themed(({ theme }) => theme.accordionContentPadding)};\n`;\nexport class AccordionBasic extends React.Component<AccordionProps, AccordionBasicState> {\n    private selects: Array<() => void> = [];\n    constructor(props: AccordionProps) {\n        super(props);\n        this.state = {\n            selectedIndexes: props.selectedIndex !== undefined\n                ? normalizeIndex(props.selectedIndex)\n                : normalizeIndex(props.defaultSelectedIndex),\n            controlled: props.selectedIndex !== undefined,\n        };\n    }\n    componentDidMount() {\n        const { defaultSelectedIndex } = this.props;\n        if (defaultSelectedIndex) {\n            this.setState({\n                selectedIndexes: normalizeIndex(defaultSelectedIndex),\n            });\n        }\n    }\n    static getDerivedStateFromProps(props: AccordionProps, state: AccordionBasicState) {\n        const { selectedIndex } = props;\n        if (state.controlled && selectedIndex !== undefined) {\n            return {\n                selectedIndexes: normalizeIndex(selectedIndex),\n            };\n        }\n        return state;\n    }\n    private changeIndex(target: number) {\n        const { onChange, multiple } = this.props;\n        const { controlled, selectedIndexes } = this.state;\n        const nextIndexes = toggleIndex(selectedIndexes, target, multiple);\n        if (typeof onChange === 'function') {\n            onChange({\n                selectedIndex: multiple ? nextIndexes : nextIndexes[0] !== undefined ? nextIndexes[0] : -1,\n                previousIndex: multiple ? selectedIndexes : selectedIndexes[0] !== undefined ? selectedIndexes[0] : -1,\n            });\n        }\n        if (!controlled) {\n            this.setState({\n                selectedIndexes: nextIndexes,\n            });\n        }\n    }\n    render() {\n        const { selectedIndexes } = this.state;\n        const { children, theme, onChange: _0, selectedIndex: _1 } = this.props;\n        const items: Array<React.ReactChild> = [];\n        const selects = this.selects;\n        React.Children.forEach(children, (element: React.ReactElement<AccordionTabProps>, index) => {\n            if (element && React.isValidElement(element)) {\n                const { header } = element.props;\n                const active = hasIndex(selectedIndexes, index);\n                if (selects[index] === undefined) {\n                    selects[index] = () => this.changeIndex(index);\n                }\n                items.push(<AccordionItem theme={theme} key={`item-${index}`}>\n            <AccordionItemHeaderContainer active={active}>\n              <AccordionItemHeader theme={theme} onClick={selects[index]}>\n                <StyledIcon isRotated={active} name=\"KeyboardArrowRight\"/>\n                {header}\n              </AccordionItemHeader>\n            </AccordionItemHeaderContainer>\n            <Expander expand={active} timeout={300} unmountOnExit>\n              <AccordionItemContent theme={theme}>{element}</AccordionItemContent>\n            </Expander>\n          </AccordionItem>);\n            }\n        });\n        return (<AccordionContainer>\n        <AccordionItems theme={theme}>{items}</AccordionItems>\n      </AccordionContainer>);\n    }\n    static inner = {\n        get AccordionItem() { return AccordionItem as typeof AccordionItem; },\n        get AccordionItemHeaderContainer() { return AccordionItemHeaderContainer as typeof AccordionItemHeaderContainer; },\n        get AccordionItemHeader() { return AccordionItemHeader as typeof AccordionItemHeader; },\n        get StyledIcon() { return StyledIcon as typeof StyledIcon; },\n        get Expander() { return Expander as typeof Expander; },\n        get AccordionItemContent() { return AccordionItemContent as typeof AccordionItemContent; },\n        get AccordionContainer() { return AccordionContainer as typeof AccordionContainer; },\n        get AccordionItems() { return AccordionItems as typeof AccordionItems; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}