{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled, { css, themed } from '../../utils/styled';\nimport { light } from '../../themes';\nimport { Label } from '../Label';\nimport { Icon } from '../Icon';\nimport { withFormContext } from '../../hoc';\nimport { withGroupContext } from '../../hoc/withGroupContext';\nimport { InputNotification } from '../InputNotification';\nimport { PaddedContainer } from '../PaddedContainer';\nconst CheckboxContainer = styled('div')`\n  position: relative;\n  display: inline-block;\n  opacity: ${props => props.disabled ? '0.5' : '1.0'};\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n`;\nconst CheckboxBox = styled('div')(themed(({\n  disabled,\n  checked,\n  theme: {\n    ui0,\n    ui1,\n    ui4,\n    ui5\n  }\n}) => css`\n      outline: 0;\n      flex: 0 0 1.0625em;\n      max-width: 1.0625em;\n      height: 1.0625em;\n      position: relative;\n      background: ${checked ? ui5 : ui1};\n      transition: all 0.2s cubic-bezier(0, 0, 0.25, 1);\n      overflow: hidden;\n      border-radius: 2px;\n      border: 2px solid ${disabled ? checked ? ui5 : ui4 : ui5};\n      box-sizing: border-box;\n\n      &:focus {\n        outline: ${ui0} solid 2px;\n      }\n\n      > i {\n        position: relative;\n        top: -2px;\n        left: -2px;\n        transition: all 0.2s;\n        opacity: ${checked ? '1' : '0'};\n        transform: ${checked ? 'scale(1)' : 'scale(0)'};\n      }\n    `));\nconst RealCheckbox = styled.input`\n  display: none;\n`;\nconst FlexContainer = styled.div`\n  display: flex;\n  padding-right: 0.25em;\n  align-items: ${({\n  withInputInfo\n}) => withInputInfo ? 'start' : 'center'};\n`;\nexport class CheckboxInt extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.setValue = value => {\n      const {\n        onChange\n      } = this.props;\n      this.setState({\n        value\n      });\n\n      if (typeof onChange === 'function') {\n        onChange({\n          value\n        });\n      }\n    };\n\n    this.toggle = () => {\n      const {\n        onChange,\n        disabled,\n        form,\n        group,\n        name = ''\n      } = this.props;\n\n      if (!disabled) {\n        const {\n          controlled,\n          value\n        } = this.state;\n        const checked = !value;\n\n        if (!controlled) {\n          if (group) {\n            group.select(this);\n          } else if (form) {\n            form.change({\n              name,\n              value: checked\n            });\n          } else {\n            this.setState({\n              value: checked\n            });\n          }\n        }\n\n        if (typeof onChange === 'function') {\n          onChange({\n            value: checked\n          });\n        }\n      }\n    };\n\n    this.changeValue = e => {\n      this.toggle();\n      e.preventDefault();\n    };\n\n    this.control = e => {\n      switch (e.keyCode) {\n        case 13\n        /* enter */\n        :\n        case 32\n        /* space */\n        :\n          this.toggle();\n          break;\n\n        default:\n          return;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    this.name = props.name;\n    this.state = {\n      controlled: typeof props.value !== 'undefined',\n      value: props.value || props.defaultValue || false,\n      error: props.error\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps({\n    value = false,\n    error\n  }) {\n    if (this.state.controlled) {\n      this.setState({\n        value\n      });\n    }\n\n    this.setState({\n      error\n    });\n  }\n\n  componentDidMount() {\n    const {\n      group,\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled) {\n      if (group) {\n        group.subscribe(this);\n      } else if (form) {\n        form.subscribe(this);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      group,\n      form\n    } = this.props;\n    const {\n      controlled\n    } = this.state;\n\n    if (!controlled) {\n      if (group) {\n        group.unsubscribe(this);\n      } else if (form) {\n        form.unsubscribe(this);\n      }\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      disabled,\n      theme,\n      value: _0,\n      defaultValue: _1,\n      onChange: _2,\n      onInput: _3,\n      info\n    } = _a,\n          props = __rest(_a, [\"children\", \"disabled\", \"theme\", \"value\", \"defaultValue\", \"onChange\", \"onInput\", \"info\"]);\n\n    const {\n      value,\n      error\n    } = this.state;\n    const containerProps = Object.assign({}, props, {\n      theme,\n      onClick: this.changeValue,\n      disabled\n    });\n    const boxProps = {\n      checked: value,\n      disabled: !!disabled,\n      onKeyDown: this.control,\n      theme,\n      tabIndex: disabled ? undefined : 0\n    };\n    const InputInfo = (error || info) && React.createElement(PaddedContainer, {\n      top: \"xsmall\",\n      bottom: \"xsmall\"\n    }, React.createElement(InputNotification, {\n      error: error,\n      info: info\n    }));\n    return React.createElement(CheckboxContainer, Object.assign({}, containerProps), React.createElement(RealCheckbox, {\n      type: \"checkbox\",\n      defaultChecked: value\n    }), React.createElement(FlexContainer, {\n      withInputInfo: !!(error || info)\n    }, React.createElement(CheckboxBox, Object.assign({}, boxProps), React.createElement(Icon, {\n      name: \"Check\",\n      color: theme ? theme.ui1 : light.ui1,\n      size: 1.0625\n    })), children && React.createElement(Label, {\n      attached: true,\n      theme: theme\n    }, children, InputInfo)), !children && InputInfo);\n  }\n\n}\nCheckboxInt.inner = {\n  get PaddedContainer() {\n    return PaddedContainer;\n  },\n\n  get InputNotification() {\n    return InputNotification;\n  },\n\n  get CheckboxContainer() {\n    return CheckboxContainer;\n  },\n\n  get RealCheckbox() {\n    return RealCheckbox;\n  },\n\n  get FlexContainer() {\n    return FlexContainer;\n  },\n\n  get CheckboxBox() {\n    return CheckboxBox;\n  },\n\n  get Icon() {\n    return Icon;\n  },\n\n  get Label() {\n    return Label;\n  }\n\n};\n/**\n * The checkbox input field.\n */\n\nexport const Checkbox = withFormContext(withGroupContext(CheckboxInt));\nCheckbox.displayName = 'Checkbox';","map":{"version":3,"sources":["../../../../src/components/Checkbox/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,IAAiB,GAAjB,EAAsB,MAAtB,QAAoC,oBAApC;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,UAAtB;AACA,SAAS,IAAT,QAAqB,SAArB;AAEA,SAA2B,eAA3B,QAAkD,WAAlD;AACA,SAA4B,gBAA5B,QAAoD,4BAApD;AAEA,SAAS,iBAAT,QAAkC,sBAAlC;AACA,SAAS,eAAT,QAAgC,oBAAhC;AAqBA,MAAM,iBAAiB,GAAG,MAAM,CAAC,KAAD,CAAgC;;;aAGnD,KAAK,IAAK,KAAK,CAAC,QAAN,GAAiB,KAAjB,GAAyB,KAAM;YAC1C,KAAK,IAAK,KAAK,CAAC,QAAN,GAAiB,aAAjB,GAAiC,SAAU;CAJjE;AAMA,MAAM,WAAW,GAAG,MAAM,CAAC,KAAD,CAAN,CAAgC,MAAM,CAAC,CAAC;AAAE,EAAA,QAAF;AAAY,EAAA,OAAZ;AAAqB,EAAA,KAAK,EAAE;AAAE,IAAA,GAAF;AAAO,IAAA,GAAP;AAAY,IAAA,GAAZ;AAAiB,IAAA;AAAjB;AAA5B,CAAD,KAA0D,GAAI;;;;;;oBAMrG,OAAO,GAAG,GAAH,GAAS,GAAG;;;;0BAIb,QAAQ,GAAI,OAAO,GAAG,GAAH,GAAS,GAApB,GAA2B,GAAG;;;;mBAI7C,GAAG;;;;;;;;mBAQH,OAAO,GAAG,GAAH,GAAS,GAAG;qBACjB,OAAO,GAAG,UAAH,GAAgB,UAAU;;KAvBI,CAAtC,CAApB;AA0BA,MAAM,YAAY,GAAG,MAAM,CAAC,KAAM;;CAAlC;AAGA,MAAM,aAAa,GAAG,MAAM,CAAC,GAE1B;;;iBAGc,CAAC;AAAE,EAAA;AAAF,CAAD,KAAwB,aAAa,GAAG,OAAH,GAAa,QAAS;CAL5E;AAOA,OAAM,MAAO,WAAP,SAA2B,KAAK,CAAC,aAAjC,CAA4E;AAE9E,EAAA,WAAA,CAAY,KAAZ,EAAgC;AAC5B,UAAM,KAAN;;AAsCJ,SAAA,QAAA,GAAY,KAAD,IAAmB;AAC1B,YAAM;AAAE,QAAA;AAAF,UAAe,KAAK,KAA1B;AACA,WAAK,QAAL,CAAc;AACV,QAAA;AADU,OAAd;;AAGA,UAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAChC,QAAA,QAAQ,CAAC;AACL,UAAA;AADK,SAAD,CAAR;AAGH;AACJ,KAVD;;AAWQ,SAAA,MAAA,GAAS,MAAK;AAClB,YAAM;AAAE,QAAA,QAAF;AAAY,QAAA,QAAZ;AAAsB,QAAA,IAAtB;AAA4B,QAAA,KAA5B;AAAmC,QAAA,IAAI,GAAG;AAA1C,UAAiD,KAAK,KAA5D;;AACA,UAAI,CAAC,QAAL,EAAe;AACX,cAAM;AAAE,UAAA,UAAF;AAAc,UAAA;AAAd,YAAwB,KAAK,KAAnC;AACA,cAAM,OAAO,GAAG,CAAC,KAAjB;;AACA,YAAI,CAAC,UAAL,EAAiB;AACb,cAAI,KAAJ,EAAW;AACP,YAAA,KAAK,CAAC,MAAN,CAAa,IAAb;AACH,WAFD,MAGK,IAAI,IAAJ,EAAU;AACX,YAAA,IAAI,CAAC,MAAL,CAAY;AACR,cAAA,IADQ;AAER,cAAA,KAAK,EAAE;AAFC,aAAZ;AAIH,WALI,MAMA;AACD,iBAAK,QAAL,CAAc;AACV,cAAA,KAAK,EAAE;AADG,aAAd;AAGH;AACJ;;AACD,YAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAChC,UAAA,QAAQ,CAAC;AACL,YAAA,KAAK,EAAE;AADF,WAAD,CAAR;AAGH;AACJ;AACJ,KA3BO;;AA4BA,SAAA,WAAA,GAAe,CAAD,IAAwC;AAC1D,WAAK,MAAL;AACA,MAAA,CAAC,CAAC,cAAF;AACH,KAHO;;AAIA,SAAA,OAAA,GAAW,CAAD,IAA2C;AACzD,cAAQ,CAAC,CAAC,OAAV;AACI,aAAA;AAAA;AAAA;AACA,aAAA;AAAA;AAAA;AACI,eAAK,MAAL;AACA;;AACJ;AACI;AANR;;AAQA,MAAA,CAAC,CAAC,eAAF;AACA,MAAA,CAAC,CAAC,cAAF;AACH,KAXO;;AAhFJ,SAAK,IAAL,GAAY,KAAK,CAAC,IAAlB;AACA,SAAK,KAAL,GAAa;AACT,MAAA,UAAU,EAAE,OAAO,KAAK,CAAC,KAAb,KAAuB,WAD1B;AAET,MAAA,KAAK,EAAE,KAAK,CAAC,KAAN,IAAe,KAAK,CAAC,YAArB,IAAqC,KAFnC;AAGT,MAAA,KAAK,EAAE,KAAK,CAAC;AAHJ,KAAb;AAKH;;AACD,EAAA,gCAAgC,CAAC;AAAE,IAAA,KAAK,GAAG,KAAV;AAAiB,IAAA;AAAjB,GAAD,EAAwC;AACpE,QAAI,KAAK,KAAL,CAAW,UAAf,EAA2B;AACvB,WAAK,QAAL,CAAc;AAAE,QAAA;AAAF,OAAd;AACH;;AACD,SAAK,QAAL,CAAc;AAAE,MAAA;AAAF,KAAd;AACH;;AACD,EAAA,iBAAiB,GAAA;AACb,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,QAAkB,KAAK,KAA7B;AACA,UAAM;AAAE,MAAA;AAAF,QAAiB,KAAK,KAA5B;;AACA,QAAI,CAAC,UAAL,EAAiB;AACb,UAAI,KAAJ,EAAW;AACP,QAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB;AACH,OAFD,MAGK,IAAI,IAAJ,EAAU;AACX,QAAA,IAAI,CAAC,SAAL,CAAe,IAAf;AACH;AACJ;AACJ;;AACD,EAAA,oBAAoB,GAAA;AAChB,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,QAAkB,KAAK,KAA7B;AACA,UAAM;AAAE,MAAA;AAAF,QAAiB,KAAK,KAA5B;;AACA,QAAI,CAAC,UAAL,EAAiB;AACb,UAAI,KAAJ,EAAW;AACP,QAAA,KAAK,CAAC,WAAN,CAAkB,IAAlB;AACH,OAFD,MAGK,IAAI,IAAJ,EAAU;AACX,QAAA,IAAI,CAAC,WAAL,CAAiB,IAAjB;AACH;AACJ;AACJ;;AAwDD,EAAA,MAAM,GAAA;AACF,UAAM,EAAA,GAAA,KAAA,KAAN;AAAA,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA,QAAZ;AAAsB,MAAA,KAAtB;AAA6B,MAAA,KAAK,EAAE,EAApC;AAAwC,MAAA,YAAY,EAAE,EAAtD;AAA0D,MAAA,QAAQ,EAAE,EAApE;AAAwE,MAAA,OAAO,EAAE,EAAjF;AAAqF,MAAA;AAArF,QAAyF,EAA/F;AAAA,UAAiG,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,UAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,cAAA,EAAA,UAAA,EAAA,SAAA,EAAA,MAAA,CAAA,CAAjG;;AACA,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA;AAAT,QAAmB,KAAK,KAA9B;AACA,UAAM,cAAc,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACb,KADa,EACR;AACR,MAAA,KADQ;AAER,MAAA,OAAO,EAAE,KAAK,WAFN;AAGR,MAAA;AAHQ,KADQ,CAApB;AAMA,UAAM,QAAQ,GAAG;AACb,MAAA,OAAO,EAAE,KADI;AAEb,MAAA,QAAQ,EAAE,CAAC,CAAC,QAFC;AAGb,MAAA,SAAS,EAAE,KAAK,OAHH;AAIb,MAAA,KAJa;AAKb,MAAA,QAAQ,EAAE,QAAQ,GAAG,SAAH,GAAe;AALpB,KAAjB;AAOA,UAAM,SAAS,GAAG,CAAC,KAAK,IAAI,IAAV,KAAoB,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB;AAAC,MAAA,GAAG,EAAC,QAAL;AAAc,MAAA,MAAM,EAAC;AAArB,KAAhB,EACtC,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB;AAAC,MAAA,KAAK,EAAE,KAAR;AAAe,MAAA,IAAI,EAAE;AAArB,KAAlB,CADsC,CAAtC;AAGA,WAAQ,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,cAAL,CAAlB,EACR,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,MAAA,IAAI,EAAC,UAAN;AAAiB,MAAA,cAAc,EAAE;AAAjC,KAAb,CADQ,EAER,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AAAC,MAAA,aAAa,EAAE,CAAC,EAAE,KAAK,IAAI,IAAX;AAAjB,KAAd,EACE,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,QAAL,CAAZ,EACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,MAAA,IAAI,EAAC,OAAN;AAAc,MAAA,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,GAAT,GAAe,KAAK,CAAC,GAA/C;AAAoD,MAAA,IAAI,EAAE;AAA1D,KAAL,CADF,CADF,EAIG,QAAQ,IAAK,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM;AAAC,MAAA,QAAQ,EAAA,IAAT;AAAU,MAAA,KAAK,EAAE;AAAjB,KAAN,EACT,QADS,EAET,SAFS,CAJhB,CAFQ,EAWP,CAAC,QAAD,IAAa,SAXN,CAAR;AAaH;;AAhI6E;AAiIvE,WAAA,CAAA,KAAA,GAAQ;AACX,MAAI,eAAJ,GAAmB;AAAK,WAAO,eAAP;AAAmD,GADhE;;AAEX,MAAI,iBAAJ,GAAqB;AAAK,WAAO,iBAAP;AAAuD,GAFtE;;AAGX,MAAI,iBAAJ,GAAqB;AAAK,WAAO,iBAAP;AAAuD,GAHtE;;AAIX,MAAI,YAAJ,GAAgB;AAAK,WAAO,YAAP;AAA6C,GAJvD;;AAKX,MAAI,aAAJ,GAAiB;AAAK,WAAO,aAAP;AAA+C,GAL1D;;AAMX,MAAI,WAAJ,GAAe;AAAK,WAAO,WAAP;AAA2C,GANpD;;AAOX,MAAI,IAAJ,GAAQ;AAAK,WAAO,IAAP;AAA6B,GAP/B;;AAQX,MAAI,KAAJ,GAAS;AAAK,WAAO,KAAP;AAA+B;;AARlC,CAAR;AAWX;;;;AAGA,OAAO,MAAM,QAAQ,GAAG,eAAe,CAAC,gBAAgB,CAAC,WAAD,CAAjB,CAAhC;AACP,QAAQ,CAAC,WAAT,GAAuB,UAAvB","sourcesContent":["import * as React from 'react';\nimport styled, { css, themed } from '../../utils/styled';\nimport { light } from '../../themes';\nimport { Label } from '../Label';\nimport { Icon } from '../Icon';\nimport { InputChangeEvent, InputProps } from '../../common';\nimport { FormContextProps, withFormContext } from '../../hoc';\nimport { GroupContextProps, withGroupContext } from '../../hoc/withGroupContext';\nimport { KeyCodes } from '../../utils';\nimport { InputNotification } from '../InputNotification';\nimport { PaddedContainer } from '../PaddedContainer';\nexport type CheckboxChangeEvent = InputChangeEvent<boolean>;\nexport interface CheckboxProps extends InputProps<boolean>, FormContextProps, GroupContextProps {\n    /**\n     * The content of the checkbox.\n     */\n    children?: React.ReactNode;\n}\nexport interface CheckboxState {\n    value: boolean;\n    error?: React.ReactChild;\n    controlled: boolean;\n}\ninterface CheckboxContainerProps {\n    disabled?: boolean;\n}\ninterface CheckboxBoxProps {\n    checked: boolean;\n    disabled: boolean;\n    theme: any;\n}\nconst CheckboxContainer = styled('div')<CheckboxContainerProps> `\n  position: relative;\n  display: inline-block;\n  opacity: ${props => (props.disabled ? '0.5' : '1.0')};\n  cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n`;\nconst CheckboxBox = styled('div')<CheckboxBoxProps>(themed(({ disabled, checked, theme: { ui0, ui1, ui4, ui5 } }) => css `\n      outline: 0;\n      flex: 0 0 1.0625em;\n      max-width: 1.0625em;\n      height: 1.0625em;\n      position: relative;\n      background: ${checked ? ui5 : ui1};\n      transition: all 0.2s cubic-bezier(0, 0, 0.25, 1);\n      overflow: hidden;\n      border-radius: 2px;\n      border: 2px solid ${disabled ? (checked ? ui5 : ui4) : ui5};\n      box-sizing: border-box;\n\n      &:focus {\n        outline: ${ui0} solid 2px;\n      }\n\n      > i {\n        position: relative;\n        top: -2px;\n        left: -2px;\n        transition: all 0.2s;\n        opacity: ${checked ? '1' : '0'};\n        transform: ${checked ? 'scale(1)' : 'scale(0)'};\n      }\n    `));\nconst RealCheckbox = styled.input `\n  display: none;\n`;\nconst FlexContainer = styled.div<{\n    withInputInfo?: boolean;\n}> `\n  display: flex;\n  padding-right: 0.25em;\n  align-items: ${({ withInputInfo }) => (withInputInfo ? 'start' : 'center')};\n`;\nexport class CheckboxInt extends React.PureComponent<CheckboxProps, CheckboxState> {\n    readonly name?: string;\n    constructor(props: CheckboxProps) {\n        super(props);\n        this.name = props.name;\n        this.state = {\n            controlled: typeof props.value !== 'undefined',\n            value: props.value || props.defaultValue || false,\n            error: props.error,\n        };\n    }\n    UNSAFE_componentWillReceiveProps({ value = false, error }: CheckboxProps) {\n        if (this.state.controlled) {\n            this.setState({ value });\n        }\n        this.setState({ error });\n    }\n    componentDidMount() {\n        const { group, form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled) {\n            if (group) {\n                group.subscribe(this);\n            }\n            else if (form) {\n                form.subscribe(this);\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { group, form } = this.props;\n        const { controlled } = this.state;\n        if (!controlled) {\n            if (group) {\n                group.unsubscribe(this);\n            }\n            else if (form) {\n                form.unsubscribe(this);\n            }\n        }\n    }\n    setValue = (value: boolean) => {\n        const { onChange } = this.props;\n        this.setState({\n            value,\n        });\n        if (typeof onChange === 'function') {\n            onChange({\n                value,\n            });\n        }\n    };\n    private toggle = () => {\n        const { onChange, disabled, form, group, name = '' } = this.props;\n        if (!disabled) {\n            const { controlled, value } = this.state;\n            const checked = !value;\n            if (!controlled) {\n                if (group) {\n                    group.select(this);\n                }\n                else if (form) {\n                    form.change({\n                        name,\n                        value: checked,\n                    });\n                }\n                else {\n                    this.setState({\n                        value: checked,\n                    });\n                }\n            }\n            if (typeof onChange === 'function') {\n                onChange({\n                    value: checked,\n                });\n            }\n        }\n    };\n    private changeValue = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.toggle();\n        e.preventDefault();\n    };\n    private control = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        switch (e.keyCode) {\n            case KeyCodes.enter:\n            case KeyCodes.space:\n                this.toggle();\n                break;\n            default:\n                return;\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    };\n    render() {\n        const { children, disabled, theme, value: _0, defaultValue: _1, onChange: _2, onInput: _3, info, ...props } = this.props;\n        const { value, error } = this.state;\n        const containerProps = {\n            ...props,\n            theme,\n            onClick: this.changeValue,\n            disabled,\n        };\n        const boxProps = {\n            checked: value,\n            disabled: !!disabled,\n            onKeyDown: this.control,\n            theme,\n            tabIndex: disabled ? undefined : 0,\n        };\n        const InputInfo = (error || info) && (<PaddedContainer top=\"xsmall\" bottom=\"xsmall\">\n        <InputNotification error={error} info={info}/>\n      </PaddedContainer>);\n        return (<CheckboxContainer {...containerProps}>\n        <RealCheckbox type=\"checkbox\" defaultChecked={value}/>\n        <FlexContainer withInputInfo={!!(error || info)}>\n          <CheckboxBox {...boxProps}>\n            <Icon name=\"Check\" color={theme ? theme.ui1 : light.ui1} size={1.0625}/>\n          </CheckboxBox>\n          {children && (<Label attached theme={theme}>\n              {children}\n              {InputInfo}\n            </Label>)}\n        </FlexContainer>\n        {!children && InputInfo}\n      </CheckboxContainer>);\n    }\n    static inner = {\n        get PaddedContainer() { return PaddedContainer as typeof PaddedContainer; },\n        get InputNotification() { return InputNotification as typeof InputNotification; },\n        get CheckboxContainer() { return CheckboxContainer as typeof CheckboxContainer; },\n        get RealCheckbox() { return RealCheckbox as typeof RealCheckbox; },\n        get FlexContainer() { return FlexContainer as typeof FlexContainer; },\n        get CheckboxBox() { return CheckboxBox as typeof CheckboxBox; },\n        get Icon() { return Icon as typeof Icon; },\n        get Label() { return Label as typeof Label; }\n    };\n}\n/**\n * The checkbox input field.\n */\nexport const Checkbox = withFormContext(withGroupContext(CheckboxInt));\nCheckbox.displayName = 'Checkbox';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}