{"ast":null,"code":"import * as React from 'react';\nimport { FormContext } from '../contexts/FormContext';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\n/**\n * Wraps the component in a new component that dynamically places the inner part\n * in a form context depending on the use (e.g., with a `name` prop).\n * @param Component The component to place in a form context if a name is given.\n * @returns A component that can be also used together with `<Form>`.\n */\n\nexport function withFormContext(Component) {\n  return withInner(function (props) {\n    return props.name ? React.createElement(FormContext.Consumer, null, function (ctx) {\n      return React.createElement(Component, Object.assign({\n        form: ctx\n      }, props));\n    }) : React.createElement(Component, Object.assign({}, props));\n  }, {\n    Component: Component\n  });\n}","map":{"version":3,"sources":["../../../src/hoc/withFormContext.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAA0B,WAA1B,QAA6C,yBAA7C;AACA,SAAS,SAAT,QAA0B,uCAA1B;AAOA;;;;;;;AAMA,OAAM,SAAU,eAAV,CAA0D,SAA1D,EAAmH;AACrH,SAAO,SAAS,CAAC,UAAC,KAAD;AAAA,WAAmB,KAAK,CAAC,IAAN,GAAc,KAAA,CAAA,aAAA,CAAC,WAAW,CAAC,QAAb,EAAqB,IAArB,EAAuB,UAAA,GAAG;AAAA,aAAI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA;AAAC,QAAA,IAAI,EAAE;AAAP,OAAA,EAAgB,KAAhB,CAAV,CAAJ;AAAA,KAA1B,CAAd,GAA2G,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAV,CAA9H;AAAA,GAAD,EAAyJ;AAAE,IAAA,SAAS,EAAT;AAAF,GAAzJ,CAAhB;AACH","sourcesContent":["import * as React from 'react';\nimport { InputProps } from '../common';\nimport { FormContextType, FormContext } from '../contexts/FormContext';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\nexport interface FormContextProps {\n    /**\n     * The relevant form, if any.\n     */\n    form?: FormContextType;\n}\n/**\n * Wraps the component in a new component that dynamically places the inner part\n * in a form context depending on the use (e.g., with a `name` prop).\n * @param Component The component to place in a form context if a name is given.\n * @returns A component that can be also used together with `<Form>`.\n */\nexport function withFormContext<TProps extends InputProps<any>>(Component: React.ComponentType<TProps & FormContextProps>): React.SFC<TProps> {\n    return withInner((props: TProps) => props.name ? (<FormContext.Consumer>{ctx => <Component form={ctx} {...props}/>}</FormContext.Consumer>) : (<Component {...props}/>), { Component });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}