{"ast":null,"code":"import * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { NotificationAction } from './types';\nimport { eventManagers } from '../../utils/eventManager';\nimport { capitalizeFirst } from '../../utils/text';\nimport { ToastNotification } from './ToastNotification.part';\nexport { NotificationAction } from './types';\nexport { notify } from './notifier';\nconst defaultProps = {\n  width: 320\n};\n\nconst getNotificationPositionStyle = pos => {\n  let positionStyle = `${pos.split('-')[0]}:1rem;`;\n\n  if (pos.indexOf('center') !== -1) {\n    positionStyle += `left:50%;transform:translateX(-50%);`;\n  } else {\n    positionStyle += `${pos.split('-')[1]}:1rem;`;\n  }\n\n  return positionStyle;\n};\n\nconst AbsoluteContainer = css`\n  z-index: 10001;\n  position: fixed;\n  ${props => getNotificationPositionStyle(props.position)};\n  width: ${props => props.width ? props.width : defaultProps.width}px;\n  @media (max-width: 480px) {\n    width: 100vw;\n    padding: 0;\n    right: 0;\n    margin: 0;\n    position: fixed;\n    ${props => props.position.substring(0, 3) === 'top' ? 'top: 0' : 'bottom: 0'};\n  }\n`;\nconst StyledNotifications = styled.div`\n  box-sizing: border-box;\n  width: ${props => !props.width ? 'auto' : `${props.width}px`};\n  ${props => props.disablePointer ? `pointer-events: none` : ``};\n  @media (max-width: 480px) {\n    padding: 0;\n    margin: 0;\n  }\n  ${props => props.position !== 'relative' ? AbsoluteContainer : ''};\n`;\n/**\n * The host element for arbitrary notifications. Use as a singleton only.\n */\n\nexport class Notifications extends React.Component {\n  constructor(props) {\n    super(props);\n    this.collection = [];\n\n    this.hide = id => {\n      if (typeof id === 'string') {\n        this.removeNotification(id);\n      } else {\n        this.clearNotifications();\n      }\n    };\n\n    this.show = payload => {\n      const {\n        content,\n        options = {}\n      } = payload;\n      const {\n        position,\n        autoClose\n      } = this.props;\n      const {\n        notifications\n      } = this.state;\n      const id = options.id || `${~~(Math.random() * 1000000)}`;\n      const opts = {\n        id,\n        type: options.type || 'none',\n        onClose: () => this.removeNotification(id),\n        position: options.position || position,\n        title: options.title || capitalizeFirst(options.type || ''),\n        actionRenderer: options.actionRenderer,\n        autoClose: typeof options.autoClose === 'number' ? options.autoClose : autoClose\n      };\n      this.collection.push({\n        name: id,\n        options: opts,\n        content: this.getNotificationContent(content, opts.onClose)\n      });\n      this.setState({\n        notifications: [...notifications, id]\n      });\n    };\n\n    const {\n      events\n    } = props;\n    this.eventManager = events || eventManagers[0];\n    this.state = {\n      notifications: []\n    };\n  }\n\n  componentDidMount() {\n    const em = this.eventManager;\n    em.on(NotificationAction.showNotification, this.show);\n    em.on(NotificationAction.clearNotification, this.hide);\n    eventManagers.push(em);\n  }\n\n  componentWillUnmount() {\n    const em = this.eventManager;\n    em.off(NotificationAction.showNotification, this.show);\n    em.off(NotificationAction.clearNotification, this.hide);\n    eventManagers.splice(eventManagers.lastIndexOf(em), 1);\n  }\n\n  removeNotification(id) {\n    this.setState({\n      notifications: this.state.notifications.filter(v => v !== id)\n    });\n  }\n\n  clearNotifications() {\n    this.setState({\n      notifications: []\n    });\n  }\n\n  getNotificationContent(content, onClose) {\n    if (React.isValidElement(content)) {\n      return React.cloneElement(content, {\n        onClose\n      });\n    } else if (typeof content === 'function') {\n      return content({\n        onClose\n      });\n    }\n\n    return content;\n  }\n\n  defaultNotificationRenderer(payload) {\n    const {\n      content,\n      options = {}\n    } = payload;\n    return React.createElement(ToastNotification, Object.assign({}, options, {\n      title: options.title,\n      key: `notification-${options.id}`\n    }), content);\n  }\n\n  makeNotification(payload) {\n    const {\n      notificationRenderer\n    } = this.props;\n    const renderer = notificationRenderer || this.defaultNotificationRenderer;\n    return renderer(payload);\n  }\n\n  render() {\n    const {\n      position = 'relative',\n      width,\n      newestOnTop = false\n    } = this.props;\n    const {\n      notifications\n    } = this.state;\n    const notificationsToRender = {};\n    const collection = this.collection.map((item, i) => ({\n      id: item.name,\n      item: item,\n      index: i\n    }));\n\n    if (newestOnTop) {\n      collection.reverse();\n    }\n\n    collection.forEach(({\n      id,\n      item,\n      index\n    }) => {\n      const options = item.options || {};\n      const itemPosition = options.position || position;\n      notificationsToRender[itemPosition] || (notificationsToRender[itemPosition] = []);\n\n      if (notifications.indexOf(id) !== -1) {\n        notificationsToRender[itemPosition].push(this.makeNotification(item));\n      } else {\n        notificationsToRender[itemPosition].push(undefined);\n        this.collection.splice(index, 1);\n      }\n    });\n    return React.createElement(\"div\", null, Object.keys(notificationsToRender).map(position => {\n      const disablePointer = notificationsToRender[position].length === 1 && notificationsToRender[position][0] === null;\n      return React.createElement(StyledNotifications, {\n        key: `notification-container-${position}`,\n        width: width,\n        position: position,\n        disablePointer: disablePointer\n      }, notificationsToRender[position]);\n    }));\n  }\n\n}\nNotifications.inner = {\n  get ToastNotification() {\n    return ToastNotification;\n  },\n\n  get StyledNotifications() {\n    return StyledNotifications;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Notifications/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled, { css } from '../../utils/styled';\nimport { NotificationOption, NotificationProps, NotificationsPosition, NotificationAction, NotificationOptions, NotificationContent, } from './types';\nimport { EventManager, eventManagers } from '../../utils/eventManager';\nimport { capitalizeFirst } from '../../utils/text';\nimport { ToastNotification } from './ToastNotification.part';\nexport { NotificationsPosition, NotificationOption, NotificationType, NotificationOptions, NotificationAction, } from './types';\nexport { notify } from './notifier';\nexport interface NotificationsProps {\n    /**\n     * Custom notification renderer component.\n     */\n    notificationRenderer?(e: NotificationOptions): React.ReactChild;\n    /**\n     * The default position for new notifications. By default relative.\n     * @default relative\n     */\n    position?: NotificationsPosition;\n    /**\n     * Disable the pointer symbol. By default enabled.\n     * @default false\n     */\n    disablePointer?: boolean;\n    /**\n     * The width to be used, by default auto.\n     * @default auto\n     */\n    width?: number;\n    /**\n     * Automatically closes notifications after a certain time. By default\n     * the notifications are not closed.\n     * @default false\n     */\n    autoClose?: false | number;\n    /**\n     * Show the latest on top. By default latest notifications are shown below.\n     * @default false\n     */\n    newestOnTop?: boolean;\n    /**\n     * Sets the event manager to use. By default a standard event manager is used.\n     */\n    events?: EventManager;\n}\nexport interface NotificationsState {\n    notifications: Array<string>;\n}\nexport interface StyledNotificationsProps {\n    position?: NotificationsPosition;\n    disablePointer?: boolean;\n    width?: number;\n}\nexport interface AbsoluteContainerProps {\n    position: NotificationsPosition;\n    width: number;\n}\ninterface NotificationEntry extends NotificationOptions {\n    name: string;\n}\nconst defaultProps = {\n    width: 320,\n};\nconst getNotificationPositionStyle = (pos: NotificationsPosition) => {\n    let positionStyle = `${pos.split('-')[0]}:1rem;`;\n    if (pos.indexOf('center') !== -1) {\n        positionStyle += `left:50%;transform:translateX(-50%);`;\n    }\n    else {\n        positionStyle += `${pos.split('-')[1]}:1rem;`;\n    }\n    return positionStyle;\n};\nconst AbsoluteContainer = css<AbsoluteContainerProps> `\n  z-index: 10001;\n  position: fixed;\n  ${props => getNotificationPositionStyle(props.position)};\n  width: ${props => (props.width ? props.width : defaultProps.width)}px;\n  @media (max-width: 480px) {\n    width: 100vw;\n    padding: 0;\n    right: 0;\n    margin: 0;\n    position: fixed;\n    ${props => (props.position.substring(0, 3) === 'top' ? 'top: 0' : 'bottom: 0')};\n  }\n`;\nconst StyledNotifications = styled.div<StyledNotificationsProps> `\n  box-sizing: border-box;\n  width: ${props => (!props.width ? 'auto' : `${props.width}px`)};\n  ${props => (props.disablePointer ? `pointer-events: none` : ``)};\n  @media (max-width: 480px) {\n    padding: 0;\n    margin: 0;\n  }\n  ${props => (props.position !== 'relative' ? AbsoluteContainer : '')};\n`;\ninterface NotificationClose {\n    (): void;\n}\n/**\n * The host element for arbitrary notifications. Use as a singleton only.\n */\nexport class Notifications extends React.Component<NotificationsProps, NotificationsState> {\n    private collection: Array<NotificationEntry> = [];\n    private eventManager: EventManager;\n    constructor(props: NotificationsProps) {\n        super(props);\n        const { events } = props;\n        this.eventManager = events || eventManagers[0];\n        this.state = {\n            notifications: [],\n        };\n    }\n    componentDidMount() {\n        const em = this.eventManager;\n        em.on(NotificationAction.showNotification, this.show);\n        em.on(NotificationAction.clearNotification, this.hide);\n        eventManagers.push(em);\n    }\n    componentWillUnmount() {\n        const em = this.eventManager;\n        em.off(NotificationAction.showNotification, this.show);\n        em.off(NotificationAction.clearNotification, this.hide);\n        eventManagers.splice(eventManagers.lastIndexOf(em), 1);\n    }\n    private removeNotification(id: string) {\n        this.setState({\n            notifications: this.state.notifications.filter(v => v !== id),\n        });\n    }\n    private clearNotifications() {\n        this.setState({\n            notifications: [],\n        });\n    }\n    private getNotificationContent(content: NotificationContent, onClose?: NotificationClose) {\n        if (React.isValidElement(content)) {\n            return React.cloneElement(content, { onClose } as NotificationProps);\n        }\n        else if (typeof content === 'function') {\n            return content({ onClose });\n        }\n        return content;\n    }\n    private hide = (id: string) => {\n        if (typeof id === 'string') {\n            this.removeNotification(id);\n        }\n        else {\n            this.clearNotifications();\n        }\n    };\n    private show = (payload: NotificationOptions) => {\n        const { content, options = {} } = payload;\n        const { position, autoClose } = this.props;\n        const { notifications } = this.state;\n        const id = options.id || `${~~(Math.random() * 1000000)}`;\n        const opts: NotificationOption = {\n            id,\n            type: options.type || 'none',\n            onClose: () => this.removeNotification(id),\n            position: options.position || position,\n            title: options.title || capitalizeFirst(options.type || ''),\n            actionRenderer: options.actionRenderer,\n            autoClose: typeof options.autoClose === 'number' ? options.autoClose : autoClose,\n        };\n        this.collection.push({\n            name: id,\n            options: opts,\n            content: this.getNotificationContent(content, opts.onClose),\n        });\n        this.setState({\n            notifications: [...notifications, id],\n        });\n    };\n    private defaultNotificationRenderer(payload: NotificationOptions) {\n        const { content, options = {} } = payload;\n        return (<ToastNotification {...options} title={options.title} key={`notification-${options.id}`}>\n        {content}\n      </ToastNotification>);\n    }\n    private makeNotification(payload: NotificationOptions) {\n        const { notificationRenderer } = this.props;\n        const renderer = notificationRenderer || this.defaultNotificationRenderer;\n        return renderer(payload);\n    }\n    render() {\n        const { position = 'relative', width, newestOnTop = false } = this.props;\n        const { notifications } = this.state;\n        const notificationsToRender = {};\n        const collection = this.collection.map((item, i) => ({\n            id: item.name,\n            item: item,\n            index: i,\n        }));\n        if (newestOnTop) {\n            collection.reverse();\n        }\n        collection.forEach(({ id, item, index }) => {\n            const options = item.options || {};\n            const itemPosition = options.position || position;\n            notificationsToRender[itemPosition] || (notificationsToRender[itemPosition] = []);\n            if (notifications.indexOf(id) !== -1) {\n                notificationsToRender[itemPosition].push(this.makeNotification(item));\n            }\n            else {\n                notificationsToRender[itemPosition].push(undefined);\n                this.collection.splice(index, 1);\n            }\n        });\n        return (<div>\n        {Object.keys(notificationsToRender).map((position: NotificationsPosition) => {\n            const disablePointer = notificationsToRender[position].length === 1 && notificationsToRender[position][0] === null;\n            return (<StyledNotifications key={`notification-container-${position}`} width={width} position={position} disablePointer={disablePointer}>\n              {notificationsToRender[position]}\n            </StyledNotifications>);\n        })}\n      </div>);\n    }\n    static inner = {\n        get ToastNotification() { return ToastNotification as typeof ToastNotification; },\n        get StyledNotifications() { return StyledNotifications as typeof StyledNotifications; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}