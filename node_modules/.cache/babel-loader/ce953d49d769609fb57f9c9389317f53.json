{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { PaginationBar } from '../PaginationBar';\nimport { PaginationLayout } from './PaginationLayout.part';\n/**\n * The Pagination component allows generic pagination of arbitrary components.\n */\n\nexport class Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePageChange = ({\n      page\n    }) => {\n      const {\n        onChange,\n        value\n      } = this.props;\n\n      if (value === undefined) {\n        this.setState({\n          current: page\n        });\n      }\n\n      if (typeof onChange === 'function') {\n        onChange({\n          value: page\n        });\n      }\n    };\n\n    this.handleSizeChange = ({\n      size\n    }) => {\n      const {\n        children\n      } = this.props;\n      const {\n        current\n      } = this.state;\n      const total = React.Children.count(children);\n      const maxPageCount = Math.max(Math.ceil(total / size) - 1, 0);\n      this.setState({\n        size,\n        current: Math.min(current, maxPageCount)\n      });\n    };\n\n    const {\n      value,\n      defaultValue,\n      size = 20\n    } = props;\n    this.state = {\n      current: value || defaultValue || 0,\n      size: Array.isArray(size) ? size[0] : size\n    };\n  }\n\n  getDim(count) {\n    const {\n      current,\n      size: sizeState\n    } = this.state;\n    const min = current * sizeState;\n\n    if (min < count) {\n      return {\n        current,\n        min,\n        max: min + sizeState,\n        sizeState\n      };\n    } else {\n      const previous = ~~((count - 1) / sizeState);\n      return {\n        current: previous,\n        min: previous * sizeState,\n        max: (previous + 1) * sizeState,\n        sizeState\n      };\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      host,\n      size: sizeProp,\n      itemsInfo,\n      pagesInfo,\n      label,\n      render\n    } = _a,\n          props = __rest(_a, [\"children\", \"host\", \"size\", \"itemsInfo\", \"pagesInfo\", \"label\", \"render\"]);\n\n    const count = React.Children.count(children);\n    const {\n      current,\n      min,\n      max,\n      sizeState\n    } = this.getDim(count);\n    const content = count < sizeState ? children : React.Children.map(children, (child, index) => {\n      if (index >= min && index < max) {\n        return child;\n      }\n\n      return undefined;\n    });\n\n    if (typeof render === 'function') {\n      return render({\n        current,\n        min,\n        max,\n        count,\n        content,\n        sizeChanged: this.handleSizeChange,\n        pageChanged: this.handlePageChange\n      });\n    }\n\n    return React.createElement(PaginationLayout, Object.assign({}, props, {\n      host: host,\n      content: content,\n      controls: React.createElement(PaginationBar, {\n        selectedPage: current,\n        itemsInfo: itemsInfo,\n        itemsPerPageLabel: label,\n        pagesInfo: pagesInfo,\n        size: sizeState,\n        items: count,\n        onSizeChanged: this.handleSizeChange,\n        onPageChanged: this.handlePageChange,\n        availableSizes: Array.isArray(sizeProp) ? sizeProp : []\n      })\n    }));\n  }\n\n}\nPagination.inner = {\n  get PaginationLayout() {\n    return PaginationLayout;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Pagination/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StandardProps } from '../../common';\nimport { PaginationBar, PaginationBarSizeChangedEvent, PaginationBarPageChangedEvent } from '../PaginationBar';\nimport { PaginationLayout } from './PaginationLayout.part';\nexport interface PaginationChangeEvent {\n    /**\n     * The current page index.\n     */\n    value: number;\n}\nexport interface PaginationState {\n    current: number;\n    size: number;\n}\nexport interface PaginationRenderEvent {\n    /**\n     * The current page index.\n     */\n    current: number;\n    /**\n     * The minimum index for the entry to be in the current page.\n     */\n    min: number;\n    /**\n     * The maximum index for the entry to be in the current page.\n     */\n    max: number;\n    /**\n     * The total number of entries.\n     */\n    count: number;\n    /**\n     * The rendered entries.\n     */\n    content: React.ReactNode;\n    /**\n     * Callback for emitting an items per page change.\n     */\n    sizeChanged(e: PaginationBarSizeChangedEvent): void;\n    /**\n     * Callback for emitting a change of the current page index.\n     */\n    pageChanged(e: PaginationBarPageChangedEvent): void;\n}\nexport interface PaginationProps extends StandardProps {\n    /**\n     * The initial, i.e., default, page index used in managed mode.\n     */\n    defaultValue?: number;\n    /**\n     * The current page index leading to controlled mode.\n     */\n    value?: number;\n    /**\n     * The maximum number of entries per page. By default set to 20.\n     * @default 20\n     */\n    size?: number | Array<number>;\n    /**\n     * The optional host element to be used.\n     */\n    host?: string | React.ComponentClass | React.StatelessComponent;\n    /**\n     * Event fired when the selected page changes.\n     */\n    onChange?(e: PaginationChangeEvent): void;\n    /**\n     * The optional footer info label override, e.g., for localization.\n     */\n    label?: string;\n    /**\n     * Optional function to compute the items info label.\n     * @param start The inclusive start number of entries.\n     * @param end The inclusive end number of entries.\n     * @param total The total number of pages.\n     */\n    itemsInfo?(start: number, end: number, total: number): React.ReactChild;\n    /**\n     * Optional function to compute the pages info label.\n     * @param start The inclusive start number of entries.\n     * @param end The inclusive end number of entries.\n     */\n    pagesInfo?(start: number, end: number): React.ReactChild;\n    /**\n     * Callback to override the rendering of the pagination.\n     */\n    render?(e: PaginationRenderEvent): React.ReactNode;\n    /**\n     * The content of the component. Will be cropped if pagination applies.\n     */\n    children?: React.ReactNode;\n}\n/**\n * The Pagination component allows generic pagination of arbitrary components.\n */\nexport class Pagination extends React.Component<PaginationProps, PaginationState> {\n    constructor(props: PaginationProps) {\n        super(props);\n        const { value, defaultValue, size = 20 } = props;\n        this.state = {\n            current: value || defaultValue || 0,\n            size: Array.isArray(size) ? size[0] : size,\n        };\n    }\n    private handlePageChange = ({ page }: PaginationBarPageChangedEvent) => {\n        const { onChange, value } = this.props;\n        if (value === undefined) {\n            this.setState({\n                current: page,\n            });\n        }\n        if (typeof onChange === 'function') {\n            onChange({\n                value: page,\n            });\n        }\n    };\n    private handleSizeChange = ({ size }: PaginationBarSizeChangedEvent) => {\n        const { children } = this.props;\n        const { current } = this.state;\n        const total = React.Children.count(children);\n        const maxPageCount = Math.max(Math.ceil(total / size) - 1, 0);\n        this.setState({\n            size,\n            current: Math.min(current, maxPageCount),\n        });\n    };\n    private getDim(count: number) {\n        const { current, size: sizeState } = this.state;\n        const min = current * sizeState;\n        if (min < count) {\n            return {\n                current,\n                min,\n                max: min + sizeState,\n                sizeState,\n            };\n        }\n        else {\n            const previous = ~~((count - 1) / sizeState);\n            return {\n                current: previous,\n                min: previous * sizeState,\n                max: (previous + 1) * sizeState,\n                sizeState,\n            };\n        }\n    }\n    render() {\n        const { children, host, size: sizeProp, itemsInfo, pagesInfo, label, render, ...props } = this.props;\n        const count = React.Children.count(children);\n        const { current, min, max, sizeState } = this.getDim(count);\n        const content = count < sizeState\n            ? children\n            : React.Children.map(children, (child, index) => {\n                if (index >= min && index < max) {\n                    return child;\n                }\n                return undefined;\n            });\n        if (typeof render === 'function') {\n            return render({\n                current,\n                min,\n                max,\n                count,\n                content,\n                sizeChanged: this.handleSizeChange,\n                pageChanged: this.handlePageChange,\n            });\n        }\n        return (<PaginationLayout {...props} host={host} content={content} controls={<PaginationBar selectedPage={current} itemsInfo={itemsInfo} itemsPerPageLabel={label} pagesInfo={pagesInfo} size={sizeState} items={count} onSizeChanged={this.handleSizeChange} onPageChanged={this.handlePageChange} availableSizes={Array.isArray(sizeProp) ? sizeProp : []}/>}/>);\n    }\n    static inner = {\n        get PaginationLayout() { return PaginationLayout as typeof PaginationLayout; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}