{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nimport { InteractiveSurface } from '../InteractiveSurface';\nimport { Grid } from '../Grid';\nimport { GridArea } from '../GridArea';\n\nfunction clamp(lower, value, upper) {\n  return Math.min(Math.max(lower, value), upper);\n}\n\nfunction calc(rel, off, total, dim) {\n  const value = clamp(0, rel * total - off, total - dim);\n  return `${value}px`;\n}\n\nfunction repeat(count, dim) {\n  const value = dim !== undefined ? `${dim}px` : '1fr';\n\n  if (count !== undefined) {\n    const values = [];\n\n    for (let i = 0; i < count; i++) {\n      values.push(value);\n    }\n\n    return values;\n  }\n\n  return value;\n}\n\nfunction collides(a, b) {\n  if (a.hidden || b.hidden) {\n    return false;\n  } else if (a.column !== undefined && a.row !== undefined && b.column !== undefined && b.row !== undefined) {\n    const {\n      colSpan: acp = 1,\n      rowSpan: arp = 1\n    } = a;\n    const {\n      colSpan: bcp = 1,\n      rowSpan: brp = 1\n    } = b;\n    const acs = a.column;\n    const ace = a.column + acp - 1;\n    const ars = a.row;\n    const are = a.row + arp - 1;\n    const bcs = b.column;\n    const bce = b.column + bcp - 1;\n    const brs = b.row;\n    const bre = b.row + brp - 1;\n    return acs <= bce && ace >= bcs && ars <= bre && are >= brs;\n  }\n\n  return false;\n}\n\nfunction notEqual(a, b) {\n  if (a !== b) {\n    if (a.length !== b.length) {\n      return true;\n    }\n\n    for (let i = a.length; i--;) {\n      const at = a[i];\n      const bt = b[i];\n\n      if (at !== bt || at.colSpan !== bt.colSpan || at.column !== bt.column || at.id !== bt.id || at.row !== bt.row || at.rowSpan !== bt.rowSpan) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction resetStyle(node) {\n  // tslint:disable-next-line\n  const defaultValue = null;\n  const style = node.style;\n  style.position = 'static';\n  style.cursor = defaultValue;\n  style.width = defaultValue;\n  style.height = defaultValue;\n  style.left = defaultValue;\n  style.top = defaultValue;\n  style.zIndex = defaultValue;\n}\n\nconst Preview = styled.div`\n  background: #eee;\n  border: 1px dashed #ccc;\n  width: 100%;\n  height: 100%;\n`;\n\nfunction getPreview(preview, tile) {\n  const content = preview === true ? React.createElement(Preview, null) : preview;\n  return React.createElement(GridArea, {\n    colSpan: tile.colSpan,\n    rowSpan: tile.rowSpan,\n    column: tile.column,\n    row: tile.row\n  }, content);\n}\n\nconst defaultActiveTile = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0\n};\n\nfunction changeTile(oldTiles, newTile) {\n  let changed = false;\n  const newTiles = oldTiles.map(tile => {\n    if (tile.id === newTile.id) {\n      changed = changed || tile.colSpan !== newTile.colSpan || tile.column !== newTile.column || tile.hidden !== newTile.hidden || tile.row !== newTile.row || tile.rowSpan !== newTile.rowSpan;\n      return newTile;\n    } else if (collides(tile, newTile)) {\n      changed = true;\n      return {\n        id: tile.id,\n        colSpan: tile.colSpan,\n        rowSpan: tile.rowSpan\n      };\n    }\n\n    return tile;\n  });\n  return changed ? newTiles : oldTiles;\n}\n/**\n * Dashboard component.\n */\n\n\nexport class Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setters = [];\n\n    this.dragTile = e => {\n      const {\n        activeTile\n      } = this;\n\n      if (activeTile) {\n        const node = activeTile.node;\n        const current = activeTile.current;\n\n        if (!e.moved) {} else if (e.active) {\n          const style = node.style;\n          style.left = calc(e.x, activeTile.x, e.rect.width, activeTile.width);\n          style.top = calc(e.y, activeTile.y, e.rect.height, activeTile.height);\n          this.previewDrag(e.x, e.y, current);\n        } else {\n          const pos = this.getTargetPosition(e.x, e.y, current);\n          resetStyle(node);\n          this.finishDrag(Object.assign({}, current, {\n            column: pos.column,\n            row: pos.row\n          }));\n        }\n      } else {\n        e.release();\n      }\n    };\n\n    this.setLayout = ({\n      layout\n    }) => {\n      this.layout = layout;\n    };\n\n    const {\n      defaultTiles = []\n    } = props;\n    this.state = {\n      tiles: [...defaultTiles],\n      live: undefined\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      defaultTiles: currTiles = []\n    } = this.props;\n    const {\n      defaultTiles: nextTiles = []\n    } = nextProps;\n\n    if (notEqual(currTiles, nextTiles)) {\n      this.setState({\n        tiles: [...nextTiles],\n        live: undefined\n      });\n    }\n  }\n\n  finishDrag(newTile) {\n    const {\n      onChange\n    } = this.props;\n    const {\n      tiles: oldTiles\n    } = this.state;\n    const newTiles = changeTile(oldTiles, newTile);\n    this.activeTile = undefined;\n\n    if (newTiles !== oldTiles) {\n      this.setState({\n        tiles: newTiles,\n        live: undefined\n      });\n\n      if (typeof onChange === 'function') {\n        onChange({\n          tile: newTile,\n          tiles: newTiles\n        });\n      }\n    } else {\n      this.setState({\n        live: undefined\n      });\n    }\n  }\n\n  previewDrag(h, v, tile) {\n    const active = this.activeTile;\n    const {\n      preview\n    } = this.props;\n    const {\n      live,\n      tiles\n    } = this.state;\n\n    if (preview && active && live) {\n      const current = active.current;\n      const pos = this.getTargetPosition(h, v, tile);\n      const last = live[active.index];\n\n      if (pos.column !== last.column || pos.row !== last.row) {\n        this.setState({\n          live: changeTile(tiles, Object.assign({}, current, {\n            column: pos.column,\n            row: pos.row\n          }))\n        });\n      }\n    }\n  }\n\n  getTargetPosition(h, v, tile) {\n    const {\n      columns,\n      rows\n    } = this.layout;\n    const {\n      colSpan = 1,\n      rowSpan = 1\n    } = tile;\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.activeTile || defaultActiveTile;\n    const totalRows = rows.length;\n    const totalColumns = columns.length;\n    const columnOffset = ~~(x * colSpan / width);\n    const rowOffset = ~~(y * rowSpan / height);\n    return {\n      column: clamp(0, ~~(h * totalColumns) - columnOffset, totalColumns - colSpan),\n      row: clamp(0, ~~(v * totalRows) - rowOffset, totalRows - rowSpan)\n    };\n  }\n\n  setActiveTile(e, index) {\n    const {\n      disabled\n    } = this.props;\n    const {\n      tiles\n    } = this.state;\n    const current = tiles[index];\n\n    if (!disabled) {\n      this.activeTile = Object.assign({}, e, {\n        index,\n        current\n      });\n      const style = e.node.style;\n      style.cursor = 'move';\n      style.position = 'absolute';\n      style.width = `${e.width}px`;\n      style.height = `${e.height}px`;\n      style.zIndex = '100000000';\n      this.setState({\n        live: tiles\n      });\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      columnWidth,\n      columnCount = 5,\n      rowHeight,\n      rowCount,\n      spacing = 10,\n      theme,\n      children,\n      disabled,\n      preview,\n      defaultTiles: _0,\n      onChange: _1,\n      emptyTiles\n    } = _a,\n          props = __rest(_a, [\"columnWidth\", \"columnCount\", \"rowHeight\", \"rowCount\", \"spacing\", \"theme\", \"children\", \"disabled\", \"preview\", \"defaultTiles\", \"onChange\", \"emptyTiles\"]);\n\n    const {\n      tiles,\n      live\n    } = this.state;\n    const currentTiles = live || tiles;\n    const columns = repeat(columnCount, columnWidth);\n    const rows = repeat(rowCount, rowHeight);\n    const active = this.activeTile;\n    return React.createElement(InteractiveSurface, {\n      theme: theme,\n      onChange: this.dragTile,\n      disabled: disabled\n    }, React.createElement(Grid, Object.assign({\n      theme: theme,\n      rows: rows,\n      columns: columns,\n      spacing: `${spacing}px`,\n      showEmptyCells: emptyTiles,\n      onLayout: this.setLayout\n    }, props), React.Children.map(children, (child, index) => {\n      const tile = currentTiles[index];\n      const setters = this.setters;\n\n      if (setters[index] === undefined) {\n        setters[index] = e => this.setActiveTile(e, index);\n      }\n\n      return tile && React.createElement(GridArea, {\n        key: tile.id,\n        theme: theme,\n        onTap: setters[index],\n        column: tile.column,\n        colSpan: tile.colSpan,\n        rowSpan: tile.rowSpan,\n        hidden: tile.hidden,\n        row: tile.row\n      }, child);\n    }), preview && active && getPreview(preview, currentTiles[active.index])));\n  }\n\n}\nDashboard.inner = {\n  get InteractiveSurface() {\n    return InteractiveSurface;\n  },\n\n  get Grid() {\n    return Grid;\n  },\n\n  get GridArea() {\n    return GridArea;\n  }\n\n};","map":{"version":3,"sources":["../../../../src/components/Dashboard/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { StandardProps } from '../../common';\nimport { InteractiveSurface, InteractiveSurfaceChangeEvent } from '../InteractiveSurface';\nimport { Grid, GridLayout } from '../Grid';\nimport { GridArea, GridAreaTapEvent } from '../GridArea';\nexport interface DashboardTile {\n    /**\n     * Id of the tile, must be unique.\n     */\n    id: string;\n    /**\n     * The column placement for the tile. By default auto.\n     * @default auto\n     */\n    column?: number;\n    /**\n     * The row placement for the tile. By default auto.\n     * @default auto\n     */\n    row?: number;\n    /**\n     * The number of columns spanned by the tile. By default 1.\n     * @default 1\n     */\n    colSpan?: number;\n    /**\n     * The number of rows spanned by the tile. By default 1.\n     * @default 1\n     */\n    rowSpan?: number;\n    /**\n     * Determines whether the tile is hidden or not.\n     * @default false\n     */\n    hidden?: boolean;\n}\nexport interface DashboardChangeEvent {\n    /**\n     * The tile that originated the change.\n     */\n    tile: DashboardTile;\n    /**\n     * The reconstructed dashboard layout.\n     */\n    tiles: Array<DashboardTile>;\n}\nexport interface DashboardProps extends StandardProps {\n    /**\n     * The number of rows in the dashboard grid. By default flexible.\n     * @default auto\n     */\n    rowCount?: number;\n    /**\n     * The height per row in pixel. By default auto.\n     * @default auto\n     */\n    rowHeight?: number;\n    /**\n     * The number of columns in the dashboard grid. By default 5.\n     * @default 5\n     */\n    columnCount?: number;\n    /**\n     * The height per row in pixel. By default auto.\n     * @default auto\n     */\n    columnWidth?: number;\n    /**\n     * The spacing between the grid cells in pixel. By default 10.\n     * @default 10\n     */\n    spacing?: number;\n    /**\n     * The default tile arrangement to use. Only managed mode exist. Setting\n     * this property later will reset the tile layout to the given one.\n     */\n    defaultTiles: Array<DashboardTile>;\n    /**\n     * Fired when the dashboard layout is changed.\n     */\n    onChange?(e: DashboardChangeEvent): void;\n    /**\n     * Disables the ability to change the layout. By default false.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * Enables the live preview during the tile drag with a standard\n     * or custom element.\n     */\n    preview?: React.ReactChild | boolean;\n    /**\n     * By providing the show tile property, the dashboard will render\n     * the unused tiles.\n     */\n    emptyTiles?: boolean;\n    /**\n     * The content to consider for the dashboard.\n     */\n    children?: React.ReactNode;\n    /**\n     * Gets the reference to the underlying HTML DOM element.\n     */\n    innerRef?(instance: HTMLElement | null): void;\n}\nexport interface DashboardState {\n    tiles: Array<DashboardTile>;\n    live?: Array<DashboardTile>;\n}\nfunction clamp(lower: number, value: number, upper: number) {\n    return Math.min(Math.max(lower, value), upper);\n}\nfunction calc(rel: number, off: number, total: number, dim: number) {\n    const value = clamp(0, rel * total - off, total - dim);\n    return `${value}px`;\n}\nfunction repeat(count: number | undefined, dim?: number) {\n    const value = dim !== undefined ? `${dim}px` : '1fr';\n    if (count !== undefined) {\n        const values: Array<string> = [];\n        for (let i = 0; i < count; i++) {\n            values.push(value);\n        }\n        return values;\n    }\n    return value;\n}\nfunction collides(a: DashboardTile, b: DashboardTile) {\n    if (a.hidden || b.hidden) {\n        return false;\n    }\n    else if (a.column !== undefined && a.row !== undefined && b.column !== undefined && b.row !== undefined) {\n        const { colSpan: acp = 1, rowSpan: arp = 1 } = a;\n        const { colSpan: bcp = 1, rowSpan: brp = 1 } = b;\n        const acs = a.column;\n        const ace = a.column + acp - 1;\n        const ars = a.row;\n        const are = a.row + arp - 1;\n        const bcs = b.column;\n        const bce = b.column + bcp - 1;\n        const brs = b.row;\n        const bre = b.row + brp - 1;\n        return acs <= bce && ace >= bcs && ars <= bre && are >= brs;\n    }\n    return false;\n}\nfunction notEqual(a: Array<DashboardTile>, b: Array<DashboardTile>) {\n    if (a !== b) {\n        if (a.length !== b.length) {\n            return true;\n        }\n        for (let i = a.length; i--;) {\n            const at = a[i];\n            const bt = b[i];\n            if (at !== bt ||\n                at.colSpan !== bt.colSpan ||\n                at.column !== bt.column ||\n                at.id !== bt.id ||\n                at.row !== bt.row ||\n                at.rowSpan !== bt.rowSpan) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction resetStyle(node: HTMLElement) {\n    // tslint:disable-next-line\n    const defaultValue = null;\n    const style = node.style;\n    style.position = 'static';\n    style.cursor = defaultValue;\n    style.width = defaultValue;\n    style.height = defaultValue;\n    style.left = defaultValue;\n    style.top = defaultValue;\n    style.zIndex = defaultValue;\n}\nconst Preview = styled.div `\n  background: #eee;\n  border: 1px dashed #ccc;\n  width: 100%;\n  height: 100%;\n`;\nfunction getPreview(preview: React.ReactChild | boolean, tile: DashboardTile) {\n    const content = preview === true ? <Preview /> : preview;\n    return (<GridArea colSpan={tile.colSpan} rowSpan={tile.rowSpan} column={tile.column} row={tile.row}>\n      {content}\n    </GridArea>);\n}\nconst defaultActiveTile = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n};\nfunction changeTile(oldTiles: Array<DashboardTile>, newTile: DashboardTile) {\n    let changed = false;\n    const newTiles = oldTiles.map(tile => {\n        if (tile.id === newTile.id) {\n            changed =\n                changed ||\n                    tile.colSpan !== newTile.colSpan ||\n                    tile.column !== newTile.column ||\n                    tile.hidden !== newTile.hidden ||\n                    tile.row !== newTile.row ||\n                    tile.rowSpan !== newTile.rowSpan;\n            return newTile;\n        }\n        else if (collides(tile, newTile)) {\n            changed = true;\n            return {\n                id: tile.id,\n                colSpan: tile.colSpan,\n                rowSpan: tile.rowSpan,\n            };\n        }\n        return tile;\n    });\n    return changed ? newTiles : oldTiles;\n}\n/**\n * Dashboard component.\n */\nexport class Dashboard extends React.Component<DashboardProps, DashboardState> {\n    private setters: Array<(e: GridAreaTapEvent) => void> = [];\n    private layout: GridLayout;\n    private activeTile: {\n        node: HTMLElement;\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        index: number;\n        current: DashboardTile;\n    } | undefined;\n    constructor(props: DashboardProps) {\n        super(props);\n        const { defaultTiles = [] } = props;\n        this.state = {\n            tiles: [...defaultTiles],\n            live: undefined,\n        };\n    }\n    UNSAFE_componentWillReceiveProps(nextProps: DashboardProps) {\n        const { defaultTiles: currTiles = [] } = this.props;\n        const { defaultTiles: nextTiles = [] } = nextProps;\n        if (notEqual(currTiles, nextTiles)) {\n            this.setState({\n                tiles: [...nextTiles],\n                live: undefined,\n            });\n        }\n    }\n    private finishDrag(newTile: DashboardTile) {\n        const { onChange } = this.props;\n        const { tiles: oldTiles } = this.state;\n        const newTiles = changeTile(oldTiles, newTile);\n        this.activeTile = undefined;\n        if (newTiles !== oldTiles) {\n            this.setState({\n                tiles: newTiles,\n                live: undefined,\n            });\n            if (typeof onChange === 'function') {\n                onChange({\n                    tile: newTile,\n                    tiles: newTiles,\n                });\n            }\n        }\n        else {\n            this.setState({\n                live: undefined,\n            });\n        }\n    }\n    private dragTile = (e: InteractiveSurfaceChangeEvent) => {\n        const { activeTile } = this;\n        if (activeTile) {\n            const node = activeTile.node;\n            const current = activeTile.current;\n            if (!e.moved) {\n            }\n            else if (e.active) {\n                const style = node.style;\n                style.left = calc(e.x, activeTile.x, e.rect.width, activeTile.width);\n                style.top = calc(e.y, activeTile.y, e.rect.height, activeTile.height);\n                this.previewDrag(e.x, e.y, current);\n            }\n            else {\n                const pos = this.getTargetPosition(e.x, e.y, current);\n                resetStyle(node);\n                this.finishDrag({\n                    ...current,\n                    column: pos.column,\n                    row: pos.row,\n                });\n            }\n        }\n        else {\n            e.release();\n        }\n    };\n    private previewDrag(h: number, v: number, tile: DashboardTile) {\n        const active = this.activeTile;\n        const { preview } = this.props;\n        const { live, tiles } = this.state;\n        if (preview && active && live) {\n            const current = active.current;\n            const pos = this.getTargetPosition(h, v, tile);\n            const last = live[active.index];\n            if (pos.column !== last.column || pos.row !== last.row) {\n                this.setState({\n                    live: changeTile(tiles, {\n                        ...current,\n                        column: pos.column,\n                        row: pos.row,\n                    }),\n                });\n            }\n        }\n    }\n    private getTargetPosition(h: number, v: number, tile: DashboardTile) {\n        const { columns, rows } = this.layout;\n        const { colSpan = 1, rowSpan = 1 } = tile;\n        const { x, y, width, height } = this.activeTile || defaultActiveTile;\n        const totalRows = rows.length;\n        const totalColumns = columns.length;\n        const columnOffset = ~~((x * colSpan) / width);\n        const rowOffset = ~~((y * rowSpan) / height);\n        return {\n            column: clamp(0, ~~(h * totalColumns) - columnOffset, totalColumns - colSpan),\n            row: clamp(0, ~~(v * totalRows) - rowOffset, totalRows - rowSpan),\n        };\n    }\n    private setActiveTile(e: GridAreaTapEvent, index: number) {\n        const { disabled } = this.props;\n        const { tiles } = this.state;\n        const current = tiles[index];\n        if (!disabled) {\n            this.activeTile = {\n                ...e,\n                index,\n                current,\n            };\n            const style = e.node.style;\n            style.cursor = 'move';\n            style.position = 'absolute';\n            style.width = `${e.width}px`;\n            style.height = `${e.height}px`;\n            style.zIndex = '100000000';\n            this.setState({\n                live: tiles,\n            });\n        }\n    }\n    private setLayout = ({ layout }: {\n        layout: GridLayout;\n    }) => {\n        this.layout = layout;\n    };\n    render() {\n        const { columnWidth, columnCount = 5, rowHeight, rowCount, spacing = 10, theme, children, disabled, preview, defaultTiles: _0, onChange: _1, emptyTiles, ...props } = this.props;\n        const { tiles, live } = this.state;\n        const currentTiles = live || tiles;\n        const columns = repeat(columnCount, columnWidth);\n        const rows = repeat(rowCount, rowHeight);\n        const active = this.activeTile;\n        return (<InteractiveSurface theme={theme} onChange={this.dragTile} disabled={disabled}>\n        <Grid theme={theme} rows={rows} columns={columns} spacing={`${spacing}px`} showEmptyCells={emptyTiles} onLayout={this.setLayout} {...props}>\n          {React.Children.map(children, (child, index) => {\n            const tile = currentTiles[index];\n            const setters = this.setters;\n            if (setters[index] === undefined) {\n                setters[index] = e => this.setActiveTile(e, index);\n            }\n            return (tile && (<GridArea key={tile.id} theme={theme} onTap={setters[index]} column={tile.column} colSpan={tile.colSpan} rowSpan={tile.rowSpan} hidden={tile.hidden} row={tile.row}>\n                  {child}\n                </GridArea>));\n        })}\n          {preview && active && getPreview(preview, currentTiles[active.index])}\n        </Grid>\n      </InteractiveSurface>);\n    }\n    static inner = {\n        get InteractiveSurface() { return InteractiveSurface as typeof InteractiveSurface; },\n        get Grid() { return Grid as typeof Grid; },\n        get GridArea() { return GridArea as typeof GridArea; }\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}