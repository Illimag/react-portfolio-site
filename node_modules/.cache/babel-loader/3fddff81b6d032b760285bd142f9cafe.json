{"ast":null,"code":"import { css } from './styled';\nimport { ScreenSizeList } from '../common';\nimport { breakpoints } from '../themes';\nexport function getMediaQueries(breakpoints) {\n  return ScreenSizeList.map(x => ({\n    screen: x,\n    breakpoints: getScreenSizeBreakpoints(x, breakpoints)\n  })).reduce((acc, next) => next.breakpoints ? Object.assign({}, acc, {\n    [next.screen]: getWidthBreakpointsQuery(next.breakpoints)\n  }) : acc, {});\n} // create max-width media query including screen size\n\nexport function displayUpTo(screen) {\n  const screenBreakpoints = getScreenSizeBreakpoints(screen, breakpoints);\n\n  if (!screenBreakpoints) {\n    throw new Error('Invalid screen size');\n  }\n\n  const query = getWidthBreakpointsQuery({\n    max: screenBreakpoints.max\n  });\n  return getMediaQuery(query);\n} // create min-width media query including screen size\n\nexport function displayFrom(screen) {\n  const screenBreakpoints = getScreenSizeBreakpoints(screen, breakpoints);\n\n  if (!screenBreakpoints) {\n    throw new Error('Invalid screen size');\n  }\n\n  const query = getWidthBreakpointsQuery({\n    min: screenBreakpoints.min\n  });\n  return getMediaQuery(query);\n}\nexport function displayTo(screen) {\n  const screenBreakpoints = getScreenSizeBreakpoints(screen, breakpoints);\n  const query = screenBreakpoints ? getWidthBreakpointsQuery(screenBreakpoints) : screen;\n  return getMediaQuery(query);\n} // create media query based on previous and next breakpoints\n\nexport function getWidthBreakpointsQuery({\n  max,\n  min\n}) {\n  if (min === undefined && max === undefined) {\n    throw new Error('Both breakpoints cannot be `undefined`');\n  }\n\n  if (min !== undefined && max != undefined && max < min) {\n    throw new Error(`The min(${min}) breakpoint must be less than max(${max})`);\n  }\n\n  const queries = [];\n\n  if (min !== undefined) {\n    queries.push(`(min-width: ${min}px)`);\n  }\n\n  if (max !== undefined) {\n    queries.push(`(max-width: ${max - 1}px)`);\n  }\n\n  return `${queries.join(' and ')}`;\n}\nexport function getScreenSizeBreakpoints(screen, breakpoints) {\n  switch (screen) {\n    case 'small':\n      return {\n        max: breakpoints.medium\n      };\n\n    case 'medium':\n      return {\n        min: breakpoints.medium,\n        max: breakpoints.large\n      };\n\n    case 'large':\n      return {\n        min: breakpoints.large,\n        max: breakpoints.xLarge\n      };\n\n    case 'xLarge':\n      return {\n        min: breakpoints.xLarge,\n        max: breakpoints.max\n      };\n\n    case 'max':\n      return {\n        min: breakpoints.max\n      };\n\n    default:\n      return undefined;\n  }\n}\n\nfunction getMediaQuery(query) {\n  return (strings, ...interpolations) => css`\n      @media ${query} {\n        ${css(strings, ...interpolations)};\n      }\n    `;\n}","map":{"version":3,"sources":["../../../src/utils/displayTo.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,QAAuC,UAAvC;AACA,SAAkC,cAAlC,QAAwD,WAAxD;AACA,SAAS,WAAT,QAA4B,WAA5B;AAIA,OAAM,SAAU,eAAV,CAA0B,WAA1B,EAAkD;AACtD,SAAO,cAAc,CAAC,GAAf,CAAmB,CAAC,KAAK;AAAE,IAAA,MAAM,EAAE,CAAV;AAAa,IAAA,WAAW,EAAE,wBAAwB,CAAC,CAAD,EAAI,WAAJ;AAAlD,GAAL,CAApB,EAAgG,MAAhG,CACL,CAAC,GAAD,EAAM,IAAN,KAAgB,IAAI,CAAC,WAAL,GAAkB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,GAAN,EAAS;AAAE,KAAC,IAAI,CAAC,MAAN,GAAe,wBAAwB,CAAC,IAAI,CAAC,WAAN;AAAzC,GAAT,CAAlB,GAA2F,GADtG,EAEL,EAFK,CAAP;AAID,C,CAED;;AACA,OAAM,SAAU,WAAV,CAAsB,MAAtB,EAAwC;AAC5C,QAAM,iBAAiB,GAAG,wBAAwB,CAAC,MAAD,EAAS,WAAT,CAAlD;;AACA,MAAI,CAAC,iBAAL,EAAwB;AACtB,UAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,QAAM,KAAK,GAAG,wBAAwB,CAAC;AAAE,IAAA,GAAG,EAAE,iBAAiB,CAAC;AAAzB,GAAD,CAAtC;AACA,SAAO,aAAa,CAAC,KAAD,CAApB;AACD,C,CAED;;AACA,OAAM,SAAU,WAAV,CAAsB,MAAtB,EAAwC;AAC5C,QAAM,iBAAiB,GAAG,wBAAwB,CAAC,MAAD,EAAS,WAAT,CAAlD;;AACA,MAAI,CAAC,iBAAL,EAAwB;AACtB,UAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,QAAM,KAAK,GAAG,wBAAwB,CAAC;AAAE,IAAA,GAAG,EAAE,iBAAiB,CAAC;AAAzB,GAAD,CAAtC;AACA,SAAO,aAAa,CAAC,KAAD,CAApB;AACD;AAED,OAAM,SAAU,SAAV,CAAoB,MAApB,EAA+C;AACnD,QAAM,iBAAiB,GAAG,wBAAwB,CAAC,MAAD,EAAuB,WAAvB,CAAlD;AACA,QAAM,KAAK,GAAG,iBAAiB,GAAG,wBAAwB,CAAC,iBAAD,CAA3B,GAAiD,MAAhF;AACA,SAAO,aAAa,CAAC,KAAD,CAApB;AACD,C,CAED;;AACA,OAAM,SAAU,wBAAV,CAAmC;AAAE,EAAA,GAAF;AAAO,EAAA;AAAP,CAAnC,EAAiE;AACrE,MAAI,GAAG,KAAK,SAAR,IAAqB,GAAG,KAAK,SAAjC,EAA4C;AAC1C,UAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACD,MAAI,GAAG,KAAK,SAAR,IAAqB,GAAG,IAAI,SAA5B,IAAyC,GAAG,GAAG,GAAnD,EAAwD;AACtD,UAAM,IAAI,KAAJ,CAAU,WAAW,GAAG,sCAAsC,GAAG,GAAjE,CAAN;AACD;;AAED,QAAM,OAAO,GAAG,EAAhB;;AACA,MAAI,GAAG,KAAK,SAAZ,EAAuB;AACrB,IAAA,OAAO,CAAC,IAAR,CAAa,eAAe,GAAG,KAA/B;AACD;;AACD,MAAI,GAAG,KAAK,SAAZ,EAAuB;AACrB,IAAA,OAAO,CAAC,IAAR,CAAa,eAAe,GAAG,GAAG,CAAC,KAAnC;AACD;;AACD,SAAO,GAAG,OAAO,CAAC,IAAR,CAAa,OAAb,CAAqB,EAA/B;AACD;AAED,OAAM,SAAU,wBAAV,CAAmC,MAAnC,EAAuD,WAAvD,EAA+E;AACnF,UAAQ,MAAR;AACE,SAAK,OAAL;AACE,aAAO;AAAE,QAAA,GAAG,EAAE,WAAW,CAAC;AAAnB,OAAP;;AACF,SAAK,QAAL;AACE,aAAO;AAAE,QAAA,GAAG,EAAE,WAAW,CAAC,MAAnB;AAA2B,QAAA,GAAG,EAAE,WAAW,CAAC;AAA5C,OAAP;;AACF,SAAK,OAAL;AACE,aAAO;AAAE,QAAA,GAAG,EAAE,WAAW,CAAC,KAAnB;AAA0B,QAAA,GAAG,EAAE,WAAW,CAAC;AAA3C,OAAP;;AACF,SAAK,QAAL;AACE,aAAO;AAAE,QAAA,GAAG,EAAE,WAAW,CAAC,MAAnB;AAA2B,QAAA,GAAG,EAAE,WAAW,CAAC;AAA5C,OAAP;;AACF,SAAK,KAAL;AACE,aAAO;AAAE,QAAA,GAAG,EAAE,WAAW,CAAC;AAAnB,OAAP;;AACF;AACE,aAAO,SAAP;AAZJ;AAcD;;AAED,SAAS,aAAT,CAAuB,KAAvB,EAAoC;AAClC,SAAO,CAAC,OAAD,EAAe,GAAG,cAAlB,KACL,GAAG;eACQ,KAAK;UACV,GAAG,CAAC,OAAD,EAAU,GAAG,cAAb,CAA4B;;KAHvC;AAMD","sourcesContent":["import { css, ThemedCssFunction } from './styled';\nimport { ScreenSize, Breakpoints, ScreenSizeList } from '../common';\nimport { breakpoints } from '../themes';\n\nexport type WidthBreakpoints = { min?: number; max?: number };\n\nexport function getMediaQueries(breakpoints: Breakpoints) {\n  return ScreenSizeList.map(x => ({ screen: x, breakpoints: getScreenSizeBreakpoints(x, breakpoints) })).reduce(\n    (acc, next) => (next.breakpoints ? { ...acc, [next.screen]: getWidthBreakpointsQuery(next.breakpoints) } : acc),\n    {},\n  );\n}\n\n// create max-width media query including screen size\nexport function displayUpTo(screen: ScreenSize) {\n  const screenBreakpoints = getScreenSizeBreakpoints(screen, breakpoints);\n  if (!screenBreakpoints) {\n    throw new Error('Invalid screen size');\n  }\n  const query = getWidthBreakpointsQuery({ max: screenBreakpoints.max });\n  return getMediaQuery(query);\n}\n\n// create min-width media query including screen size\nexport function displayFrom(screen: ScreenSize) {\n  const screenBreakpoints = getScreenSizeBreakpoints(screen, breakpoints);\n  if (!screenBreakpoints) {\n    throw new Error('Invalid screen size');\n  }\n  const query = getWidthBreakpointsQuery({ min: screenBreakpoints.min });\n  return getMediaQuery(query);\n}\n\nexport function displayTo(screen: ScreenSize | string): ThemedCssFunction<any> {\n  const screenBreakpoints = getScreenSizeBreakpoints(screen as ScreenSize, breakpoints);\n  const query = screenBreakpoints ? getWidthBreakpointsQuery(screenBreakpoints) : screen;\n  return getMediaQuery(query);\n}\n\n// create media query based on previous and next breakpoints\nexport function getWidthBreakpointsQuery({ max, min }: WidthBreakpoints) {\n  if (min === undefined && max === undefined) {\n    throw new Error('Both breakpoints cannot be `undefined`');\n  }\n  if (min !== undefined && max != undefined && max < min) {\n    throw new Error(`The min(${min}) breakpoint must be less than max(${max})`);\n  }\n\n  const queries = [];\n  if (min !== undefined) {\n    queries.push(`(min-width: ${min}px)`);\n  }\n  if (max !== undefined) {\n    queries.push(`(max-width: ${max - 1}px)`);\n  }\n  return `${queries.join(' and ')}`;\n}\n\nexport function getScreenSizeBreakpoints(screen: ScreenSize, breakpoints: Breakpoints): WidthBreakpoints | undefined {\n  switch (screen) {\n    case 'small':\n      return { max: breakpoints.medium };\n    case 'medium':\n      return { min: breakpoints.medium, max: breakpoints.large };\n    case 'large':\n      return { min: breakpoints.large, max: breakpoints.xLarge };\n    case 'xLarge':\n      return { min: breakpoints.xLarge, max: breakpoints.max };\n    case 'max':\n      return { min: breakpoints.max };\n    default:\n      return undefined;\n  }\n}\n\nfunction getMediaQuery(query: string): ThemedCssFunction<any> {\n  return (strings: any, ...interpolations: Array<any>) =>\n    css`\n      @media ${query} {\n        ${css(strings, ...interpolations)};\n      }\n    `;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}