{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport styled from '../../utils/styled';\nimport { InteractiveList, InteractiveListDirection } from '../InteractiveList';\nimport { Icon } from '../Icon';\nimport { white, cyan, skyBlue } from '../../colors';\nimport { distance } from '../../distance';\nimport OnClickOut from 'react-onclickoutside';\nconst RootWrapper = styled.div`\n  color: ${cyan};\n  &:hover {\n    color: ${skyBlue};\n  }\n`;\nconst ButtonWrapper = styled.div`\n  padding-left: ${distance.xsmall};\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\nconst StyledCustomWrapper = styled.div`\n  position: absolute;\n  border: solid 1px #dfe3e6;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1);\n  position: absolute;\n  z-index: 2;\n  top: ${props => props.direction === InteractiveListDirection.normal ? 8 : -30}px;\n  transform: translateY(${props => props.direction === InteractiveListDirection.normal ? 0 : -100}%);\n  background: ${white};\n  border: 1px solid #dfe3e6;\n  max-height: 50vh;\n  overflow-y: auto;\n`;\nconst CustomWrapper = Object.assign(props => {\n  return React.createElement(StyledCustomWrapper, Object.assign({}, props));\n}, {\n  inner: {\n    get StyledCustomWrapper() {\n      return StyledCustomWrapper;\n    }\n\n  }\n});\n\nfunction renderValue(data, value) {\n  for (const item of data) {\n    if (typeof item !== 'string' && item.key === value) {\n      return item.content || value;\n    }\n  }\n\n  return value;\n}\n\nclass SelectButtonInt extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleMouseDown = e => {\n      const {\n        open\n      } = this.state;\n      this.setState({\n        open: !open\n      });\n      e.preventDefault();\n    };\n\n    this.handleChange = e => {\n      const {\n        onChange,\n        data\n      } = this.props;\n      const {\n        controlled\n      } = this.state;\n      const index = e.value.length ? e.value[0] : -1;\n      const item = data[index];\n      const value = item && (typeof item === 'string' ? item : item.key);\n\n      if (!value) {\n        return;\n      }\n\n      if (!controlled) {\n        this.setState({\n          open: false,\n          value\n        });\n      } else {\n        this.setState({\n          open: false\n        });\n      }\n\n      if (typeof onChange === 'function') {\n        onChange({\n          index,\n          value\n        });\n      }\n    };\n\n    this.handleBlur = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.handleClickOutside = this.handleBlur;\n    const controlled = props.value !== undefined;\n    this.state = {\n      open: false,\n      value: (controlled ? props.value : props.defaultValue) || '',\n      controlled\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      controlled\n    } = this.state;\n\n    if (controlled) {\n      this.setState({\n        value: nextProps.value || ''\n      });\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      data = [],\n      onChange: _0,\n      value: _1\n    } = _a,\n          props = __rest(_a, [\"data\", \"onChange\", \"value\"]);\n\n    const {\n      open,\n      value\n    } = this.state;\n    return React.createElement(RootWrapper, Object.assign({}, props), React.createElement(ButtonWrapper, {\n      onMouseDown: this.handleMouseDown\n    }, renderValue(data, value), React.createElement(Icon, {\n      name: \"ArrowDropDown\",\n      size: 1.5\n    })), React.createElement(InteractiveList, {\n      data: data,\n      open: open,\n      onBlur: this.handleBlur,\n      onChange: this.handleChange,\n      customWrapper: CustomWrapper,\n      value: value,\n      onClickOutside: () => {},\n      autoPosition: true,\n      autoFocus: true,\n      showTick: true\n    }));\n  }\n\n}\n\nSelectButtonInt.inner = {\n  get RootWrapper() {\n    return RootWrapper;\n  },\n\n  get ButtonWrapper() {\n    return ButtonWrapper;\n  },\n\n  get Icon() {\n    return Icon;\n  },\n\n  get InteractiveList() {\n    return InteractiveList;\n  }\n\n};\n/**\n * Represents a select button, which is a kind of dropdown button.\n */\n\nexport const SelectButton = OnClickOut(SelectButtonInt);","map":{"version":3,"sources":["../../../../src/components/SelectButton/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from '../../utils/styled';\nimport { InteractiveList, InteractiveListChangeEvent, InteractiveListItem, InteractiveListWrapperProps, InteractiveListDirection, } from '../InteractiveList';\nimport { Icon } from '../Icon';\nimport { white, cyan, skyBlue } from '../../colors';\nimport { StandardProps } from '../../common';\nimport { distance } from '../../distance';\nimport OnClickOut from 'react-onclickoutside';\nexport interface SelectButtonChangeEvent {\n    /**\n     * The currently selected index. In case none is\n     * chosen the value -1 is communicated.\n     */\n    index: number;\n    /**\n     * The currently selected value. Undefined if none\n     * is chosen.\n     */\n    value: string | undefined;\n}\nexport interface SelectButtonProps extends StandardProps {\n    /**\n     * The data source of the elements to show.\n     */\n    data: Array<string | InteractiveListItem>;\n    /**\n     * The currently selected value if any. Picking one enters the controlled mode.\n     */\n    value?: string;\n    /**\n     * The initial value if any. Picking one enters managed mode.\n     */\n    defaultValue?: string;\n    /**\n     * Event fired once the selected value changes.\n     */\n    onChange?(e: SelectButtonChangeEvent): void;\n    /**\n     * @ignore\n     */\n    children?: void;\n}\nexport interface SelectButtonState {\n    open: boolean;\n    value: string;\n    controlled: boolean;\n}\nconst RootWrapper = styled.div `\n  color: ${cyan};\n  &:hover {\n    color: ${skyBlue};\n  }\n`;\nconst ButtonWrapper = styled.div `\n  padding-left: ${distance.xsmall};\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\nconst StyledCustomWrapper = styled.div<InteractiveListWrapperProps> `\n  position: absolute;\n  border: solid 1px #dfe3e6;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1);\n  position: absolute;\n  z-index: 2;\n  top: ${props => (props.direction === InteractiveListDirection.normal ? 8 : -30)}px;\n  transform: translateY(${props => (props.direction === InteractiveListDirection.normal ? 0 : -100)}%);\n  background: ${white};\n  border: 1px solid #dfe3e6;\n  max-height: 50vh;\n  overflow-y: auto;\n`;\nconst CustomWrapper = Object.assign(((props => {\n    return <StyledCustomWrapper {...props}/>;\n}) as React.SFC<InteractiveListWrapperProps>), { inner: {\n        get StyledCustomWrapper() { return StyledCustomWrapper as typeof StyledCustomWrapper; }\n    } });\nfunction renderValue(data: Array<string | InteractiveListItem>, value: string) {\n    for (const item of data) {\n        if (typeof item !== 'string' && item.key === value) {\n            return item.content || value;\n        }\n    }\n    return value;\n}\nclass SelectButtonInt extends React.PureComponent<SelectButtonProps, SelectButtonState> {\n    constructor(props: SelectButtonProps) {\n        super(props);\n        const controlled = props.value !== undefined;\n        this.state = {\n            open: false,\n            value: (controlled ? props.value : props.defaultValue) || '',\n            controlled,\n        };\n    }\n    UNSAFE_componentWillReceiveProps(nextProps: SelectButtonProps) {\n        const { controlled } = this.state;\n        if (controlled) {\n            this.setState({\n                value: nextProps.value || '',\n            });\n        }\n    }\n    private handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n        const { open } = this.state;\n        this.setState({\n            open: !open,\n        });\n        e.preventDefault();\n    };\n    private handleChange = (e: InteractiveListChangeEvent) => {\n        const { onChange, data } = this.props;\n        const { controlled } = this.state;\n        const index = e.value.length ? e.value[0] : -1;\n        const item = data[index];\n        const value = item && (typeof item === 'string' ? item : item.key);\n        if (!value) {\n            return;\n        }\n        if (!controlled) {\n            this.setState({\n                open: false,\n                value,\n            });\n        }\n        else {\n            this.setState({\n                open: false,\n            });\n        }\n        if (typeof onChange === 'function') {\n            onChange({\n                index,\n                value,\n            });\n        }\n    };\n    private handleBlur = () => {\n        this.setState({\n            open: false,\n        });\n    };\n    handleClickOutside = this.handleBlur;\n    render() {\n        const { data = [], onChange: _0, value: _1, ...props } = this.props;\n        const { open, value } = this.state;\n        return (<RootWrapper {...props}>\n        <ButtonWrapper onMouseDown={this.handleMouseDown}>\n          {renderValue(data, value)}\n          <Icon name=\"ArrowDropDown\" size={1.5}/>\n        </ButtonWrapper>\n        <InteractiveList data={data} open={open} onBlur={this.handleBlur} onChange={this.handleChange} customWrapper={CustomWrapper} value={value} onClickOutside={() => { }} autoPosition autoFocus showTick/>\n      </RootWrapper>);\n    }\n    static inner = {\n        get RootWrapper() { return RootWrapper as typeof RootWrapper; },\n        get ButtonWrapper() { return ButtonWrapper as typeof ButtonWrapper; },\n        get Icon() { return Icon as typeof Icon; },\n        get InteractiveList() { return InteractiveList as typeof InteractiveList; }\n    };\n}\n/**\n * Represents a select button, which is a kind of dropdown button.\n */\nexport const SelectButton = OnClickOut(SelectButtonInt);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}