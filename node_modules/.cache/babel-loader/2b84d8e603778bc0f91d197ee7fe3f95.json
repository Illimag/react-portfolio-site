{"ast":null,"code":"import _classCallCheck from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/d/thinkpad_desktop_files/portfolio_web/react-portfolio-site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\nimport { withResponsive } from './withResponsive';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\n/**\n * Provides `mode` prop (if it's not passed manually) to the component depending on\n * the container width. When mode switches, HOC calls `onModeChange` prop if it is\n * defined.\n * @param getMode The function to determine the mode from the given width.\n * @returns A constructor function to wrap a component with the `mode` prop determined\n * by the getMode function.\n */\n\nexport function withResponsiveMode(getMode) {\n  return function (Component) {\n    return withInner(withResponsive( /*#__PURE__*/function (_React$Component) {\n      _inherits(ModeProvider, _React$Component);\n\n      var _super = _createSuper(ModeProvider);\n\n      function ModeProvider(props) {\n        var _this;\n\n        _classCallCheck(this, ModeProvider);\n\n        _this = _super.call(this, props);\n        _this.state = {\n          controlled: props.mode !== undefined,\n          mode: props.mode || getMode(props.dimensions && props.dimensions.width)\n        };\n        return _this;\n      }\n\n      _createClass(ModeProvider, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          var mode = this.state.mode;\n          var onModeChange = this.props.onModeChange;\n\n          if (mode && typeof onModeChange === 'function') {\n            onModeChange({\n              mode: mode\n            });\n          }\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var mode = this.state.mode;\n          var props = Object.assign({}, this.props, {\n            mode: mode\n          });\n          return React.createElement(Component, Object.assign({}, props));\n        }\n      }], [{\n        key: \"getDerivedStateFromProps\",\n        value: function getDerivedStateFromProps(props, state) {\n          var change = props.onModeChange;\n\n          if (state.controlled) {\n            var mode = props.mode || getMode();\n\n            if (state.mode !== mode) {\n              if (typeof change === 'function') {\n                change({\n                  mode: mode\n                });\n              }\n\n              return {\n                mode: mode\n              };\n            }\n          } else {\n            var dimensions = props.dimensions;\n            var _mode = state.mode;\n            var nextMode = getMode(dimensions && dimensions.width);\n\n            if (_mode !== nextMode) {\n              if (typeof change === 'function') {\n                change({\n                  mode: nextMode\n                });\n              }\n\n              return {\n                mode: nextMode\n              };\n            }\n          }\n\n          return {};\n        }\n      }]);\n\n      return ModeProvider;\n    }(React.Component)), {\n      Component: Component\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/hoc/withResponsiveMode.tsx"],"names":[],"mappings":";;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,cAAT,QAAyD,kBAAzD;AACA,SAAS,SAAT,QAA0B,uCAA1B;AAeA;;;;;;;;;AAQA,OAAM,SAAU,kBAAV,CAAqC,OAArC,EAAiE;AACnE,SAAO,UAA2C,SAA3C,EAAqF;AACxF,WAAO,SAAS,CAAC,cAAc;AAAA;;AAAA;;AAC3B,4BAAY,KAAZ,EAAyB;AAAA;;AAAA;;AACrB,kCAAM,KAAN;AACA,cAAK,KAAL,GAAa;AACT,UAAA,UAAU,EAAE,KAAK,CAAC,IAAN,KAAe,SADlB;AAET,UAAA,IAAI,EAAE,KAAK,CAAC,IAAN,IAAc,OAAO,CAAC,KAAK,CAAC,UAAN,IAAoB,KAAK,CAAC,UAAN,CAAiB,KAAtC;AAFlB,SAAb;AAFqB;AAMxB;;AAP0B;AAAA;AAAA,4CAoCV;AAAA,cACL,IADK,GACI,KAAK,KADT,CACL,IADK;AAAA,cAEL,YAFK,GAEY,KAAK,KAFjB,CAEL,YAFK;;AAGb,cAAI,IAAI,IAAI,OAAO,YAAP,KAAwB,UAApC,EAAgD;AAC5C,YAAA,YAAY,CAAC;AAAE,cAAA,IAAI,EAAJ;AAAF,aAAD,CAAZ;AACH;AACJ;AA1C0B;AAAA;AAAA,iCA2CrB;AAAA,cACM,IADN,GACe,KAAK,KADpB,CACM,IADN;AAEF,cAAM,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJ,KAAK,KADD,EACM;AACb,YAAA,IAAI,EAAJ;AADa,WADN,CAAX;AAIA,iBAAO,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAV,CAAP;AACH;AAlD0B;AAAA;AAAA,iDAQK,KARL,EAQoB,KARpB,EAQoD;AAC3E,cAAM,MAAM,GAAG,KAAK,CAAC,YAArB;;AACA,cAAI,KAAK,CAAC,UAAV,EAAsB;AAClB,gBAAM,IAAI,GAAG,KAAK,CAAC,IAAN,IAAc,OAAO,EAAlC;;AACA,gBAAI,KAAK,CAAC,IAAN,KAAe,IAAnB,EAAyB;AACrB,kBAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,gBAAA,MAAM,CAAC;AAAE,kBAAA,IAAI,EAAJ;AAAF,iBAAD,CAAN;AACH;;AACD,qBAAO;AACH,gBAAA,IAAI,EAAJ;AADG,eAAP;AAGH;AACJ,WAVD,MAWK;AAAA,gBACO,UADP,GACsB,KADtB,CACO,UADP;AAAA,gBAEO,KAFP,GAEgB,KAFhB,CAEO,IAFP;AAGD,gBAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,IAAI,UAAU,CAAC,KAA1B,CAAxB;;AACA,gBAAI,KAAI,KAAK,QAAb,EAAuB;AACnB,kBAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,gBAAA,MAAM,CAAC;AAAE,kBAAA,IAAI,EAAE;AAAR,iBAAD,CAAN;AACH;;AACD,qBAAO;AACH,gBAAA,IAAI,EAAE;AADH,eAAP;AAGH;AACJ;;AACD,iBAAO,EAAP;AACH;AAnC0B;;AAAA;AAAA,MAA4B,KAAK,CAAC,SAAlC,EAAf,EAmDZ;AAAE,MAAA,SAAS,EAAT;AAAF,KAnDY,CAAhB;AAoDH,GArDD;AAsDH","sourcesContent":["import * as React from 'react';\nimport { withResponsive, ResponsiveComponentProps } from './withResponsive';\nimport { withInner } from 'typescript-plugin-inner-jsx/withInner';\nexport interface GetModeType<TModes> {\n    (width?: number): TModes;\n}\nexport interface ModeChangedEvent<TModes> {\n    mode: TModes;\n}\nexport interface ModeProviderProps<TModes> extends ResponsiveComponentProps {\n    mode?: TModes;\n    onModeChange?(e: ModeChangedEvent<TModes>): void;\n}\nexport interface ModeProviderState<TModes> {\n    controlled: boolean;\n    mode: TModes;\n}\n/**\n * Provides `mode` prop (if it's not passed manually) to the component depending on\n * the container width. When mode switches, HOC calls `onModeChange` prop if it is\n * defined.\n * @param getMode The function to determine the mode from the given width.\n * @returns A constructor function to wrap a component with the `mode` prop determined\n * by the getMode function.\n */\nexport function withResponsiveMode<TModes>(getMode: GetModeType<TModes>) {\n    return <TProps extends ModeProviderProps<TModes>>(Component: React.ComponentType<TProps>) => {\n        return withInner(withResponsive(class ModeProvider extends React.Component<TProps, ModeProviderState<TModes>> {\n            constructor(props: TProps) {\n                super(props);\n                this.state = {\n                    controlled: props.mode !== undefined,\n                    mode: props.mode || getMode(props.dimensions && props.dimensions.width),\n                };\n            }\n            static getDerivedStateFromProps(props: TProps, state: ModeProviderState<TModes>) {\n                const change = props.onModeChange;\n                if (state.controlled) {\n                    const mode = props.mode || getMode();\n                    if (state.mode !== mode) {\n                        if (typeof change === 'function') {\n                            change({ mode });\n                        }\n                        return {\n                            mode,\n                        };\n                    }\n                }\n                else {\n                    const { dimensions } = props;\n                    const { mode } = state;\n                    const nextMode = getMode(dimensions && dimensions.width);\n                    if (mode !== nextMode) {\n                        if (typeof change === 'function') {\n                            change({ mode: nextMode });\n                        }\n                        return {\n                            mode: nextMode,\n                        };\n                    }\n                }\n                return {};\n            }\n            componentDidMount() {\n                const { mode } = this.state;\n                const { onModeChange } = this.props;\n                if (mode && typeof onModeChange === 'function') {\n                    onModeChange({ mode });\n                }\n            }\n            render() {\n                const { mode } = this.state;\n                const props = {\n                    ...this.props,\n                    mode,\n                };\n                return <Component {...props}/>;\n            }\n        }), { Component });\n    };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}